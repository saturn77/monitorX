-- NiosBase.vhd

-- Generated using ACDS version 20.1 720

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity NiosBase is
	port (
		clk_clk           : in  std_logic                     := '0';             --        clk.clk
		coe_done          : in  std_logic                     := '0';             --        coe.done
		coe_data          : in  std_logic_vector(7 downto 0)  := (others => '0'); --           .data
		i_reg16_0_export  : in  std_logic_vector(15 downto 0) := (others => '0'); --  i_reg16_0.export
		i_reg16_1_export  : in  std_logic_vector(15 downto 0) := (others => '0'); --  i_reg16_1.export
		i_reg16_2_export  : in  std_logic_vector(15 downto 0) := (others => '0'); --  i_reg16_2.export
		i_reg16_3_export  : in  std_logic_vector(15 downto 0) := (others => '0'); --  i_reg16_3.export
		i_reg16_4_export  : in  std_logic_vector(15 downto 0) := (others => '0'); --  i_reg16_4.export
		i_reg16_5_export  : in  std_logic_vector(15 downto 0) := (others => '0'); --  i_reg16_5.export
		i_reg16_6_export  : in  std_logic_vector(15 downto 0) := (others => '0'); --  i_reg16_6.export
		i_reg32_0_export  : in  std_logic_vector(31 downto 0) := (others => '0'); --  i_reg32_0.export
		i_reg32_1_export  : in  std_logic_vector(31 downto 0) := (others => '0'); --  i_reg32_1.export
		i_reg32_2_export  : in  std_logic_vector(31 downto 0) := (others => '0'); --  i_reg32_2.export
		i_reg32_3_export  : in  std_logic_vector(31 downto 0) := (others => '0'); --  i_reg32_3.export
		i_reg32_4_export  : in  std_logic_vector(31 downto 0) := (others => '0'); --  i_reg32_4.export
		i_reg32_5_export  : in  std_logic_vector(31 downto 0) := (others => '0'); --  i_reg32_5.export
		i_reg32_6_export  : in  std_logic_vector(31 downto 0) := (others => '0'); --  i_reg32_6.export
		i_reg32_7_export  : in  std_logic_vector(31 downto 0) := (others => '0'); --  i_reg32_7.export
		o_reg32_0_export  : out std_logic_vector(31 downto 0);                    --  o_reg32_0.export
		o_reg32_1_export  : out std_logic_vector(31 downto 0);                    --  o_reg32_1.export
		o_reg32_10_export : out std_logic_vector(31 downto 0);                    -- o_reg32_10.export
		o_reg32_11_export : out std_logic_vector(31 downto 0);                    -- o_reg32_11.export
		o_reg32_12_export : out std_logic_vector(31 downto 0);                    -- o_reg32_12.export
		o_reg32_13_export : out std_logic_vector(31 downto 0);                    -- o_reg32_13.export
		o_reg32_2_export  : out std_logic_vector(31 downto 0);                    --  o_reg32_2.export
		o_reg32_3_export  : out std_logic_vector(31 downto 0);                    --  o_reg32_3.export
		o_reg32_4_export  : out std_logic_vector(31 downto 0);                    --  o_reg32_4.export
		o_reg32_5_export  : out std_logic_vector(31 downto 0);                    --  o_reg32_5.export
		o_reg32_6_export  : out std_logic_vector(31 downto 0);                    --  o_reg32_6.export
		o_reg32_7_export  : out std_logic_vector(31 downto 0);                    --  o_reg32_7.export
		o_reg32_8_export  : out std_logic_vector(31 downto 0);                    --  o_reg32_8.export
		o_reg32_9_export  : out std_logic_vector(31 downto 0);                    --  o_reg32_9.export
		reset_reset_n     : in  std_logic                     := '0';             --      reset.reset_n
		uart_rxd          : in  std_logic                     := '0';             --       uart.rxd
		uart_txd          : out std_logic                                         --           .txd
	);
end entity NiosBase;

architecture rtl of NiosBase is
	component dma_receiver is
		generic (
			DEPTH         : integer := 32;
			clock_nsec    : integer := 20;
			WATCHDOG_nsec : integer := 100000
		);
		port (
			reset             : in  std_logic                     := 'X';             -- reset
			av_mm_read        : in  std_logic                     := 'X';             -- read
			av_mm_readdata    : out std_logic_vector(31 downto 0);                    -- readdata
			av_mm_waitrequest : out std_logic;                                        -- waitrequest
			av_mm_write       : in  std_logic                     := 'X';             -- write
			av_mm_writedata   : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			av_mm_addr        : in  std_logic_vector(4 downto 0)  := (others => 'X'); -- address
			coe_RX_DONE       : in  std_logic                     := 'X';             -- done
			coe_RX_DATA       : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- data
			clock             : in  std_logic                     := 'X'              -- clk
		);
	end component dma_receiver;

	component NiosBase_i_reg16_0 is
		port (
			clk      : in  std_logic                     := 'X';             -- clk
			reset_n  : in  std_logic                     := 'X';             -- reset_n
			address  : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- address
			readdata : out std_logic_vector(31 downto 0);                    -- readdata
			in_port  : in  std_logic_vector(15 downto 0) := (others => 'X')  -- export
		);
	end component NiosBase_i_reg16_0;

	component NiosBase_i_reg32_0 is
		port (
			clk        : in  std_logic                     := 'X';             -- clk
			reset_n    : in  std_logic                     := 'X';             -- reset_n
			address    : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- address
			write_n    : in  std_logic                     := 'X';             -- write_n
			writedata  : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			chipselect : in  std_logic                     := 'X';             -- chipselect
			readdata   : out std_logic_vector(31 downto 0);                    -- readdata
			in_port    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- export
			irq        : out std_logic                                         -- irq
		);
	end component NiosBase_i_reg32_0;

	component NiosBase_i_reg32_1 is
		port (
			clk      : in  std_logic                     := 'X';             -- clk
			reset_n  : in  std_logic                     := 'X';             -- reset_n
			address  : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- address
			readdata : out std_logic_vector(31 downto 0);                    -- readdata
			in_port  : in  std_logic_vector(31 downto 0) := (others => 'X')  -- export
		);
	end component NiosBase_i_reg32_1;

	component NiosBase_nios2_gen2_0 is
		port (
			clk                                 : in  std_logic                     := 'X';             -- clk
			reset_n                             : in  std_logic                     := 'X';             -- reset_n
			reset_req                           : in  std_logic                     := 'X';             -- reset_req
			d_address                           : out std_logic_vector(18 downto 0);                    -- address
			d_byteenable                        : out std_logic_vector(3 downto 0);                     -- byteenable
			d_read                              : out std_logic;                                        -- read
			d_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			d_waitrequest                       : in  std_logic                     := 'X';             -- waitrequest
			d_write                             : out std_logic;                                        -- write
			d_writedata                         : out std_logic_vector(31 downto 0);                    -- writedata
			debug_mem_slave_debugaccess_to_roms : out std_logic;                                        -- debugaccess
			i_address                           : out std_logic_vector(18 downto 0);                    -- address
			i_read                              : out std_logic;                                        -- read
			i_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			i_waitrequest                       : in  std_logic                     := 'X';             -- waitrequest
			irq                                 : in  std_logic_vector(31 downto 0) := (others => 'X'); -- irq
			debug_reset_request                 : out std_logic;                                        -- reset
			debug_mem_slave_address             : in  std_logic_vector(8 downto 0)  := (others => 'X'); -- address
			debug_mem_slave_byteenable          : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			debug_mem_slave_debugaccess         : in  std_logic                     := 'X';             -- debugaccess
			debug_mem_slave_read                : in  std_logic                     := 'X';             -- read
			debug_mem_slave_readdata            : out std_logic_vector(31 downto 0);                    -- readdata
			debug_mem_slave_waitrequest         : out std_logic;                                        -- waitrequest
			debug_mem_slave_write               : in  std_logic                     := 'X';             -- write
			debug_mem_slave_writedata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			dummy_ci_port                       : out std_logic                                         -- readra
		);
	end component NiosBase_nios2_gen2_0;

	component NiosBase_o_reg32_0 is
		port (
			clk        : in  std_logic                     := 'X';             -- clk
			reset_n    : in  std_logic                     := 'X';             -- reset_n
			address    : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- address
			write_n    : in  std_logic                     := 'X';             -- write_n
			writedata  : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			chipselect : in  std_logic                     := 'X';             -- chipselect
			readdata   : out std_logic_vector(31 downto 0);                    -- readdata
			out_port   : out std_logic_vector(31 downto 0)                     -- export
		);
	end component NiosBase_o_reg32_0;

	component NiosBase_onchip_memory2_0 is
		port (
			clk        : in  std_logic                     := 'X';             -- clk
			address    : in  std_logic_vector(14 downto 0) := (others => 'X'); -- address
			clken      : in  std_logic                     := 'X';             -- clken
			chipselect : in  std_logic                     := 'X';             -- chipselect
			write      : in  std_logic                     := 'X';             -- write
			readdata   : out std_logic_vector(31 downto 0);                    -- readdata
			writedata  : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			byteenable : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			reset      : in  std_logic                     := 'X';             -- reset
			reset_req  : in  std_logic                     := 'X';             -- reset_req
			freeze     : in  std_logic                     := 'X'              -- freeze
		);
	end component NiosBase_onchip_memory2_0;

	component NiosBase_timer_0 is
		port (
			clk        : in  std_logic                     := 'X';             -- clk
			reset_n    : in  std_logic                     := 'X';             -- reset_n
			address    : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- address
			writedata  : in  std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			readdata   : out std_logic_vector(15 downto 0);                    -- readdata
			chipselect : in  std_logic                     := 'X';             -- chipselect
			write_n    : in  std_logic                     := 'X';             -- write_n
			irq        : out std_logic                                         -- irq
		);
	end component NiosBase_timer_0;

	component NiosBase_timer_1 is
		port (
			clk        : in  std_logic                     := 'X';             -- clk
			reset_n    : in  std_logic                     := 'X';             -- reset_n
			address    : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- address
			writedata  : in  std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			readdata   : out std_logic_vector(15 downto 0);                    -- readdata
			chipselect : in  std_logic                     := 'X';             -- chipselect
			write_n    : in  std_logic                     := 'X';             -- write_n
			irq        : out std_logic                                         -- irq
		);
	end component NiosBase_timer_1;

	component NiosBase_uart_0 is
		port (
			clk           : in  std_logic                     := 'X';             -- clk
			reset_n       : in  std_logic                     := 'X';             -- reset_n
			address       : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- address
			begintransfer : in  std_logic                     := 'X';             -- begintransfer
			chipselect    : in  std_logic                     := 'X';             -- chipselect
			read_n        : in  std_logic                     := 'X';             -- read_n
			write_n       : in  std_logic                     := 'X';             -- write_n
			writedata     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			readdata      : out std_logic_vector(15 downto 0);                    -- readdata
			rxd           : in  std_logic                     := 'X';             -- export
			txd           : out std_logic;                                        -- export
			irq           : out std_logic                                         -- irq
		);
	end component NiosBase_uart_0;

	component NiosBase_mm_interconnect_0 is
		port (
			clk_0_clk_clk                                  : in  std_logic                     := 'X';             -- clk
			dma_rx_0_reset_reset_bridge_in_reset_reset     : in  std_logic                     := 'X';             -- reset
			nios2_gen2_0_reset_reset_bridge_in_reset_reset : in  std_logic                     := 'X';             -- reset
			timer_0_reset_reset_bridge_in_reset_reset      : in  std_logic                     := 'X';             -- reset
			nios2_gen2_0_data_master_address               : in  std_logic_vector(18 downto 0) := (others => 'X'); -- address
			nios2_gen2_0_data_master_waitrequest           : out std_logic;                                        -- waitrequest
			nios2_gen2_0_data_master_byteenable            : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			nios2_gen2_0_data_master_read                  : in  std_logic                     := 'X';             -- read
			nios2_gen2_0_data_master_readdata              : out std_logic_vector(31 downto 0);                    -- readdata
			nios2_gen2_0_data_master_write                 : in  std_logic                     := 'X';             -- write
			nios2_gen2_0_data_master_writedata             : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			nios2_gen2_0_data_master_debugaccess           : in  std_logic                     := 'X';             -- debugaccess
			nios2_gen2_0_instruction_master_address        : in  std_logic_vector(18 downto 0) := (others => 'X'); -- address
			nios2_gen2_0_instruction_master_waitrequest    : out std_logic;                                        -- waitrequest
			nios2_gen2_0_instruction_master_read           : in  std_logic                     := 'X';             -- read
			nios2_gen2_0_instruction_master_readdata       : out std_logic_vector(31 downto 0);                    -- readdata
			dma_rx_0_av_mm_address                         : out std_logic_vector(4 downto 0);                     -- address
			dma_rx_0_av_mm_write                           : out std_logic;                                        -- write
			dma_rx_0_av_mm_read                            : out std_logic;                                        -- read
			dma_rx_0_av_mm_readdata                        : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			dma_rx_0_av_mm_writedata                       : out std_logic_vector(31 downto 0);                    -- writedata
			dma_rx_0_av_mm_waitrequest                     : in  std_logic                     := 'X';             -- waitrequest
			i_reg16_0_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			i_reg16_0_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			i_reg16_1_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			i_reg16_1_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			i_reg16_2_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			i_reg16_2_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			i_reg16_3_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			i_reg16_3_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			i_reg16_4_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			i_reg16_4_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			i_reg16_5_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			i_reg16_5_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			i_reg16_6_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			i_reg16_6_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			i_reg32_0_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			i_reg32_0_s1_write                             : out std_logic;                                        -- write
			i_reg32_0_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			i_reg32_0_s1_writedata                         : out std_logic_vector(31 downto 0);                    -- writedata
			i_reg32_0_s1_chipselect                        : out std_logic;                                        -- chipselect
			i_reg32_1_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			i_reg32_1_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			i_reg32_2_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			i_reg32_2_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			i_reg32_3_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			i_reg32_3_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			i_reg32_4_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			i_reg32_4_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			i_reg32_5_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			i_reg32_5_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			i_reg32_6_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			i_reg32_6_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			i_reg32_7_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			i_reg32_7_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			nios2_gen2_0_debug_mem_slave_address           : out std_logic_vector(8 downto 0);                     -- address
			nios2_gen2_0_debug_mem_slave_write             : out std_logic;                                        -- write
			nios2_gen2_0_debug_mem_slave_read              : out std_logic;                                        -- read
			nios2_gen2_0_debug_mem_slave_readdata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			nios2_gen2_0_debug_mem_slave_writedata         : out std_logic_vector(31 downto 0);                    -- writedata
			nios2_gen2_0_debug_mem_slave_byteenable        : out std_logic_vector(3 downto 0);                     -- byteenable
			nios2_gen2_0_debug_mem_slave_waitrequest       : in  std_logic                     := 'X';             -- waitrequest
			nios2_gen2_0_debug_mem_slave_debugaccess       : out std_logic;                                        -- debugaccess
			o_reg32_0_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			o_reg32_0_s1_write                             : out std_logic;                                        -- write
			o_reg32_0_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			o_reg32_0_s1_writedata                         : out std_logic_vector(31 downto 0);                    -- writedata
			o_reg32_0_s1_chipselect                        : out std_logic;                                        -- chipselect
			o_reg32_1_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			o_reg32_1_s1_write                             : out std_logic;                                        -- write
			o_reg32_1_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			o_reg32_1_s1_writedata                         : out std_logic_vector(31 downto 0);                    -- writedata
			o_reg32_1_s1_chipselect                        : out std_logic;                                        -- chipselect
			o_reg32_10_s1_address                          : out std_logic_vector(1 downto 0);                     -- address
			o_reg32_10_s1_write                            : out std_logic;                                        -- write
			o_reg32_10_s1_readdata                         : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			o_reg32_10_s1_writedata                        : out std_logic_vector(31 downto 0);                    -- writedata
			o_reg32_10_s1_chipselect                       : out std_logic;                                        -- chipselect
			o_reg32_11_s1_address                          : out std_logic_vector(1 downto 0);                     -- address
			o_reg32_11_s1_write                            : out std_logic;                                        -- write
			o_reg32_11_s1_readdata                         : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			o_reg32_11_s1_writedata                        : out std_logic_vector(31 downto 0);                    -- writedata
			o_reg32_11_s1_chipselect                       : out std_logic;                                        -- chipselect
			o_reg32_12_s1_address                          : out std_logic_vector(1 downto 0);                     -- address
			o_reg32_12_s1_write                            : out std_logic;                                        -- write
			o_reg32_12_s1_readdata                         : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			o_reg32_12_s1_writedata                        : out std_logic_vector(31 downto 0);                    -- writedata
			o_reg32_12_s1_chipselect                       : out std_logic;                                        -- chipselect
			o_reg32_13_s1_address                          : out std_logic_vector(1 downto 0);                     -- address
			o_reg32_13_s1_write                            : out std_logic;                                        -- write
			o_reg32_13_s1_readdata                         : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			o_reg32_13_s1_writedata                        : out std_logic_vector(31 downto 0);                    -- writedata
			o_reg32_13_s1_chipselect                       : out std_logic;                                        -- chipselect
			o_reg32_2_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			o_reg32_2_s1_write                             : out std_logic;                                        -- write
			o_reg32_2_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			o_reg32_2_s1_writedata                         : out std_logic_vector(31 downto 0);                    -- writedata
			o_reg32_2_s1_chipselect                        : out std_logic;                                        -- chipselect
			o_reg32_3_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			o_reg32_3_s1_write                             : out std_logic;                                        -- write
			o_reg32_3_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			o_reg32_3_s1_writedata                         : out std_logic_vector(31 downto 0);                    -- writedata
			o_reg32_3_s1_chipselect                        : out std_logic;                                        -- chipselect
			o_reg32_4_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			o_reg32_4_s1_write                             : out std_logic;                                        -- write
			o_reg32_4_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			o_reg32_4_s1_writedata                         : out std_logic_vector(31 downto 0);                    -- writedata
			o_reg32_4_s1_chipselect                        : out std_logic;                                        -- chipselect
			o_reg32_5_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			o_reg32_5_s1_write                             : out std_logic;                                        -- write
			o_reg32_5_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			o_reg32_5_s1_writedata                         : out std_logic_vector(31 downto 0);                    -- writedata
			o_reg32_5_s1_chipselect                        : out std_logic;                                        -- chipselect
			o_reg32_6_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			o_reg32_6_s1_write                             : out std_logic;                                        -- write
			o_reg32_6_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			o_reg32_6_s1_writedata                         : out std_logic_vector(31 downto 0);                    -- writedata
			o_reg32_6_s1_chipselect                        : out std_logic;                                        -- chipselect
			o_reg32_7_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			o_reg32_7_s1_write                             : out std_logic;                                        -- write
			o_reg32_7_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			o_reg32_7_s1_writedata                         : out std_logic_vector(31 downto 0);                    -- writedata
			o_reg32_7_s1_chipselect                        : out std_logic;                                        -- chipselect
			o_reg32_8_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			o_reg32_8_s1_write                             : out std_logic;                                        -- write
			o_reg32_8_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			o_reg32_8_s1_writedata                         : out std_logic_vector(31 downto 0);                    -- writedata
			o_reg32_8_s1_chipselect                        : out std_logic;                                        -- chipselect
			o_reg32_9_s1_address                           : out std_logic_vector(1 downto 0);                     -- address
			o_reg32_9_s1_write                             : out std_logic;                                        -- write
			o_reg32_9_s1_readdata                          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			o_reg32_9_s1_writedata                         : out std_logic_vector(31 downto 0);                    -- writedata
			o_reg32_9_s1_chipselect                        : out std_logic;                                        -- chipselect
			onchip_memory2_0_s1_address                    : out std_logic_vector(14 downto 0);                    -- address
			onchip_memory2_0_s1_write                      : out std_logic;                                        -- write
			onchip_memory2_0_s1_readdata                   : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			onchip_memory2_0_s1_writedata                  : out std_logic_vector(31 downto 0);                    -- writedata
			onchip_memory2_0_s1_byteenable                 : out std_logic_vector(3 downto 0);                     -- byteenable
			onchip_memory2_0_s1_chipselect                 : out std_logic;                                        -- chipselect
			onchip_memory2_0_s1_clken                      : out std_logic;                                        -- clken
			timer_0_s1_address                             : out std_logic_vector(2 downto 0);                     -- address
			timer_0_s1_write                               : out std_logic;                                        -- write
			timer_0_s1_readdata                            : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			timer_0_s1_writedata                           : out std_logic_vector(15 downto 0);                    -- writedata
			timer_0_s1_chipselect                          : out std_logic;                                        -- chipselect
			timer_1_s1_address                             : out std_logic_vector(2 downto 0);                     -- address
			timer_1_s1_write                               : out std_logic;                                        -- write
			timer_1_s1_readdata                            : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			timer_1_s1_writedata                           : out std_logic_vector(15 downto 0);                    -- writedata
			timer_1_s1_chipselect                          : out std_logic;                                        -- chipselect
			uart_0_s1_address                              : out std_logic_vector(2 downto 0);                     -- address
			uart_0_s1_write                                : out std_logic;                                        -- write
			uart_0_s1_read                                 : out std_logic;                                        -- read
			uart_0_s1_readdata                             : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			uart_0_s1_writedata                            : out std_logic_vector(15 downto 0);                    -- writedata
			uart_0_s1_begintransfer                        : out std_logic;                                        -- begintransfer
			uart_0_s1_chipselect                           : out std_logic                                         -- chipselect
		);
	end component NiosBase_mm_interconnect_0;

	component NiosBase_irq_mapper is
		port (
			clk           : in  std_logic                     := 'X'; -- clk
			reset         : in  std_logic                     := 'X'; -- reset
			receiver0_irq : in  std_logic                     := 'X'; -- irq
			receiver1_irq : in  std_logic                     := 'X'; -- irq
			receiver2_irq : in  std_logic                     := 'X'; -- irq
			receiver3_irq : in  std_logic                     := 'X'; -- irq
			sender_irq    : out std_logic_vector(31 downto 0)         -- irq
		);
	end component NiosBase_irq_mapper;

	component niosbase_rst_controller is
		generic (
			NUM_RESET_INPUTS          : integer := 6;
			OUTPUT_RESET_SYNC_EDGES   : string  := "deassert";
			SYNC_DEPTH                : integer := 2;
			RESET_REQUEST_PRESENT     : integer := 0;
			RESET_REQ_WAIT_TIME       : integer := 1;
			MIN_RST_ASSERTION_TIME    : integer := 3;
			RESET_REQ_EARLY_DSRT_TIME : integer := 1;
			USE_RESET_REQUEST_IN0     : integer := 0;
			USE_RESET_REQUEST_IN1     : integer := 0;
			USE_RESET_REQUEST_IN2     : integer := 0;
			USE_RESET_REQUEST_IN3     : integer := 0;
			USE_RESET_REQUEST_IN4     : integer := 0;
			USE_RESET_REQUEST_IN5     : integer := 0;
			USE_RESET_REQUEST_IN6     : integer := 0;
			USE_RESET_REQUEST_IN7     : integer := 0;
			USE_RESET_REQUEST_IN8     : integer := 0;
			USE_RESET_REQUEST_IN9     : integer := 0;
			USE_RESET_REQUEST_IN10    : integer := 0;
			USE_RESET_REQUEST_IN11    : integer := 0;
			USE_RESET_REQUEST_IN12    : integer := 0;
			USE_RESET_REQUEST_IN13    : integer := 0;
			USE_RESET_REQUEST_IN14    : integer := 0;
			USE_RESET_REQUEST_IN15    : integer := 0;
			ADAPT_RESET_REQUEST       : integer := 0
		);
		port (
			reset_in0      : in  std_logic := 'X'; -- reset_in0.reset
			reset_in1      : in  std_logic := 'X'; -- reset_in1.reset
			clk            : in  std_logic := 'X'; --       clk.clk
			reset_out      : out std_logic;        -- reset_out.reset
			reset_in10     : in  std_logic := 'X';
			reset_in11     : in  std_logic := 'X';
			reset_in12     : in  std_logic := 'X';
			reset_in13     : in  std_logic := 'X';
			reset_in14     : in  std_logic := 'X';
			reset_in15     : in  std_logic := 'X';
			reset_in2      : in  std_logic := 'X';
			reset_in3      : in  std_logic := 'X';
			reset_in4      : in  std_logic := 'X';
			reset_in5      : in  std_logic := 'X';
			reset_in6      : in  std_logic := 'X';
			reset_in7      : in  std_logic := 'X';
			reset_in8      : in  std_logic := 'X';
			reset_in9      : in  std_logic := 'X';
			reset_req      : out std_logic;
			reset_req_in0  : in  std_logic := 'X';
			reset_req_in1  : in  std_logic := 'X';
			reset_req_in10 : in  std_logic := 'X';
			reset_req_in11 : in  std_logic := 'X';
			reset_req_in12 : in  std_logic := 'X';
			reset_req_in13 : in  std_logic := 'X';
			reset_req_in14 : in  std_logic := 'X';
			reset_req_in15 : in  std_logic := 'X';
			reset_req_in2  : in  std_logic := 'X';
			reset_req_in3  : in  std_logic := 'X';
			reset_req_in4  : in  std_logic := 'X';
			reset_req_in5  : in  std_logic := 'X';
			reset_req_in6  : in  std_logic := 'X';
			reset_req_in7  : in  std_logic := 'X';
			reset_req_in8  : in  std_logic := 'X';
			reset_req_in9  : in  std_logic := 'X'
		);
	end component niosbase_rst_controller;

	component niosbase_rst_controller_002 is
		generic (
			NUM_RESET_INPUTS          : integer := 6;
			OUTPUT_RESET_SYNC_EDGES   : string  := "deassert";
			SYNC_DEPTH                : integer := 2;
			RESET_REQUEST_PRESENT     : integer := 0;
			RESET_REQ_WAIT_TIME       : integer := 1;
			MIN_RST_ASSERTION_TIME    : integer := 3;
			RESET_REQ_EARLY_DSRT_TIME : integer := 1;
			USE_RESET_REQUEST_IN0     : integer := 0;
			USE_RESET_REQUEST_IN1     : integer := 0;
			USE_RESET_REQUEST_IN2     : integer := 0;
			USE_RESET_REQUEST_IN3     : integer := 0;
			USE_RESET_REQUEST_IN4     : integer := 0;
			USE_RESET_REQUEST_IN5     : integer := 0;
			USE_RESET_REQUEST_IN6     : integer := 0;
			USE_RESET_REQUEST_IN7     : integer := 0;
			USE_RESET_REQUEST_IN8     : integer := 0;
			USE_RESET_REQUEST_IN9     : integer := 0;
			USE_RESET_REQUEST_IN10    : integer := 0;
			USE_RESET_REQUEST_IN11    : integer := 0;
			USE_RESET_REQUEST_IN12    : integer := 0;
			USE_RESET_REQUEST_IN13    : integer := 0;
			USE_RESET_REQUEST_IN14    : integer := 0;
			USE_RESET_REQUEST_IN15    : integer := 0;
			ADAPT_RESET_REQUEST       : integer := 0
		);
		port (
			reset_in0      : in  std_logic := 'X'; -- reset_in0.reset
			clk            : in  std_logic := 'X'; --       clk.clk
			reset_out      : out std_logic;        -- reset_out.reset
			reset_req      : out std_logic;        --          .reset_req
			reset_in1      : in  std_logic := 'X';
			reset_in10     : in  std_logic := 'X';
			reset_in11     : in  std_logic := 'X';
			reset_in12     : in  std_logic := 'X';
			reset_in13     : in  std_logic := 'X';
			reset_in14     : in  std_logic := 'X';
			reset_in15     : in  std_logic := 'X';
			reset_in2      : in  std_logic := 'X';
			reset_in3      : in  std_logic := 'X';
			reset_in4      : in  std_logic := 'X';
			reset_in5      : in  std_logic := 'X';
			reset_in6      : in  std_logic := 'X';
			reset_in7      : in  std_logic := 'X';
			reset_in8      : in  std_logic := 'X';
			reset_in9      : in  std_logic := 'X';
			reset_req_in0  : in  std_logic := 'X';
			reset_req_in1  : in  std_logic := 'X';
			reset_req_in10 : in  std_logic := 'X';
			reset_req_in11 : in  std_logic := 'X';
			reset_req_in12 : in  std_logic := 'X';
			reset_req_in13 : in  std_logic := 'X';
			reset_req_in14 : in  std_logic := 'X';
			reset_req_in15 : in  std_logic := 'X';
			reset_req_in2  : in  std_logic := 'X';
			reset_req_in3  : in  std_logic := 'X';
			reset_req_in4  : in  std_logic := 'X';
			reset_req_in5  : in  std_logic := 'X';
			reset_req_in6  : in  std_logic := 'X';
			reset_req_in7  : in  std_logic := 'X';
			reset_req_in8  : in  std_logic := 'X';
			reset_req_in9  : in  std_logic := 'X'
		);
	end component niosbase_rst_controller_002;

	signal nios2_gen2_0_data_master_readdata                          : std_logic_vector(31 downto 0); -- mm_interconnect_0:nios2_gen2_0_data_master_readdata -> nios2_gen2_0:d_readdata
	signal nios2_gen2_0_data_master_waitrequest                       : std_logic;                     -- mm_interconnect_0:nios2_gen2_0_data_master_waitrequest -> nios2_gen2_0:d_waitrequest
	signal nios2_gen2_0_data_master_debugaccess                       : std_logic;                     -- nios2_gen2_0:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:nios2_gen2_0_data_master_debugaccess
	signal nios2_gen2_0_data_master_address                           : std_logic_vector(18 downto 0); -- nios2_gen2_0:d_address -> mm_interconnect_0:nios2_gen2_0_data_master_address
	signal nios2_gen2_0_data_master_byteenable                        : std_logic_vector(3 downto 0);  -- nios2_gen2_0:d_byteenable -> mm_interconnect_0:nios2_gen2_0_data_master_byteenable
	signal nios2_gen2_0_data_master_read                              : std_logic;                     -- nios2_gen2_0:d_read -> mm_interconnect_0:nios2_gen2_0_data_master_read
	signal nios2_gen2_0_data_master_write                             : std_logic;                     -- nios2_gen2_0:d_write -> mm_interconnect_0:nios2_gen2_0_data_master_write
	signal nios2_gen2_0_data_master_writedata                         : std_logic_vector(31 downto 0); -- nios2_gen2_0:d_writedata -> mm_interconnect_0:nios2_gen2_0_data_master_writedata
	signal nios2_gen2_0_instruction_master_readdata                   : std_logic_vector(31 downto 0); -- mm_interconnect_0:nios2_gen2_0_instruction_master_readdata -> nios2_gen2_0:i_readdata
	signal nios2_gen2_0_instruction_master_waitrequest                : std_logic;                     -- mm_interconnect_0:nios2_gen2_0_instruction_master_waitrequest -> nios2_gen2_0:i_waitrequest
	signal nios2_gen2_0_instruction_master_address                    : std_logic_vector(18 downto 0); -- nios2_gen2_0:i_address -> mm_interconnect_0:nios2_gen2_0_instruction_master_address
	signal nios2_gen2_0_instruction_master_read                       : std_logic;                     -- nios2_gen2_0:i_read -> mm_interconnect_0:nios2_gen2_0_instruction_master_read
	signal mm_interconnect_0_dma_rx_0_av_mm_readdata                  : std_logic_vector(31 downto 0); -- dma_rx_0:av_mm_readdata -> mm_interconnect_0:dma_rx_0_av_mm_readdata
	signal mm_interconnect_0_dma_rx_0_av_mm_waitrequest               : std_logic;                     -- dma_rx_0:av_mm_waitrequest -> mm_interconnect_0:dma_rx_0_av_mm_waitrequest
	signal mm_interconnect_0_dma_rx_0_av_mm_address                   : std_logic_vector(4 downto 0);  -- mm_interconnect_0:dma_rx_0_av_mm_address -> dma_rx_0:av_mm_addr
	signal mm_interconnect_0_dma_rx_0_av_mm_read                      : std_logic;                     -- mm_interconnect_0:dma_rx_0_av_mm_read -> dma_rx_0:av_mm_read
	signal mm_interconnect_0_dma_rx_0_av_mm_write                     : std_logic;                     -- mm_interconnect_0:dma_rx_0_av_mm_write -> dma_rx_0:av_mm_write
	signal mm_interconnect_0_dma_rx_0_av_mm_writedata                 : std_logic_vector(31 downto 0); -- mm_interconnect_0:dma_rx_0_av_mm_writedata -> dma_rx_0:av_mm_writedata
	signal mm_interconnect_0_nios2_gen2_0_debug_mem_slave_readdata    : std_logic_vector(31 downto 0); -- nios2_gen2_0:debug_mem_slave_readdata -> mm_interconnect_0:nios2_gen2_0_debug_mem_slave_readdata
	signal mm_interconnect_0_nios2_gen2_0_debug_mem_slave_waitrequest : std_logic;                     -- nios2_gen2_0:debug_mem_slave_waitrequest -> mm_interconnect_0:nios2_gen2_0_debug_mem_slave_waitrequest
	signal mm_interconnect_0_nios2_gen2_0_debug_mem_slave_debugaccess : std_logic;                     -- mm_interconnect_0:nios2_gen2_0_debug_mem_slave_debugaccess -> nios2_gen2_0:debug_mem_slave_debugaccess
	signal mm_interconnect_0_nios2_gen2_0_debug_mem_slave_address     : std_logic_vector(8 downto 0);  -- mm_interconnect_0:nios2_gen2_0_debug_mem_slave_address -> nios2_gen2_0:debug_mem_slave_address
	signal mm_interconnect_0_nios2_gen2_0_debug_mem_slave_read        : std_logic;                     -- mm_interconnect_0:nios2_gen2_0_debug_mem_slave_read -> nios2_gen2_0:debug_mem_slave_read
	signal mm_interconnect_0_nios2_gen2_0_debug_mem_slave_byteenable  : std_logic_vector(3 downto 0);  -- mm_interconnect_0:nios2_gen2_0_debug_mem_slave_byteenable -> nios2_gen2_0:debug_mem_slave_byteenable
	signal mm_interconnect_0_nios2_gen2_0_debug_mem_slave_write       : std_logic;                     -- mm_interconnect_0:nios2_gen2_0_debug_mem_slave_write -> nios2_gen2_0:debug_mem_slave_write
	signal mm_interconnect_0_nios2_gen2_0_debug_mem_slave_writedata   : std_logic_vector(31 downto 0); -- mm_interconnect_0:nios2_gen2_0_debug_mem_slave_writedata -> nios2_gen2_0:debug_mem_slave_writedata
	signal mm_interconnect_0_onchip_memory2_0_s1_chipselect           : std_logic;                     -- mm_interconnect_0:onchip_memory2_0_s1_chipselect -> onchip_memory2_0:chipselect
	signal mm_interconnect_0_onchip_memory2_0_s1_readdata             : std_logic_vector(31 downto 0); -- onchip_memory2_0:readdata -> mm_interconnect_0:onchip_memory2_0_s1_readdata
	signal mm_interconnect_0_onchip_memory2_0_s1_address              : std_logic_vector(14 downto 0); -- mm_interconnect_0:onchip_memory2_0_s1_address -> onchip_memory2_0:address
	signal mm_interconnect_0_onchip_memory2_0_s1_byteenable           : std_logic_vector(3 downto 0);  -- mm_interconnect_0:onchip_memory2_0_s1_byteenable -> onchip_memory2_0:byteenable
	signal mm_interconnect_0_onchip_memory2_0_s1_write                : std_logic;                     -- mm_interconnect_0:onchip_memory2_0_s1_write -> onchip_memory2_0:write
	signal mm_interconnect_0_onchip_memory2_0_s1_writedata            : std_logic_vector(31 downto 0); -- mm_interconnect_0:onchip_memory2_0_s1_writedata -> onchip_memory2_0:writedata
	signal mm_interconnect_0_onchip_memory2_0_s1_clken                : std_logic;                     -- mm_interconnect_0:onchip_memory2_0_s1_clken -> onchip_memory2_0:clken
	signal mm_interconnect_0_timer_0_s1_chipselect                    : std_logic;                     -- mm_interconnect_0:timer_0_s1_chipselect -> timer_0:chipselect
	signal mm_interconnect_0_timer_0_s1_readdata                      : std_logic_vector(15 downto 0); -- timer_0:readdata -> mm_interconnect_0:timer_0_s1_readdata
	signal mm_interconnect_0_timer_0_s1_address                       : std_logic_vector(2 downto 0);  -- mm_interconnect_0:timer_0_s1_address -> timer_0:address
	signal mm_interconnect_0_timer_0_s1_write                         : std_logic;                     -- mm_interconnect_0:timer_0_s1_write -> mm_interconnect_0_timer_0_s1_write:in
	signal mm_interconnect_0_timer_0_s1_writedata                     : std_logic_vector(15 downto 0); -- mm_interconnect_0:timer_0_s1_writedata -> timer_0:writedata
	signal mm_interconnect_0_timer_1_s1_chipselect                    : std_logic;                     -- mm_interconnect_0:timer_1_s1_chipselect -> timer_1:chipselect
	signal mm_interconnect_0_timer_1_s1_readdata                      : std_logic_vector(15 downto 0); -- timer_1:readdata -> mm_interconnect_0:timer_1_s1_readdata
	signal mm_interconnect_0_timer_1_s1_address                       : std_logic_vector(2 downto 0);  -- mm_interconnect_0:timer_1_s1_address -> timer_1:address
	signal mm_interconnect_0_timer_1_s1_write                         : std_logic;                     -- mm_interconnect_0:timer_1_s1_write -> mm_interconnect_0_timer_1_s1_write:in
	signal mm_interconnect_0_timer_1_s1_writedata                     : std_logic_vector(15 downto 0); -- mm_interconnect_0:timer_1_s1_writedata -> timer_1:writedata
	signal mm_interconnect_0_i_reg32_0_s1_chipselect                  : std_logic;                     -- mm_interconnect_0:i_reg32_0_s1_chipselect -> i_reg32_0:chipselect
	signal mm_interconnect_0_i_reg32_0_s1_readdata                    : std_logic_vector(31 downto 0); -- i_reg32_0:readdata -> mm_interconnect_0:i_reg32_0_s1_readdata
	signal mm_interconnect_0_i_reg32_0_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:i_reg32_0_s1_address -> i_reg32_0:address
	signal mm_interconnect_0_i_reg32_0_s1_write                       : std_logic;                     -- mm_interconnect_0:i_reg32_0_s1_write -> mm_interconnect_0_i_reg32_0_s1_write:in
	signal mm_interconnect_0_i_reg32_0_s1_writedata                   : std_logic_vector(31 downto 0); -- mm_interconnect_0:i_reg32_0_s1_writedata -> i_reg32_0:writedata
	signal mm_interconnect_0_i_reg32_1_s1_readdata                    : std_logic_vector(31 downto 0); -- i_reg32_1:readdata -> mm_interconnect_0:i_reg32_1_s1_readdata
	signal mm_interconnect_0_i_reg32_1_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:i_reg32_1_s1_address -> i_reg32_1:address
	signal mm_interconnect_0_i_reg16_0_s1_readdata                    : std_logic_vector(31 downto 0); -- i_reg16_0:readdata -> mm_interconnect_0:i_reg16_0_s1_readdata
	signal mm_interconnect_0_i_reg16_0_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:i_reg16_0_s1_address -> i_reg16_0:address
	signal mm_interconnect_0_i_reg16_1_s1_readdata                    : std_logic_vector(31 downto 0); -- i_reg16_1:readdata -> mm_interconnect_0:i_reg16_1_s1_readdata
	signal mm_interconnect_0_i_reg16_1_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:i_reg16_1_s1_address -> i_reg16_1:address
	signal mm_interconnect_0_i_reg16_2_s1_readdata                    : std_logic_vector(31 downto 0); -- i_reg16_2:readdata -> mm_interconnect_0:i_reg16_2_s1_readdata
	signal mm_interconnect_0_i_reg16_2_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:i_reg16_2_s1_address -> i_reg16_2:address
	signal mm_interconnect_0_i_reg16_3_s1_readdata                    : std_logic_vector(31 downto 0); -- i_reg16_3:readdata -> mm_interconnect_0:i_reg16_3_s1_readdata
	signal mm_interconnect_0_i_reg16_3_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:i_reg16_3_s1_address -> i_reg16_3:address
	signal mm_interconnect_0_i_reg16_4_s1_readdata                    : std_logic_vector(31 downto 0); -- i_reg16_4:readdata -> mm_interconnect_0:i_reg16_4_s1_readdata
	signal mm_interconnect_0_i_reg16_4_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:i_reg16_4_s1_address -> i_reg16_4:address
	signal mm_interconnect_0_i_reg16_5_s1_readdata                    : std_logic_vector(31 downto 0); -- i_reg16_5:readdata -> mm_interconnect_0:i_reg16_5_s1_readdata
	signal mm_interconnect_0_i_reg16_5_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:i_reg16_5_s1_address -> i_reg16_5:address
	signal mm_interconnect_0_i_reg16_6_s1_readdata                    : std_logic_vector(31 downto 0); -- i_reg16_6:readdata -> mm_interconnect_0:i_reg16_6_s1_readdata
	signal mm_interconnect_0_i_reg16_6_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:i_reg16_6_s1_address -> i_reg16_6:address
	signal mm_interconnect_0_uart_0_s1_chipselect                     : std_logic;                     -- mm_interconnect_0:uart_0_s1_chipselect -> uart_0:chipselect
	signal mm_interconnect_0_uart_0_s1_readdata                       : std_logic_vector(15 downto 0); -- uart_0:readdata -> mm_interconnect_0:uart_0_s1_readdata
	signal mm_interconnect_0_uart_0_s1_address                        : std_logic_vector(2 downto 0);  -- mm_interconnect_0:uart_0_s1_address -> uart_0:address
	signal mm_interconnect_0_uart_0_s1_read                           : std_logic;                     -- mm_interconnect_0:uart_0_s1_read -> mm_interconnect_0_uart_0_s1_read:in
	signal mm_interconnect_0_uart_0_s1_begintransfer                  : std_logic;                     -- mm_interconnect_0:uart_0_s1_begintransfer -> uart_0:begintransfer
	signal mm_interconnect_0_uart_0_s1_write                          : std_logic;                     -- mm_interconnect_0:uart_0_s1_write -> mm_interconnect_0_uart_0_s1_write:in
	signal mm_interconnect_0_uart_0_s1_writedata                      : std_logic_vector(15 downto 0); -- mm_interconnect_0:uart_0_s1_writedata -> uart_0:writedata
	signal mm_interconnect_0_o_reg32_0_s1_chipselect                  : std_logic;                     -- mm_interconnect_0:o_reg32_0_s1_chipselect -> o_reg32_0:chipselect
	signal mm_interconnect_0_o_reg32_0_s1_readdata                    : std_logic_vector(31 downto 0); -- o_reg32_0:readdata -> mm_interconnect_0:o_reg32_0_s1_readdata
	signal mm_interconnect_0_o_reg32_0_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:o_reg32_0_s1_address -> o_reg32_0:address
	signal mm_interconnect_0_o_reg32_0_s1_write                       : std_logic;                     -- mm_interconnect_0:o_reg32_0_s1_write -> mm_interconnect_0_o_reg32_0_s1_write:in
	signal mm_interconnect_0_o_reg32_0_s1_writedata                   : std_logic_vector(31 downto 0); -- mm_interconnect_0:o_reg32_0_s1_writedata -> o_reg32_0:writedata
	signal mm_interconnect_0_o_reg32_1_s1_chipselect                  : std_logic;                     -- mm_interconnect_0:o_reg32_1_s1_chipselect -> o_reg32_1:chipselect
	signal mm_interconnect_0_o_reg32_1_s1_readdata                    : std_logic_vector(31 downto 0); -- o_reg32_1:readdata -> mm_interconnect_0:o_reg32_1_s1_readdata
	signal mm_interconnect_0_o_reg32_1_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:o_reg32_1_s1_address -> o_reg32_1:address
	signal mm_interconnect_0_o_reg32_1_s1_write                       : std_logic;                     -- mm_interconnect_0:o_reg32_1_s1_write -> mm_interconnect_0_o_reg32_1_s1_write:in
	signal mm_interconnect_0_o_reg32_1_s1_writedata                   : std_logic_vector(31 downto 0); -- mm_interconnect_0:o_reg32_1_s1_writedata -> o_reg32_1:writedata
	signal mm_interconnect_0_o_reg32_2_s1_chipselect                  : std_logic;                     -- mm_interconnect_0:o_reg32_2_s1_chipselect -> o_reg32_2:chipselect
	signal mm_interconnect_0_o_reg32_2_s1_readdata                    : std_logic_vector(31 downto 0); -- o_reg32_2:readdata -> mm_interconnect_0:o_reg32_2_s1_readdata
	signal mm_interconnect_0_o_reg32_2_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:o_reg32_2_s1_address -> o_reg32_2:address
	signal mm_interconnect_0_o_reg32_2_s1_write                       : std_logic;                     -- mm_interconnect_0:o_reg32_2_s1_write -> mm_interconnect_0_o_reg32_2_s1_write:in
	signal mm_interconnect_0_o_reg32_2_s1_writedata                   : std_logic_vector(31 downto 0); -- mm_interconnect_0:o_reg32_2_s1_writedata -> o_reg32_2:writedata
	signal mm_interconnect_0_o_reg32_3_s1_chipselect                  : std_logic;                     -- mm_interconnect_0:o_reg32_3_s1_chipselect -> o_reg32_3:chipselect
	signal mm_interconnect_0_o_reg32_3_s1_readdata                    : std_logic_vector(31 downto 0); -- o_reg32_3:readdata -> mm_interconnect_0:o_reg32_3_s1_readdata
	signal mm_interconnect_0_o_reg32_3_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:o_reg32_3_s1_address -> o_reg32_3:address
	signal mm_interconnect_0_o_reg32_3_s1_write                       : std_logic;                     -- mm_interconnect_0:o_reg32_3_s1_write -> mm_interconnect_0_o_reg32_3_s1_write:in
	signal mm_interconnect_0_o_reg32_3_s1_writedata                   : std_logic_vector(31 downto 0); -- mm_interconnect_0:o_reg32_3_s1_writedata -> o_reg32_3:writedata
	signal mm_interconnect_0_o_reg32_4_s1_chipselect                  : std_logic;                     -- mm_interconnect_0:o_reg32_4_s1_chipselect -> o_reg32_4:chipselect
	signal mm_interconnect_0_o_reg32_4_s1_readdata                    : std_logic_vector(31 downto 0); -- o_reg32_4:readdata -> mm_interconnect_0:o_reg32_4_s1_readdata
	signal mm_interconnect_0_o_reg32_4_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:o_reg32_4_s1_address -> o_reg32_4:address
	signal mm_interconnect_0_o_reg32_4_s1_write                       : std_logic;                     -- mm_interconnect_0:o_reg32_4_s1_write -> mm_interconnect_0_o_reg32_4_s1_write:in
	signal mm_interconnect_0_o_reg32_4_s1_writedata                   : std_logic_vector(31 downto 0); -- mm_interconnect_0:o_reg32_4_s1_writedata -> o_reg32_4:writedata
	signal mm_interconnect_0_o_reg32_5_s1_chipselect                  : std_logic;                     -- mm_interconnect_0:o_reg32_5_s1_chipselect -> o_reg32_5:chipselect
	signal mm_interconnect_0_o_reg32_5_s1_readdata                    : std_logic_vector(31 downto 0); -- o_reg32_5:readdata -> mm_interconnect_0:o_reg32_5_s1_readdata
	signal mm_interconnect_0_o_reg32_5_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:o_reg32_5_s1_address -> o_reg32_5:address
	signal mm_interconnect_0_o_reg32_5_s1_write                       : std_logic;                     -- mm_interconnect_0:o_reg32_5_s1_write -> mm_interconnect_0_o_reg32_5_s1_write:in
	signal mm_interconnect_0_o_reg32_5_s1_writedata                   : std_logic_vector(31 downto 0); -- mm_interconnect_0:o_reg32_5_s1_writedata -> o_reg32_5:writedata
	signal mm_interconnect_0_o_reg32_6_s1_chipselect                  : std_logic;                     -- mm_interconnect_0:o_reg32_6_s1_chipselect -> o_reg32_6:chipselect
	signal mm_interconnect_0_o_reg32_6_s1_readdata                    : std_logic_vector(31 downto 0); -- o_reg32_6:readdata -> mm_interconnect_0:o_reg32_6_s1_readdata
	signal mm_interconnect_0_o_reg32_6_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:o_reg32_6_s1_address -> o_reg32_6:address
	signal mm_interconnect_0_o_reg32_6_s1_write                       : std_logic;                     -- mm_interconnect_0:o_reg32_6_s1_write -> mm_interconnect_0_o_reg32_6_s1_write:in
	signal mm_interconnect_0_o_reg32_6_s1_writedata                   : std_logic_vector(31 downto 0); -- mm_interconnect_0:o_reg32_6_s1_writedata -> o_reg32_6:writedata
	signal mm_interconnect_0_o_reg32_7_s1_chipselect                  : std_logic;                     -- mm_interconnect_0:o_reg32_7_s1_chipselect -> o_reg32_7:chipselect
	signal mm_interconnect_0_o_reg32_7_s1_readdata                    : std_logic_vector(31 downto 0); -- o_reg32_7:readdata -> mm_interconnect_0:o_reg32_7_s1_readdata
	signal mm_interconnect_0_o_reg32_7_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:o_reg32_7_s1_address -> o_reg32_7:address
	signal mm_interconnect_0_o_reg32_7_s1_write                       : std_logic;                     -- mm_interconnect_0:o_reg32_7_s1_write -> mm_interconnect_0_o_reg32_7_s1_write:in
	signal mm_interconnect_0_o_reg32_7_s1_writedata                   : std_logic_vector(31 downto 0); -- mm_interconnect_0:o_reg32_7_s1_writedata -> o_reg32_7:writedata
	signal mm_interconnect_0_o_reg32_8_s1_chipselect                  : std_logic;                     -- mm_interconnect_0:o_reg32_8_s1_chipselect -> o_reg32_8:chipselect
	signal mm_interconnect_0_o_reg32_8_s1_readdata                    : std_logic_vector(31 downto 0); -- o_reg32_8:readdata -> mm_interconnect_0:o_reg32_8_s1_readdata
	signal mm_interconnect_0_o_reg32_8_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:o_reg32_8_s1_address -> o_reg32_8:address
	signal mm_interconnect_0_o_reg32_8_s1_write                       : std_logic;                     -- mm_interconnect_0:o_reg32_8_s1_write -> mm_interconnect_0_o_reg32_8_s1_write:in
	signal mm_interconnect_0_o_reg32_8_s1_writedata                   : std_logic_vector(31 downto 0); -- mm_interconnect_0:o_reg32_8_s1_writedata -> o_reg32_8:writedata
	signal mm_interconnect_0_o_reg32_9_s1_chipselect                  : std_logic;                     -- mm_interconnect_0:o_reg32_9_s1_chipselect -> o_reg32_9:chipselect
	signal mm_interconnect_0_o_reg32_9_s1_readdata                    : std_logic_vector(31 downto 0); -- o_reg32_9:readdata -> mm_interconnect_0:o_reg32_9_s1_readdata
	signal mm_interconnect_0_o_reg32_9_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:o_reg32_9_s1_address -> o_reg32_9:address
	signal mm_interconnect_0_o_reg32_9_s1_write                       : std_logic;                     -- mm_interconnect_0:o_reg32_9_s1_write -> mm_interconnect_0_o_reg32_9_s1_write:in
	signal mm_interconnect_0_o_reg32_9_s1_writedata                   : std_logic_vector(31 downto 0); -- mm_interconnect_0:o_reg32_9_s1_writedata -> o_reg32_9:writedata
	signal mm_interconnect_0_o_reg32_10_s1_chipselect                 : std_logic;                     -- mm_interconnect_0:o_reg32_10_s1_chipselect -> o_reg32_10:chipselect
	signal mm_interconnect_0_o_reg32_10_s1_readdata                   : std_logic_vector(31 downto 0); -- o_reg32_10:readdata -> mm_interconnect_0:o_reg32_10_s1_readdata
	signal mm_interconnect_0_o_reg32_10_s1_address                    : std_logic_vector(1 downto 0);  -- mm_interconnect_0:o_reg32_10_s1_address -> o_reg32_10:address
	signal mm_interconnect_0_o_reg32_10_s1_write                      : std_logic;                     -- mm_interconnect_0:o_reg32_10_s1_write -> mm_interconnect_0_o_reg32_10_s1_write:in
	signal mm_interconnect_0_o_reg32_10_s1_writedata                  : std_logic_vector(31 downto 0); -- mm_interconnect_0:o_reg32_10_s1_writedata -> o_reg32_10:writedata
	signal mm_interconnect_0_o_reg32_11_s1_chipselect                 : std_logic;                     -- mm_interconnect_0:o_reg32_11_s1_chipselect -> o_reg32_11:chipselect
	signal mm_interconnect_0_o_reg32_11_s1_readdata                   : std_logic_vector(31 downto 0); -- o_reg32_11:readdata -> mm_interconnect_0:o_reg32_11_s1_readdata
	signal mm_interconnect_0_o_reg32_11_s1_address                    : std_logic_vector(1 downto 0);  -- mm_interconnect_0:o_reg32_11_s1_address -> o_reg32_11:address
	signal mm_interconnect_0_o_reg32_11_s1_write                      : std_logic;                     -- mm_interconnect_0:o_reg32_11_s1_write -> mm_interconnect_0_o_reg32_11_s1_write:in
	signal mm_interconnect_0_o_reg32_11_s1_writedata                  : std_logic_vector(31 downto 0); -- mm_interconnect_0:o_reg32_11_s1_writedata -> o_reg32_11:writedata
	signal mm_interconnect_0_i_reg32_2_s1_readdata                    : std_logic_vector(31 downto 0); -- i_reg32_2:readdata -> mm_interconnect_0:i_reg32_2_s1_readdata
	signal mm_interconnect_0_i_reg32_2_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:i_reg32_2_s1_address -> i_reg32_2:address
	signal mm_interconnect_0_i_reg32_3_s1_readdata                    : std_logic_vector(31 downto 0); -- i_reg32_3:readdata -> mm_interconnect_0:i_reg32_3_s1_readdata
	signal mm_interconnect_0_i_reg32_3_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:i_reg32_3_s1_address -> i_reg32_3:address
	signal mm_interconnect_0_i_reg32_4_s1_readdata                    : std_logic_vector(31 downto 0); -- i_reg32_4:readdata -> mm_interconnect_0:i_reg32_4_s1_readdata
	signal mm_interconnect_0_i_reg32_4_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:i_reg32_4_s1_address -> i_reg32_4:address
	signal mm_interconnect_0_i_reg32_5_s1_readdata                    : std_logic_vector(31 downto 0); -- i_reg32_5:readdata -> mm_interconnect_0:i_reg32_5_s1_readdata
	signal mm_interconnect_0_i_reg32_5_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:i_reg32_5_s1_address -> i_reg32_5:address
	signal mm_interconnect_0_i_reg32_6_s1_readdata                    : std_logic_vector(31 downto 0); -- i_reg32_6:readdata -> mm_interconnect_0:i_reg32_6_s1_readdata
	signal mm_interconnect_0_i_reg32_6_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:i_reg32_6_s1_address -> i_reg32_6:address
	signal mm_interconnect_0_i_reg32_7_s1_readdata                    : std_logic_vector(31 downto 0); -- i_reg32_7:readdata -> mm_interconnect_0:i_reg32_7_s1_readdata
	signal mm_interconnect_0_i_reg32_7_s1_address                     : std_logic_vector(1 downto 0);  -- mm_interconnect_0:i_reg32_7_s1_address -> i_reg32_7:address
	signal mm_interconnect_0_o_reg32_13_s1_chipselect                 : std_logic;                     -- mm_interconnect_0:o_reg32_13_s1_chipselect -> o_reg32_13:chipselect
	signal mm_interconnect_0_o_reg32_13_s1_readdata                   : std_logic_vector(31 downto 0); -- o_reg32_13:readdata -> mm_interconnect_0:o_reg32_13_s1_readdata
	signal mm_interconnect_0_o_reg32_13_s1_address                    : std_logic_vector(1 downto 0);  -- mm_interconnect_0:o_reg32_13_s1_address -> o_reg32_13:address
	signal mm_interconnect_0_o_reg32_13_s1_write                      : std_logic;                     -- mm_interconnect_0:o_reg32_13_s1_write -> mm_interconnect_0_o_reg32_13_s1_write:in
	signal mm_interconnect_0_o_reg32_13_s1_writedata                  : std_logic_vector(31 downto 0); -- mm_interconnect_0:o_reg32_13_s1_writedata -> o_reg32_13:writedata
	signal mm_interconnect_0_o_reg32_12_s1_chipselect                 : std_logic;                     -- mm_interconnect_0:o_reg32_12_s1_chipselect -> o_reg32_12:chipselect
	signal mm_interconnect_0_o_reg32_12_s1_readdata                   : std_logic_vector(31 downto 0); -- o_reg32_12:readdata -> mm_interconnect_0:o_reg32_12_s1_readdata
	signal mm_interconnect_0_o_reg32_12_s1_address                    : std_logic_vector(1 downto 0);  -- mm_interconnect_0:o_reg32_12_s1_address -> o_reg32_12:address
	signal mm_interconnect_0_o_reg32_12_s1_write                      : std_logic;                     -- mm_interconnect_0:o_reg32_12_s1_write -> mm_interconnect_0_o_reg32_12_s1_write:in
	signal mm_interconnect_0_o_reg32_12_s1_writedata                  : std_logic_vector(31 downto 0); -- mm_interconnect_0:o_reg32_12_s1_writedata -> o_reg32_12:writedata
	signal irq_mapper_receiver0_irq                                   : std_logic;                     -- timer_0:irq -> irq_mapper:receiver0_irq
	signal irq_mapper_receiver1_irq                                   : std_logic;                     -- timer_1:irq -> irq_mapper:receiver1_irq
	signal irq_mapper_receiver2_irq                                   : std_logic;                     -- i_reg32_0:irq -> irq_mapper:receiver2_irq
	signal irq_mapper_receiver3_irq                                   : std_logic;                     -- uart_0:irq -> irq_mapper:receiver3_irq
	signal nios2_gen2_0_irq_irq                                       : std_logic_vector(31 downto 0); -- irq_mapper:sender_irq -> nios2_gen2_0:irq
	signal rst_controller_reset_out_reset                             : std_logic;                     -- rst_controller:reset_out -> dma_rx_0:reset
	signal nios2_gen2_0_debug_reset_request_reset                     : std_logic;                     -- nios2_gen2_0:debug_reset_request -> [rst_controller:reset_in1, rst_controller_001:reset_in1]
	signal rst_controller_001_reset_out_reset                         : std_logic;                     -- rst_controller_001:reset_out -> [mm_interconnect_0:dma_rx_0_reset_reset_bridge_in_reset_reset, mm_interconnect_0:timer_0_reset_reset_bridge_in_reset_reset, rst_controller_001_reset_out_reset:in]
	signal rst_controller_002_reset_out_reset                         : std_logic;                     -- rst_controller_002:reset_out -> [irq_mapper:reset, mm_interconnect_0:nios2_gen2_0_reset_reset_bridge_in_reset_reset, onchip_memory2_0:reset, rst_controller_002_reset_out_reset:in, rst_translator:in_reset]
	signal rst_controller_002_reset_out_reset_req                     : std_logic;                     -- rst_controller_002:reset_req -> [nios2_gen2_0:reset_req, onchip_memory2_0:reset_req, rst_translator:reset_req_in]
	signal reset_reset_n_ports_inv                                    : std_logic;                     -- reset_reset_n:inv -> [rst_controller:reset_in0, rst_controller_001:reset_in0, rst_controller_002:reset_in0]
	signal mm_interconnect_0_timer_0_s1_write_ports_inv               : std_logic;                     -- mm_interconnect_0_timer_0_s1_write:inv -> timer_0:write_n
	signal mm_interconnect_0_timer_1_s1_write_ports_inv               : std_logic;                     -- mm_interconnect_0_timer_1_s1_write:inv -> timer_1:write_n
	signal mm_interconnect_0_i_reg32_0_s1_write_ports_inv             : std_logic;                     -- mm_interconnect_0_i_reg32_0_s1_write:inv -> i_reg32_0:write_n
	signal mm_interconnect_0_uart_0_s1_read_ports_inv                 : std_logic;                     -- mm_interconnect_0_uart_0_s1_read:inv -> uart_0:read_n
	signal mm_interconnect_0_uart_0_s1_write_ports_inv                : std_logic;                     -- mm_interconnect_0_uart_0_s1_write:inv -> uart_0:write_n
	signal mm_interconnect_0_o_reg32_0_s1_write_ports_inv             : std_logic;                     -- mm_interconnect_0_o_reg32_0_s1_write:inv -> o_reg32_0:write_n
	signal mm_interconnect_0_o_reg32_1_s1_write_ports_inv             : std_logic;                     -- mm_interconnect_0_o_reg32_1_s1_write:inv -> o_reg32_1:write_n
	signal mm_interconnect_0_o_reg32_2_s1_write_ports_inv             : std_logic;                     -- mm_interconnect_0_o_reg32_2_s1_write:inv -> o_reg32_2:write_n
	signal mm_interconnect_0_o_reg32_3_s1_write_ports_inv             : std_logic;                     -- mm_interconnect_0_o_reg32_3_s1_write:inv -> o_reg32_3:write_n
	signal mm_interconnect_0_o_reg32_4_s1_write_ports_inv             : std_logic;                     -- mm_interconnect_0_o_reg32_4_s1_write:inv -> o_reg32_4:write_n
	signal mm_interconnect_0_o_reg32_5_s1_write_ports_inv             : std_logic;                     -- mm_interconnect_0_o_reg32_5_s1_write:inv -> o_reg32_5:write_n
	signal mm_interconnect_0_o_reg32_6_s1_write_ports_inv             : std_logic;                     -- mm_interconnect_0_o_reg32_6_s1_write:inv -> o_reg32_6:write_n
	signal mm_interconnect_0_o_reg32_7_s1_write_ports_inv             : std_logic;                     -- mm_interconnect_0_o_reg32_7_s1_write:inv -> o_reg32_7:write_n
	signal mm_interconnect_0_o_reg32_8_s1_write_ports_inv             : std_logic;                     -- mm_interconnect_0_o_reg32_8_s1_write:inv -> o_reg32_8:write_n
	signal mm_interconnect_0_o_reg32_9_s1_write_ports_inv             : std_logic;                     -- mm_interconnect_0_o_reg32_9_s1_write:inv -> o_reg32_9:write_n
	signal mm_interconnect_0_o_reg32_10_s1_write_ports_inv            : std_logic;                     -- mm_interconnect_0_o_reg32_10_s1_write:inv -> o_reg32_10:write_n
	signal mm_interconnect_0_o_reg32_11_s1_write_ports_inv            : std_logic;                     -- mm_interconnect_0_o_reg32_11_s1_write:inv -> o_reg32_11:write_n
	signal mm_interconnect_0_o_reg32_13_s1_write_ports_inv            : std_logic;                     -- mm_interconnect_0_o_reg32_13_s1_write:inv -> o_reg32_13:write_n
	signal mm_interconnect_0_o_reg32_12_s1_write_ports_inv            : std_logic;                     -- mm_interconnect_0_o_reg32_12_s1_write:inv -> o_reg32_12:write_n
	signal rst_controller_001_reset_out_reset_ports_inv               : std_logic;                     -- rst_controller_001_reset_out_reset:inv -> [i_reg16_0:reset_n, i_reg16_1:reset_n, i_reg16_2:reset_n, i_reg16_3:reset_n, i_reg16_4:reset_n, i_reg16_5:reset_n, i_reg16_6:reset_n, i_reg32_0:reset_n, i_reg32_1:reset_n, i_reg32_2:reset_n, i_reg32_3:reset_n, i_reg32_4:reset_n, i_reg32_5:reset_n, i_reg32_6:reset_n, i_reg32_7:reset_n, o_reg32_0:reset_n, o_reg32_10:reset_n, o_reg32_11:reset_n, o_reg32_12:reset_n, o_reg32_13:reset_n, o_reg32_1:reset_n, o_reg32_2:reset_n, o_reg32_3:reset_n, o_reg32_4:reset_n, o_reg32_5:reset_n, o_reg32_7:reset_n, o_reg32_8:reset_n, o_reg32_9:reset_n, timer_0:reset_n, timer_1:reset_n, uart_0:reset_n]
	signal rst_controller_002_reset_out_reset_ports_inv               : std_logic;                     -- rst_controller_002_reset_out_reset:inv -> [nios2_gen2_0:reset_n, o_reg32_6:reset_n]

begin

	dma_rx_0 : component dma_receiver
		generic map (
			DEPTH         => 32,
			clock_nsec    => 20,
			WATCHDOG_nsec => 100000
		)
		port map (
			reset             => rst_controller_reset_out_reset,               --         reset.reset
			av_mm_read        => mm_interconnect_0_dma_rx_0_av_mm_read,        --         av_mm.read
			av_mm_readdata    => mm_interconnect_0_dma_rx_0_av_mm_readdata,    --              .readdata
			av_mm_waitrequest => mm_interconnect_0_dma_rx_0_av_mm_waitrequest, --              .waitrequest
			av_mm_write       => mm_interconnect_0_dma_rx_0_av_mm_write,       --              .write
			av_mm_writedata   => mm_interconnect_0_dma_rx_0_av_mm_writedata,   --              .writedata
			av_mm_addr        => mm_interconnect_0_dma_rx_0_av_mm_address,     --              .address
			coe_RX_DONE       => coe_done,                                     -- conduit_end_0.done
			coe_RX_DATA       => coe_data,                                     --              .data
			clock             => clk_clk                                       --         clock.clk
		);

	i_reg16_0 : component NiosBase_i_reg16_0
		port map (
			clk      => clk_clk,                                      --                 clk.clk
			reset_n  => rst_controller_001_reset_out_reset_ports_inv, --               reset.reset_n
			address  => mm_interconnect_0_i_reg16_0_s1_address,       --                  s1.address
			readdata => mm_interconnect_0_i_reg16_0_s1_readdata,      --                    .readdata
			in_port  => i_reg16_0_export                              -- external_connection.export
		);

	i_reg16_1 : component NiosBase_i_reg16_0
		port map (
			clk      => clk_clk,                                      --                 clk.clk
			reset_n  => rst_controller_001_reset_out_reset_ports_inv, --               reset.reset_n
			address  => mm_interconnect_0_i_reg16_1_s1_address,       --                  s1.address
			readdata => mm_interconnect_0_i_reg16_1_s1_readdata,      --                    .readdata
			in_port  => i_reg16_1_export                              -- external_connection.export
		);

	i_reg16_2 : component NiosBase_i_reg16_0
		port map (
			clk      => clk_clk,                                      --                 clk.clk
			reset_n  => rst_controller_001_reset_out_reset_ports_inv, --               reset.reset_n
			address  => mm_interconnect_0_i_reg16_2_s1_address,       --                  s1.address
			readdata => mm_interconnect_0_i_reg16_2_s1_readdata,      --                    .readdata
			in_port  => i_reg16_2_export                              -- external_connection.export
		);

	i_reg16_3 : component NiosBase_i_reg16_0
		port map (
			clk      => clk_clk,                                      --                 clk.clk
			reset_n  => rst_controller_001_reset_out_reset_ports_inv, --               reset.reset_n
			address  => mm_interconnect_0_i_reg16_3_s1_address,       --                  s1.address
			readdata => mm_interconnect_0_i_reg16_3_s1_readdata,      --                    .readdata
			in_port  => i_reg16_3_export                              -- external_connection.export
		);

	i_reg16_4 : component NiosBase_i_reg16_0
		port map (
			clk      => clk_clk,                                      --                 clk.clk
			reset_n  => rst_controller_001_reset_out_reset_ports_inv, --               reset.reset_n
			address  => mm_interconnect_0_i_reg16_4_s1_address,       --                  s1.address
			readdata => mm_interconnect_0_i_reg16_4_s1_readdata,      --                    .readdata
			in_port  => i_reg16_4_export                              -- external_connection.export
		);

	i_reg16_5 : component NiosBase_i_reg16_0
		port map (
			clk      => clk_clk,                                      --                 clk.clk
			reset_n  => rst_controller_001_reset_out_reset_ports_inv, --               reset.reset_n
			address  => mm_interconnect_0_i_reg16_5_s1_address,       --                  s1.address
			readdata => mm_interconnect_0_i_reg16_5_s1_readdata,      --                    .readdata
			in_port  => i_reg16_5_export                              -- external_connection.export
		);

	i_reg16_6 : component NiosBase_i_reg16_0
		port map (
			clk      => clk_clk,                                      --                 clk.clk
			reset_n  => rst_controller_001_reset_out_reset_ports_inv, --               reset.reset_n
			address  => mm_interconnect_0_i_reg16_6_s1_address,       --                  s1.address
			readdata => mm_interconnect_0_i_reg16_6_s1_readdata,      --                    .readdata
			in_port  => i_reg16_6_export                              -- external_connection.export
		);

	i_reg32_0 : component NiosBase_i_reg32_0
		port map (
			clk        => clk_clk,                                        --                 clk.clk
			reset_n    => rst_controller_001_reset_out_reset_ports_inv,   --               reset.reset_n
			address    => mm_interconnect_0_i_reg32_0_s1_address,         --                  s1.address
			write_n    => mm_interconnect_0_i_reg32_0_s1_write_ports_inv, --                    .write_n
			writedata  => mm_interconnect_0_i_reg32_0_s1_writedata,       --                    .writedata
			chipselect => mm_interconnect_0_i_reg32_0_s1_chipselect,      --                    .chipselect
			readdata   => mm_interconnect_0_i_reg32_0_s1_readdata,        --                    .readdata
			in_port    => i_reg32_0_export,                               -- external_connection.export
			irq        => irq_mapper_receiver2_irq                        --                 irq.irq
		);

	i_reg32_1 : component NiosBase_i_reg32_1
		port map (
			clk      => clk_clk,                                      --                 clk.clk
			reset_n  => rst_controller_001_reset_out_reset_ports_inv, --               reset.reset_n
			address  => mm_interconnect_0_i_reg32_1_s1_address,       --                  s1.address
			readdata => mm_interconnect_0_i_reg32_1_s1_readdata,      --                    .readdata
			in_port  => i_reg32_1_export                              -- external_connection.export
		);

	i_reg32_2 : component NiosBase_i_reg32_1
		port map (
			clk      => clk_clk,                                      --                 clk.clk
			reset_n  => rst_controller_001_reset_out_reset_ports_inv, --               reset.reset_n
			address  => mm_interconnect_0_i_reg32_2_s1_address,       --                  s1.address
			readdata => mm_interconnect_0_i_reg32_2_s1_readdata,      --                    .readdata
			in_port  => i_reg32_2_export                              -- external_connection.export
		);

	i_reg32_3 : component NiosBase_i_reg32_1
		port map (
			clk      => clk_clk,                                      --                 clk.clk
			reset_n  => rst_controller_001_reset_out_reset_ports_inv, --               reset.reset_n
			address  => mm_interconnect_0_i_reg32_3_s1_address,       --                  s1.address
			readdata => mm_interconnect_0_i_reg32_3_s1_readdata,      --                    .readdata
			in_port  => i_reg32_3_export                              -- external_connection.export
		);

	i_reg32_4 : component NiosBase_i_reg32_1
		port map (
			clk      => clk_clk,                                      --                 clk.clk
			reset_n  => rst_controller_001_reset_out_reset_ports_inv, --               reset.reset_n
			address  => mm_interconnect_0_i_reg32_4_s1_address,       --                  s1.address
			readdata => mm_interconnect_0_i_reg32_4_s1_readdata,      --                    .readdata
			in_port  => i_reg32_4_export                              -- external_connection.export
		);

	i_reg32_5 : component NiosBase_i_reg32_1
		port map (
			clk      => clk_clk,                                      --                 clk.clk
			reset_n  => rst_controller_001_reset_out_reset_ports_inv, --               reset.reset_n
			address  => mm_interconnect_0_i_reg32_5_s1_address,       --                  s1.address
			readdata => mm_interconnect_0_i_reg32_5_s1_readdata,      --                    .readdata
			in_port  => i_reg32_5_export                              -- external_connection.export
		);

	i_reg32_6 : component NiosBase_i_reg32_1
		port map (
			clk      => clk_clk,                                      --                 clk.clk
			reset_n  => rst_controller_001_reset_out_reset_ports_inv, --               reset.reset_n
			address  => mm_interconnect_0_i_reg32_6_s1_address,       --                  s1.address
			readdata => mm_interconnect_0_i_reg32_6_s1_readdata,      --                    .readdata
			in_port  => i_reg32_6_export                              -- external_connection.export
		);

	i_reg32_7 : component NiosBase_i_reg32_1
		port map (
			clk      => clk_clk,                                      --                 clk.clk
			reset_n  => rst_controller_001_reset_out_reset_ports_inv, --               reset.reset_n
			address  => mm_interconnect_0_i_reg32_7_s1_address,       --                  s1.address
			readdata => mm_interconnect_0_i_reg32_7_s1_readdata,      --                    .readdata
			in_port  => i_reg32_7_export                              -- external_connection.export
		);

	nios2_gen2_0 : component NiosBase_nios2_gen2_0
		port map (
			clk                                 => clk_clk,                                                    --                       clk.clk
			reset_n                             => rst_controller_002_reset_out_reset_ports_inv,               --                     reset.reset_n
			reset_req                           => rst_controller_002_reset_out_reset_req,                     --                          .reset_req
			d_address                           => nios2_gen2_0_data_master_address,                           --               data_master.address
			d_byteenable                        => nios2_gen2_0_data_master_byteenable,                        --                          .byteenable
			d_read                              => nios2_gen2_0_data_master_read,                              --                          .read
			d_readdata                          => nios2_gen2_0_data_master_readdata,                          --                          .readdata
			d_waitrequest                       => nios2_gen2_0_data_master_waitrequest,                       --                          .waitrequest
			d_write                             => nios2_gen2_0_data_master_write,                             --                          .write
			d_writedata                         => nios2_gen2_0_data_master_writedata,                         --                          .writedata
			debug_mem_slave_debugaccess_to_roms => nios2_gen2_0_data_master_debugaccess,                       --                          .debugaccess
			i_address                           => nios2_gen2_0_instruction_master_address,                    --        instruction_master.address
			i_read                              => nios2_gen2_0_instruction_master_read,                       --                          .read
			i_readdata                          => nios2_gen2_0_instruction_master_readdata,                   --                          .readdata
			i_waitrequest                       => nios2_gen2_0_instruction_master_waitrequest,                --                          .waitrequest
			irq                                 => nios2_gen2_0_irq_irq,                                       --                       irq.irq
			debug_reset_request                 => nios2_gen2_0_debug_reset_request_reset,                     --       debug_reset_request.reset
			debug_mem_slave_address             => mm_interconnect_0_nios2_gen2_0_debug_mem_slave_address,     --           debug_mem_slave.address
			debug_mem_slave_byteenable          => mm_interconnect_0_nios2_gen2_0_debug_mem_slave_byteenable,  --                          .byteenable
			debug_mem_slave_debugaccess         => mm_interconnect_0_nios2_gen2_0_debug_mem_slave_debugaccess, --                          .debugaccess
			debug_mem_slave_read                => mm_interconnect_0_nios2_gen2_0_debug_mem_slave_read,        --                          .read
			debug_mem_slave_readdata            => mm_interconnect_0_nios2_gen2_0_debug_mem_slave_readdata,    --                          .readdata
			debug_mem_slave_waitrequest         => mm_interconnect_0_nios2_gen2_0_debug_mem_slave_waitrequest, --                          .waitrequest
			debug_mem_slave_write               => mm_interconnect_0_nios2_gen2_0_debug_mem_slave_write,       --                          .write
			debug_mem_slave_writedata           => mm_interconnect_0_nios2_gen2_0_debug_mem_slave_writedata,   --                          .writedata
			dummy_ci_port                       => open                                                        -- custom_instruction_master.readra
		);

	o_reg32_0 : component NiosBase_o_reg32_0
		port map (
			clk        => clk_clk,                                        --                 clk.clk
			reset_n    => rst_controller_001_reset_out_reset_ports_inv,   --               reset.reset_n
			address    => mm_interconnect_0_o_reg32_0_s1_address,         --                  s1.address
			write_n    => mm_interconnect_0_o_reg32_0_s1_write_ports_inv, --                    .write_n
			writedata  => mm_interconnect_0_o_reg32_0_s1_writedata,       --                    .writedata
			chipselect => mm_interconnect_0_o_reg32_0_s1_chipselect,      --                    .chipselect
			readdata   => mm_interconnect_0_o_reg32_0_s1_readdata,        --                    .readdata
			out_port   => o_reg32_0_export                                -- external_connection.export
		);

	o_reg32_1 : component NiosBase_o_reg32_0
		port map (
			clk        => clk_clk,                                        --                 clk.clk
			reset_n    => rst_controller_001_reset_out_reset_ports_inv,   --               reset.reset_n
			address    => mm_interconnect_0_o_reg32_1_s1_address,         --                  s1.address
			write_n    => mm_interconnect_0_o_reg32_1_s1_write_ports_inv, --                    .write_n
			writedata  => mm_interconnect_0_o_reg32_1_s1_writedata,       --                    .writedata
			chipselect => mm_interconnect_0_o_reg32_1_s1_chipselect,      --                    .chipselect
			readdata   => mm_interconnect_0_o_reg32_1_s1_readdata,        --                    .readdata
			out_port   => o_reg32_1_export                                -- external_connection.export
		);

	o_reg32_10 : component NiosBase_o_reg32_0
		port map (
			clk        => clk_clk,                                         --                 clk.clk
			reset_n    => rst_controller_001_reset_out_reset_ports_inv,    --               reset.reset_n
			address    => mm_interconnect_0_o_reg32_10_s1_address,         --                  s1.address
			write_n    => mm_interconnect_0_o_reg32_10_s1_write_ports_inv, --                    .write_n
			writedata  => mm_interconnect_0_o_reg32_10_s1_writedata,       --                    .writedata
			chipselect => mm_interconnect_0_o_reg32_10_s1_chipselect,      --                    .chipselect
			readdata   => mm_interconnect_0_o_reg32_10_s1_readdata,        --                    .readdata
			out_port   => o_reg32_10_export                                -- external_connection.export
		);

	o_reg32_11 : component NiosBase_o_reg32_0
		port map (
			clk        => clk_clk,                                         --                 clk.clk
			reset_n    => rst_controller_001_reset_out_reset_ports_inv,    --               reset.reset_n
			address    => mm_interconnect_0_o_reg32_11_s1_address,         --                  s1.address
			write_n    => mm_interconnect_0_o_reg32_11_s1_write_ports_inv, --                    .write_n
			writedata  => mm_interconnect_0_o_reg32_11_s1_writedata,       --                    .writedata
			chipselect => mm_interconnect_0_o_reg32_11_s1_chipselect,      --                    .chipselect
			readdata   => mm_interconnect_0_o_reg32_11_s1_readdata,        --                    .readdata
			out_port   => o_reg32_11_export                                -- external_connection.export
		);

	o_reg32_12 : component NiosBase_o_reg32_0
		port map (
			clk        => clk_clk,                                         --                 clk.clk
			reset_n    => rst_controller_001_reset_out_reset_ports_inv,    --               reset.reset_n
			address    => mm_interconnect_0_o_reg32_12_s1_address,         --                  s1.address
			write_n    => mm_interconnect_0_o_reg32_12_s1_write_ports_inv, --                    .write_n
			writedata  => mm_interconnect_0_o_reg32_12_s1_writedata,       --                    .writedata
			chipselect => mm_interconnect_0_o_reg32_12_s1_chipselect,      --                    .chipselect
			readdata   => mm_interconnect_0_o_reg32_12_s1_readdata,        --                    .readdata
			out_port   => o_reg32_12_export                                -- external_connection.export
		);

	o_reg32_13 : component NiosBase_o_reg32_0
		port map (
			clk        => clk_clk,                                         --                 clk.clk
			reset_n    => rst_controller_001_reset_out_reset_ports_inv,    --               reset.reset_n
			address    => mm_interconnect_0_o_reg32_13_s1_address,         --                  s1.address
			write_n    => mm_interconnect_0_o_reg32_13_s1_write_ports_inv, --                    .write_n
			writedata  => mm_interconnect_0_o_reg32_13_s1_writedata,       --                    .writedata
			chipselect => mm_interconnect_0_o_reg32_13_s1_chipselect,      --                    .chipselect
			readdata   => mm_interconnect_0_o_reg32_13_s1_readdata,        --                    .readdata
			out_port   => o_reg32_13_export                                -- external_connection.export
		);

	o_reg32_2 : component NiosBase_o_reg32_0
		port map (
			clk        => clk_clk,                                        --                 clk.clk
			reset_n    => rst_controller_001_reset_out_reset_ports_inv,   --               reset.reset_n
			address    => mm_interconnect_0_o_reg32_2_s1_address,         --                  s1.address
			write_n    => mm_interconnect_0_o_reg32_2_s1_write_ports_inv, --                    .write_n
			writedata  => mm_interconnect_0_o_reg32_2_s1_writedata,       --                    .writedata
			chipselect => mm_interconnect_0_o_reg32_2_s1_chipselect,      --                    .chipselect
			readdata   => mm_interconnect_0_o_reg32_2_s1_readdata,        --                    .readdata
			out_port   => o_reg32_2_export                                -- external_connection.export
		);

	o_reg32_3 : component NiosBase_o_reg32_0
		port map (
			clk        => clk_clk,                                        --                 clk.clk
			reset_n    => rst_controller_001_reset_out_reset_ports_inv,   --               reset.reset_n
			address    => mm_interconnect_0_o_reg32_3_s1_address,         --                  s1.address
			write_n    => mm_interconnect_0_o_reg32_3_s1_write_ports_inv, --                    .write_n
			writedata  => mm_interconnect_0_o_reg32_3_s1_writedata,       --                    .writedata
			chipselect => mm_interconnect_0_o_reg32_3_s1_chipselect,      --                    .chipselect
			readdata   => mm_interconnect_0_o_reg32_3_s1_readdata,        --                    .readdata
			out_port   => o_reg32_3_export                                -- external_connection.export
		);

	o_reg32_4 : component NiosBase_o_reg32_0
		port map (
			clk        => clk_clk,                                        --                 clk.clk
			reset_n    => rst_controller_001_reset_out_reset_ports_inv,   --               reset.reset_n
			address    => mm_interconnect_0_o_reg32_4_s1_address,         --                  s1.address
			write_n    => mm_interconnect_0_o_reg32_4_s1_write_ports_inv, --                    .write_n
			writedata  => mm_interconnect_0_o_reg32_4_s1_writedata,       --                    .writedata
			chipselect => mm_interconnect_0_o_reg32_4_s1_chipselect,      --                    .chipselect
			readdata   => mm_interconnect_0_o_reg32_4_s1_readdata,        --                    .readdata
			out_port   => o_reg32_4_export                                -- external_connection.export
		);

	o_reg32_5 : component NiosBase_o_reg32_0
		port map (
			clk        => clk_clk,                                        --                 clk.clk
			reset_n    => rst_controller_001_reset_out_reset_ports_inv,   --               reset.reset_n
			address    => mm_interconnect_0_o_reg32_5_s1_address,         --                  s1.address
			write_n    => mm_interconnect_0_o_reg32_5_s1_write_ports_inv, --                    .write_n
			writedata  => mm_interconnect_0_o_reg32_5_s1_writedata,       --                    .writedata
			chipselect => mm_interconnect_0_o_reg32_5_s1_chipselect,      --                    .chipselect
			readdata   => mm_interconnect_0_o_reg32_5_s1_readdata,        --                    .readdata
			out_port   => o_reg32_5_export                                -- external_connection.export
		);

	o_reg32_6 : component NiosBase_o_reg32_0
		port map (
			clk        => clk_clk,                                        --                 clk.clk
			reset_n    => rst_controller_002_reset_out_reset_ports_inv,   --               reset.reset_n
			address    => mm_interconnect_0_o_reg32_6_s1_address,         --                  s1.address
			write_n    => mm_interconnect_0_o_reg32_6_s1_write_ports_inv, --                    .write_n
			writedata  => mm_interconnect_0_o_reg32_6_s1_writedata,       --                    .writedata
			chipselect => mm_interconnect_0_o_reg32_6_s1_chipselect,      --                    .chipselect
			readdata   => mm_interconnect_0_o_reg32_6_s1_readdata,        --                    .readdata
			out_port   => o_reg32_6_export                                -- external_connection.export
		);

	o_reg32_7 : component NiosBase_o_reg32_0
		port map (
			clk        => clk_clk,                                        --                 clk.clk
			reset_n    => rst_controller_001_reset_out_reset_ports_inv,   --               reset.reset_n
			address    => mm_interconnect_0_o_reg32_7_s1_address,         --                  s1.address
			write_n    => mm_interconnect_0_o_reg32_7_s1_write_ports_inv, --                    .write_n
			writedata  => mm_interconnect_0_o_reg32_7_s1_writedata,       --                    .writedata
			chipselect => mm_interconnect_0_o_reg32_7_s1_chipselect,      --                    .chipselect
			readdata   => mm_interconnect_0_o_reg32_7_s1_readdata,        --                    .readdata
			out_port   => o_reg32_7_export                                -- external_connection.export
		);

	o_reg32_8 : component NiosBase_o_reg32_0
		port map (
			clk        => clk_clk,                                        --                 clk.clk
			reset_n    => rst_controller_001_reset_out_reset_ports_inv,   --               reset.reset_n
			address    => mm_interconnect_0_o_reg32_8_s1_address,         --                  s1.address
			write_n    => mm_interconnect_0_o_reg32_8_s1_write_ports_inv, --                    .write_n
			writedata  => mm_interconnect_0_o_reg32_8_s1_writedata,       --                    .writedata
			chipselect => mm_interconnect_0_o_reg32_8_s1_chipselect,      --                    .chipselect
			readdata   => mm_interconnect_0_o_reg32_8_s1_readdata,        --                    .readdata
			out_port   => o_reg32_8_export                                -- external_connection.export
		);

	o_reg32_9 : component NiosBase_o_reg32_0
		port map (
			clk        => clk_clk,                                        --                 clk.clk
			reset_n    => rst_controller_001_reset_out_reset_ports_inv,   --               reset.reset_n
			address    => mm_interconnect_0_o_reg32_9_s1_address,         --                  s1.address
			write_n    => mm_interconnect_0_o_reg32_9_s1_write_ports_inv, --                    .write_n
			writedata  => mm_interconnect_0_o_reg32_9_s1_writedata,       --                    .writedata
			chipselect => mm_interconnect_0_o_reg32_9_s1_chipselect,      --                    .chipselect
			readdata   => mm_interconnect_0_o_reg32_9_s1_readdata,        --                    .readdata
			out_port   => o_reg32_9_export                                -- external_connection.export
		);

	onchip_memory2_0 : component NiosBase_onchip_memory2_0
		port map (
			clk        => clk_clk,                                          --   clk1.clk
			address    => mm_interconnect_0_onchip_memory2_0_s1_address,    --     s1.address
			clken      => mm_interconnect_0_onchip_memory2_0_s1_clken,      --       .clken
			chipselect => mm_interconnect_0_onchip_memory2_0_s1_chipselect, --       .chipselect
			write      => mm_interconnect_0_onchip_memory2_0_s1_write,      --       .write
			readdata   => mm_interconnect_0_onchip_memory2_0_s1_readdata,   --       .readdata
			writedata  => mm_interconnect_0_onchip_memory2_0_s1_writedata,  --       .writedata
			byteenable => mm_interconnect_0_onchip_memory2_0_s1_byteenable, --       .byteenable
			reset      => rst_controller_002_reset_out_reset,               -- reset1.reset
			reset_req  => rst_controller_002_reset_out_reset_req,           --       .reset_req
			freeze     => '0'                                               -- (terminated)
		);

	timer_0 : component NiosBase_timer_0
		port map (
			clk        => clk_clk,                                      --   clk.clk
			reset_n    => rst_controller_001_reset_out_reset_ports_inv, -- reset.reset_n
			address    => mm_interconnect_0_timer_0_s1_address,         --    s1.address
			writedata  => mm_interconnect_0_timer_0_s1_writedata,       --      .writedata
			readdata   => mm_interconnect_0_timer_0_s1_readdata,        --      .readdata
			chipselect => mm_interconnect_0_timer_0_s1_chipselect,      --      .chipselect
			write_n    => mm_interconnect_0_timer_0_s1_write_ports_inv, --      .write_n
			irq        => irq_mapper_receiver0_irq                      --   irq.irq
		);

	timer_1 : component NiosBase_timer_1
		port map (
			clk        => clk_clk,                                      --   clk.clk
			reset_n    => rst_controller_001_reset_out_reset_ports_inv, -- reset.reset_n
			address    => mm_interconnect_0_timer_1_s1_address,         --    s1.address
			writedata  => mm_interconnect_0_timer_1_s1_writedata,       --      .writedata
			readdata   => mm_interconnect_0_timer_1_s1_readdata,        --      .readdata
			chipselect => mm_interconnect_0_timer_1_s1_chipselect,      --      .chipselect
			write_n    => mm_interconnect_0_timer_1_s1_write_ports_inv, --      .write_n
			irq        => irq_mapper_receiver1_irq                      --   irq.irq
		);

	uart_0 : component NiosBase_uart_0
		port map (
			clk           => clk_clk,                                      --                 clk.clk
			reset_n       => rst_controller_001_reset_out_reset_ports_inv, --               reset.reset_n
			address       => mm_interconnect_0_uart_0_s1_address,          --                  s1.address
			begintransfer => mm_interconnect_0_uart_0_s1_begintransfer,    --                    .begintransfer
			chipselect    => mm_interconnect_0_uart_0_s1_chipselect,       --                    .chipselect
			read_n        => mm_interconnect_0_uart_0_s1_read_ports_inv,   --                    .read_n
			write_n       => mm_interconnect_0_uart_0_s1_write_ports_inv,  --                    .write_n
			writedata     => mm_interconnect_0_uart_0_s1_writedata,        --                    .writedata
			readdata      => mm_interconnect_0_uart_0_s1_readdata,         --                    .readdata
			rxd           => uart_rxd,                                     -- external_connection.export
			txd           => uart_txd,                                     --                    .export
			irq           => irq_mapper_receiver3_irq                      --                 irq.irq
		);

	mm_interconnect_0 : component NiosBase_mm_interconnect_0
		port map (
			clk_0_clk_clk                                  => clk_clk,                                                    --                                clk_0_clk.clk
			dma_rx_0_reset_reset_bridge_in_reset_reset     => rst_controller_001_reset_out_reset,                         --     dma_rx_0_reset_reset_bridge_in_reset.reset
			nios2_gen2_0_reset_reset_bridge_in_reset_reset => rst_controller_002_reset_out_reset,                         -- nios2_gen2_0_reset_reset_bridge_in_reset.reset
			timer_0_reset_reset_bridge_in_reset_reset      => rst_controller_001_reset_out_reset,                         --      timer_0_reset_reset_bridge_in_reset.reset
			nios2_gen2_0_data_master_address               => nios2_gen2_0_data_master_address,                           --                 nios2_gen2_0_data_master.address
			nios2_gen2_0_data_master_waitrequest           => nios2_gen2_0_data_master_waitrequest,                       --                                         .waitrequest
			nios2_gen2_0_data_master_byteenable            => nios2_gen2_0_data_master_byteenable,                        --                                         .byteenable
			nios2_gen2_0_data_master_read                  => nios2_gen2_0_data_master_read,                              --                                         .read
			nios2_gen2_0_data_master_readdata              => nios2_gen2_0_data_master_readdata,                          --                                         .readdata
			nios2_gen2_0_data_master_write                 => nios2_gen2_0_data_master_write,                             --                                         .write
			nios2_gen2_0_data_master_writedata             => nios2_gen2_0_data_master_writedata,                         --                                         .writedata
			nios2_gen2_0_data_master_debugaccess           => nios2_gen2_0_data_master_debugaccess,                       --                                         .debugaccess
			nios2_gen2_0_instruction_master_address        => nios2_gen2_0_instruction_master_address,                    --          nios2_gen2_0_instruction_master.address
			nios2_gen2_0_instruction_master_waitrequest    => nios2_gen2_0_instruction_master_waitrequest,                --                                         .waitrequest
			nios2_gen2_0_instruction_master_read           => nios2_gen2_0_instruction_master_read,                       --                                         .read
			nios2_gen2_0_instruction_master_readdata       => nios2_gen2_0_instruction_master_readdata,                   --                                         .readdata
			dma_rx_0_av_mm_address                         => mm_interconnect_0_dma_rx_0_av_mm_address,                   --                           dma_rx_0_av_mm.address
			dma_rx_0_av_mm_write                           => mm_interconnect_0_dma_rx_0_av_mm_write,                     --                                         .write
			dma_rx_0_av_mm_read                            => mm_interconnect_0_dma_rx_0_av_mm_read,                      --                                         .read
			dma_rx_0_av_mm_readdata                        => mm_interconnect_0_dma_rx_0_av_mm_readdata,                  --                                         .readdata
			dma_rx_0_av_mm_writedata                       => mm_interconnect_0_dma_rx_0_av_mm_writedata,                 --                                         .writedata
			dma_rx_0_av_mm_waitrequest                     => mm_interconnect_0_dma_rx_0_av_mm_waitrequest,               --                                         .waitrequest
			i_reg16_0_s1_address                           => mm_interconnect_0_i_reg16_0_s1_address,                     --                             i_reg16_0_s1.address
			i_reg16_0_s1_readdata                          => mm_interconnect_0_i_reg16_0_s1_readdata,                    --                                         .readdata
			i_reg16_1_s1_address                           => mm_interconnect_0_i_reg16_1_s1_address,                     --                             i_reg16_1_s1.address
			i_reg16_1_s1_readdata                          => mm_interconnect_0_i_reg16_1_s1_readdata,                    --                                         .readdata
			i_reg16_2_s1_address                           => mm_interconnect_0_i_reg16_2_s1_address,                     --                             i_reg16_2_s1.address
			i_reg16_2_s1_readdata                          => mm_interconnect_0_i_reg16_2_s1_readdata,                    --                                         .readdata
			i_reg16_3_s1_address                           => mm_interconnect_0_i_reg16_3_s1_address,                     --                             i_reg16_3_s1.address
			i_reg16_3_s1_readdata                          => mm_interconnect_0_i_reg16_3_s1_readdata,                    --                                         .readdata
			i_reg16_4_s1_address                           => mm_interconnect_0_i_reg16_4_s1_address,                     --                             i_reg16_4_s1.address
			i_reg16_4_s1_readdata                          => mm_interconnect_0_i_reg16_4_s1_readdata,                    --                                         .readdata
			i_reg16_5_s1_address                           => mm_interconnect_0_i_reg16_5_s1_address,                     --                             i_reg16_5_s1.address
			i_reg16_5_s1_readdata                          => mm_interconnect_0_i_reg16_5_s1_readdata,                    --                                         .readdata
			i_reg16_6_s1_address                           => mm_interconnect_0_i_reg16_6_s1_address,                     --                             i_reg16_6_s1.address
			i_reg16_6_s1_readdata                          => mm_interconnect_0_i_reg16_6_s1_readdata,                    --                                         .readdata
			i_reg32_0_s1_address                           => mm_interconnect_0_i_reg32_0_s1_address,                     --                             i_reg32_0_s1.address
			i_reg32_0_s1_write                             => mm_interconnect_0_i_reg32_0_s1_write,                       --                                         .write
			i_reg32_0_s1_readdata                          => mm_interconnect_0_i_reg32_0_s1_readdata,                    --                                         .readdata
			i_reg32_0_s1_writedata                         => mm_interconnect_0_i_reg32_0_s1_writedata,                   --                                         .writedata
			i_reg32_0_s1_chipselect                        => mm_interconnect_0_i_reg32_0_s1_chipselect,                  --                                         .chipselect
			i_reg32_1_s1_address                           => mm_interconnect_0_i_reg32_1_s1_address,                     --                             i_reg32_1_s1.address
			i_reg32_1_s1_readdata                          => mm_interconnect_0_i_reg32_1_s1_readdata,                    --                                         .readdata
			i_reg32_2_s1_address                           => mm_interconnect_0_i_reg32_2_s1_address,                     --                             i_reg32_2_s1.address
			i_reg32_2_s1_readdata                          => mm_interconnect_0_i_reg32_2_s1_readdata,                    --                                         .readdata
			i_reg32_3_s1_address                           => mm_interconnect_0_i_reg32_3_s1_address,                     --                             i_reg32_3_s1.address
			i_reg32_3_s1_readdata                          => mm_interconnect_0_i_reg32_3_s1_readdata,                    --                                         .readdata
			i_reg32_4_s1_address                           => mm_interconnect_0_i_reg32_4_s1_address,                     --                             i_reg32_4_s1.address
			i_reg32_4_s1_readdata                          => mm_interconnect_0_i_reg32_4_s1_readdata,                    --                                         .readdata
			i_reg32_5_s1_address                           => mm_interconnect_0_i_reg32_5_s1_address,                     --                             i_reg32_5_s1.address
			i_reg32_5_s1_readdata                          => mm_interconnect_0_i_reg32_5_s1_readdata,                    --                                         .readdata
			i_reg32_6_s1_address                           => mm_interconnect_0_i_reg32_6_s1_address,                     --                             i_reg32_6_s1.address
			i_reg32_6_s1_readdata                          => mm_interconnect_0_i_reg32_6_s1_readdata,                    --                                         .readdata
			i_reg32_7_s1_address                           => mm_interconnect_0_i_reg32_7_s1_address,                     --                             i_reg32_7_s1.address
			i_reg32_7_s1_readdata                          => mm_interconnect_0_i_reg32_7_s1_readdata,                    --                                         .readdata
			nios2_gen2_0_debug_mem_slave_address           => mm_interconnect_0_nios2_gen2_0_debug_mem_slave_address,     --             nios2_gen2_0_debug_mem_slave.address
			nios2_gen2_0_debug_mem_slave_write             => mm_interconnect_0_nios2_gen2_0_debug_mem_slave_write,       --                                         .write
			nios2_gen2_0_debug_mem_slave_read              => mm_interconnect_0_nios2_gen2_0_debug_mem_slave_read,        --                                         .read
			nios2_gen2_0_debug_mem_slave_readdata          => mm_interconnect_0_nios2_gen2_0_debug_mem_slave_readdata,    --                                         .readdata
			nios2_gen2_0_debug_mem_slave_writedata         => mm_interconnect_0_nios2_gen2_0_debug_mem_slave_writedata,   --                                         .writedata
			nios2_gen2_0_debug_mem_slave_byteenable        => mm_interconnect_0_nios2_gen2_0_debug_mem_slave_byteenable,  --                                         .byteenable
			nios2_gen2_0_debug_mem_slave_waitrequest       => mm_interconnect_0_nios2_gen2_0_debug_mem_slave_waitrequest, --                                         .waitrequest
			nios2_gen2_0_debug_mem_slave_debugaccess       => mm_interconnect_0_nios2_gen2_0_debug_mem_slave_debugaccess, --                                         .debugaccess
			o_reg32_0_s1_address                           => mm_interconnect_0_o_reg32_0_s1_address,                     --                             o_reg32_0_s1.address
			o_reg32_0_s1_write                             => mm_interconnect_0_o_reg32_0_s1_write,                       --                                         .write
			o_reg32_0_s1_readdata                          => mm_interconnect_0_o_reg32_0_s1_readdata,                    --                                         .readdata
			o_reg32_0_s1_writedata                         => mm_interconnect_0_o_reg32_0_s1_writedata,                   --                                         .writedata
			o_reg32_0_s1_chipselect                        => mm_interconnect_0_o_reg32_0_s1_chipselect,                  --                                         .chipselect
			o_reg32_1_s1_address                           => mm_interconnect_0_o_reg32_1_s1_address,                     --                             o_reg32_1_s1.address
			o_reg32_1_s1_write                             => mm_interconnect_0_o_reg32_1_s1_write,                       --                                         .write
			o_reg32_1_s1_readdata                          => mm_interconnect_0_o_reg32_1_s1_readdata,                    --                                         .readdata
			o_reg32_1_s1_writedata                         => mm_interconnect_0_o_reg32_1_s1_writedata,                   --                                         .writedata
			o_reg32_1_s1_chipselect                        => mm_interconnect_0_o_reg32_1_s1_chipselect,                  --                                         .chipselect
			o_reg32_10_s1_address                          => mm_interconnect_0_o_reg32_10_s1_address,                    --                            o_reg32_10_s1.address
			o_reg32_10_s1_write                            => mm_interconnect_0_o_reg32_10_s1_write,                      --                                         .write
			o_reg32_10_s1_readdata                         => mm_interconnect_0_o_reg32_10_s1_readdata,                   --                                         .readdata
			o_reg32_10_s1_writedata                        => mm_interconnect_0_o_reg32_10_s1_writedata,                  --                                         .writedata
			o_reg32_10_s1_chipselect                       => mm_interconnect_0_o_reg32_10_s1_chipselect,                 --                                         .chipselect
			o_reg32_11_s1_address                          => mm_interconnect_0_o_reg32_11_s1_address,                    --                            o_reg32_11_s1.address
			o_reg32_11_s1_write                            => mm_interconnect_0_o_reg32_11_s1_write,                      --                                         .write
			o_reg32_11_s1_readdata                         => mm_interconnect_0_o_reg32_11_s1_readdata,                   --                                         .readdata
			o_reg32_11_s1_writedata                        => mm_interconnect_0_o_reg32_11_s1_writedata,                  --                                         .writedata
			o_reg32_11_s1_chipselect                       => mm_interconnect_0_o_reg32_11_s1_chipselect,                 --                                         .chipselect
			o_reg32_12_s1_address                          => mm_interconnect_0_o_reg32_12_s1_address,                    --                            o_reg32_12_s1.address
			o_reg32_12_s1_write                            => mm_interconnect_0_o_reg32_12_s1_write,                      --                                         .write
			o_reg32_12_s1_readdata                         => mm_interconnect_0_o_reg32_12_s1_readdata,                   --                                         .readdata
			o_reg32_12_s1_writedata                        => mm_interconnect_0_o_reg32_12_s1_writedata,                  --                                         .writedata
			o_reg32_12_s1_chipselect                       => mm_interconnect_0_o_reg32_12_s1_chipselect,                 --                                         .chipselect
			o_reg32_13_s1_address                          => mm_interconnect_0_o_reg32_13_s1_address,                    --                            o_reg32_13_s1.address
			o_reg32_13_s1_write                            => mm_interconnect_0_o_reg32_13_s1_write,                      --                                         .write
			o_reg32_13_s1_readdata                         => mm_interconnect_0_o_reg32_13_s1_readdata,                   --                                         .readdata
			o_reg32_13_s1_writedata                        => mm_interconnect_0_o_reg32_13_s1_writedata,                  --                                         .writedata
			o_reg32_13_s1_chipselect                       => mm_interconnect_0_o_reg32_13_s1_chipselect,                 --                                         .chipselect
			o_reg32_2_s1_address                           => mm_interconnect_0_o_reg32_2_s1_address,                     --                             o_reg32_2_s1.address
			o_reg32_2_s1_write                             => mm_interconnect_0_o_reg32_2_s1_write,                       --                                         .write
			o_reg32_2_s1_readdata                          => mm_interconnect_0_o_reg32_2_s1_readdata,                    --                                         .readdata
			o_reg32_2_s1_writedata                         => mm_interconnect_0_o_reg32_2_s1_writedata,                   --                                         .writedata
			o_reg32_2_s1_chipselect                        => mm_interconnect_0_o_reg32_2_s1_chipselect,                  --                                         .chipselect
			o_reg32_3_s1_address                           => mm_interconnect_0_o_reg32_3_s1_address,                     --                             o_reg32_3_s1.address
			o_reg32_3_s1_write                             => mm_interconnect_0_o_reg32_3_s1_write,                       --                                         .write
			o_reg32_3_s1_readdata                          => mm_interconnect_0_o_reg32_3_s1_readdata,                    --                                         .readdata
			o_reg32_3_s1_writedata                         => mm_interconnect_0_o_reg32_3_s1_writedata,                   --                                         .writedata
			o_reg32_3_s1_chipselect                        => mm_interconnect_0_o_reg32_3_s1_chipselect,                  --                                         .chipselect
			o_reg32_4_s1_address                           => mm_interconnect_0_o_reg32_4_s1_address,                     --                             o_reg32_4_s1.address
			o_reg32_4_s1_write                             => mm_interconnect_0_o_reg32_4_s1_write,                       --                                         .write
			o_reg32_4_s1_readdata                          => mm_interconnect_0_o_reg32_4_s1_readdata,                    --                                         .readdata
			o_reg32_4_s1_writedata                         => mm_interconnect_0_o_reg32_4_s1_writedata,                   --                                         .writedata
			o_reg32_4_s1_chipselect                        => mm_interconnect_0_o_reg32_4_s1_chipselect,                  --                                         .chipselect
			o_reg32_5_s1_address                           => mm_interconnect_0_o_reg32_5_s1_address,                     --                             o_reg32_5_s1.address
			o_reg32_5_s1_write                             => mm_interconnect_0_o_reg32_5_s1_write,                       --                                         .write
			o_reg32_5_s1_readdata                          => mm_interconnect_0_o_reg32_5_s1_readdata,                    --                                         .readdata
			o_reg32_5_s1_writedata                         => mm_interconnect_0_o_reg32_5_s1_writedata,                   --                                         .writedata
			o_reg32_5_s1_chipselect                        => mm_interconnect_0_o_reg32_5_s1_chipselect,                  --                                         .chipselect
			o_reg32_6_s1_address                           => mm_interconnect_0_o_reg32_6_s1_address,                     --                             o_reg32_6_s1.address
			o_reg32_6_s1_write                             => mm_interconnect_0_o_reg32_6_s1_write,                       --                                         .write
			o_reg32_6_s1_readdata                          => mm_interconnect_0_o_reg32_6_s1_readdata,                    --                                         .readdata
			o_reg32_6_s1_writedata                         => mm_interconnect_0_o_reg32_6_s1_writedata,                   --                                         .writedata
			o_reg32_6_s1_chipselect                        => mm_interconnect_0_o_reg32_6_s1_chipselect,                  --                                         .chipselect
			o_reg32_7_s1_address                           => mm_interconnect_0_o_reg32_7_s1_address,                     --                             o_reg32_7_s1.address
			o_reg32_7_s1_write                             => mm_interconnect_0_o_reg32_7_s1_write,                       --                                         .write
			o_reg32_7_s1_readdata                          => mm_interconnect_0_o_reg32_7_s1_readdata,                    --                                         .readdata
			o_reg32_7_s1_writedata                         => mm_interconnect_0_o_reg32_7_s1_writedata,                   --                                         .writedata
			o_reg32_7_s1_chipselect                        => mm_interconnect_0_o_reg32_7_s1_chipselect,                  --                                         .chipselect
			o_reg32_8_s1_address                           => mm_interconnect_0_o_reg32_8_s1_address,                     --                             o_reg32_8_s1.address
			o_reg32_8_s1_write                             => mm_interconnect_0_o_reg32_8_s1_write,                       --                                         .write
			o_reg32_8_s1_readdata                          => mm_interconnect_0_o_reg32_8_s1_readdata,                    --                                         .readdata
			o_reg32_8_s1_writedata                         => mm_interconnect_0_o_reg32_8_s1_writedata,                   --                                         .writedata
			o_reg32_8_s1_chipselect                        => mm_interconnect_0_o_reg32_8_s1_chipselect,                  --                                         .chipselect
			o_reg32_9_s1_address                           => mm_interconnect_0_o_reg32_9_s1_address,                     --                             o_reg32_9_s1.address
			o_reg32_9_s1_write                             => mm_interconnect_0_o_reg32_9_s1_write,                       --                                         .write
			o_reg32_9_s1_readdata                          => mm_interconnect_0_o_reg32_9_s1_readdata,                    --                                         .readdata
			o_reg32_9_s1_writedata                         => mm_interconnect_0_o_reg32_9_s1_writedata,                   --                                         .writedata
			o_reg32_9_s1_chipselect                        => mm_interconnect_0_o_reg32_9_s1_chipselect,                  --                                         .chipselect
			onchip_memory2_0_s1_address                    => mm_interconnect_0_onchip_memory2_0_s1_address,              --                      onchip_memory2_0_s1.address
			onchip_memory2_0_s1_write                      => mm_interconnect_0_onchip_memory2_0_s1_write,                --                                         .write
			onchip_memory2_0_s1_readdata                   => mm_interconnect_0_onchip_memory2_0_s1_readdata,             --                                         .readdata
			onchip_memory2_0_s1_writedata                  => mm_interconnect_0_onchip_memory2_0_s1_writedata,            --                                         .writedata
			onchip_memory2_0_s1_byteenable                 => mm_interconnect_0_onchip_memory2_0_s1_byteenable,           --                                         .byteenable
			onchip_memory2_0_s1_chipselect                 => mm_interconnect_0_onchip_memory2_0_s1_chipselect,           --                                         .chipselect
			onchip_memory2_0_s1_clken                      => mm_interconnect_0_onchip_memory2_0_s1_clken,                --                                         .clken
			timer_0_s1_address                             => mm_interconnect_0_timer_0_s1_address,                       --                               timer_0_s1.address
			timer_0_s1_write                               => mm_interconnect_0_timer_0_s1_write,                         --                                         .write
			timer_0_s1_readdata                            => mm_interconnect_0_timer_0_s1_readdata,                      --                                         .readdata
			timer_0_s1_writedata                           => mm_interconnect_0_timer_0_s1_writedata,                     --                                         .writedata
			timer_0_s1_chipselect                          => mm_interconnect_0_timer_0_s1_chipselect,                    --                                         .chipselect
			timer_1_s1_address                             => mm_interconnect_0_timer_1_s1_address,                       --                               timer_1_s1.address
			timer_1_s1_write                               => mm_interconnect_0_timer_1_s1_write,                         --                                         .write
			timer_1_s1_readdata                            => mm_interconnect_0_timer_1_s1_readdata,                      --                                         .readdata
			timer_1_s1_writedata                           => mm_interconnect_0_timer_1_s1_writedata,                     --                                         .writedata
			timer_1_s1_chipselect                          => mm_interconnect_0_timer_1_s1_chipselect,                    --                                         .chipselect
			uart_0_s1_address                              => mm_interconnect_0_uart_0_s1_address,                        --                                uart_0_s1.address
			uart_0_s1_write                                => mm_interconnect_0_uart_0_s1_write,                          --                                         .write
			uart_0_s1_read                                 => mm_interconnect_0_uart_0_s1_read,                           --                                         .read
			uart_0_s1_readdata                             => mm_interconnect_0_uart_0_s1_readdata,                       --                                         .readdata
			uart_0_s1_writedata                            => mm_interconnect_0_uart_0_s1_writedata,                      --                                         .writedata
			uart_0_s1_begintransfer                        => mm_interconnect_0_uart_0_s1_begintransfer,                  --                                         .begintransfer
			uart_0_s1_chipselect                           => mm_interconnect_0_uart_0_s1_chipselect                      --                                         .chipselect
		);

	irq_mapper : component NiosBase_irq_mapper
		port map (
			clk           => clk_clk,                            --       clk.clk
			reset         => rst_controller_002_reset_out_reset, -- clk_reset.reset
			receiver0_irq => irq_mapper_receiver0_irq,           -- receiver0.irq
			receiver1_irq => irq_mapper_receiver1_irq,           -- receiver1.irq
			receiver2_irq => irq_mapper_receiver2_irq,           -- receiver2.irq
			receiver3_irq => irq_mapper_receiver3_irq,           -- receiver3.irq
			sender_irq    => nios2_gen2_0_irq_irq                --    sender.irq
		);

	rst_controller : component niosbase_rst_controller
		generic map (
			NUM_RESET_INPUTS          => 2,
			OUTPUT_RESET_SYNC_EDGES   => "both",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => reset_reset_n_ports_inv,                -- reset_in0.reset
			reset_in1      => nios2_gen2_0_debug_reset_request_reset, -- reset_in1.reset
			clk            => clk_clk,                                --       clk.clk
			reset_out      => rst_controller_reset_out_reset,         -- reset_out.reset
			reset_req      => open,                                   -- (terminated)
			reset_req_in0  => '0',                                    -- (terminated)
			reset_req_in1  => '0',                                    -- (terminated)
			reset_in2      => '0',                                    -- (terminated)
			reset_req_in2  => '0',                                    -- (terminated)
			reset_in3      => '0',                                    -- (terminated)
			reset_req_in3  => '0',                                    -- (terminated)
			reset_in4      => '0',                                    -- (terminated)
			reset_req_in4  => '0',                                    -- (terminated)
			reset_in5      => '0',                                    -- (terminated)
			reset_req_in5  => '0',                                    -- (terminated)
			reset_in6      => '0',                                    -- (terminated)
			reset_req_in6  => '0',                                    -- (terminated)
			reset_in7      => '0',                                    -- (terminated)
			reset_req_in7  => '0',                                    -- (terminated)
			reset_in8      => '0',                                    -- (terminated)
			reset_req_in8  => '0',                                    -- (terminated)
			reset_in9      => '0',                                    -- (terminated)
			reset_req_in9  => '0',                                    -- (terminated)
			reset_in10     => '0',                                    -- (terminated)
			reset_req_in10 => '0',                                    -- (terminated)
			reset_in11     => '0',                                    -- (terminated)
			reset_req_in11 => '0',                                    -- (terminated)
			reset_in12     => '0',                                    -- (terminated)
			reset_req_in12 => '0',                                    -- (terminated)
			reset_in13     => '0',                                    -- (terminated)
			reset_req_in13 => '0',                                    -- (terminated)
			reset_in14     => '0',                                    -- (terminated)
			reset_req_in14 => '0',                                    -- (terminated)
			reset_in15     => '0',                                    -- (terminated)
			reset_req_in15 => '0'                                     -- (terminated)
		);

	rst_controller_001 : component niosbase_rst_controller
		generic map (
			NUM_RESET_INPUTS          => 2,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => reset_reset_n_ports_inv,                -- reset_in0.reset
			reset_in1      => nios2_gen2_0_debug_reset_request_reset, -- reset_in1.reset
			clk            => clk_clk,                                --       clk.clk
			reset_out      => rst_controller_001_reset_out_reset,     -- reset_out.reset
			reset_req      => open,                                   -- (terminated)
			reset_req_in0  => '0',                                    -- (terminated)
			reset_req_in1  => '0',                                    -- (terminated)
			reset_in2      => '0',                                    -- (terminated)
			reset_req_in2  => '0',                                    -- (terminated)
			reset_in3      => '0',                                    -- (terminated)
			reset_req_in3  => '0',                                    -- (terminated)
			reset_in4      => '0',                                    -- (terminated)
			reset_req_in4  => '0',                                    -- (terminated)
			reset_in5      => '0',                                    -- (terminated)
			reset_req_in5  => '0',                                    -- (terminated)
			reset_in6      => '0',                                    -- (terminated)
			reset_req_in6  => '0',                                    -- (terminated)
			reset_in7      => '0',                                    -- (terminated)
			reset_req_in7  => '0',                                    -- (terminated)
			reset_in8      => '0',                                    -- (terminated)
			reset_req_in8  => '0',                                    -- (terminated)
			reset_in9      => '0',                                    -- (terminated)
			reset_req_in9  => '0',                                    -- (terminated)
			reset_in10     => '0',                                    -- (terminated)
			reset_req_in10 => '0',                                    -- (terminated)
			reset_in11     => '0',                                    -- (terminated)
			reset_req_in11 => '0',                                    -- (terminated)
			reset_in12     => '0',                                    -- (terminated)
			reset_req_in12 => '0',                                    -- (terminated)
			reset_in13     => '0',                                    -- (terminated)
			reset_req_in13 => '0',                                    -- (terminated)
			reset_in14     => '0',                                    -- (terminated)
			reset_req_in14 => '0',                                    -- (terminated)
			reset_in15     => '0',                                    -- (terminated)
			reset_req_in15 => '0'                                     -- (terminated)
		);

	rst_controller_002 : component niosbase_rst_controller_002
		generic map (
			NUM_RESET_INPUTS          => 1,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 1,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => reset_reset_n_ports_inv,                -- reset_in0.reset
			clk            => clk_clk,                                --       clk.clk
			reset_out      => rst_controller_002_reset_out_reset,     -- reset_out.reset
			reset_req      => rst_controller_002_reset_out_reset_req, --          .reset_req
			reset_req_in0  => '0',                                    -- (terminated)
			reset_in1      => '0',                                    -- (terminated)
			reset_req_in1  => '0',                                    -- (terminated)
			reset_in2      => '0',                                    -- (terminated)
			reset_req_in2  => '0',                                    -- (terminated)
			reset_in3      => '0',                                    -- (terminated)
			reset_req_in3  => '0',                                    -- (terminated)
			reset_in4      => '0',                                    -- (terminated)
			reset_req_in4  => '0',                                    -- (terminated)
			reset_in5      => '0',                                    -- (terminated)
			reset_req_in5  => '0',                                    -- (terminated)
			reset_in6      => '0',                                    -- (terminated)
			reset_req_in6  => '0',                                    -- (terminated)
			reset_in7      => '0',                                    -- (terminated)
			reset_req_in7  => '0',                                    -- (terminated)
			reset_in8      => '0',                                    -- (terminated)
			reset_req_in8  => '0',                                    -- (terminated)
			reset_in9      => '0',                                    -- (terminated)
			reset_req_in9  => '0',                                    -- (terminated)
			reset_in10     => '0',                                    -- (terminated)
			reset_req_in10 => '0',                                    -- (terminated)
			reset_in11     => '0',                                    -- (terminated)
			reset_req_in11 => '0',                                    -- (terminated)
			reset_in12     => '0',                                    -- (terminated)
			reset_req_in12 => '0',                                    -- (terminated)
			reset_in13     => '0',                                    -- (terminated)
			reset_req_in13 => '0',                                    -- (terminated)
			reset_in14     => '0',                                    -- (terminated)
			reset_req_in14 => '0',                                    -- (terminated)
			reset_in15     => '0',                                    -- (terminated)
			reset_req_in15 => '0'                                     -- (terminated)
		);

	reset_reset_n_ports_inv <= not reset_reset_n;

	mm_interconnect_0_timer_0_s1_write_ports_inv <= not mm_interconnect_0_timer_0_s1_write;

	mm_interconnect_0_timer_1_s1_write_ports_inv <= not mm_interconnect_0_timer_1_s1_write;

	mm_interconnect_0_i_reg32_0_s1_write_ports_inv <= not mm_interconnect_0_i_reg32_0_s1_write;

	mm_interconnect_0_uart_0_s1_read_ports_inv <= not mm_interconnect_0_uart_0_s1_read;

	mm_interconnect_0_uart_0_s1_write_ports_inv <= not mm_interconnect_0_uart_0_s1_write;

	mm_interconnect_0_o_reg32_0_s1_write_ports_inv <= not mm_interconnect_0_o_reg32_0_s1_write;

	mm_interconnect_0_o_reg32_1_s1_write_ports_inv <= not mm_interconnect_0_o_reg32_1_s1_write;

	mm_interconnect_0_o_reg32_2_s1_write_ports_inv <= not mm_interconnect_0_o_reg32_2_s1_write;

	mm_interconnect_0_o_reg32_3_s1_write_ports_inv <= not mm_interconnect_0_o_reg32_3_s1_write;

	mm_interconnect_0_o_reg32_4_s1_write_ports_inv <= not mm_interconnect_0_o_reg32_4_s1_write;

	mm_interconnect_0_o_reg32_5_s1_write_ports_inv <= not mm_interconnect_0_o_reg32_5_s1_write;

	mm_interconnect_0_o_reg32_6_s1_write_ports_inv <= not mm_interconnect_0_o_reg32_6_s1_write;

	mm_interconnect_0_o_reg32_7_s1_write_ports_inv <= not mm_interconnect_0_o_reg32_7_s1_write;

	mm_interconnect_0_o_reg32_8_s1_write_ports_inv <= not mm_interconnect_0_o_reg32_8_s1_write;

	mm_interconnect_0_o_reg32_9_s1_write_ports_inv <= not mm_interconnect_0_o_reg32_9_s1_write;

	mm_interconnect_0_o_reg32_10_s1_write_ports_inv <= not mm_interconnect_0_o_reg32_10_s1_write;

	mm_interconnect_0_o_reg32_11_s1_write_ports_inv <= not mm_interconnect_0_o_reg32_11_s1_write;

	mm_interconnect_0_o_reg32_13_s1_write_ports_inv <= not mm_interconnect_0_o_reg32_13_s1_write;

	mm_interconnect_0_o_reg32_12_s1_write_ports_inv <= not mm_interconnect_0_o_reg32_12_s1_write;

	rst_controller_001_reset_out_reset_ports_inv <= not rst_controller_001_reset_out_reset;

	rst_controller_002_reset_out_reset_ports_inv <= not rst_controller_002_reset_out_reset;

end architecture rtl; -- of NiosBase
