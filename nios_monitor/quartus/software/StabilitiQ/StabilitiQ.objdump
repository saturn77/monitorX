
StabilitiQ.elf:     file format elf32-littlenios2
StabilitiQ.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020224

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000136c8 memsz 0x000136c8 flags r-x
    LOAD off    0x000146e8 vaddr 0x000336e8 paddr 0x00034374 align 2**12
         filesz 0x00000c8c memsz 0x00000c8c flags rw-
    LOAD off    0x00016000 vaddr 0x00035000 paddr 0x00035000 align 2**12
         filesz 0x00000000 memsz 0x00000204 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000123a0  00020224  00020224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001124  000325c4  000325c4  000135c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000c8c  000336e8  00034374  000146e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000204  00035000  00035000  00016000  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00035204  00035204  00015374  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00015374  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000011c8  00000000  00000000  000153a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00030a90  00000000  00000000  00016570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000c2ba  00000000  00000000  00047000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   000182eb  00000000  00000000  000532ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00002c38  00000000  00000000  0006b5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0000493a  00000000  00000000  0006e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001ec7a  00000000  00000000  00072b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000040  00000000  00000000  00091794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000024c0  00000000  00000000  000917d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  000979cf  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000979d2  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000979de  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000979df  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000006  00000000  00000000  000979e0  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000006  00000000  00000000  000979e6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000006  00000000  00000000  000979ec  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  000979f2  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000023  00000000  00000000  000979fa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020224 l    d  .text	00000000 .text
000325c4 l    d  .rodata	00000000 .rodata
000336e8 l    d  .rwdata	00000000 .rwdata
00035000 l    d  .bss	00000000 .bss
00035204 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/intelProjects/stabilitiQ/quartus/software/StabilitiQ_bsp//obj/HAL/src/crt0.o
0002025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Hardware_In_Loop.c
00000000 l    df *ABS*	00000000 TopLevel.c
00034310 l     O .rwdata	00000004 state
00020d64 l     F .text	000000d8 state_INIT
0002067c l     F .text	000000e4 handle_hardware_IRQ
00020760 l     F .text	00000090 init_hardware_IRQ
00020e3c l     F .text	000002a0 state_ENA
000210dc l     F .text	00000120 state_RUN
00000000 l    df *ABS*	00000000 comm_messages.c
00000000 l    df *ABS*	00000000 frequency_response.c
00035048 l     O .bss	00000008 power_ref_latched.0
00000000 l    df *ABS*	00000000 sampled_data.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0003370c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000277b4 l     F .text	000000c0 __sbprintf
000331f8 l     O .rodata	00000010 blanks.1
000331e8 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000279d8 l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0002964c l     F .text	00000008 __fp_lock
00029660 l     F .text	00000008 __fp_unlock
00029668 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000332ac l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002cbf4 l     F .text	000000f4 __sprint_r.part.0
0002e060 l     F .text	000000c0 __sbprintf
000333e0 l     O .rodata	00000010 blanks.1
000333d0 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
0002e478 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 alt_close.c
0002feb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002ffcc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00030030 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
000303e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
000304cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00030634 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00030720 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00030900 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00034368 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00030b9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00030cdc l     F .text	00000034 alt_dev_reg
0003424c l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00030dac l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00031068 l     F .text	0000009c altera_avalon_uart_irq
00031104 l     F .text	000000e0 altera_avalon_uart_rxirq
000311e4 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0003137c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
000315a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00031908 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00031b6c l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00031cbc l     F .text	0000003c alt_get_errno
00031cf8 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00035074 g     O .bss	00000004 alt_instruction_exception_handler
00025450 g     F .text	00000018 putchar
0002c200 g     F .text	00000070 _mprec_log10
0002c2ec g     F .text	00000060 __any_on
0002e8d0 g     F .text	00000058 _isatty_r
000332b8 g     O .rodata	00000028 __mprec_tinytens
0003083c g     F .text	0000007c alt_main
00025468 g     F .text	000000cc _puts_r
00035104 g     O .bss	00000100 alt_irq
0002ea1c g     F .text	00000064 _lseek_r
0003500c g     O .bss	00000004 ST_GENERAL
00022730 g     F .text	000000bc sqrt
000207f0 g     F .text	00000574 voltage_response_update
00034374 g       *ABS*	00000000 __flash_rwdata_start
0002fdb4 g     F .text	00000080 .hidden __eqdf2
00035204 g       *ABS*	00000000 __alt_heap_start
00022a58 g     F .text	00000070 .hidden __floatdidf
0002f16c g     F .text	00000060 _kill_r
00025410 g     F .text	00000038 printf
0002eb38 g     F .text	0000006c _wcrtomb_r
0002ecdc g     F .text	00000098 _signal_r
0002cb90 g     F .text	0000005c __sseek
000299b0 g     F .text	00000010 __sinit
000350c4 g     O .bss	0000000c gInterrupt
0002e120 g     F .text	00000148 __swbuf_r
0002e928 g     F .text	00000074 _setlocale_r
000297d0 g     F .text	00000078 __sfmoreglue
000308dc g     F .text	00000024 __malloc_unlock
0002142c g     F .text	00000058 get_menu_handler
00035030 g     O .bss	00000004 g_sec_counter
0002b030 g     F .text	0000012c memmove
0002999c g     F .text	00000014 _cleanup
0002b15c g     F .text	000000a4 _Balloc
000336e8 g     O .rwdata	0000000c hil_params
00023ec4 g     F .text	000000e8 .hidden __gtdf2
000320e0 g     F .text	00000024 altera_nios2_gen2_irq_init
000252e4 g     F .text	0000000c __errno
00020000 g     F .entry	0000000c __reset
0002a418 g     F .text	00000008 __localeconv_l
00035024 g     O .bss	00000004 edge_capture
00035034 g     O .bss	00000004 g_sec_enable
00020494 g     F .text	000000a8 HIL_display_results
000223c4 g     F .text	00000148 frequency_sample
00020020 g       *ABS*	00000000 __flash_exceptions_start
00021ab0 g     F .text	000000d8 decrement_power
0002e870 g     F .text	00000060 _fstat_r
00035040 g     O .bss	00000007 rx_buff
0003505c g     O .bss	00000004 errno
0002cb08 g     F .text	00000008 __seofread
00034324 g     O .rwdata	00000004 gX_MODULO_INTR
0003506c g     O .bss	00000004 alt_argv
0003c310 g       *ABS*	00000000 _gp
00030b6c g     F .text	00000030 usleep
00021484 g     F .text	00000054 display_welcome_message
00030128 g     F .text	00000020 getpid
000340cc g     O .rwdata	00000180 alt_fd_list
00033700 g     O .rwdata	0000000c timer_params
00025448 g     F .text	00000008 _putchar_r
00032104 g     F .text	00000090 alt_find_dev
0002af30 g     F .text	00000100 memcpy
00029654 g     F .text	0000000c _cleanup_r
00025148 g     F .text	000000b8 .hidden __floatsidf
00031c40 g     F .text	0000007c alt_io_redirect
00023fac g     F .text	000000e8 .hidden __ltdf2
000325c4 g       *ABS*	00000000 __DTOR_END__
00025534 g     F .text	00000010 puts
00031ad4 g     F .text	00000098 alt_exception_cause_generated_bad_addr
0002c15c g     F .text	000000a4 __ratio
0002e044 g     F .text	0000001c __vfiprintf_internal
000219a0 g     F .text	00000110 increment_power
000253e0 g     F .text	00000030 _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00022bbc g     F .text	00000064 .hidden __udivsi3
0003041c g     F .text	000000b0 isatty
0002ed74 g     F .text	000000c4 _raise_r
0002e33c g     F .text	00000064 __assert_func
00033308 g     O .rodata	000000c8 __mprec_tens
00021744 g     F .text	00000048 delay_msec
000216e0 g     F .text	00000064 clear_dma
00035058 g     O .bss	00000004 __malloc_top_pad
0002f1cc g     F .text	00000004 _getpid_r
0003432c g     O .rwdata	00000004 gVar_Enabled
0002a420 g     F .text	0000000c _localeconv_r
0002b5cc g     F .text	000000b0 __i2b
00029e10 g     F .text	000004c8 __sfvwrite_r
0002ee38 g     F .text	000000bc __sigtramp_r
0002ca5c g     F .text	00000058 _sbrk_r
0002ead0 g     F .text	00000064 _read_r
0003435c g     O .rwdata	00000004 alt_max_fd
0002e538 g     F .text	00000070 _fclose_r
000295c8 g     F .text	00000084 fflush
00035054 g     O .bss	00000004 __malloc_max_sbrked_mem
0002178c g     F .text	00000048 clear_terminal
00022ca4 g     F .text	000008f0 .hidden __adddf3
0002bef0 g     F .text	00000108 __b2d
0002f7f0 g     F .text	000005c4 .hidden __umoddi3
0003075c g     F .text	000000e0 lseek
0003503c g     O .bss	00000004 g_mutex_hil
00034338 g     O .rwdata	00000004 __fdlib_version
0003433c g     O .rwdata	00000004 _global_impure_ptr
0002c4f8 g     F .text	00000564 _realloc_r
00035204 g       *ABS*	00000000 __bss_end
000302f8 g     F .text	000000e8 alt_iic_isr_register
00031fd8 g     F .text	00000108 alt_tick
0002f1d0 g     F .text	00000620 .hidden __udivdi3
0002e7d4 g     F .text	00000024 _fputwc_r
000332e0 g     O .rodata	00000028 __mprec_bigtens
0002b380 g     F .text	00000138 __s2b
0002ec68 g     F .text	00000018 abort
00025200 g     F .text	00000090 .hidden __floatunsidf
0002bc10 g     F .text	00000058 __mcmp
00030fbc g     F .text	000000ac altera_avalon_uart_init
000299d0 g     F .text	00000014 __fp_lock_all
000302ac g     F .text	0000004c alt_ic_irq_enabled
00035008 g     O .bss	00000004 g_min_power_reached
00031f34 g     F .text	000000a4 alt_alarm_stop
00035064 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000c8 alt_irq_handler
000340a4 g     O .rwdata	00000028 alt_dev_null
000318e8 g     F .text	00000020 alt_dcache_flush_all
0002b4b8 g     F .text	00000064 __hi0bits
0002fe34 g     F .text	00000080 .hidden __fixdfsi
00034374 g       *ABS*	00000000 __ram_rwdata_end
00034354 g     O .rwdata	00000008 alt_dev_list
00030bd8 g     F .text	00000104 write
0002c34c g     F .text	000000cc _putc_r
000350d0 g     O .bss	0000000b rx_buffer
000203d0 g     F .text	0000004c set_HIL_filter
000336e8 g       *ABS*	00000000 __ram_rodata_end
0003006c g     F .text	000000bc fstat
000213d4 g     F .text	00000058 get_version_handler
00030508 g     F .text	0000012c kill
00023fac g     F .text	000000e8 .hidden __ledf2
0002b940 g     F .text	00000148 __pow5mult
0002cd00 g     F .text	00001344 ___vfiprintf_internal_r
00022c20 g     F .text	0000005c .hidden __umodsi3
00021218 g     F .text	00000080 substring
00035204 g       *ABS*	00000000 end
000315dc g     F .text	000001b4 altera_avalon_uart_write
0003501c g     O .bss	00000004 g_hil_mode
000201c4 g     F .exceptions	00000060 alt_instruction_exception_entry
000325c4 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
00034318 g     O .rwdata	00000004 hil_amplitude
00030e28 g     F .text	00000084 alt_avalon_timer_sc_init
00030f0c g     F .text	00000060 altera_avalon_uart_write_fd
00025290 g     F .text	00000054 .hidden __clzsi2
00030f6c g     F .text	00000050 altera_avalon_uart_close_fd
0002228c g     F .text	00000138 voltage_sample
00035080 g     O .bss	00000024 gInput
000299c0 g     F .text	00000004 __sfp_lock_acquire
0002ae60 g     F .text	000000d0 memchr
00025694 g     F .text	00002104 ___vfprintf_internal_r
00029b14 g     F .text	000002fc _free_r
00033544 g     O .rodata	00000180 _ctype_b
0002e99c g     F .text	0000000c __locale_mb_cur_max
00034328 g     O .rwdata	00000004 gY_MODULO_INTR
000324a4 g     F .text	00000120 __call_exitprocs
00034344 g     O .rwdata	00000004 __malloc_sbrk_base
00020224 g     F .text	0000003c _start
00035078 g     O .bss	00000004 _alt_tick_rate
0002ba88 g     F .text	00000188 __lshift
0003507c g     O .bss	00000004 _alt_nticks
0002efb0 g     F .text	000000a0 signal
0003093c g     F .text	00000108 read
00030d4c g     F .text	00000060 alt_sys_init
00032414 g     F .text	00000090 __register_exitproc
00021950 g     F .text	00000028 enable_timer_sec
0002b67c g     F .text	000002c4 __multiply
00022c7c g     F .text	00000028 .hidden __mulsi3
000336e8 g       *ABS*	00000000 __ram_rwdata_start
000325c4 g       *ABS*	00000000 __ram_rodata_start
000350dc g     O .bss	00000028 __malloc_current_mallinfo
0002bff8 g     F .text	00000164 __d2b
0003229c g     F .text	000000b8 alt_get_fd
00020644 g     F .text	00000038 set_hardware_timer
00031790 g     F .text	00000158 alt_busy_sleep
0002e2e4 g     F .text	00000058 _close_r
000226a4 g     F .text	00000060 set_timer_filter
0003239c g     F .text	00000078 memcmp
00035204 g       *ABS*	00000000 __alt_stack_base
00027874 g     F .text	00000164 __swsetup_r
00035038 g     O .bss	00000004 g_20msec
00023594 g     F .text	00000930 .hidden __divdf3
00029848 g     F .text	00000154 __sfp
0002c270 g     F .text	0000007c __copybits
00033b30 g     O .rwdata	00000408 __malloc_av_
000299cc g     F .text	00000004 __sinit_lock_release
00035004 g     O .bss	00000004 g_max_power_reached
00024094 g     F .text	000007ac .hidden __muldf3
0002cab4 g     F .text	00000054 __sread
00021398 g     F .text	0000003c uart_print_buffer
00032194 g     F .text	00000108 alt_find_file
00031944 g     F .text	000000a8 alt_dev_llist_insert
000308b8 g     F .text	00000024 __malloc_lock
00030ab4 g     F .text	000000b8 sbrk
00029568 g     F .text	00000060 _fflush_r
0002e3b4 g     F .text	000000c4 _calloc_r
00035020 g     O .bss	00000004 cmd_buffer
00035000 g       *ABS*	00000000 __bss_start
000252f0 g     F .text	000000f0 memset
000211fc g     F .text	0000001c main
00035070 g     O .bss	00000004 alt_envp
00035050 g     O .bss	00000004 __malloc_max_total_mem
00035014 g     O .bss	00000004 g_main_count
0002e268 g     F .text	00000018 __swbuf
00020260 g     F .text	0000002c select_HIL_inputs
0002cbec g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
0002e5a8 g     F .text	00000070 fclose
00027bf8 g     F .text	00001748 _dtoa_r
0002a680 g     F .text	000007e0 _malloc_r
0002ec38 g     F .text	00000030 __ascii_wctomb
00034360 g     O .rwdata	00000004 alt_errno
0002e618 g     F .text	00000020 _fiprintf_r
0002f050 g     F .text	00000060 _init_signal
0002a2d8 g     F .text	00000098 _fwalk
0002041c g     F .text	00000078 HIL_test_frequency
0002028c g     F .text	00000070 set_HIL_amplitude
0002ea80 g     F .text	0000000c _mbtowc_r
0002c418 g     F .text	000000e0 putc
00022ac8 g     F .text	00000080 .hidden __divsi3
000299f8 g     F .text	0000011c _malloc_trim_r
000325c4 g       *ABS*	00000000 __CTOR_END__
00022644 g     F .text	00000060 set_squares_filter
00025544 g     F .text	000000b8 strcmp
000325c4 g       *ABS*	00000000 __flash_rodata_start
000325c4 g       *ABS*	00000000 __DTOR_LIST__
000350a4 g     O .bss	00000020 gCommand
00035028 g     O .bss	00000004 gToggle
0002fdb4 g     F .text	00000080 .hidden __nedf2
00030d10 g     F .text	0000003c alt_irq_init
00035000 g     O .bss	00000004 gMode
00030a44 g     F .text	00000070 alt_release_fd
000330a0 g     O .rodata	00000100 .hidden __clz_tab
00035060 g     O .bss	00000004 _PathLocale
00032354 g     F .text	00000014 atexit
0002e280 g     F .text	00000064 _write_r
0002e9a8 g     F .text	00000074 setlocale
00034330 g     O .rwdata	00000004 gWatt_Enabled
00034340 g     O .rwdata	00000004 _impure_ptr
00035068 g     O .bss	00000004 alt_argc
00029340 g     F .text	00000228 __sflush_r
00031a50 g     F .text	00000064 _do_dtors
0002250c g     F .text	00000138 sample_power_values
000336f4 g     O .rwdata	0000000c squares_params
000214d8 g     F .text	000000fc display_Version
00020020 g       .exceptions	00000000 alt_irq_entry
0002ea8c g     F .text	00000044 __ascii_mbtowc
0002be94 g     F .text	0000005c __ulp
000299e4 g     F .text	00000014 __fp_unlock_all
0003434c g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00034320 g     O .rwdata	00000004 INTERRUPT_TICS_PER_SAMPLE
0002a42c g     F .text	0000000c localeconv
000227ec g     F .text	0000026c __ieee754_sqrt
0002a5e8 g     F .text	00000098 __swhatbuf_r
00030148 g     F .text	00000050 alt_ic_isr_register
000217d4 g     F .text	000000dc print_mode
00034374 g       *ABS*	00000000 _edata
000212f0 g     F .text	000000a8 read_data_stack
00030eac g     F .text	00000060 altera_avalon_uart_read_fd
00035204 g       *ABS*	00000000 _end
0002e670 g     F .text	00000164 __fputwc
00020224 g       *ABS*	00000000 __ram_exceptions_end
000215d4 g     F .text	0000010c display_Menu
0003431c g     O .rwdata	00000004 hil_timer_cnts
00034334 g     O .rwdata	00000004 gWatt_Multi_Enabled
0002053c g     F .text	000000d0 put_reset_handler
00030220 g     F .text	0000008c alt_ic_irq_disable
0002cb10 g     F .text	00000080 __swrite
00034348 g     O .rwdata	00000004 __malloc_trim_threshold
00032368 g     F .text	00000034 exit
0002e638 g     F .text	00000038 fiprintf
0002eb34 g     F .text	00000004 _vfiprintf_r
00035010 g     O .bss	00000004 gAmp
0002a370 g     F .text	000000a8 _fwalk_reent
0002bc68 g     F .text	0000022c __mdiff
0003502c g     O .bss	00000004 timer_sec
00022b48 g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000299c4 g     F .text	00000004 __sfp_lock_release
00021b88 g     F .text	00000704 frequency_response_update
00021978 g     F .text	00000028 reset_timer_sec
00033440 g     O .rodata	00000101 _ctype_
000250f4 g     F .text	00000054 .hidden __unorddf2
00031328 g     F .text	00000054 altera_avalon_uart_close
0002fff8 g     F .text	00000038 _exit
00022704 g     F .text	0000002c disable_fpga_filter
0002a438 g     F .text	000001b0 __smakebuf_r
000255fc g     F .text	00000098 strlen
0002ec80 g     F .text	0000005c _init_signal_r
00031dd4 g     F .text	00000160 open
00023ec4 g     F .text	000000e8 .hidden __gedf2
00035018 g     O .bss	00000004 g_hil_finish
0002e3a0 g     F .text	00000014 __assert
0002060c g     F .text	00000038 init_IRQ_data_structures
00021298 g     F .text	00000058 clear_terminal_handler
0002cce8 g     F .text	00000018 __sprint_r
00031ab4 g     F .text	00000020 alt_icache_flush_all
00034364 g     O .rwdata	00000004 alt_priority_mask
00030198 g     F .text	00000088 alt_ic_irq_enable
00027798 g     F .text	0000001c __vfprintf_internal
000313b8 g     F .text	000001e8 altera_avalon_uart_read
0002ec2c g     F .text	0000000c _wctomb_r
00024840 g     F .text	000008b4 .hidden __subdf3
0002b51c g     F .text	000000b0 __lo0bits
0003436c g     O .rwdata	00000008 alt_alarm_list
000319ec g     F .text	00000064 _do_ctors
0002f0b0 g     F .text	000000bc __sigtramp
0002eba4 g     F .text	00000088 wcrtomb
0002fef0 g     F .text	000000dc close
00033f38 g     O .rwdata	0000016c __global_locale
000202fc g     F .text	000000d4 set_HIL_timer_cnts
0003069c g     F .text	00000084 alt_load
000218b0 g     F .text	000000a0 run_simple_test_sequence
0002e7f8 g     F .text	00000078 fputwc
0002eef4 g     F .text	000000bc raise
00034314 g     O .rwdata	00000004 g_hil_pivot
000299c8 g     F .text	00000004 __sinit_lock_acquire
0002b224 g     F .text	0000015c __multadd
0002b200 g     F .text	00000024 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408914 	ori	at,at,548
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201c40 	call	201c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   20118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0ffff17 	ldw	r3,-4(fp)
   20130:	e0bffe17 	ldw	r2,-8(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001126 	beq	r2,zero,20180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	e0bffd17 	ldw	r2,-12(fp)
   20140:	100690fa 	slli	r3,r2,3
   20144:	008000f4 	movhi	r2,3
   20148:	1885883a 	add	r2,r3,r2
   2014c:	10d44117 	ldw	r3,20740(r2)
   20150:	e0bffd17 	ldw	r2,-12(fp)
   20154:	100890fa 	slli	r4,r2,3
   20158:	008000f4 	movhi	r2,3
   2015c:	2085883a 	add	r2,r4,r2
   20160:	10944217 	ldw	r2,20744(r2)
   20164:	1009883a 	mov	r4,r2
   20168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   2016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   20170:	0005313a 	rdctl	r2,ipending
   20174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   20178:	e0bffb17 	ldw	r2,-20(fp)
   2017c:	00000706 	br	2019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   20180:	e0bffe17 	ldw	r2,-8(fp)
   20184:	1085883a 	add	r2,r2,r2
   20188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   2018c:	e0bffd17 	ldw	r2,-12(fp)
   20190:	10800044 	addi	r2,r2,1
   20194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   20198:	003fe406 	br	2012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   2019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   201a0:	e0bfff17 	ldw	r2,-4(fp)
   201a4:	103fde1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201a8:	0001883a 	nop
}
   201ac:	0001883a 	nop
   201b0:	e037883a 	mov	sp,fp
   201b4:	dfc00117 	ldw	ra,4(sp)
   201b8:	df000017 	ldw	fp,0(sp)
   201bc:	dec00204 	addi	sp,sp,8
   201c0:	f800283a 	ret

000201c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201c4:	defffb04 	addi	sp,sp,-20
   201c8:	dfc00415 	stw	ra,16(sp)
   201cc:	df000315 	stw	fp,12(sp)
   201d0:	df000304 	addi	fp,sp,12
   201d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201d8:	00bfffc4 	movi	r2,-1
   201dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   201e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201e4:	d0a35917 	ldw	r2,-29340(gp)
   201e8:	10000726 	beq	r2,zero,20208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201ec:	d0a35917 	ldw	r2,-29340(gp)
   201f0:	e0ffff17 	ldw	r3,-4(fp)
   201f4:	e1bffe17 	ldw	r6,-8(fp)
   201f8:	e17ffd17 	ldw	r5,-12(fp)
   201fc:	1809883a 	mov	r4,r3
   20200:	103ee83a 	callr	r2
   20204:	00000206 	br	20210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2020c:	0005883a 	mov	r2,zero
}
   20210:	e037883a 	mov	sp,fp
   20214:	dfc00117 	ldw	ra,4(sp)
   20218:	df000017 	ldw	fp,0(sp)
   2021c:	dec00204 	addi	sp,sp,8
   20220:	f800283a 	ret

Disassembly of section .text:

00020224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20224:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2022c:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   20230:	d6b0c414 	ori	gp,gp,49936
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20234:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20238:	10940014 	ori	r2,r2,20480

    movhi r3, %hi(__bss_end)
   2023c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   20240:	18d48114 	ori	r3,r3,20996

    beq r2, r3, 1f
   20244:	10c00326 	beq	r2,r3,20254 <_start+0x30>

0:
    stw zero, (r2)
   20248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20250:	10fffd36 	bltu	r2,r3,20248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20254:	003069c0 	call	3069c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20258:	003083c0 	call	3083c <alt_main>

0002025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2025c:	003fff06 	br	2025c <alt_after_alt_main>

00020260 <select_HIL_inputs>:
#include "Hardware_In_Loop.h"


extern int hil_timer_cnts;

void select_HIL_inputs(){
   20260:	deffff04 	addi	sp,sp,-4
   20264:	df000015 	stw	fp,0(sp)
   20268:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(O_REG32_7_BASE, 0x1);
   2026c:	00c00044 	movi	r3,1
   20270:	00800134 	movhi	r2,4
   20274:	10c51435 	stwio	r3,5200(r2)
}
   20278:	0001883a 	nop
   2027c:	e037883a 	mov	sp,fp
   20280:	df000017 	ldw	fp,0(sp)
   20284:	dec00104 	addi	sp,sp,4
   20288:	f800283a 	ret

0002028c <set_HIL_amplitude>:


void set_HIL_amplitude (int amplitude, int display_msg){
   2028c:	defffc04 	addi	sp,sp,-16
   20290:	dfc00315 	stw	ra,12(sp)
   20294:	df000215 	stw	fp,8(sp)
   20298:	df000204 	addi	fp,sp,8
   2029c:	e13fff15 	stw	r4,-4(fp)
   202a0:	e17ffe15 	stw	r5,-8(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(O_REG32_0_BASE, amplitude);
   202a4:	e0ffff17 	ldw	r3,-4(fp)
   202a8:	00800134 	movhi	r2,4
   202ac:	10c53035 	stwio	r3,5312(r2)
	if (display_msg){
   202b0:	e0bffe17 	ldw	r2,-8(fp)
   202b4:	10000b26 	beq	r2,zero,202e4 <set_HIL_amplitude+0x58>
	printf("**** The HIL amplitude (in Counts) = %d\r\n", amplitude);
   202b8:	e17fff17 	ldw	r5,-4(fp)
   202bc:	010000f4 	movhi	r4,3
   202c0:	21097104 	addi	r4,r4,9668
   202c4:	00254100 	call	25410 <printf>
	printf("**** The HIL Counts per Volt = %f \r\n", CNTS_PER_VOLT);
   202c8:	000b883a 	mov	r5,zero
   202cc:	01900034 	movhi	r6,16384
   202d0:	010000f4 	movhi	r4,3
   202d4:	21097c04 	addi	r4,r4,9712
   202d8:	00254100 	call	25410 <printf>

	delay_msec(1);
   202dc:	01000044 	movi	r4,1
   202e0:	00217440 	call	21744 <delay_msec>
}
}
   202e4:	0001883a 	nop
   202e8:	e037883a 	mov	sp,fp
   202ec:	dfc00117 	ldw	ra,4(sp)
   202f0:	df000017 	ldw	fp,0(sp)
   202f4:	dec00204 	addi	sp,sp,8
   202f8:	f800283a 	ret

000202fc <set_HIL_timer_cnts>:
void set_HIL_timer_cnts(int timer_cnts, int display_msg){
   202fc:	defffa04 	addi	sp,sp,-24
   20300:	dfc00515 	stw	ra,20(sp)
   20304:	df000415 	stw	fp,16(sp)
   20308:	df000404 	addi	fp,sp,16
   2030c:	e13ffd15 	stw	r4,-12(fp)
   20310:	e17ffc15 	stw	r5,-16(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(O_REG32_10_BASE, timer_cnts);
   20314:	e0fffd17 	ldw	r3,-12(fp)
   20318:	00800134 	movhi	r2,4
   2031c:	10c50835 	stwio	r3,5152(r2)
	if (display_msg){
   20320:	e0bffc17 	ldw	r2,-16(fp)
   20324:	10002226 	beq	r2,zero,203b0 <set_HIL_timer_cnts+0xb4>
	printf("**** The sinewave HIL period is set to ");
   20328:	010000f4 	movhi	r4,3
   2032c:	21098604 	addi	r4,r4,9752
   20330:	00254100 	call	25410 <printf>
	double timer_period = 1/(1024*timer_cnts*FPGA_MCLK);
   20334:	e0bffd17 	ldw	r2,-12(fp)
   20338:	100492ba 	slli	r2,r2,10
   2033c:	1009883a 	mov	r4,r2
   20340:	00251480 	call	25148 <__floatsidf>
   20344:	1011883a 	mov	r8,r2
   20348:	1813883a 	mov	r9,r3
   2034c:	01b88c74 	movhi	r6,57905
   20350:	31a30e84 	addi	r6,r6,-29638
   20354:	01cf9574 	movhi	r7,15957
   20358:	39de6384 	addi	r7,r7,31118
   2035c:	4009883a 	mov	r4,r8
   20360:	480b883a 	mov	r5,r9
   20364:	00240940 	call	24094 <__muldf3>
   20368:	1009883a 	mov	r4,r2
   2036c:	180b883a 	mov	r5,r3
   20370:	2005883a 	mov	r2,r4
   20374:	2807883a 	mov	r3,r5
   20378:	100d883a 	mov	r6,r2
   2037c:	180f883a 	mov	r7,r3
   20380:	0009883a 	mov	r4,zero
   20384:	014ffc34 	movhi	r5,16368
   20388:	00235940 	call	23594 <__divdf3>
   2038c:	1009883a 	mov	r4,r2
   20390:	180b883a 	mov	r5,r3
   20394:	e13ffe15 	stw	r4,-8(fp)
   20398:	e17fff15 	stw	r5,-4(fp)
	printf("%f Hertz.\r\n", timer_period);
   2039c:	e17ffe17 	ldw	r5,-8(fp)
   203a0:	e1bfff17 	ldw	r6,-4(fp)
   203a4:	010000f4 	movhi	r4,3
   203a8:	21099004 	addi	r4,r4,9792
   203ac:	00254100 	call	25410 <printf>
	}
	delay_msec(1);
   203b0:	01000044 	movi	r4,1
   203b4:	00217440 	call	21744 <delay_msec>
}
   203b8:	0001883a 	nop
   203bc:	e037883a 	mov	sp,fp
   203c0:	dfc00117 	ldw	ra,4(sp)
   203c4:	df000017 	ldw	fp,0(sp)
   203c8:	dec00204 	addi	sp,sp,8
   203cc:	f800283a 	ret

000203d0 <set_HIL_filter>:

void set_HIL_filter(filter_t* filter_params){
   203d0:	defffe04 	addi	sp,sp,-8
   203d4:	df000115 	stw	fp,4(sp)
   203d8:	df000104 	addi	fp,sp,4
   203dc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(O_REG32_12_BASE, filter_params->alpha);
   203e0:	e0bfff17 	ldw	r2,-4(fp)
   203e4:	10800017 	ldw	r2,0(r2)
   203e8:	1007883a 	mov	r3,r2
   203ec:	00800134 	movhi	r2,4
   203f0:	10c4e435 	stwio	r3,5008(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(O_REG32_13_BASE, filter_params->beta);
   203f4:	e0bfff17 	ldw	r2,-4(fp)
   203f8:	10800117 	ldw	r2,4(r2)
   203fc:	1007883a 	mov	r3,r2
   20400:	00800134 	movhi	r2,4
   20404:	10c4e835 	stwio	r3,5024(r2)
}
   20408:	0001883a 	nop
   2040c:	e037883a 	mov	sp,fp
   20410:	df000017 	ldw	fp,0(sp)
   20414:	dec00104 	addi	sp,sp,4
   20418:	f800283a 	ret

0002041c <HIL_test_frequency>:
/// 1. TIMER_CNTS_50HZ  - default timer counts 50 Hz
/// 2. HIL_INDEX_START  - main loop index to start HIL
/// 3. TIMER_CNTS_DELTA - change of timer counts (changes frequency)
///=================================================

int HIL_test_frequency(int index, int increase_mode) {
   2041c:	defffc04 	addi	sp,sp,-16
   20420:	dfc00315 	stw	ra,12(sp)
   20424:	df000215 	stw	fp,8(sp)
   20428:	df000204 	addi	fp,sp,8
   2042c:	e13fff15 	stw	r4,-4(fp)
   20430:	e17ffe15 	stw	r5,-8(fp)

	if (index > HIL_START_INDEX) {
   20434:	e0bfff17 	ldw	r2,-4(fp)
   20438:	10800190 	cmplti	r2,r2,6
   2043c:	10000f1e 	bne	r2,zero,2047c <HIL_test_frequency+0x60>

		if (increase_mode && (hil_timer_cnts > 0)) {
   20440:	e0bffe17 	ldw	r2,-8(fp)
   20444:	10000626 	beq	r2,zero,20460 <HIL_test_frequency+0x44>
   20448:	d0a00317 	ldw	r2,-32756(gp)
   2044c:	0080040e 	bge	zero,r2,20460 <HIL_test_frequency+0x44>
			hil_timer_cnts -= TIMER_CNTS_DELTA;
   20450:	d0a00317 	ldw	r2,-32756(gp)
   20454:	10bfff44 	addi	r2,r2,-3
   20458:	d0a00315 	stw	r2,-32756(gp)
   2045c:	00000306 	br	2046c <HIL_test_frequency+0x50>
		} else {
			hil_timer_cnts += TIMER_CNTS_DELTA;
   20460:	d0a00317 	ldw	r2,-32756(gp)
   20464:	108000c4 	addi	r2,r2,3
   20468:	d0a00315 	stw	r2,-32756(gp)
		}
		set_HIL_timer_cnts(hil_timer_cnts, 0);
   2046c:	d0a00317 	ldw	r2,-32756(gp)
   20470:	000b883a 	mov	r5,zero
   20474:	1009883a 	mov	r4,r2
   20478:	00202fc0 	call	202fc <set_HIL_timer_cnts>
	} else {

	}
	return hil_timer_cnts;
   2047c:	d0a00317 	ldw	r2,-32756(gp)
}
   20480:	e037883a 	mov	sp,fp
   20484:	dfc00117 	ldw	ra,4(sp)
   20488:	df000017 	ldw	fp,0(sp)
   2048c:	dec00204 	addi	sp,sp,8
   20490:	f800283a 	ret

00020494 <HIL_display_results>:


void HIL_display_results(int main_count, input_t *gInput, cmd_t *gCommand, int sec, state_general_t state){
   20494:	defff304 	addi	sp,sp,-52
   20498:	dfc00c15 	stw	ra,48(sp)
   2049c:	df000b15 	stw	fp,44(sp)
   204a0:	df000b04 	addi	fp,sp,44
   204a4:	e13fff15 	stw	r4,-4(fp)
   204a8:	e17ffe15 	stw	r5,-8(fp)
   204ac:	e1bffd15 	stw	r6,-12(fp)
   204b0:	e1fffc15 	stw	r7,-16(fp)


	printf("%d ,\t%d ,\t%f , \t%f , \t%d  , \t%d, \t%f \r\n",
   204b4:	e0bffe17 	ldw	r2,-8(fp)
   204b8:	12c00017 	ldw	r11,0(r2)
   204bc:	e0bffe17 	ldw	r2,-8(fp)
   204c0:	11800117 	ldw	r6,4(r2)
   204c4:	11c00217 	ldw	r7,8(r2)
   204c8:	e13ffe17 	ldw	r4,-8(fp)
   204cc:	20800417 	ldw	r2,16(r4)
   204d0:	20c00517 	ldw	r3,20(r4)
   204d4:	e13ffe17 	ldw	r4,-8(fp)
   204d8:	22400317 	ldw	r9,12(r4)
   204dc:	e13ffe17 	ldw	r4,-8(fp)
   204e0:	22800617 	ldw	r10,24(r4)
   204e4:	e23ffe17 	ldw	r8,-8(fp)
   204e8:	41000717 	ldw	r4,28(r8)
   204ec:	41400817 	ldw	r5,32(r8)
   204f0:	d9000515 	stw	r4,20(sp)
   204f4:	d9400615 	stw	r5,24(sp)
   204f8:	da800415 	stw	r10,16(sp)
   204fc:	da400315 	stw	r9,12(sp)
   20500:	d8800115 	stw	r2,4(sp)
   20504:	d8c00215 	stw	r3,8(sp)
   20508:	d9c00015 	stw	r7,0(sp)
   2050c:	300f883a 	mov	r7,r6
   20510:	580d883a 	mov	r6,r11
   20514:	e17fff17 	ldw	r5,-4(fp)
   20518:	010000f4 	movhi	r4,3
   2051c:	21099304 	addi	r4,r4,9804
   20520:	00254100 	call	25410 <printf>
			gInput->freq,
			gInput->timer_k,
			gInput->real_k,
			gInput->real_power);

}
   20524:	0001883a 	nop
   20528:	e037883a 	mov	sp,fp
   2052c:	dfc00117 	ldw	ra,4(sp)
   20530:	df000017 	ldw	fp,0(sp)
   20534:	dec00204 	addi	sp,sp,8
   20538:	f800283a 	ret

0002053c <put_reset_handler>:
int hil_timer_cnts = TIMER_CNTS_50HZ;

filter_t hil_params = { 100, 0, 5000 };
char* cmd_buffer;

void put_reset_handler(){
   2053c:	defffd04 	addi	sp,sp,-12
   20540:	dfc00215 	stw	ra,8(sp)
   20544:	df000115 	stw	fp,4(sp)
   20548:	df000104 	addi	fp,sp,4
	int put_rst = strcmp(cmd_buffer, "put rst");
   2054c:	d0a34417 	ldw	r2,-29424(gp)
   20550:	014000f4 	movhi	r5,3
   20554:	29499d04 	addi	r5,r5,9844
   20558:	1009883a 	mov	r4,r2
   2055c:	00255440 	call	25544 <strcmp>
   20560:	e0bfff15 	stw	r2,-4(fp)
	if (!put_rst) {
   20564:	e0bfff17 	ldw	r2,-4(fp)
   20568:	1000221e 	bne	r2,zero,205f4 <put_reset_handler+0xb8>
		g_main_count = 0;
   2056c:	d0234115 	stw	zero,-29436(gp)
		g_hil_finish = 0;
   20570:	d0234215 	stw	zero,-29432(gp)
		clear_dma();
   20574:	00216e00 	call	216e0 <clear_dma>
		delay_msec(1);
   20578:	01000044 	movi	r4,1
   2057c:	00217440 	call	21744 <delay_msec>
		printf("Reset of HIL recursive data completed.\r\n");
   20580:	010000f4 	movhi	r4,3
   20584:	21099f04 	addi	r4,r4,9852
   20588:	00255340 	call	25534 <puts>
		set_HIL_amplitude(hil_amplitude, 1);     // HIL::set amplitude with a display message
   2058c:	d0a00217 	ldw	r2,-32760(gp)
   20590:	01400044 	movi	r5,1
   20594:	1009883a 	mov	r4,r2
   20598:	002028c0 	call	2028c <set_HIL_amplitude>
		set_HIL_timer_cnts(TIMER_CNTS_50HZ, 1);  // HIL::set timer cnts (period) with display message
   2059c:	01400044 	movi	r5,1
   205a0:	0100f384 	movi	r4,974
   205a4:	00202fc0 	call	202fc <set_HIL_timer_cnts>
//		gInput.real_k = 0;
//		gInput.real_power = 0.0;
//		gInput.rms = 0.0;
//		gInput.sample_k = 0;
//		gInput.timer_k = 0;
		memset(&gInput,0,sizeof(gInput));
   205a8:	01800904 	movi	r6,36
   205ac:	000b883a 	mov	r5,zero
   205b0:	010000f4 	movhi	r4,3
   205b4:	21142004 	addi	r4,r4,20608
   205b8:	00252f00 	call	252f0 <memset>
		memset(&gCommand,0,sizeof(gCommand));
   205bc:	01800804 	movi	r6,32
   205c0:	000b883a 	mov	r5,zero
   205c4:	010000f4 	movhi	r4,3
   205c8:	21142904 	addi	r4,r4,20644
   205cc:	00252f00 	call	252f0 <memset>
		gCommand.active_power_max = 14200.0;
   205d0:	008000f4 	movhi	r2,3
   205d4:	10142915 	stw	zero,20644(r2)
   205d8:	00903334 	movhi	r2,16588
   205dc:	10af0004 	addi	r2,r2,-17408
   205e0:	00c000f4 	movhi	r3,3
   205e4:	18942a15 	stw	r2,20648(r3)
		ST_GENERAL = NOMINAL;
   205e8:	d0233f15 	stw	zero,-29444(gp)
		hil_timer_cnts = TIMER_CNTS_50HZ;
   205ec:	0080f384 	movi	r2,974
   205f0:	d0a00315 	stw	r2,-32756(gp)

	}

}
   205f4:	0001883a 	nop
   205f8:	e037883a 	mov	sp,fp
   205fc:	dfc00117 	ldw	ra,4(sp)
   20600:	df000017 	ldw	fp,0(sp)
   20604:	dec00204 	addi	sp,sp,8
   20608:	f800283a 	ret

0002060c <init_IRQ_data_structures>:
int timer_sec = 0;
int g_sec_counter = 0; /// Global Int, seconds counter
int g_sec_enable = 0;  /// Global Int, seconds counter enable


void init_IRQ_data_structures() {
   2060c:	deffff04 	addi	sp,sp,-4
   20610:	df000015 	stw	fp,0(sp)
   20614:	d839883a 	mov	fp,sp
	gInterrupt.tic = 0;
   20618:	008000f4 	movhi	r2,3
   2061c:	10143115 	stw	zero,20676(r2)
	gInterrupt.interval = 0;
   20620:	008000f4 	movhi	r2,3
   20624:	10143215 	stw	zero,20680(r2)
	gInterrupt.flag = 0;
   20628:	008000f4 	movhi	r2,3
   2062c:	10143315 	stw	zero,20684(r2)
}
   20630:	0001883a 	nop
   20634:	e037883a 	mov	sp,fp
   20638:	df000017 	ldw	fp,0(sp)
   2063c:	dec00104 	addi	sp,sp,4
   20640:	f800283a 	ret

00020644 <set_hardware_timer>:
///  \detailed X Modulo sets the timer period, while
///            Y Modulo sets the duty cycle. The XY
///            counter then interrupts Nios and is handled
///            by the handle_interrupt_IRQ()
///=======================================================
void set_hardware_timer() {
   20644:	deffff04 	addi	sp,sp,-4
   20648:	df000015 	stw	fp,0(sp)
   2064c:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(O_REG32_2_BASE, gX_MODULO_INTR); // timer period
   20650:	d0e00517 	ldw	r3,-32748(gp)
   20654:	00800134 	movhi	r2,4
   20658:	10c52835 	stwio	r3,5280(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(O_REG32_3_BASE, gY_MODULO_INTR); // timer duty cycle
   2065c:	d0e00617 	ldw	r3,-32744(gp)
   20660:	00800134 	movhi	r2,4
   20664:	10c52435 	stwio	r3,5264(r2)
}
   20668:	0001883a 	nop
   2066c:	e037883a 	mov	sp,fp
   20670:	df000017 	ldw	fp,0(sp)
   20674:	dec00104 	addi	sp,sp,4
   20678:	f800283a 	ret

0002067c <handle_hardware_IRQ>:
///=======================================================

int g_20msec = 0;
int g_mutex_hil = 0;  // A mutex to enable the HIL module

static void handle_hardware_IRQ(void* context) {
   2067c:	defffc04 	addi	sp,sp,-16
   20680:	dfc00315 	stw	ra,12(sp)
   20684:	df000215 	stw	fp,8(sp)
   20688:	df000204 	addi	fp,sp,8
   2068c:	e13ffe15 	stw	r4,-8(fp)

	volatile int* edge_capture_ptr = (volatile int*) context;
   20690:	e0bffe17 	ldw	r2,-8(fp)
   20694:	e0bfff15 	stw	r2,-4(fp)

	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(I_REG32_0_BASE);
   20698:	00800134 	movhi	r2,4
   2069c:	10c55737 	ldwio	r3,5468(r2)
   206a0:	e0bfff17 	ldw	r2,-4(fp)
   206a4:	10c00015 	stw	r3,0(r2)

	if (gToggle) {
   206a8:	d0a34617 	ldw	r2,-29416(gp)
   206ac:	10000726 	beq	r2,zero,206cc <handle_hardware_IRQ+0x50>
		IOWR_ALTERA_AVALON_PIO_DATA(O_REG32_1_BASE, 0x0);  // Deassert toggle
   206b0:	0007883a 	mov	r3,zero
   206b4:	00800134 	movhi	r2,4
   206b8:	10c52c35 	stwio	r3,5296(r2)
		gToggle--;
   206bc:	d0a34617 	ldw	r2,-29416(gp)
   206c0:	10bfffc4 	addi	r2,r2,-1
   206c4:	d0a34615 	stw	r2,-29416(gp)
   206c8:	00001a06 	br	20734 <handle_hardware_IRQ+0xb8>
	} else {
		IOWR_ALTERA_AVALON_PIO_DATA(O_REG32_1_BASE, 0x1);  // Assert toggle
   206cc:	00c00044 	movi	r3,1
   206d0:	00800134 	movhi	r2,4
   206d4:	10c52c35 	stwio	r3,5296(r2)
		gToggle++;
   206d8:	d0a34617 	ldw	r2,-29416(gp)
   206dc:	10800044 	addi	r2,r2,1
   206e0:	d0a34615 	stw	r2,-29416(gp)
		g_20msec++;
   206e4:	d0a34a17 	ldw	r2,-29400(gp)
   206e8:	10800044 	addi	r2,r2,1
   206ec:	d0a34a15 	stw	r2,-29400(gp)

		if (!(g_20msec % 20)){
   206f0:	d0a34a17 	ldw	r2,-29400(gp)
   206f4:	01400504 	movi	r5,20
   206f8:	1009883a 	mov	r4,r2
   206fc:	0022b480 	call	22b48 <__modsi3>
   20700:	1000021e 	bne	r2,zero,2070c <handle_hardware_IRQ+0x90>
			g_mutex_hil = 1;
   20704:	00800044 	movi	r2,1
   20708:	d0a34b15 	stw	r2,-29396(gp)
		}

		if (!(g_20msec % 50)) {
   2070c:	d0a34a17 	ldw	r2,-29400(gp)
   20710:	01400c84 	movi	r5,50
   20714:	1009883a 	mov	r4,r2
   20718:	0022b480 	call	22b48 <__modsi3>
   2071c:	1000051e 	bne	r2,zero,20734 <handle_hardware_IRQ+0xb8>
			if (g_sec_enable) {
   20720:	d0a34917 	ldw	r2,-29404(gp)
   20724:	10000326 	beq	r2,zero,20734 <handle_hardware_IRQ+0xb8>
				g_sec_counter++;
   20728:	d0a34817 	ldw	r2,-29408(gp)
   2072c:	10800044 	addi	r2,r2,1
   20730:	d0a34815 	stw	r2,-29408(gp)
		}
//		if (!(g_20msec % 175) ){
//			clear_dma();
//		}
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(I_REG32_0_BASE, 0);	   // Clear edge capture
   20734:	0007883a 	mov	r3,zero
   20738:	00800134 	movhi	r2,4
   2073c:	10c55735 	stwio	r3,5468(r2)
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(I_REG32_0_BASE); // Read edge capture (stability)
   20740:	00800134 	movhi	r2,4
   20744:	10855737 	ldwio	r2,5468(r2)
}
   20748:	0001883a 	nop
   2074c:	e037883a 	mov	sp,fp
   20750:	dfc00117 	ldw	ra,4(sp)
   20754:	df000017 	ldw	fp,0(sp)
   20758:	dec00204 	addi	sp,sp,8
   2075c:	f800283a 	ret

00020760 <init_hardware_IRQ>:
///            the edge_capture_ptr with function pointer,
///            register the interrupt, clear the capture
///            flags, and then re-enable interrupt upon
///            finishing the routine.
///=======================================================
static void init_hardware_IRQ() {
   20760:	defffc04 	addi	sp,sp,-16
   20764:	dfc00315 	stw	ra,12(sp)
   20768:	df000215 	stw	fp,8(sp)
   2076c:	df000204 	addi	fp,sp,8

	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(I_REG32_0_BASE, 0x0); // Disable the interrupt
   20770:	0007883a 	mov	r3,zero
   20774:	00800134 	movhi	r2,4
   20778:	10c55635 	stwio	r3,5464(r2)
	void* edge_capture_ptr = (void*) &edge_capture; // Cast edge capture as context pointer
   2077c:	d0a34504 	addi	r2,gp,-29420
   20780:	e0bfff15 	stw	r2,-4(fp)

	printf("Registering the interrupt routine...\r\n"); // Register interrupt message
   20784:	010000f4 	movhi	r4,3
   20788:	2109a904 	addi	r4,r4,9892
   2078c:	00255340 	call	25534 <puts>
	delay_msec(50);                                       // Allow time to print
   20790:	01000c84 	movi	r4,50
   20794:	00217440 	call	21744 <delay_msec>

	alt_ic_isr_register(I_REG32_0_IRQ_INTERRUPT_CONTROLLER_ID,
   20798:	d8000015 	stw	zero,0(sp)
   2079c:	e1ffff17 	ldw	r7,-4(fp)
   207a0:	018000b4 	movhi	r6,2
   207a4:	31819f04 	addi	r6,r6,1660
   207a8:	01400084 	movi	r5,2
   207ac:	0009883a 	mov	r4,zero
   207b0:	00301480 	call	30148 <alt_ic_isr_register>
	I_REG32_0_IRQ,                             // Register the interrupt handler
			handle_hardware_IRQ,                     // with alt_ic_isr_register
			edge_capture_ptr, 0x0);
	printf("Registering interrupt complete.\r\n\r\n"); // Registration completion message
   207b4:	010000f4 	movhi	r4,3
   207b8:	2109b304 	addi	r4,r4,9932
   207bc:	00255340 	call	25534 <puts>

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(I_REG32_0_BASE, 0x0); // Reset edge capture register
   207c0:	0007883a 	mov	r3,zero
   207c4:	00800134 	movhi	r2,4
   207c8:	10c55735 	stwio	r3,5468(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(I_REG32_0_BASE, 0x1); // Enable the interrupt
   207cc:	00c00044 	movi	r3,1
   207d0:	00800134 	movhi	r2,4
   207d4:	10c55635 	stwio	r3,5464(r2)
}
   207d8:	0001883a 	nop
   207dc:	e037883a 	mov	sp,fp
   207e0:	dfc00117 	ldw	ra,4(sp)
   207e4:	df000017 	ldw	fp,0(sp)
   207e8:	dec00204 	addi	sp,sp,8
   207ec:	f800283a 	ret

000207f0 <voltage_response_update>:
int gWatt_Enabled = 1;
int gWatt_Multi_Enabled = 1;

void voltage_response_update(input_t *gInput, cmd_t *gCommand);

void voltage_response_update(input_t *gInput, cmd_t *gCommand) {
   207f0:	deffeb04 	addi	sp,sp,-84
   207f4:	dfc01415 	stw	ra,80(sp)
   207f8:	df001315 	stw	fp,76(sp)
   207fc:	df001304 	addi	fp,sp,76
   20800:	e13fee15 	stw	r4,-72(fp)
   20804:	e17fed15 	stw	r5,-76(fp)

	input_t sampled_data;
	sampled_data = *gInput;
   20808:	e0bfee17 	ldw	r2,-72(fp)
   2080c:	10c00017 	ldw	r3,0(r2)
   20810:	e0fff715 	stw	r3,-36(fp)
   20814:	10c00117 	ldw	r3,4(r2)
   20818:	e0fff815 	stw	r3,-32(fp)
   2081c:	10c00217 	ldw	r3,8(r2)
   20820:	e0fff915 	stw	r3,-28(fp)
   20824:	10c00317 	ldw	r3,12(r2)
   20828:	e0fffa15 	stw	r3,-24(fp)
   2082c:	10c00417 	ldw	r3,16(r2)
   20830:	e0fffb15 	stw	r3,-20(fp)
   20834:	10c00517 	ldw	r3,20(r2)
   20838:	e0fffc15 	stw	r3,-16(fp)
   2083c:	10c00617 	ldw	r3,24(r2)
   20840:	e0fffd15 	stw	r3,-12(fp)
   20844:	10c00717 	ldw	r3,28(r2)
   20848:	e0fffe15 	stw	r3,-8(fp)
   2084c:	10800817 	ldw	r2,32(r2)
   20850:	e0bfff15 	stw	r2,-4(fp)
	cmd_t cmd_value;
	cmd_value = *gCommand;
   20854:	e0bfed17 	ldw	r2,-76(fp)
   20858:	10c00017 	ldw	r3,0(r2)
   2085c:	e0ffef15 	stw	r3,-68(fp)
   20860:	10c00117 	ldw	r3,4(r2)
   20864:	e0fff015 	stw	r3,-64(fp)
   20868:	10c00217 	ldw	r3,8(r2)
   2086c:	e0fff115 	stw	r3,-60(fp)
   20870:	10c00317 	ldw	r3,12(r2)
   20874:	e0fff215 	stw	r3,-56(fp)
   20878:	10c00417 	ldw	r3,16(r2)
   2087c:	e0fff315 	stw	r3,-52(fp)
   20880:	10c00517 	ldw	r3,20(r2)
   20884:	e0fff415 	stw	r3,-48(fp)
   20888:	10c00617 	ldw	r3,24(r2)
   2088c:	e0fff515 	stw	r3,-44(fp)
   20890:	10800717 	ldw	r2,28(r2)
   20894:	e0bff615 	stw	r2,-40(fp)

	if (sampled_data.rms < V_W1_CH) {
   20898:	e0bff817 	ldw	r2,-32(fp)
   2089c:	e0fff917 	ldw	r3,-28(fp)
   208a0:	000d883a 	mov	r6,zero
   208a4:	01d01ab4 	movhi	r7,16490
   208a8:	39f80004 	addi	r7,r7,-8192
   208ac:	1009883a 	mov	r4,r2
   208b0:	180b883a 	mov	r5,r3
   208b4:	0023fac0 	call	23fac <__ledf2>
   208b8:	1000050e 	bge	r2,zero,208d0 <voltage_response_update+0xe0>
		cmd_value.active_power_max = VW_MIN_POWER_MULTI;
   208bc:	e03fef15 	stw	zero,-68(fp)
   208c0:	00902df4 	movhi	r2,16567
   208c4:	109c0004 	addi	r2,r2,28672
   208c8:	e0bff015 	stw	r2,-64(fp)
   208cc:	00007406 	br	20aa0 <voltage_response_update+0x2b0>
	} else if ((sampled_data.rms > V_W1_CH) && (sampled_data.rms < V_W2_CH)) {
   208d0:	e0bff817 	ldw	r2,-32(fp)
   208d4:	e0fff917 	ldw	r3,-28(fp)
   208d8:	000d883a 	mov	r6,zero
   208dc:	01d01ab4 	movhi	r7,16490
   208e0:	39f80004 	addi	r7,r7,-8192
   208e4:	1009883a 	mov	r4,r2
   208e8:	180b883a 	mov	r5,r3
   208ec:	0023ec40 	call	23ec4 <__gedf2>
   208f0:	00802c0e 	bge	zero,r2,209a4 <voltage_response_update+0x1b4>
   208f4:	e0bff817 	ldw	r2,-32(fp)
   208f8:	e0fff917 	ldw	r3,-28(fp)
   208fc:	000d883a 	mov	r6,zero
   20900:	01d01af4 	movhi	r7,16491
   20904:	39f80004 	addi	r7,r7,-8192
   20908:	1009883a 	mov	r4,r2
   2090c:	180b883a 	mov	r5,r3
   20910:	0023fac0 	call	23fac <__ledf2>
   20914:	1000230e 	bge	r2,zero,209a4 <voltage_response_update+0x1b4>
		cmd_value.active_power_max = VW_MIN_POWER_MULTI
				+ K_watt_multi * (sampled_data.rms - V_W1_CH);
   20918:	e0bff817 	ldw	r2,-32(fp)
   2091c:	e0fff917 	ldw	r3,-28(fp)
   20920:	000d883a 	mov	r6,zero
   20924:	01d01ab4 	movhi	r7,16490
   20928:	39f80004 	addi	r7,r7,-8192
   2092c:	1009883a 	mov	r4,r2
   20930:	180b883a 	mov	r5,r3
   20934:	00248400 	call	24840 <__subdf3>
   20938:	1009883a 	mov	r4,r2
   2093c:	180b883a 	mov	r5,r3
   20940:	2005883a 	mov	r2,r4
   20944:	2807883a 	mov	r3,r5
   20948:	000d883a 	mov	r6,zero
   2094c:	01d029f4 	movhi	r7,16551
   20950:	39dc0004 	addi	r7,r7,28672
   20954:	1009883a 	mov	r4,r2
   20958:	180b883a 	mov	r5,r3
   2095c:	00240940 	call	24094 <__muldf3>
   20960:	1009883a 	mov	r4,r2
   20964:	180b883a 	mov	r5,r3
   20968:	2005883a 	mov	r2,r4
   2096c:	2807883a 	mov	r3,r5
   20970:	000d883a 	mov	r6,zero
   20974:	01d02df4 	movhi	r7,16567
   20978:	39dc0004 	addi	r7,r7,28672
   2097c:	1009883a 	mov	r4,r2
   20980:	180b883a 	mov	r5,r3
   20984:	0022ca40 	call	22ca4 <__adddf3>
   20988:	1009883a 	mov	r4,r2
   2098c:	180b883a 	mov	r5,r3
   20990:	2005883a 	mov	r2,r4
   20994:	2807883a 	mov	r3,r5
		cmd_value.active_power_max = VW_MIN_POWER_MULTI
   20998:	e0bfef15 	stw	r2,-68(fp)
   2099c:	e0fff015 	stw	r3,-64(fp)
   209a0:	00003f06 	br	20aa0 <voltage_response_update+0x2b0>
	}

	else if (sampled_data.rms > V_W2) {
   209a4:	e0bff817 	ldw	r2,-32(fp)
   209a8:	e0fff917 	ldw	r3,-28(fp)
   209ac:	000d883a 	mov	r6,zero
   209b0:	01d01c34 	movhi	r7,16496
   209b4:	39d00004 	addi	r7,r7,16384
   209b8:	1009883a 	mov	r4,r2
   209bc:	180b883a 	mov	r5,r3
   209c0:	0023ec40 	call	23ec4 <__gedf2>
   209c4:	0080050e 	bge	zero,r2,209dc <voltage_response_update+0x1ec>
		cmd_value.active_power_max = VW_MIN_POWER;
   209c8:	e03fef15 	stw	zero,-68(fp)
   209cc:	00902df4 	movhi	r2,16567
   209d0:	109c0004 	addi	r2,r2,28672
   209d4:	e0bff015 	stw	r2,-64(fp)
   209d8:	00003106 	br	20aa0 <voltage_response_update+0x2b0>
	} else if (sampled_data.rms > V_W1) {
   209dc:	e0bff817 	ldw	r2,-32(fp)
   209e0:	e0fff917 	ldw	r3,-28(fp)
   209e4:	000d883a 	mov	r6,zero
   209e8:	01d01c34 	movhi	r7,16496
   209ec:	39e80004 	addi	r7,r7,-24576
   209f0:	1009883a 	mov	r4,r2
   209f4:	180b883a 	mov	r5,r3
   209f8:	0023ec40 	call	23ec4 <__gedf2>
   209fc:	0080240e 	bge	zero,r2,20a90 <voltage_response_update+0x2a0>
		cmd_value.active_power_max = WATTS_RATED
				- K_watt * (sampled_data.rms - V_W1);
   20a00:	e0bff817 	ldw	r2,-32(fp)
   20a04:	e0fff917 	ldw	r3,-28(fp)
   20a08:	000d883a 	mov	r6,zero
   20a0c:	01d01c34 	movhi	r7,16496
   20a10:	39e80004 	addi	r7,r7,-24576
   20a14:	1009883a 	mov	r4,r2
   20a18:	180b883a 	mov	r5,r3
   20a1c:	00248400 	call	24840 <__subdf3>
   20a20:	1009883a 	mov	r4,r2
   20a24:	180b883a 	mov	r5,r3
   20a28:	2005883a 	mov	r2,r4
   20a2c:	2807883a 	mov	r3,r5
   20a30:	01a49274 	movhi	r6,37449
   20a34:	31892484 	addi	r6,r6,9362
   20a38:	01d02af4 	movhi	r7,16555
   20a3c:	39f24904 	addi	r7,r7,-14044
   20a40:	1009883a 	mov	r4,r2
   20a44:	180b883a 	mov	r5,r3
   20a48:	00240940 	call	24094 <__muldf3>
   20a4c:	1009883a 	mov	r4,r2
   20a50:	180b883a 	mov	r5,r3
   20a54:	2005883a 	mov	r2,r4
   20a58:	2807883a 	mov	r3,r5
   20a5c:	100d883a 	mov	r6,r2
   20a60:	180f883a 	mov	r7,r3
   20a64:	0009883a 	mov	r4,zero
   20a68:	01503774 	movhi	r5,16605
   20a6c:	29530004 	addi	r5,r5,19456
   20a70:	00248400 	call	24840 <__subdf3>
   20a74:	1009883a 	mov	r4,r2
   20a78:	180b883a 	mov	r5,r3
   20a7c:	2005883a 	mov	r2,r4
   20a80:	2807883a 	mov	r3,r5
		cmd_value.active_power_max = WATTS_RATED
   20a84:	e0bfef15 	stw	r2,-68(fp)
   20a88:	e0fff015 	stw	r3,-64(fp)
   20a8c:	00000406 	br	20aa0 <voltage_response_update+0x2b0>
	} else {
		cmd_value.active_power_max = WATTS_RATED;
   20a90:	e03fef15 	stw	zero,-68(fp)
   20a94:	00903774 	movhi	r2,16605
   20a98:	10930004 	addi	r2,r2,19456
   20a9c:	e0bff015 	stw	r2,-64(fp)
	}

	if (gVar_Enabled) {
   20aa0:	d0a00717 	ldw	r2,-32740(gp)
   20aa4:	10008526 	beq	r2,zero,20cbc <voltage_response_update+0x4cc>
		if (sampled_data.rms < V_V1) {
   20aa8:	e0bff817 	ldw	r2,-32(fp)
   20aac:	e0fff917 	ldw	r3,-28(fp)
   20ab0:	000d883a 	mov	r6,zero
   20ab4:	01d01ab4 	movhi	r7,16490
   20ab8:	39f80004 	addi	r7,r7,-8192
   20abc:	1009883a 	mov	r4,r2
   20ac0:	180b883a 	mov	r5,r3
   20ac4:	0023fac0 	call	23fac <__ledf2>
   20ac8:	1000050e 	bge	r2,zero,20ae0 <voltage_response_update+0x2f0>
			cmd_value.reactive_power = VV_MAX_VAR_DELIVER;
   20acc:	e03ff315 	stw	zero,-52(fp)
   20ad0:	009032b4 	movhi	r2,16586
   20ad4:	10978004 	addi	r2,r2,24064
   20ad8:	e0bff415 	stw	r2,-48(fp)
   20adc:	00007706 	br	20cbc <voltage_response_update+0x4cc>
		} else if ((sampled_data.rms > V_V1) && (sampled_data.rms < V_V2)) {
   20ae0:	e0bff817 	ldw	r2,-32(fp)
   20ae4:	e0fff917 	ldw	r3,-28(fp)
   20ae8:	000d883a 	mov	r6,zero
   20aec:	01d01ab4 	movhi	r7,16490
   20af0:	39f80004 	addi	r7,r7,-8192
   20af4:	1009883a 	mov	r4,r2
   20af8:	180b883a 	mov	r5,r3
   20afc:	0023ec40 	call	23ec4 <__gedf2>
   20b00:	00802d0e 	bge	zero,r2,20bb8 <voltage_response_update+0x3c8>
   20b04:	e0bff817 	ldw	r2,-32(fp)
   20b08:	e0fff917 	ldw	r3,-28(fp)
   20b0c:	000d883a 	mov	r6,zero
   20b10:	01d01b34 	movhi	r7,16492
   20b14:	39e00004 	addi	r7,r7,-32768
   20b18:	1009883a 	mov	r4,r2
   20b1c:	180b883a 	mov	r5,r3
   20b20:	0023fac0 	call	23fac <__ledf2>
   20b24:	1000240e 	bge	r2,zero,20bb8 <voltage_response_update+0x3c8>
			cmd_value.reactive_power = VV_MAX_VAR_DELIVER
					- K_var_deliver * (sampled_data.rms - V_V1);
   20b28:	e0bff817 	ldw	r2,-32(fp)
   20b2c:	e0fff917 	ldw	r3,-28(fp)
   20b30:	000d883a 	mov	r6,zero
   20b34:	01d01ab4 	movhi	r7,16490
   20b38:	39f80004 	addi	r7,r7,-8192
   20b3c:	1009883a 	mov	r4,r2
   20b40:	180b883a 	mov	r5,r3
   20b44:	00248400 	call	24840 <__subdf3>
   20b48:	1009883a 	mov	r4,r2
   20b4c:	180b883a 	mov	r5,r3
   20b50:	2005883a 	mov	r2,r4
   20b54:	2807883a 	mov	r3,r5
   20b58:	01a762b4 	movhi	r6,40330
   20b5c:	31b62784 	addi	r6,r6,-10082
   20b60:	01d02434 	movhi	r7,16528
   20b64:	39ce7604 	addi	r7,r7,14808
   20b68:	1009883a 	mov	r4,r2
   20b6c:	180b883a 	mov	r5,r3
   20b70:	00240940 	call	24094 <__muldf3>
   20b74:	1009883a 	mov	r4,r2
   20b78:	180b883a 	mov	r5,r3
   20b7c:	2005883a 	mov	r2,r4
   20b80:	2807883a 	mov	r3,r5
   20b84:	100d883a 	mov	r6,r2
   20b88:	180f883a 	mov	r7,r3
   20b8c:	0009883a 	mov	r4,zero
   20b90:	015032b4 	movhi	r5,16586
   20b94:	29578004 	addi	r5,r5,24064
   20b98:	00248400 	call	24840 <__subdf3>
   20b9c:	1009883a 	mov	r4,r2
   20ba0:	180b883a 	mov	r5,r3
   20ba4:	2005883a 	mov	r2,r4
   20ba8:	2807883a 	mov	r3,r5
			cmd_value.reactive_power = VV_MAX_VAR_DELIVER
   20bac:	e0bff315 	stw	r2,-52(fp)
   20bb0:	e0fff415 	stw	r3,-48(fp)
   20bb4:	00004106 	br	20cbc <voltage_response_update+0x4cc>
		} else if ((sampled_data.rms > V_V2) && (sampled_data.rms < V_V3)) {
   20bb8:	e0bff817 	ldw	r2,-32(fp)
   20bbc:	e0fff917 	ldw	r3,-28(fp)
   20bc0:	000d883a 	mov	r6,zero
   20bc4:	01d01b34 	movhi	r7,16492
   20bc8:	39e00004 	addi	r7,r7,-32768
   20bcc:	1009883a 	mov	r4,r2
   20bd0:	180b883a 	mov	r5,r3
   20bd4:	0023ec40 	call	23ec4 <__gedf2>
   20bd8:	00800b0e 	bge	zero,r2,20c08 <voltage_response_update+0x418>
   20bdc:	e0bff817 	ldw	r2,-32(fp)
   20be0:	e0fff917 	ldw	r3,-28(fp)
   20be4:	000d883a 	mov	r6,zero
   20be8:	01d01bb4 	movhi	r7,16494
   20bec:	1009883a 	mov	r4,r2
   20bf0:	180b883a 	mov	r5,r3
   20bf4:	0023fac0 	call	23fac <__ledf2>
   20bf8:	1000030e 	bge	r2,zero,20c08 <voltage_response_update+0x418>
			cmd_value.reactive_power = 0;
   20bfc:	e03ff315 	stw	zero,-52(fp)
   20c00:	e03ff415 	stw	zero,-48(fp)
   20c04:	00002d06 	br	20cbc <voltage_response_update+0x4cc>
		} else if ((sampled_data.rms > V_V3) && (sampled_data.rms < V_V4)) {
   20c08:	e0bff817 	ldw	r2,-32(fp)
   20c0c:	e0fff917 	ldw	r3,-28(fp)
   20c10:	000d883a 	mov	r6,zero
   20c14:	01d01bb4 	movhi	r7,16494
   20c18:	1009883a 	mov	r4,r2
   20c1c:	180b883a 	mov	r5,r3
   20c20:	0023ec40 	call	23ec4 <__gedf2>
   20c24:	0080210e 	bge	zero,r2,20cac <voltage_response_update+0x4bc>
   20c28:	e0bff817 	ldw	r2,-32(fp)
   20c2c:	e0fff917 	ldw	r3,-28(fp)
   20c30:	000d883a 	mov	r6,zero
   20c34:	01d01c34 	movhi	r7,16496
   20c38:	39c80004 	addi	r7,r7,8192
   20c3c:	1009883a 	mov	r4,r2
   20c40:	180b883a 	mov	r5,r3
   20c44:	0023fac0 	call	23fac <__ledf2>
   20c48:	1000180e 	bge	r2,zero,20cac <voltage_response_update+0x4bc>
			cmd_value.reactive_power = K_var_absorb * (sampled_data.rms - V_V3);
   20c4c:	e0bff817 	ldw	r2,-32(fp)
   20c50:	e0fff917 	ldw	r3,-28(fp)
   20c54:	000d883a 	mov	r6,zero
   20c58:	01d01bb4 	movhi	r7,16494
   20c5c:	1009883a 	mov	r4,r2
   20c60:	180b883a 	mov	r5,r3
   20c64:	00248400 	call	24840 <__subdf3>
   20c68:	1009883a 	mov	r4,r2
   20c6c:	180b883a 	mov	r5,r3
   20c70:	2005883a 	mov	r2,r4
   20c74:	2807883a 	mov	r3,r5
   20c78:	000d883a 	mov	r6,zero
   20c7c:	01d023f4 	movhi	r7,16527
   20c80:	39d00004 	addi	r7,r7,16384
   20c84:	1009883a 	mov	r4,r2
   20c88:	180b883a 	mov	r5,r3
   20c8c:	00240940 	call	24094 <__muldf3>
   20c90:	1009883a 	mov	r4,r2
   20c94:	180b883a 	mov	r5,r3
   20c98:	2005883a 	mov	r2,r4
   20c9c:	2807883a 	mov	r3,r5
   20ca0:	e0bff315 	stw	r2,-52(fp)
   20ca4:	e0fff415 	stw	r3,-48(fp)
   20ca8:	00000406 	br	20cbc <voltage_response_update+0x4cc>
		} else {
			cmd_value.reactive_power = VV_MAX_VAR_ABSORB;
   20cac:	e03ff315 	stw	zero,-52(fp)
   20cb0:	009034b4 	movhi	r2,16594
   20cb4:	10a50004 	addi	r2,r2,-27648
   20cb8:	e0bff415 	stw	r2,-48(fp)
		}
	}

	*gInput = sampled_data;
   20cbc:	e0bfee17 	ldw	r2,-72(fp)
   20cc0:	e0fff717 	ldw	r3,-36(fp)
   20cc4:	10c00015 	stw	r3,0(r2)
   20cc8:	e0fff817 	ldw	r3,-32(fp)
   20ccc:	10c00115 	stw	r3,4(r2)
   20cd0:	e0fff917 	ldw	r3,-28(fp)
   20cd4:	10c00215 	stw	r3,8(r2)
   20cd8:	e0fffa17 	ldw	r3,-24(fp)
   20cdc:	10c00315 	stw	r3,12(r2)
   20ce0:	e0fffb17 	ldw	r3,-20(fp)
   20ce4:	10c00415 	stw	r3,16(r2)
   20ce8:	e0fffc17 	ldw	r3,-16(fp)
   20cec:	10c00515 	stw	r3,20(r2)
   20cf0:	e0fffd17 	ldw	r3,-12(fp)
   20cf4:	10c00615 	stw	r3,24(r2)
   20cf8:	e0fffe17 	ldw	r3,-8(fp)
   20cfc:	10c00715 	stw	r3,28(r2)
   20d00:	e0ffff17 	ldw	r3,-4(fp)
   20d04:	10c00815 	stw	r3,32(r2)
	*gCommand = cmd_value;
   20d08:	e0bfed17 	ldw	r2,-76(fp)
   20d0c:	e0ffef17 	ldw	r3,-68(fp)
   20d10:	10c00015 	stw	r3,0(r2)
   20d14:	e0fff017 	ldw	r3,-64(fp)
   20d18:	10c00115 	stw	r3,4(r2)
   20d1c:	e0fff117 	ldw	r3,-60(fp)
   20d20:	10c00215 	stw	r3,8(r2)
   20d24:	e0fff217 	ldw	r3,-56(fp)
   20d28:	10c00315 	stw	r3,12(r2)
   20d2c:	e0fff317 	ldw	r3,-52(fp)
   20d30:	10c00415 	stw	r3,16(r2)
   20d34:	e0fff417 	ldw	r3,-48(fp)
   20d38:	10c00515 	stw	r3,20(r2)
   20d3c:	e0fff517 	ldw	r3,-44(fp)
   20d40:	10c00615 	stw	r3,24(r2)
   20d44:	e0fff617 	ldw	r3,-40(fp)
   20d48:	10c00715 	stw	r3,28(r2)
}
   20d4c:	0001883a 	nop
   20d50:	e037883a 	mov	sp,fp
   20d54:	dfc00117 	ldw	ra,4(sp)
   20d58:	df000017 	ldw	fp,0(sp)
   20d5c:	dec00204 	addi	sp,sp,8
   20d60:	f800283a 	ret

00020d64 <state_INIT>:
///===================================================
/// \brief     Main Finite State Machine INIT state.
/// \detailed  Display the banner and menu, clear
///            and reset fpga fabric, vector to enable.
///===================================================
static void state_INIT(void) {
   20d64:	defffe04 	addi	sp,sp,-8
   20d68:	dfc00115 	stw	ra,4(sp)
   20d6c:	df000015 	stw	fp,0(sp)
   20d70:	d839883a 	mov	fp,sp
	clear_terminal();                        // clear terminal (putty)
   20d74:	002178c0 	call	2178c <clear_terminal>
	display_welcome_message();               // Stabiliti-Q banner
   20d78:	00214840 	call	21484 <display_welcome_message>
	display_Version(1);                      // Display complete version information
   20d7c:	01000044 	movi	r4,1
   20d80:	00214d80 	call	214d8 <display_Version>

	clear_dma();                             // Clear the dma in fpga avalon module
   20d84:	00216e00 	call	216e0 <clear_dma>

	set_hardware_timer();                    // set XY_Counter in FPGA VHDL
   20d88:	00206440 	call	20644 <set_hardware_timer>
	init_hardware_IRQ();                     // Register the interrupt for XY_Counter tic
   20d8c:	00207600 	call	20760 <init_hardware_IRQ>

	set_HIL_amplitude(hil_amplitude, 1);     // HIL::set amplitude with a display message
   20d90:	d0a00217 	ldw	r2,-32760(gp)
   20d94:	01400044 	movi	r5,1
   20d98:	1009883a 	mov	r4,r2
   20d9c:	002028c0 	call	2028c <set_HIL_amplitude>
	set_HIL_timer_cnts(TIMER_CNTS_50HZ, 1);  // HIL::set timer cnts (period) with display message
   20da0:	01400044 	movi	r5,1
   20da4:	0100f384 	movi	r4,974
   20da8:	00202fc0 	call	202fc <set_HIL_timer_cnts>

	set_HIL_filter(&hil_params);             // HIL::set parameters of low pass to generate currents
   20dac:	010000f4 	movhi	r4,3
   20db0:	210dba04 	addi	r4,r4,14056
   20db4:	00203d00 	call	203d0 <set_HIL_filter>

	set_squares_filter(&squares_params);     // signal_processing.vhd set sum squares filter params
   20db8:	010000f4 	movhi	r4,3
   20dbc:	210dbd04 	addi	r4,r4,14068
   20dc0:	00226440 	call	22644 <set_squares_filter>
	set_timer_filter(&timer_params);         // signal_processing.vhd set freq filter params
   20dc4:	010000f4 	movhi	r4,3
   20dc8:	210dc004 	addi	r4,r4,14080
   20dcc:	00226a40 	call	226a4 <set_timer_filter>

	run_simple_test_sequence();              // Run simple test sequence
   20dd0:	00218b00 	call	218b0 <run_simple_test_sequence>

	gCommand.active_power_max = 14200.0;     // Set maximum rated power
   20dd4:	008000f4 	movhi	r2,3
   20dd8:	10142915 	stw	zero,20644(r2)
   20ddc:	00903334 	movhi	r2,16588
   20de0:	10af0004 	addi	r2,r2,-17408
   20de4:	00c000f4 	movhi	r3,3
   20de8:	18942a15 	stw	r2,20648(r3)
	gCommand.reactive_power = 0.0;           // Set nominal reactive power
   20dec:	008000f4 	movhi	r2,3
   20df0:	10142d15 	stw	zero,20660(r2)
   20df4:	008000f4 	movhi	r2,3
   20df8:	10142e15 	stw	zero,20664(r2)

	gMode = Volt_Watt_Var;                   // Assign mode
   20dfc:	00800084 	movi	r2,2
   20e00:	d0a33c15 	stw	r2,-29456(gp)
	//print_mode(gMode);				     // Print the currently mode

	select_HIL_inputs();                     // Select HIL data as mux input to signal processing chain
   20e04:	00202600 	call	20260 <select_HIL_inputs>
	gInput.rms = 0.0;
   20e08:	008000f4 	movhi	r2,3
   20e0c:	10142115 	stw	zero,20612(r2)
   20e10:	008000f4 	movhi	r2,3
   20e14:	10142215 	stw	zero,20616(r2)
	state = state_ENA;
   20e18:	008000b4 	movhi	r2,2
   20e1c:	10838f04 	addi	r2,r2,3644
   20e20:	d0a00015 	stw	r2,-32768(gp)
}
   20e24:	0001883a 	nop
   20e28:	e037883a 	mov	sp,fp
   20e2c:	dfc00117 	ldw	ra,4(sp)
   20e30:	df000017 	ldw	fp,0(sp)
   20e34:	dec00204 	addi	sp,sp,8
   20e38:	f800283a 	ret

00020e3c <state_ENA>:
/// \detailed  Read the slide switches and data stack,
///            and call handlers for these. Check for
///            command to vector to RUN. In
///            future, support FLT inputs.
///===================================================
static void state_ENA(void) {
   20e3c:	defff804 	addi	sp,sp,-32
   20e40:	dfc00715 	stw	ra,28(sp)
   20e44:	df000615 	stw	fp,24(sp)
   20e48:	df000604 	addi	fp,sp,24

	read_data_stack();              // read of data stack
   20e4c:	00212f00 	call	212f0 <read_data_stack>
	read_data_stack();
   20e50:	00212f00 	call	212f0 <read_data_stack>
	delay_msec(20);
   20e54:	01000504 	movi	r4,20
   20e58:	00217440 	call	21744 <delay_msec>
	clear_terminal_handler();       // clear terminal if commanded
   20e5c:	00212980 	call	21298 <clear_terminal_handler>
	read_data_stack();              // read of data stack
   20e60:	00212f00 	call	212f0 <read_data_stack>
	delay_msec(20);
   20e64:	01000504 	movi	r4,20
   20e68:	00217440 	call	21744 <delay_msec>
	get_version_handler();          // display version if commanded
   20e6c:	00213d40 	call	213d4 <get_version_handler>
	get_menu_handler();             // display menu if commanded
   20e70:	002142c0 	call	2142c <get_menu_handler>
	put_reset_handler();            // reset of the HIL data
   20e74:	002053c0 	call	2053c <put_reset_handler>

	read_data_stack();              // read of data stack
   20e78:	00212f00 	call	212f0 <read_data_stack>
	delay_msec(20);
   20e7c:	01000504 	movi	r4,20
   20e80:	00217440 	call	21744 <delay_msec>

	int put_hil_freq_01 = strcmp(cmd_buffer, CMD_HIL_FREQ_01);
   20e84:	d0a34417 	ldw	r2,-29424(gp)
   20e88:	014000f4 	movhi	r5,3
   20e8c:	2949bc04 	addi	r5,r5,9968
   20e90:	1009883a 	mov	r4,r2
   20e94:	00255440 	call	25544 <strcmp>
   20e98:	e0bfff15 	stw	r2,-4(fp)
	if (!put_hil_freq_01) {
   20e9c:	e0bfff17 	ldw	r2,-4(fp)
   20ea0:	1000121e 	bne	r2,zero,20eec <state_ENA+0xb0>
		printf("\r\n***Updated HIL Command \r\n");
   20ea4:	010000f4 	movhi	r4,3
   20ea8:	2109be04 	addi	r4,r4,9976
   20eac:	00255340 	call	25534 <puts>
		printf("-----------------------\r\n");
   20eb0:	010000f4 	movhi	r4,3
   20eb4:	2109c504 	addi	r4,r4,10004
   20eb8:	00255340 	call	25534 <puts>
		printf("HIL FREQ TEST 01 - General Case Decrease. \r\n");
   20ebc:	010000f4 	movhi	r4,3
   20ec0:	2109cc04 	addi	r4,r4,10032
   20ec4:	00255340 	call	25534 <puts>
		printf("Freq will decrease then return to NOMINAL.\r\n");
   20ec8:	010000f4 	movhi	r4,3
   20ecc:	2109d704 	addi	r4,r4,10076
   20ed0:	00255340 	call	25534 <puts>
		clear_dma();
   20ed4:	00216e00 	call	216e0 <clear_dma>
		g_hil_mode = FREQ_DECREASE;
   20ed8:	00800044 	movi	r2,1
   20edc:	d0a34315 	stw	r2,-29428(gp)
		g_hil_pivot = 18;
   20ee0:	00800484 	movi	r2,18
   20ee4:	d0a00115 	stw	r2,-32764(gp)
		g_hil_finish = 0;
   20ee8:	d0234215 	stw	zero,-29432(gp)
	}

	int put_hil_freq_02 = strcmp(cmd_buffer, CMD_HIL_FREQ_02);
   20eec:	d0a34417 	ldw	r2,-29424(gp)
   20ef0:	014000f4 	movhi	r5,3
   20ef4:	2949e204 	addi	r5,r5,10120
   20ef8:	1009883a 	mov	r4,r2
   20efc:	00255440 	call	25544 <strcmp>
   20f00:	e0bffe15 	stw	r2,-8(fp)
	if (!put_hil_freq_02) {
   20f04:	e0bffe17 	ldw	r2,-8(fp)
   20f08:	1000121e 	bne	r2,zero,20f54 <state_ENA+0x118>
		printf("\r\n***Updated HIL Command \r\n");
   20f0c:	010000f4 	movhi	r4,3
   20f10:	2109be04 	addi	r4,r4,9976
   20f14:	00255340 	call	25534 <puts>
		printf("-----------------------\r\n");
   20f18:	010000f4 	movhi	r4,3
   20f1c:	2109c504 	addi	r4,r4,10004
   20f20:	00255340 	call	25534 <puts>
		printf("HIL FREQ TEST 02 - General Case Decrease to Max. \r\n");
   20f24:	010000f4 	movhi	r4,3
   20f28:	2109e404 	addi	r4,r4,10128
   20f2c:	00255340 	call	25534 <puts>
		printf("Freq will decrease to MAX POWER, then return to NOMINAL.\r\n");
   20f30:	010000f4 	movhi	r4,3
   20f34:	2109f104 	addi	r4,r4,10180
   20f38:	00255340 	call	25534 <puts>
		clear_dma();
   20f3c:	00216e00 	call	216e0 <clear_dma>
		g_hil_mode = FREQ_DECREASE;
   20f40:	00800044 	movi	r2,1
   20f44:	d0a34315 	stw	r2,-29428(gp)
		g_hil_pivot = 26;
   20f48:	00800684 	movi	r2,26
   20f4c:	d0a00115 	stw	r2,-32764(gp)
		g_hil_finish = 0;
   20f50:	d0234215 	stw	zero,-29432(gp)
	}

	int put_hil_freq_03 = strcmp(cmd_buffer, CMD_HIL_FREQ_03);
   20f54:	d0a34417 	ldw	r2,-29424(gp)
   20f58:	014000f4 	movhi	r5,3
   20f5c:	294a0004 	addi	r5,r5,10240
   20f60:	1009883a 	mov	r4,r2
   20f64:	00255440 	call	25544 <strcmp>
   20f68:	e0bffd15 	stw	r2,-12(fp)
	if (!put_hil_freq_03) {
   20f6c:	e0bffd17 	ldw	r2,-12(fp)
   20f70:	1000111e 	bne	r2,zero,20fb8 <state_ENA+0x17c>
		printf("\r\n***Updated HIL Command \r\n");
   20f74:	010000f4 	movhi	r4,3
   20f78:	2109be04 	addi	r4,r4,9976
   20f7c:	00255340 	call	25534 <puts>
		printf("-----------------------\r\n");
   20f80:	010000f4 	movhi	r4,3
   20f84:	2109c504 	addi	r4,r4,10004
   20f88:	00255340 	call	25534 <puts>
		printf("HIL FREQ TEST 03 - General Case Increase. \r\n");
   20f8c:	010000f4 	movhi	r4,3
   20f90:	210a0204 	addi	r4,r4,10248
   20f94:	00255340 	call	25534 <puts>
		printf(
   20f98:	010000f4 	movhi	r4,3
   20f9c:	210a0d04 	addi	r4,r4,10292
   20fa0:	00255340 	call	25534 <puts>
				"Freq will increase to FREQ_RISING, then return to NOMINAL.\r\n");
		clear_dma();
   20fa4:	00216e00 	call	216e0 <clear_dma>
		g_hil_mode = FREQ_INCREASE;
   20fa8:	d0234315 	stw	zero,-29428(gp)
		g_hil_pivot = 22;
   20fac:	00800584 	movi	r2,22
   20fb0:	d0a00115 	stw	r2,-32764(gp)
		g_hil_finish = 0;
   20fb4:	d0234215 	stw	zero,-29432(gp)
	}

	int put_hil_freq_04 = strcmp(cmd_buffer, CMD_HIL_FREQ_04);
   20fb8:	d0a34417 	ldw	r2,-29424(gp)
   20fbc:	014000f4 	movhi	r5,3
   20fc0:	294a1c04 	addi	r5,r5,10352
   20fc4:	1009883a 	mov	r4,r2
   20fc8:	00255440 	call	25544 <strcmp>
   20fcc:	e0bffc15 	stw	r2,-16(fp)
	if (!put_hil_freq_04) {
   20fd0:	e0bffc17 	ldw	r2,-16(fp)
   20fd4:	1000111e 	bne	r2,zero,2101c <state_ENA+0x1e0>
		printf("\r\n***Updated HIL Command \r\n");
   20fd8:	010000f4 	movhi	r4,3
   20fdc:	2109be04 	addi	r4,r4,9976
   20fe0:	00255340 	call	25534 <puts>
		printf("-----------------------\r\n");
   20fe4:	010000f4 	movhi	r4,3
   20fe8:	2109c504 	addi	r4,r4,10004
   20fec:	00255340 	call	25534 <puts>
		printf("HIL FREQ TEST 04 - General Case Increase to Max. \r\n");
   20ff0:	010000f4 	movhi	r4,3
   20ff4:	210a1e04 	addi	r4,r4,10360
   20ff8:	00255340 	call	25534 <puts>
		printf("Freq will increase to MIN POWER, then return to NOMINAL.\r\n");
   20ffc:	010000f4 	movhi	r4,3
   21000:	210a2b04 	addi	r4,r4,10412
   21004:	00255340 	call	25534 <puts>
		clear_dma();
   21008:	00216e00 	call	216e0 <clear_dma>
		g_hil_mode = FREQ_INCREASE;
   2100c:	d0234315 	stw	zero,-29428(gp)
		g_hil_pivot = 27;
   21010:	008006c4 	movi	r2,27
   21014:	d0a00115 	stw	r2,-32764(gp)
		g_hil_finish = 0;
   21018:	d0234215 	stw	zero,-29432(gp)
	}

	read_data_stack();
   2101c:	00212f00 	call	212f0 <read_data_stack>
	delay_msec(20);
   21020:	01000504 	movi	r4,20
   21024:	00217440 	call	21744 <delay_msec>
	int cmd_enax = strcmp(cmd_buffer, CMD_ENA);
   21028:	d0a34417 	ldw	r2,-29424(gp)
   2102c:	014000f4 	movhi	r5,3
   21030:	294a3a04 	addi	r5,r5,10472
   21034:	1009883a 	mov	r4,r2
   21038:	00255440 	call	25544 <strcmp>
   2103c:	e0bffb15 	stw	r2,-20(fp)
	if (!cmd_enax) {
   21040:	e0bffb17 	ldw	r2,-20(fp)
   21044:	1000041e 	bne	r2,zero,21058 <state_ENA+0x21c>
		printf("Already in ENA state!\r\n");
   21048:	010000f4 	movhi	r4,3
   2104c:	210a3c04 	addi	r4,r4,10480
   21050:	00255340 	call	25534 <puts>
		clear_dma();
   21054:	00216e00 	call	216e0 <clear_dma>
	}

	int cmd_run = strcmp(cmd_buffer, CMD_RUN);
   21058:	d0a34417 	ldw	r2,-29424(gp)
   2105c:	014000f4 	movhi	r5,3
   21060:	294a4204 	addi	r5,r5,10504
   21064:	1009883a 	mov	r4,r2
   21068:	00255440 	call	25544 <strcmp>
   2106c:	e0bffa15 	stw	r2,-24(fp)
	if (!cmd_run) {
   21070:	e0bffa17 	ldw	r2,-24(fp)
   21074:	1000101e 	bne	r2,zero,210b8 <state_ENA+0x27c>
		//printf("*** Vectoring -> state_RUN ...\r\n");


		printf("\r\n");
   21078:	010000f4 	movhi	r4,3
   2107c:	210a4404 	addi	r4,r4,10512
   21080:	00255340 	call	25534 <puts>
		printf("SIMULATION::START \r\n");
   21084:	010000f4 	movhi	r4,3
   21088:	210a4504 	addi	r4,r4,10516
   2108c:	00255340 	call	25534 <puts>
		printf("Count,\tSum Squares,\tVrms_Nios,\tFreqHz_Nios,\tTimer Cnts,\tWatts Squared,\tWatts_Nios \r\n");
   21090:	010000f4 	movhi	r4,3
   21094:	210a4a04 	addi	r4,r4,10536
   21098:	00255340 	call	25534 <puts>

		clear_dma();
   2109c:	00216e00 	call	216e0 <clear_dma>
		delay_msec(10);
   210a0:	01000284 	movi	r4,10
   210a4:	00217440 	call	21744 <delay_msec>
		state = state_RUN;
   210a8:	008000b4 	movhi	r2,2
   210ac:	10843704 	addi	r2,r2,4316
   210b0:	d0a00015 	stw	r2,-32768(gp)
	} else {
		state = state_ENA;
	}
}
   210b4:	00000306 	br	210c4 <state_ENA+0x288>
		state = state_ENA;
   210b8:	008000b4 	movhi	r2,2
   210bc:	10838f04 	addi	r2,r2,3644
   210c0:	d0a00015 	stw	r2,-32768(gp)
}
   210c4:	0001883a 	nop
   210c8:	e037883a 	mov	sp,fp
   210cc:	dfc00117 	ldw	ra,4(sp)
   210d0:	df000017 	ldw	fp,0(sp)
   210d4:	dec00204 	addi	sp,sp,8
   210d8:	f800283a 	ret

000210dc <state_RUN>:
/// \detailed  Read the slide switches and data stack,
///            and call handlers for these. Check for
///            command to vector back to ENA. In
///            future, support FLT inputs.
///===================================================
static void state_RUN(void) {
   210dc:	defffc04 	addi	sp,sp,-16
   210e0:	dfc00315 	stw	ra,12(sp)
   210e4:	df000215 	stw	fp,8(sp)
   210e8:	df000204 	addi	fp,sp,8

	//------------------------------------------------
	// Power_Quality::Sample_Inputs
	//------------------------------------------------
	voltage_sample(&gInput);
   210ec:	010000f4 	movhi	r4,3
   210f0:	21142004 	addi	r4,r4,20608
   210f4:	002228c0 	call	2228c <voltage_sample>
	frequency_sample(&gInput);
   210f8:	010000f4 	movhi	r4,3
   210fc:	21142004 	addi	r4,r4,20608
   21100:	00223c40 	call	223c4 <frequency_sample>
	sample_power_values(&gInput);
   21104:	010000f4 	movhi	r4,3
   21108:	21142004 	addi	r4,r4,20608
   2110c:	002250c0 	call	2250c <sample_power_values>

	if (g_mutex_hil){
   21110:	d0a34b17 	ldw	r2,-29396(gp)
   21114:	10001626 	beq	r2,zero,21170 <state_RUN+0x94>
//	}

	//------------------------------------------------
	// HIL::Display_Results
	//------------------------------------------------
	HIL_display_results(g_main_count, &gInput, &gCommand, g_sec_counter, ST_GENERAL);
   21118:	d0e34117 	ldw	r3,-29436(gp)
   2111c:	d1234817 	ldw	r4,-29408(gp)
   21120:	d0a33f17 	ldw	r2,-29444(gp)
   21124:	d8800015 	stw	r2,0(sp)
   21128:	200f883a 	mov	r7,r4
   2112c:	018000f4 	movhi	r6,3
   21130:	31942904 	addi	r6,r6,20644
   21134:	014000f4 	movhi	r5,3
   21138:	29542004 	addi	r5,r5,20608
   2113c:	1809883a 	mov	r4,r3
   21140:	00204940 	call	20494 <HIL_display_results>

	g_main_count++;
   21144:	d0a34117 	ldw	r2,-29436(gp)
   21148:	10800044 	addi	r2,r2,1
   2114c:	d0a34115 	stw	r2,-29436(gp)
	if (g_main_count == 120) g_hil_finish = 1;
   21150:	d0a34117 	ldw	r2,-29436(gp)
   21154:	10801e18 	cmpnei	r2,r2,120
   21158:	1000031e 	bne	r2,zero,21168 <state_RUN+0x8c>
   2115c:	00800044 	movi	r2,1
   21160:	d0a34215 	stw	r2,-29432(gp)
   21164:	00000106 	br	2116c <state_RUN+0x90>
	else g_hil_finish = 0;
   21168:	d0234215 	stw	zero,-29432(gp)

	//delay_msec(400);
	g_mutex_hil = 0;
   2116c:	d0234b15 	stw	zero,-29396(gp)

	}
	//------------------------------------------------
	// Next State determination
	//------------------------------------------------
	read_data_stack();
   21170:	00212f00 	call	212f0 <read_data_stack>
	int cmd_enax = strcmp(cmd_buffer, "put ena");
   21174:	d0a34417 	ldw	r2,-29424(gp)
   21178:	014000f4 	movhi	r5,3
   2117c:	294a3a04 	addi	r5,r5,10472
   21180:	1009883a 	mov	r4,r2
   21184:	00255440 	call	25544 <strcmp>
   21188:	e0bfff15 	stw	r2,-4(fp)

	if (g_hil_finish){
   2118c:	d0a34217 	ldw	r2,-29432(gp)
   21190:	10000726 	beq	r2,zero,211b0 <state_RUN+0xd4>
		printf("SIMULATION::END\r\n");
   21194:	010000f4 	movhi	r4,3
   21198:	210a5f04 	addi	r4,r4,10620
   2119c:	00255340 	call	25534 <puts>
		state = state_ENA;
   211a0:	008000b4 	movhi	r2,2
   211a4:	10838f04 	addi	r2,r2,3644
   211a8:	d0a00015 	stw	r2,-32768(gp)
		state = state_ENA;
		clear_dma();
	} else {
		state = state_RUN;
	}
}
   211ac:	00000d06 	br	211e4 <state_RUN+0x108>
	else if (!cmd_enax) {
   211b0:	e0bfff17 	ldw	r2,-4(fp)
   211b4:	1000081e 	bne	r2,zero,211d8 <state_RUN+0xfc>
		printf("\r\n*** Vectoring -> state_ENA ...\r\n\r\n");
   211b8:	010000f4 	movhi	r4,3
   211bc:	210a6404 	addi	r4,r4,10640
   211c0:	00255340 	call	25534 <puts>
		state = state_ENA;
   211c4:	008000b4 	movhi	r2,2
   211c8:	10838f04 	addi	r2,r2,3644
   211cc:	d0a00015 	stw	r2,-32768(gp)
		clear_dma();
   211d0:	00216e00 	call	216e0 <clear_dma>
}
   211d4:	00000306 	br	211e4 <state_RUN+0x108>
		state = state_RUN;
   211d8:	008000b4 	movhi	r2,2
   211dc:	10843704 	addi	r2,r2,4316
   211e0:	d0a00015 	stw	r2,-32768(gp)
}
   211e4:	0001883a 	nop
   211e8:	e037883a 	mov	sp,fp
   211ec:	dfc00117 	ldw	ra,4(sp)
   211f0:	df000017 	ldw	fp,0(sp)
   211f4:	dec00204 	addi	sp,sp,8
   211f8:	f800283a 	ret

000211fc <main>:

///==============================================
///  Main Loop for Stabiliti-Q
///==============================================

int main() {
   211fc:	defffe04 	addi	sp,sp,-8
   21200:	dfc00115 	stw	ra,4(sp)
   21204:	df000015 	stw	fp,0(sp)
   21208:	d839883a 	mov	fp,sp
	while (1) {
		(*state)();
   2120c:	d0a00017 	ldw	r2,-32768(gp)
   21210:	103ee83a 	callr	r2
   21214:	003ffd06 	br	2120c <main+0x10>

00021218 <substring>:



char rx_buffer[11];

void substring(char s[], char sub[], int p, int len) {
   21218:	defffa04 	addi	sp,sp,-24
   2121c:	df000515 	stw	fp,20(sp)
   21220:	df000504 	addi	fp,sp,20
   21224:	e13ffe15 	stw	r4,-8(fp)
   21228:	e17ffd15 	stw	r5,-12(fp)
   2122c:	e1bffc15 	stw	r6,-16(fp)
   21230:	e1fffb15 	stw	r7,-20(fp)
   int j = 0;
   21234:	e03fff15 	stw	zero,-4(fp)

   while (j < len) {
   21238:	00000e06 	br	21274 <substring+0x5c>
      sub[j] = s[p+j];
   2123c:	e0fffc17 	ldw	r3,-16(fp)
   21240:	e0bfff17 	ldw	r2,-4(fp)
   21244:	1885883a 	add	r2,r3,r2
   21248:	1007883a 	mov	r3,r2
   2124c:	e0bffe17 	ldw	r2,-8(fp)
   21250:	10c7883a 	add	r3,r2,r3
   21254:	e0bfff17 	ldw	r2,-4(fp)
   21258:	e13ffd17 	ldw	r4,-12(fp)
   2125c:	2085883a 	add	r2,r4,r2
   21260:	18c00003 	ldbu	r3,0(r3)
   21264:	10c00005 	stb	r3,0(r2)
      j++;
   21268:	e0bfff17 	ldw	r2,-4(fp)
   2126c:	10800044 	addi	r2,r2,1
   21270:	e0bfff15 	stw	r2,-4(fp)
   while (j < len) {
   21274:	e0ffff17 	ldw	r3,-4(fp)
   21278:	e0bffb17 	ldw	r2,-20(fp)
   2127c:	18bfef16 	blt	r3,r2,2123c <substring+0x24>
   }
   //sub[c] = '\0';
}
   21280:	0001883a 	nop
   21284:	0001883a 	nop
   21288:	e037883a 	mov	sp,fp
   2128c:	df000017 	ldw	fp,0(sp)
   21290:	dec00104 	addi	sp,sp,4
   21294:	f800283a 	ret

00021298 <clear_terminal_handler>:

void clear_terminal_handler(){
   21298:	defffd04 	addi	sp,sp,-12
   2129c:	dfc00215 	stw	ra,8(sp)
   212a0:	df000115 	stw	fp,4(sp)
   212a4:	df000104 	addi	fp,sp,4
	int put_clear = strcmp(cmd_buffer, "cls all");
   212a8:	d0a34417 	ldw	r2,-29424(gp)
   212ac:	014000f4 	movhi	r5,3
   212b0:	294a6d04 	addi	r5,r5,10676
   212b4:	1009883a 	mov	r4,r2
   212b8:	00255440 	call	25544 <strcmp>
   212bc:	e0bfff15 	stw	r2,-4(fp)
	if (!put_clear) {
   212c0:	e0bfff17 	ldw	r2,-4(fp)
   212c4:	1000041e 	bne	r2,zero,212d8 <clear_terminal_handler+0x40>
		clear_terminal();
   212c8:	002178c0 	call	2178c <clear_terminal>
		clear_dma();
   212cc:	00216e00 	call	216e0 <clear_dma>
		delay_msec(1);
   212d0:	01000044 	movi	r4,1
   212d4:	00217440 	call	21744 <delay_msec>
	}
}
   212d8:	0001883a 	nop
   212dc:	e037883a 	mov	sp,fp
   212e0:	dfc00117 	ldw	ra,4(sp)
   212e4:	df000017 	ldw	fp,0(sp)
   212e8:	dec00204 	addi	sp,sp,8
   212ec:	f800283a 	ret

000212f0 <read_data_stack>:




void read_data_stack() {
   212f0:	defffe04 	addi	sp,sp,-8
   212f4:	df000115 	stw	fp,4(sp)
   212f8:	df000104 	addi	fp,sp,4
//	substring(rx_buffer,cmd_bufferX,0,7);
//	substring(rx_buffer,value_bufferX,7,4);
//	cmd_buffer = cmd_bufferX;
//	value_buffer = value_bufferX;

	for (int k = 0; k < RX_BUFFER_SIZE; k++) {
   212fc:	e03fff15 	stw	zero,-4(fp)
   21300:	00001b06 	br	21370 <read_data_stack+0x80>
		rx_buff[k] = (char) IORD(DMA_RX_0_BASE, k);
   21304:	e0bfff17 	ldw	r2,-4(fp)
   21308:	100490ba 	slli	r2,r2,2
   2130c:	1007883a 	mov	r3,r2
   21310:	00800134 	movhi	r2,4
   21314:	10842004 	addi	r2,r2,4224
   21318:	1885883a 	add	r2,r3,r2
   2131c:	10800037 	ldwio	r2,0(r2)
   21320:	1009883a 	mov	r4,r2
   21324:	e0ffff17 	ldw	r3,-4(fp)
   21328:	d0a34c04 	addi	r2,gp,-29392
   2132c:	1885883a 	add	r2,r3,r2
   21330:	11000005 	stb	r4,0(r2)
		rx_buff[k] = (char) IORD(DMA_RX_0_BASE, k);
   21334:	e0bfff17 	ldw	r2,-4(fp)
   21338:	100490ba 	slli	r2,r2,2
   2133c:	1007883a 	mov	r3,r2
   21340:	00800134 	movhi	r2,4
   21344:	10842004 	addi	r2,r2,4224
   21348:	1885883a 	add	r2,r3,r2
   2134c:	10800037 	ldwio	r2,0(r2)
   21350:	1009883a 	mov	r4,r2
   21354:	e0ffff17 	ldw	r3,-4(fp)
   21358:	d0a34c04 	addi	r2,gp,-29392
   2135c:	1885883a 	add	r2,r3,r2
   21360:	11000005 	stb	r4,0(r2)
	for (int k = 0; k < RX_BUFFER_SIZE; k++) {
   21364:	e0bfff17 	ldw	r2,-4(fp)
   21368:	10800044 	addi	r2,r2,1
   2136c:	e0bfff15 	stw	r2,-4(fp)
   21370:	e0bfff17 	ldw	r2,-4(fp)
   21374:	108001d0 	cmplti	r2,r2,7
   21378:	103fe21e 	bne	r2,zero,21304 <read_data_stack+0x14>
	}
	cmd_buffer = rx_buff;
   2137c:	d0a34c04 	addi	r2,gp,-29392
   21380:	d0a34415 	stw	r2,-29424(gp)
//	for (int kk = CMD_STRLEN; kk < (CMD_STRLEN + RX_BUFFER_2_SIZE); kk++) {
//		rx_buff2[kk - CMD_STRLEN] = (char) IORD(DMA_RX_0_BASE, kk);
//		rx_buff2[kk - CMD_STRLEN] = (char) IORD(DMA_RX_0_BASE, kk);
//	}
//	value_buffer = rx_buff2;
	return;
   21384:	0001883a 	nop

}
   21388:	e037883a 	mov	sp,fp
   2138c:	df000017 	ldw	fp,0(sp)
   21390:	dec00104 	addi	sp,sp,4
   21394:	f800283a 	ret

00021398 <uart_print_buffer>:

void uart_print_buffer() {
   21398:	defffe04 	addi	sp,sp,-8
   2139c:	dfc00115 	stw	ra,4(sp)
   213a0:	df000015 	stw	fp,0(sp)
   213a4:	d839883a 	mov	fp,sp
	//printf("index \tRX_BUFF \tCMD_BUFF \r\n");
	//for (int i = 0; i < CMD_STRLEN; i++) {
		//printf("%d\t", i);
		//printf("%c \r\n", *(rx_buff + i));
	printf("cmd_buffer = %s\r\n", cmd_buffer);
   213a8:	d0a34417 	ldw	r2,-29424(gp)
   213ac:	100b883a 	mov	r5,r2
   213b0:	010000f4 	movhi	r4,3
   213b4:	210a6f04 	addi	r4,r4,10684
   213b8:	00254100 	call	25410 <printf>
	//printf("value_buffer = %s \r\n", value_buffer);
	//clear_dma();
	//}
	return;
   213bc:	0001883a 	nop
}
   213c0:	e037883a 	mov	sp,fp
   213c4:	dfc00117 	ldw	ra,4(sp)
   213c8:	df000017 	ldw	fp,0(sp)
   213cc:	dec00204 	addi	sp,sp,8
   213d0:	f800283a 	ret

000213d4 <get_version_handler>:


void get_version_handler() {
   213d4:	defffd04 	addi	sp,sp,-12
   213d8:	dfc00215 	stw	ra,8(sp)
   213dc:	df000115 	stw	fp,4(sp)
   213e0:	df000104 	addi	fp,sp,4
	int get_version = strcmp(cmd_buffer, GET_VER);
   213e4:	d0a34417 	ldw	r2,-29424(gp)
   213e8:	014000f4 	movhi	r5,3
   213ec:	294a7404 	addi	r5,r5,10704
   213f0:	1009883a 	mov	r4,r2
   213f4:	00255440 	call	25544 <strcmp>
   213f8:	e0bfff15 	stw	r2,-4(fp)
	if (!get_version) {
   213fc:	e0bfff17 	ldw	r2,-4(fp)
   21400:	1000041e 	bne	r2,zero,21414 <get_version_handler+0x40>
		//clear_terminal();
		display_Version(0);
   21404:	0009883a 	mov	r4,zero
   21408:	00214d80 	call	214d8 <display_Version>
		clear_dma();
   2140c:	00216e00 	call	216e0 <clear_dma>
	}
	return;
   21410:	0001883a 	nop
   21414:	0001883a 	nop
}
   21418:	e037883a 	mov	sp,fp
   2141c:	dfc00117 	ldw	ra,4(sp)
   21420:	df000017 	ldw	fp,0(sp)
   21424:	dec00204 	addi	sp,sp,8
   21428:	f800283a 	ret

0002142c <get_menu_handler>:

void get_menu_handler() {
   2142c:	defffd04 	addi	sp,sp,-12
   21430:	dfc00215 	stw	ra,8(sp)
   21434:	df000115 	stw	fp,4(sp)
   21438:	df000104 	addi	fp,sp,4
	int get_cmd = strcmp(cmd_buffer, GET_CMD);
   2143c:	d0a34417 	ldw	r2,-29424(gp)
   21440:	014000f4 	movhi	r5,3
   21444:	294a7604 	addi	r5,r5,10712
   21448:	1009883a 	mov	r4,r2
   2144c:	00255440 	call	25544 <strcmp>
   21450:	e0bfff15 	stw	r2,-4(fp)
	if (!get_cmd) {
   21454:	e0bfff17 	ldw	r2,-4(fp)
   21458:	1000041e 	bne	r2,zero,2146c <get_menu_handler+0x40>
		//clear_terminal();
		display_Menu(0);
   2145c:	0009883a 	mov	r4,zero
   21460:	00215d40 	call	215d4 <display_Menu>
		clear_dma();
   21464:	00216e00 	call	216e0 <clear_dma>
	}
	return;
   21468:	0001883a 	nop
   2146c:	0001883a 	nop
}
   21470:	e037883a 	mov	sp,fp
   21474:	dfc00117 	ldw	ra,4(sp)
   21478:	df000017 	ldw	fp,0(sp)
   2147c:	dec00204 	addi	sp,sp,8
   21480:	f800283a 	ret

00021484 <display_welcome_message>:

void display_welcome_message() {
   21484:	defffe04 	addi	sp,sp,-8
   21488:	dfc00115 	stw	ra,4(sp)
   2148c:	df000015 	stw	fp,0(sp)
   21490:	d839883a 	mov	fp,sp
	printf("****************************************\r\n");
   21494:	010000f4 	movhi	r4,3
   21498:	210a7804 	addi	r4,r4,10720
   2149c:	00255340 	call	25534 <puts>
	printf("**** Welcome to Stabiliti-Q Program ****\r\n");
   214a0:	010000f4 	movhi	r4,3
   214a4:	210a8304 	addi	r4,r4,10764
   214a8:	00255340 	call	25534 <puts>
	printf("****************************************\r\n");
   214ac:	010000f4 	movhi	r4,3
   214b0:	210a7804 	addi	r4,r4,10720
   214b4:	00255340 	call	25534 <puts>
	delay_msec(100);                    // pause for banner
   214b8:	01001904 	movi	r4,100
   214bc:	00217440 	call	21744 <delay_msec>
}
   214c0:	0001883a 	nop
   214c4:	e037883a 	mov	sp,fp
   214c8:	dfc00117 	ldw	ra,4(sp)
   214cc:	df000017 	ldw	fp,0(sp)
   214d0:	dec00204 	addi	sp,sp,8
   214d4:	f800283a 	ret

000214d8 <display_Version>:

void display_Version(int complete) {
   214d8:	defffd04 	addi	sp,sp,-12
   214dc:	dfc00215 	stw	ra,8(sp)
   214e0:	df000115 	stw	fp,4(sp)
   214e4:	df000104 	addi	fp,sp,4
   214e8:	e13fff15 	stw	r4,-4(fp)
	printf("\r\n");
   214ec:	010000f4 	movhi	r4,3
   214f0:	210a8e04 	addi	r4,r4,10808
   214f4:	00255340 	call	25534 <puts>
	printf("  ************************************\r\n");
   214f8:	010000f4 	movhi	r4,3
   214fc:	210a8f04 	addi	r4,r4,10812
   21500:	00255340 	call	25534 <puts>
	printf("  *    CET FPGA Diagnostics Program  *\r\n");
   21504:	010000f4 	movhi	r4,3
   21508:	210a9904 	addi	r4,r4,10852
   2150c:	00255340 	call	25534 <puts>
	printf("  *    REL  Version : %s           *\r\n", VERSION_REL);
   21510:	014000f4 	movhi	r5,3
   21514:	294aa304 	addi	r5,r5,10892
   21518:	010000f4 	movhi	r4,3
   2151c:	210aa504 	addi	r4,r4,10900
   21520:	00254100 	call	25410 <printf>
	printf("  *    SW   Version : %s           *\r\n", VERSION_SW);
   21524:	014000f4 	movhi	r5,3
   21528:	294aaf04 	addi	r5,r5,10940
   2152c:	010000f4 	movhi	r4,3
   21530:	210ab104 	addi	r4,r4,10948
   21534:	00254100 	call	25410 <printf>
	printf("  *    FPGA Version : %s           *\r\n", VERSION_HW);
   21538:	014000f4 	movhi	r5,3
   2153c:	294abb04 	addi	r5,r5,10988
   21540:	010000f4 	movhi	r4,3
   21544:	210abd04 	addi	r4,r4,10996
   21548:	00254100 	call	25410 <printf>
	printf("  *    DATE Revised : %s    *\r\n", VERSION_DATE);
   2154c:	014000f4 	movhi	r5,3
   21550:	294ac704 	addi	r5,r5,11036
   21554:	010000f4 	movhi	r4,3
   21558:	210aca04 	addi	r4,r4,11048
   2155c:	00254100 	call	25410 <printf>
	printf("  *    %s                 *\r\n", VERSION_MANUF_PARTNUM);
   21560:	014000f4 	movhi	r5,3
   21564:	294ad204 	addi	r5,r5,11080
   21568:	010000f4 	movhi	r4,3
   2156c:	210ad604 	addi	r4,r4,11096
   21570:	00254100 	call	25410 <printf>
	if (complete) {
   21574:	e0bfff17 	ldw	r2,-4(fp)
   21578:	10000a26 	beq	r2,zero,215a4 <display_Version+0xcc>
		printf("  *    Design and Manufactured       *\r\n");
   2157c:	010000f4 	movhi	r4,3
   21580:	210ade04 	addi	r4,r4,11128
   21584:	00255340 	call	25534 <puts>
		printf("  *    UNITED STATES of AMERICA      *\r\n");
   21588:	010000f4 	movhi	r4,3
   2158c:	210ae804 	addi	r4,r4,11168
   21590:	00255340 	call	25534 <puts>
		printf("  ************************************\r\n");
   21594:	010000f4 	movhi	r4,3
   21598:	210a8f04 	addi	r4,r4,10812
   2159c:	00255340 	call	25534 <puts>
   215a0:	00000306 	br	215b0 <display_Version+0xd8>
	} else {
		printf("  ************************************\r\n");
   215a4:	010000f4 	movhi	r4,3
   215a8:	210a8f04 	addi	r4,r4,10812
   215ac:	00255340 	call	25534 <puts>
	}
	printf("\r\n");
   215b0:	010000f4 	movhi	r4,3
   215b4:	210a8e04 	addi	r4,r4,10808
   215b8:	00255340 	call	25534 <puts>

}
   215bc:	0001883a 	nop
   215c0:	e037883a 	mov	sp,fp
   215c4:	dfc00117 	ldw	ra,4(sp)
   215c8:	df000017 	ldw	fp,0(sp)
   215cc:	dec00204 	addi	sp,sp,8
   215d0:	f800283a 	ret

000215d4 <display_Menu>:

void display_Menu(int clear){
   215d4:	defffd04 	addi	sp,sp,-12
   215d8:	dfc00215 	stw	ra,8(sp)
   215dc:	df000115 	stw	fp,4(sp)
   215e0:	df000104 	addi	fp,sp,4
   215e4:	e13fff15 	stw	r4,-4(fp)
	if (clear){
   215e8:	e0bfff17 	ldw	r2,-4(fp)
   215ec:	10000126 	beq	r2,zero,215f4 <display_Menu+0x20>
	clear_terminal();
   215f0:	002178c0 	call	2178c <clear_terminal>
	}
	printf("\r\n");
   215f4:	010000f4 	movhi	r4,3
   215f8:	210a8e04 	addi	r4,r4,10808
   215fc:	00255340 	call	25534 <puts>
	printf("  -------------------------------------------\r\n");
   21600:	010000f4 	movhi	r4,3
   21604:	210af204 	addi	r4,r4,11208
   21608:	00255340 	call	25534 <puts>
	printf("  CE+T Controller Interface \r\n");
   2160c:	010000f4 	movhi	r4,3
   21610:	210afe04 	addi	r4,r4,11256
   21614:	00255340 	call	25534 <puts>
	printf("  CMD        Description \r\n");
   21618:	010000f4 	movhi	r4,3
   2161c:	210b0604 	addi	r4,r4,11288
   21620:	00255340 	call	25534 <puts>
	printf("  -------------------------------------------\r\n");
   21624:	010000f4 	movhi	r4,3
   21628:	210af204 	addi	r4,r4,11208
   2162c:	00255340 	call	25534 <puts>
	printf("  cls all    Clear this terminal window.\r\n");
   21630:	010000f4 	movhi	r4,3
   21634:	210b0d04 	addi	r4,r4,11316
   21638:	00255340 	call	25534 <puts>
	printf("  get cmd    Get the CMD menu as displayed here.\r\n");
   2163c:	010000f4 	movhi	r4,3
   21640:	210b1804 	addi	r4,r4,11360
   21644:	00255340 	call	25534 <puts>
	printf("  get ver    Get the VERsion message.\r\n");
   21648:	010000f4 	movhi	r4,3
   2164c:	210b2504 	addi	r4,r4,11412
   21650:	00255340 	call	25534 <puts>
	printf("  put ena    Put the fsm into ENA state.\r\n");
   21654:	010000f4 	movhi	r4,3
   21658:	210b2f04 	addi	r4,r4,11452
   2165c:	00255340 	call	25534 <puts>
	printf("  put run    Put the fsm into RUN state.\r\n");
   21660:	010000f4 	movhi	r4,3
   21664:	210b3a04 	addi	r4,r4,11496
   21668:	00255340 	call	25534 <puts>
	printf("  put rst    Put ReSeT, reset the HIL data.\r\n");
   2166c:	010000f4 	movhi	r4,3
   21670:	210b4504 	addi	r4,r4,11540
   21674:	00255340 	call	25534 <puts>
	printf("  freq 01    General test Freq Decrease.\r\n");
   21678:	010000f4 	movhi	r4,3
   2167c:	210b5104 	addi	r4,r4,11588
   21680:	00255340 	call	25534 <puts>
	printf("  freq 02    General test Freq Decrease to MAX POWER.\r\n");
   21684:	010000f4 	movhi	r4,3
   21688:	210b5c04 	addi	r4,r4,11632
   2168c:	00255340 	call	25534 <puts>
	printf("  freq 03    General test Freq Increase.\r\n");
   21690:	010000f4 	movhi	r4,3
   21694:	210b6a04 	addi	r4,r4,11688
   21698:	00255340 	call	25534 <puts>
	printf("  freq 04    General test Freq Increase to MIN POWER.\r\n");
   2169c:	010000f4 	movhi	r4,3
   216a0:	210b7504 	addi	r4,r4,11732
   216a4:	00255340 	call	25534 <puts>
	printf("\r\n");
   216a8:	010000f4 	movhi	r4,3
   216ac:	210a8e04 	addi	r4,r4,10808
   216b0:	00255340 	call	25534 <puts>
	delay_msec(5);
   216b4:	01000144 	movi	r4,5
   216b8:	00217440 	call	21744 <delay_msec>
	printf("\t*** Now ready to accept commands.\r\n");
   216bc:	010000f4 	movhi	r4,3
   216c0:	210b8304 	addi	r4,r4,11788
   216c4:	00255340 	call	25534 <puts>
};
   216c8:	0001883a 	nop
   216cc:	e037883a 	mov	sp,fp
   216d0:	dfc00117 	ldw	ra,4(sp)
   216d4:	df000017 	ldw	fp,0(sp)
   216d8:	dec00204 	addi	sp,sp,8
   216dc:	f800283a 	ret

000216e0 <clear_dma>:

void clear_dma(void) {
   216e0:	defffe04 	addi	sp,sp,-8
   216e4:	df000115 	stw	fp,4(sp)
   216e8:	df000104 	addi	fp,sp,4
	for (int k = 0; k < CMD_STRLEN + RX_BUFFER_2_SIZE; k++)
   216ec:	e03fff15 	stw	zero,-4(fp)
   216f0:	00000b06 	br	21720 <clear_dma+0x40>
		IOWR(DMA_RX_0_BASE, k, 0);
   216f4:	e0bfff17 	ldw	r2,-4(fp)
   216f8:	100490ba 	slli	r2,r2,2
   216fc:	1007883a 	mov	r3,r2
   21700:	00800134 	movhi	r2,4
   21704:	10842004 	addi	r2,r2,4224
   21708:	1885883a 	add	r2,r3,r2
   2170c:	0007883a 	mov	r3,zero
   21710:	10c00035 	stwio	r3,0(r2)
	for (int k = 0; k < CMD_STRLEN + RX_BUFFER_2_SIZE; k++)
   21714:	e0bfff17 	ldw	r2,-4(fp)
   21718:	10800044 	addi	r2,r2,1
   2171c:	e0bfff15 	stw	r2,-4(fp)
   21720:	e0bfff17 	ldw	r2,-4(fp)
   21724:	108002d0 	cmplti	r2,r2,11
   21728:	103ff21e 	bne	r2,zero,216f4 <clear_dma+0x14>
}
   2172c:	0001883a 	nop
   21730:	0001883a 	nop
   21734:	e037883a 	mov	sp,fp
   21738:	df000017 	ldw	fp,0(sp)
   2173c:	dec00104 	addi	sp,sp,4
   21740:	f800283a 	ret

00021744 <delay_msec>:

void delay_msec(int msec) {
   21744:	defffc04 	addi	sp,sp,-16
   21748:	dfc00315 	stw	ra,12(sp)
   2174c:	df000215 	stw	fp,8(sp)
   21750:	df000204 	addi	fp,sp,8
   21754:	e13ffe15 	stw	r4,-8(fp)
	int local_time = 1000 * msec;
   21758:	0140fa04 	movi	r5,1000
   2175c:	e13ffe17 	ldw	r4,-8(fp)
   21760:	0022c7c0 	call	22c7c <__mulsi3>
   21764:	e0bfff15 	stw	r2,-4(fp)
	usleep(local_time);
   21768:	e0bfff17 	ldw	r2,-4(fp)
   2176c:	1009883a 	mov	r4,r2
   21770:	0030b6c0 	call	30b6c <usleep>
}
   21774:	0001883a 	nop
   21778:	e037883a 	mov	sp,fp
   2177c:	dfc00117 	ldw	ra,4(sp)
   21780:	df000017 	ldw	fp,0(sp)
   21784:	dec00204 	addi	sp,sp,8
   21788:	f800283a 	ret

0002178c <clear_terminal>:

void clear_terminal(){
   2178c:	defffe04 	addi	sp,sp,-8
   21790:	dfc00115 	stw	ra,4(sp)
   21794:	df000015 	stw	fp,0(sp)
   21798:	d839883a 	mov	fp,sp
	printf("\033c");
   2179c:	010000f4 	movhi	r4,3
   217a0:	210b8c04 	addi	r4,r4,11824
   217a4:	00254100 	call	25410 <printf>
	printf("\r\n");
   217a8:	010000f4 	movhi	r4,3
   217ac:	210a8e04 	addi	r4,r4,10808
   217b0:	00255340 	call	25534 <puts>
	delay_msec(500);  // pause before displaying banner
   217b4:	01007d04 	movi	r4,500
   217b8:	00217440 	call	21744 <delay_msec>
}
   217bc:	0001883a 	nop
   217c0:	e037883a 	mov	sp,fp
   217c4:	dfc00117 	ldw	ra,4(sp)
   217c8:	df000017 	ldw	fp,0(sp)
   217cc:	dec00204 	addi	sp,sp,8
   217d0:	f800283a 	ret

000217d4 <print_mode>:

void print_mode(int gMode){
   217d4:	defffd04 	addi	sp,sp,-12
   217d8:	dfc00215 	stw	ra,8(sp)
   217dc:	df000115 	stw	fp,4(sp)
   217e0:	df000104 	addi	fp,sp,4
   217e4:	e13fff15 	stw	r4,-4(fp)
   217e8:	e0bfff17 	ldw	r2,-4(fp)
   217ec:	108001e8 	cmpgeui	r2,r2,7
   217f0:	1000291e 	bne	r2,zero,21898 <print_mode+0xc4>
   217f4:	e0bfff17 	ldw	r2,-4(fp)
   217f8:	100690ba 	slli	r3,r2,2
   217fc:	008000b4 	movhi	r2,2
   21800:	1885883a 	add	r2,r3,r2
   21804:	10860317 	ldw	r2,6156(r2)
   21808:	1000683a 	jmp	r2
   2180c:	00021828 	cmpgeui	zero,zero,2144
   21810:	00021848 	cmpgei	zero,zero,2145
   21814:	00021838 	rdprs	zero,zero,2144
   21818:	00021858 	cmpnei	zero,zero,2145
   2181c:	00021868 	cmpgeui	zero,zero,2145
   21820:	00021878 	rdprs	zero,zero,2145
   21824:	00021888 	cmpgei	zero,zero,2146
	switch (gMode)
	{
	case Volt_Watt : {
		printf("**** Mode is Volt-Watt.\r\n");
   21828:	010000f4 	movhi	r4,3
   2182c:	210b8d04 	addi	r4,r4,11828
   21830:	00255340 	call	25534 <puts>
		break;
   21834:	00001806 	br	21898 <print_mode+0xc4>
	}
	case Volt_Watt_Var : {
		printf("**** Mode is Volt-Var and Volt-Watt.\r\n");
   21838:	010000f4 	movhi	r4,3
   2183c:	210b9404 	addi	r4,r4,11856
   21840:	00255340 	call	25534 <puts>
		break;
   21844:	00001406 	br	21898 <print_mode+0xc4>
	}
	case Volt_Watt_Multimode : {
		printf("**** Mode is Volt-Watt Multimode.\r\n");
   21848:	010000f4 	movhi	r4,3
   2184c:	210b9e04 	addi	r4,r4,11896
   21850:	00255340 	call	25534 <puts>
		break;
   21854:	00001006 	br	21898 <print_mode+0xc4>
	}
	case Power_Factor : {
		printf("**** Mode is Power Factor.\r\n");
   21858:	010000f4 	movhi	r4,3
   2185c:	210ba704 	addi	r4,r4,11932
   21860:	00255340 	call	25534 <puts>
		break;
   21864:	00000c06 	br	21898 <print_mode+0xc4>
	}
	case Var : {
		printf("**** Mode is Var.\r\n");
   21868:	010000f4 	movhi	r4,3
   2186c:	210bae04 	addi	r4,r4,11960
   21870:	00255340 	call	25534 <puts>
		break;
   21874:	00000806 	br	21898 <print_mode+0xc4>
	}
	case Freq : {
		printf("**** Mode is Frequency.\r\n");
   21878:	010000f4 	movhi	r4,3
   2187c:	210bb304 	addi	r4,r4,11980
   21880:	00255340 	call	25534 <puts>
		break;
   21884:	00000406 	br	21898 <print_mode+0xc4>
	}
	case Freq_Multimode : {
		printf("**** Mode is Frequency-Multimode. \r\n");
   21888:	010000f4 	movhi	r4,3
   2188c:	210bba04 	addi	r4,r4,12008
   21890:	00255340 	call	25534 <puts>
		break;
   21894:	0001883a 	nop
	}
	}
}
   21898:	0001883a 	nop
   2189c:	e037883a 	mov	sp,fp
   218a0:	dfc00117 	ldw	ra,4(sp)
   218a4:	df000017 	ldw	fp,0(sp)
   218a8:	dec00204 	addi	sp,sp,8
   218ac:	f800283a 	ret

000218b0 <run_simple_test_sequence>:

void run_simple_test_sequence(){
   218b0:	defffd04 	addi	sp,sp,-12
   218b4:	dfc00215 	stw	ra,8(sp)
   218b8:	df000115 	stw	fp,4(sp)
   218bc:	df000104 	addi	fp,sp,4
	printf("\r\n*** Starting simple test sequence\r\n\r\n");
   218c0:	010000f4 	movhi	r4,3
   218c4:	210bc304 	addi	r4,r4,12044
   218c8:	00255340 	call	25534 <puts>
	printf("\t");
   218cc:	01000244 	movi	r4,9
   218d0:	00254500 	call	25450 <putchar>
	for (int j=0; j<10;j++){
   218d4:	e03fff15 	stw	zero,-4(fp)
   218d8:	00000f06 	br	21918 <run_simple_test_sequence+0x68>
			if (j % 2 )
   218dc:	e0bfff17 	ldw	r2,-4(fp)
   218e0:	1080004c 	andi	r2,r2,1
   218e4:	10000426 	beq	r2,zero,218f8 <run_simple_test_sequence+0x48>
			printf("|/");
   218e8:	010000f4 	movhi	r4,3
   218ec:	210bcd04 	addi	r4,r4,12084
   218f0:	00254100 	call	25410 <printf>
   218f4:	00000306 	br	21904 <run_simple_test_sequence+0x54>
			else
				printf("\\|");
   218f8:	010000f4 	movhi	r4,3
   218fc:	210bce04 	addi	r4,r4,12088
   21900:	00254100 	call	25410 <printf>
		delay_msec(100);
   21904:	01001904 	movi	r4,100
   21908:	00217440 	call	21744 <delay_msec>
	for (int j=0; j<10;j++){
   2190c:	e0bfff17 	ldw	r2,-4(fp)
   21910:	10800044 	addi	r2,r2,1
   21914:	e0bfff15 	stw	r2,-4(fp)
   21918:	e0bfff17 	ldw	r2,-4(fp)
   2191c:	10800290 	cmplti	r2,r2,10
   21920:	103fee1e 	bne	r2,zero,218dc <run_simple_test_sequence+0x2c>
	}
	printf("\r\n\r\n*** Test sequence success.\r\n\n");
   21924:	010000f4 	movhi	r4,3
   21928:	210bcf04 	addi	r4,r4,12092
   2192c:	00255340 	call	25534 <puts>
	delay_msec(1000);
   21930:	0100fa04 	movi	r4,1000
   21934:	00217440 	call	21744 <delay_msec>
}
   21938:	0001883a 	nop
   2193c:	e037883a 	mov	sp,fp
   21940:	dfc00117 	ldw	ra,4(sp)
   21944:	df000017 	ldw	fp,0(sp)
   21948:	dec00204 	addi	sp,sp,8
   2194c:	f800283a 	ret

00021950 <enable_timer_sec>:


extern int g_sec_counter; /// Global Int, seconds counter
extern int g_sec_enable;  /// Global Int, seconds counter enable

void enable_timer_sec() {
   21950:	deffff04 	addi	sp,sp,-4
   21954:	df000015 	stw	fp,0(sp)
   21958:	d839883a 	mov	fp,sp
	g_sec_enable = 1;
   2195c:	00800044 	movi	r2,1
   21960:	d0a34915 	stw	r2,-29404(gp)
}
   21964:	0001883a 	nop
   21968:	e037883a 	mov	sp,fp
   2196c:	df000017 	ldw	fp,0(sp)
   21970:	dec00104 	addi	sp,sp,4
   21974:	f800283a 	ret

00021978 <reset_timer_sec>:

void reset_timer_sec() {
   21978:	deffff04 	addi	sp,sp,-4
   2197c:	df000015 	stw	fp,0(sp)
   21980:	d839883a 	mov	fp,sp
	g_sec_counter = 0;
   21984:	d0234815 	stw	zero,-29408(gp)
	g_sec_enable = 0;
   21988:	d0234915 	stw	zero,-29404(gp)
}
   2198c:	0001883a 	nop
   21990:	e037883a 	mov	sp,fp
   21994:	df000017 	ldw	fp,0(sp)
   21998:	dec00104 	addi	sp,sp,4
   2199c:	f800283a 	ret

000219a0 <increment_power>:


double increment_power(double power_latched, double sampled_data_freq) {
   219a0:	defff804 	addi	sp,sp,-32
   219a4:	dfc00715 	stw	ra,28(sp)
   219a8:	df000615 	stw	fp,24(sp)
   219ac:	dc400515 	stw	r17,20(sp)
   219b0:	dc000415 	stw	r16,16(sp)
   219b4:	df000604 	addi	fp,sp,24
   219b8:	e13ffc15 	stw	r4,-16(fp)
   219bc:	e17ffd15 	stw	r5,-12(fp)
   219c0:	e1bffa15 	stw	r6,-24(fp)
   219c4:	e1fffb15 	stw	r7,-20(fp)

	return power_latched + ((P_MAX - power_latched)* ((F_LLCO - sampled_data_freq) / (F_LLCO - F_PMAX)));
   219c8:	e1bffc17 	ldw	r6,-16(fp)
   219cc:	e1fffd17 	ldw	r7,-12(fp)
   219d0:	0009883a 	mov	r4,zero
   219d4:	01503774 	movhi	r5,16605
   219d8:	29530004 	addi	r5,r5,19456
   219dc:	00248400 	call	24840 <__subdf3>
   219e0:	1009883a 	mov	r4,r2
   219e4:	180b883a 	mov	r5,r3
   219e8:	2021883a 	mov	r16,r4
   219ec:	2823883a 	mov	r17,r5
   219f0:	e1bffa17 	ldw	r6,-24(fp)
   219f4:	e1fffb17 	ldw	r7,-20(fp)
   219f8:	0009883a 	mov	r4,zero
   219fc:	01501274 	movhi	r5,16457
   21a00:	29780004 	addi	r5,r5,-8192
   21a04:	00248400 	call	24840 <__subdf3>
   21a08:	1009883a 	mov	r4,r2
   21a0c:	180b883a 	mov	r5,r3
   21a10:	2005883a 	mov	r2,r4
   21a14:	2807883a 	mov	r3,r5
   21a18:	000d883a 	mov	r6,zero
   21a1c:	01cfff34 	movhi	r7,16380
   21a20:	1009883a 	mov	r4,r2
   21a24:	180b883a 	mov	r5,r3
   21a28:	00235940 	call	23594 <__divdf3>
   21a2c:	1009883a 	mov	r4,r2
   21a30:	180b883a 	mov	r5,r3
   21a34:	2005883a 	mov	r2,r4
   21a38:	2807883a 	mov	r3,r5
   21a3c:	100d883a 	mov	r6,r2
   21a40:	180f883a 	mov	r7,r3
   21a44:	8009883a 	mov	r4,r16
   21a48:	880b883a 	mov	r5,r17
   21a4c:	00240940 	call	24094 <__muldf3>
   21a50:	1009883a 	mov	r4,r2
   21a54:	180b883a 	mov	r5,r3
   21a58:	2005883a 	mov	r2,r4
   21a5c:	2807883a 	mov	r3,r5
   21a60:	e1bffc17 	ldw	r6,-16(fp)
   21a64:	e1fffd17 	ldw	r7,-12(fp)
   21a68:	1009883a 	mov	r4,r2
   21a6c:	180b883a 	mov	r5,r3
   21a70:	0022ca40 	call	22ca4 <__adddf3>
   21a74:	1009883a 	mov	r4,r2
   21a78:	180b883a 	mov	r5,r3
   21a7c:	2005883a 	mov	r2,r4
   21a80:	2807883a 	mov	r3,r5
   21a84:	1009883a 	mov	r4,r2
   21a88:	180b883a 	mov	r5,r3
}
   21a8c:	2005883a 	mov	r2,r4
   21a90:	2807883a 	mov	r3,r5
   21a94:	e6fffe04 	addi	sp,fp,-8
   21a98:	dfc00317 	ldw	ra,12(sp)
   21a9c:	df000217 	ldw	fp,8(sp)
   21aa0:	dc400117 	ldw	r17,4(sp)
   21aa4:	dc000017 	ldw	r16,0(sp)
   21aa8:	dec00404 	addi	sp,sp,16
   21aac:	f800283a 	ret

00021ab0 <decrement_power>:

double decrement_power(double power_ref_latched, double sampled_data_freq) {
   21ab0:	defffa04 	addi	sp,sp,-24
   21ab4:	dfc00515 	stw	ra,20(sp)
   21ab8:	df000415 	stw	fp,16(sp)
   21abc:	df000404 	addi	fp,sp,16
   21ac0:	e13ffe15 	stw	r4,-8(fp)
   21ac4:	e17fff15 	stw	r5,-4(fp)
   21ac8:	e1bffc15 	stw	r6,-16(fp)
   21acc:	e1fffd15 	stw	r7,-12(fp)

	return power_ref_latched
			* (1 - ((sampled_data_freq - F_ULCO) / (F_PMIN - F_ULCO)));
   21ad0:	000d883a 	mov	r6,zero
   21ad4:	01d01274 	movhi	r7,16457
   21ad8:	39c80004 	addi	r7,r7,8192
   21adc:	e13ffc17 	ldw	r4,-16(fp)
   21ae0:	e17ffd17 	ldw	r5,-12(fp)
   21ae4:	00248400 	call	24840 <__subdf3>
   21ae8:	1009883a 	mov	r4,r2
   21aec:	180b883a 	mov	r5,r3
   21af0:	2005883a 	mov	r2,r4
   21af4:	2807883a 	mov	r3,r5
   21af8:	000d883a 	mov	r6,zero
   21afc:	01cfff34 	movhi	r7,16380
   21b00:	1009883a 	mov	r4,r2
   21b04:	180b883a 	mov	r5,r3
   21b08:	00235940 	call	23594 <__divdf3>
   21b0c:	1009883a 	mov	r4,r2
   21b10:	180b883a 	mov	r5,r3
   21b14:	2005883a 	mov	r2,r4
   21b18:	2807883a 	mov	r3,r5
   21b1c:	100d883a 	mov	r6,r2
   21b20:	180f883a 	mov	r7,r3
   21b24:	0009883a 	mov	r4,zero
   21b28:	014ffc34 	movhi	r5,16368
   21b2c:	00248400 	call	24840 <__subdf3>
   21b30:	1009883a 	mov	r4,r2
   21b34:	180b883a 	mov	r5,r3
   21b38:	2005883a 	mov	r2,r4
   21b3c:	2807883a 	mov	r3,r5
   21b40:	e1bffe17 	ldw	r6,-8(fp)
   21b44:	e1ffff17 	ldw	r7,-4(fp)
   21b48:	1009883a 	mov	r4,r2
   21b4c:	180b883a 	mov	r5,r3
   21b50:	00240940 	call	24094 <__muldf3>
   21b54:	1009883a 	mov	r4,r2
   21b58:	180b883a 	mov	r5,r3
   21b5c:	2005883a 	mov	r2,r4
   21b60:	2807883a 	mov	r3,r5
   21b64:	1009883a 	mov	r4,r2
   21b68:	180b883a 	mov	r5,r3
}
   21b6c:	2005883a 	mov	r2,r4
   21b70:	2807883a 	mov	r3,r5
   21b74:	e037883a 	mov	sp,fp
   21b78:	dfc00117 	ldw	ra,4(sp)
   21b7c:	df000017 	ldw	fp,0(sp)
   21b80:	dec00204 	addi	sp,sp,8
   21b84:	f800283a 	ret

00021b88 <frequency_response_update>:

void frequency_response_update(input_t *gInput, cmd_t *gCommand, int debug) {
   21b88:	deffe604 	addi	sp,sp,-104
   21b8c:	dfc01915 	stw	ra,100(sp)
   21b90:	df001815 	stw	fp,96(sp)
   21b94:	df001804 	addi	fp,sp,96
   21b98:	e13fea15 	stw	r4,-88(fp)
   21b9c:	e17fe915 	stw	r5,-92(fp)
   21ba0:	e1bfe815 	stw	r6,-96(fp)

	input_t sampled_data;
	sampled_data = *gInput;
   21ba4:	e0bfea17 	ldw	r2,-88(fp)
   21ba8:	10c00017 	ldw	r3,0(r2)
   21bac:	e0fff315 	stw	r3,-52(fp)
   21bb0:	10c00117 	ldw	r3,4(r2)
   21bb4:	e0fff415 	stw	r3,-48(fp)
   21bb8:	10c00217 	ldw	r3,8(r2)
   21bbc:	e0fff515 	stw	r3,-44(fp)
   21bc0:	10c00317 	ldw	r3,12(r2)
   21bc4:	e0fff615 	stw	r3,-40(fp)
   21bc8:	10c00417 	ldw	r3,16(r2)
   21bcc:	e0fff715 	stw	r3,-36(fp)
   21bd0:	10c00517 	ldw	r3,20(r2)
   21bd4:	e0fff815 	stw	r3,-32(fp)
   21bd8:	10c00617 	ldw	r3,24(r2)
   21bdc:	e0fff915 	stw	r3,-28(fp)
   21be0:	10c00717 	ldw	r3,28(r2)
   21be4:	e0fffa15 	stw	r3,-24(fp)
   21be8:	10800817 	ldw	r2,32(r2)
   21bec:	e0bffb15 	stw	r2,-20(fp)
	cmd_t cmd_value;
	cmd_value = *gCommand;
   21bf0:	e0bfe917 	ldw	r2,-92(fp)
   21bf4:	10c00017 	ldw	r3,0(r2)
   21bf8:	e0ffeb15 	stw	r3,-84(fp)
   21bfc:	10c00117 	ldw	r3,4(r2)
   21c00:	e0ffec15 	stw	r3,-80(fp)
   21c04:	10c00217 	ldw	r3,8(r2)
   21c08:	e0ffed15 	stw	r3,-76(fp)
   21c0c:	10c00317 	ldw	r3,12(r2)
   21c10:	e0ffee15 	stw	r3,-72(fp)
   21c14:	10c00417 	ldw	r3,16(r2)
   21c18:	e0ffef15 	stw	r3,-68(fp)
   21c1c:	10c00517 	ldw	r3,20(r2)
   21c20:	e0fff015 	stw	r3,-64(fp)
   21c24:	10c00617 	ldw	r3,24(r2)
   21c28:	e0fff115 	stw	r3,-60(fp)
   21c2c:	10800717 	ldw	r2,28(r2)
   21c30:	e0bff215 	stw	r2,-56(fp)
	static double power_ref_latched = 0;

	switch (ST_GENERAL) {
   21c34:	d0a33f17 	ldw	r2,-29444(gp)
   21c38:	10c00168 	cmpgeui	r3,r2,5
   21c3c:	18018d1e 	bne	r3,zero,22274 <frequency_response_update+0x6ec>
   21c40:	100690ba 	slli	r3,r2,2
   21c44:	008000b4 	movhi	r2,2
   21c48:	1885883a 	add	r2,r3,r2
   21c4c:	10871517 	ldw	r2,7252(r2)
   21c50:	1000683a 	jmp	r2
   21c54:	00021c68 	cmpgeui	zero,zero,2161
   21c58:	00021dc4 	movi	zero,2167
   21c5c:	00021f8c 	andi	zero,zero,2174
   21c60:	00022034 	movhi	zero,2176
   21c64:	000221e8 	cmpgeui	zero,zero,2183
	case (NOMINAL): {
		if (sampled_data.freq < F_LLCO) {
   21c68:	e0bff717 	ldw	r2,-36(fp)
   21c6c:	e0fff817 	ldw	r3,-32(fp)
   21c70:	000d883a 	mov	r6,zero
   21c74:	01d01274 	movhi	r7,16457
   21c78:	39f80004 	addi	r7,r7,-8192
   21c7c:	1009883a 	mov	r4,r2
   21c80:	180b883a 	mov	r5,r3
   21c84:	0023fac0 	call	23fac <__ledf2>
   21c88:	1000190e 	bge	r2,zero,21cf0 <frequency_response_update+0x168>
			ST_GENERAL = FREQ_FALLING;
   21c8c:	00800044 	movi	r2,1
   21c90:	d0a33f15 	stw	r2,-29444(gp)
			cmd_value.active_power_latched = sampled_data.real_power;
   21c94:	e0bffa17 	ldw	r2,-24(fp)
   21c98:	e0fffb17 	ldw	r3,-20(fp)
   21c9c:	e0bfed15 	stw	r2,-76(fp)
   21ca0:	e0ffee15 	stw	r3,-72(fp)
			power_ref_latched = sampled_data.real_power;
   21ca4:	e0bffa17 	ldw	r2,-24(fp)
   21ca8:	e0fffb17 	ldw	r3,-20(fp)
   21cac:	d0a34e15 	stw	r2,-29384(gp)
   21cb0:	d0e34f15 	stw	r3,-29380(gp)
			if (debug){
   21cb4:	e0bfe817 	ldw	r2,-96(fp)
   21cb8:	10000a26 	beq	r2,zero,21ce4 <frequency_response_update+0x15c>
			printf("** Transition to FREQ_FALLING\r\n");
   21cbc:	010000f4 	movhi	r4,3
   21cc0:	210bd804 	addi	r4,r4,12128
   21cc4:	00255340 	call	25534 <puts>
			printf("Latched power = %f\r\n", power_ref_latched);
   21cc8:	d0a34e17 	ldw	r2,-29384(gp)
   21ccc:	d0e34f17 	ldw	r3,-29380(gp)
   21cd0:	100b883a 	mov	r5,r2
   21cd4:	180d883a 	mov	r6,r3
   21cd8:	010000f4 	movhi	r4,3
   21cdc:	210be004 	addi	r4,r4,12160
   21ce0:	00254100 	call	25410 <printf>
			}
			g_max_power_reached = 0;
   21ce4:	d0233d15 	stw	zero,-29452(gp)
			g_min_power_reached = 0;
   21ce8:	d0233e15 	stw	zero,-29448(gp)
   21cec:	00002306 	br	21d7c <frequency_response_update+0x1f4>
		} else if (sampled_data.freq > F_ULCO) {
   21cf0:	e0bff717 	ldw	r2,-36(fp)
   21cf4:	e0fff817 	ldw	r3,-32(fp)
   21cf8:	000d883a 	mov	r6,zero
   21cfc:	01d01274 	movhi	r7,16457
   21d00:	39c80004 	addi	r7,r7,8192
   21d04:	1009883a 	mov	r4,r2
   21d08:	180b883a 	mov	r5,r3
   21d0c:	0023ec40 	call	23ec4 <__gedf2>
   21d10:	0080190e 	bge	zero,r2,21d78 <frequency_response_update+0x1f0>
			ST_GENERAL = FREQ_RISING;
   21d14:	008000c4 	movi	r2,3
   21d18:	d0a33f15 	stw	r2,-29444(gp)
			cmd_value.active_power_latched = sampled_data.real_power;
   21d1c:	e0bffa17 	ldw	r2,-24(fp)
   21d20:	e0fffb17 	ldw	r3,-20(fp)
   21d24:	e0bfed15 	stw	r2,-76(fp)
   21d28:	e0ffee15 	stw	r3,-72(fp)
			power_ref_latched = sampled_data.real_power;
   21d2c:	e0bffa17 	ldw	r2,-24(fp)
   21d30:	e0fffb17 	ldw	r3,-20(fp)
   21d34:	d0a34e15 	stw	r2,-29384(gp)
   21d38:	d0e34f15 	stw	r3,-29380(gp)
			g_max_power_reached = 0;
   21d3c:	d0233d15 	stw	zero,-29452(gp)
			g_min_power_reached = 0;
   21d40:	d0233e15 	stw	zero,-29448(gp)
			if (debug){
   21d44:	e0bfe817 	ldw	r2,-96(fp)
   21d48:	10000c26 	beq	r2,zero,21d7c <frequency_response_update+0x1f4>
				printf("** Transition to FREQ_RISING\r\n");
   21d4c:	010000f4 	movhi	r4,3
   21d50:	210be604 	addi	r4,r4,12184
   21d54:	00255340 	call	25534 <puts>
				printf("Latched power = %f\r\n", power_ref_latched);
   21d58:	d0a34e17 	ldw	r2,-29384(gp)
   21d5c:	d0e34f17 	ldw	r3,-29380(gp)
   21d60:	100b883a 	mov	r5,r2
   21d64:	180d883a 	mov	r6,r3
   21d68:	010000f4 	movhi	r4,3
   21d6c:	210be004 	addi	r4,r4,12160
   21d70:	00254100 	call	25410 <printf>
   21d74:	00000106 	br	21d7c <frequency_response_update+0x1f4>
			}
		} else {
			ST_GENERAL = NOMINAL;
   21d78:	d0233f15 	stw	zero,-29444(gp)

		}

		*gCommand = cmd_value;
   21d7c:	e0bfe917 	ldw	r2,-92(fp)
   21d80:	e0ffeb17 	ldw	r3,-84(fp)
   21d84:	10c00015 	stw	r3,0(r2)
   21d88:	e0ffec17 	ldw	r3,-80(fp)
   21d8c:	10c00115 	stw	r3,4(r2)
   21d90:	e0ffed17 	ldw	r3,-76(fp)
   21d94:	10c00215 	stw	r3,8(r2)
   21d98:	e0ffee17 	ldw	r3,-72(fp)
   21d9c:	10c00315 	stw	r3,12(r2)
   21da0:	e0ffef17 	ldw	r3,-68(fp)
   21da4:	10c00415 	stw	r3,16(r2)
   21da8:	e0fff017 	ldw	r3,-64(fp)
   21dac:	10c00515 	stw	r3,20(r2)
   21db0:	e0fff117 	ldw	r3,-60(fp)
   21db4:	10c00615 	stw	r3,24(r2)
   21db8:	e0fff217 	ldw	r3,-56(fp)
   21dbc:	10c00715 	stw	r3,28(r2)
		break;
   21dc0:	00012c06 	br	22274 <frequency_response_update+0x6ec>
	}
	case (FREQ_FALLING): {
		if (sampled_data.freq < F_PMAX) {
   21dc4:	e0bff717 	ldw	r2,-36(fp)
   21dc8:	e0fff817 	ldw	r3,-32(fp)
   21dcc:	000d883a 	mov	r6,zero
   21dd0:	01d01234 	movhi	r7,16456
   21dd4:	1009883a 	mov	r4,r2
   21dd8:	180b883a 	mov	r5,r3
   21ddc:	0023fac0 	call	23fac <__ledf2>
   21de0:	10000d0e 	bge	r2,zero,21e18 <frequency_response_update+0x290>
			ST_GENERAL = MAX_POWER;
   21de4:	00800084 	movi	r2,2
   21de8:	d0a33f15 	stw	r2,-29444(gp)
			reset_timer_sec();
   21dec:	00219780 	call	21978 <reset_timer_sec>
			cmd_value.active_power_max = P_MAX;
   21df0:	e03feb15 	stw	zero,-84(fp)
   21df4:	00903774 	movhi	r2,16605
   21df8:	10930004 	addi	r2,r2,19456
   21dfc:	e0bfec15 	stw	r2,-80(fp)
			if (debug) printf("** Transition to MAX_POWER\r\n");
   21e00:	e0bfe817 	ldw	r2,-96(fp)
   21e04:	10004f26 	beq	r2,zero,21f44 <frequency_response_update+0x3bc>
   21e08:	010000f4 	movhi	r4,3
   21e0c:	210bee04 	addi	r4,r4,12216
   21e10:	00255340 	call	25534 <puts>
   21e14:	00004b06 	br	21f44 <frequency_response_update+0x3bc>
		} else if (sampled_data.freq < (F_LLCO + F_HSYS)) {
   21e18:	e0bff717 	ldw	r2,-36(fp)
   21e1c:	e0fff817 	ldw	r3,-32(fp)
   21e20:	01b33374 	movhi	r6,52429
   21e24:	31b33344 	addi	r6,r6,-13107
   21e28:	01d01274 	movhi	r7,16457
   21e2c:	39fb3304 	addi	r7,r7,-4916
   21e30:	1009883a 	mov	r4,r2
   21e34:	180b883a 	mov	r5,r3
   21e38:	0023fac0 	call	23fac <__ledf2>
   21e3c:	1000220e 	bge	r2,zero,21ec8 <frequency_response_update+0x340>
			ST_GENERAL = FREQ_FALLING;
   21e40:	00800044 	movi	r2,1
   21e44:	d0a33f15 	stw	r2,-29444(gp)
			reset_timer_sec();
   21e48:	00219780 	call	21978 <reset_timer_sec>
			if (g_max_power_reached) {
   21e4c:	d0a33d17 	ldw	r2,-29452(gp)
   21e50:	10000526 	beq	r2,zero,21e68 <frequency_response_update+0x2e0>
				cmd_value.active_power_max = P_MAX;
   21e54:	e03feb15 	stw	zero,-84(fp)
   21e58:	00903774 	movhi	r2,16605
   21e5c:	10930004 	addi	r2,r2,19456
   21e60:	e0bfec15 	stw	r2,-80(fp)
   21e64:	00003706 	br	21f44 <frequency_response_update+0x3bc>
			} else {
				double power_value = increment_power(power_ref_latched,
   21e68:	d0a34e17 	ldw	r2,-29384(gp)
   21e6c:	d0e34f17 	ldw	r3,-29380(gp)
   21e70:	e13ff717 	ldw	r4,-36(fp)
   21e74:	e17ff817 	ldw	r5,-32(fp)
   21e78:	200d883a 	mov	r6,r4
   21e7c:	280f883a 	mov	r7,r5
   21e80:	1009883a 	mov	r4,r2
   21e84:	180b883a 	mov	r5,r3
   21e88:	00219a00 	call	219a0 <increment_power>
   21e8c:	e0bffc15 	stw	r2,-16(fp)
   21e90:	e0fffd15 	stw	r3,-12(fp)
						sampled_data.freq);
				if (power_value > cmd_value.active_power_max) {
   21e94:	e0bfeb17 	ldw	r2,-84(fp)
   21e98:	e0ffec17 	ldw	r3,-80(fp)
   21e9c:	100d883a 	mov	r6,r2
   21ea0:	180f883a 	mov	r7,r3
   21ea4:	e13ffc17 	ldw	r4,-16(fp)
   21ea8:	e17ffd17 	ldw	r5,-12(fp)
   21eac:	0023ec40 	call	23ec4 <__gedf2>
   21eb0:	0080240e 	bge	zero,r2,21f44 <frequency_response_update+0x3bc>
					cmd_value.active_power_max = power_value;
   21eb4:	e0bffc17 	ldw	r2,-16(fp)
   21eb8:	e0bfeb15 	stw	r2,-84(fp)
   21ebc:	e0bffd17 	ldw	r2,-12(fp)
   21ec0:	e0bfec15 	stw	r2,-80(fp)
   21ec4:	00001f06 	br	21f44 <frequency_response_update+0x3bc>
				}
			}

		} else {
			enable_timer_sec();
   21ec8:	00219500 	call	21950 <enable_timer_sec>
			//printf("g_sec_counter = %d \r\n", g_sec_counter);
			if (g_sec_counter > FREQ_MODE_PERSIST_SEC) {
   21ecc:	d0a34817 	ldw	r2,-29408(gp)
   21ed0:	108007d0 	cmplti	r2,r2,31
   21ed4:	1000191e 	bne	r2,zero,21f3c <frequency_response_update+0x3b4>
				ST_GENERAL = NOMINAL;
   21ed8:	d0233f15 	stw	zero,-29444(gp)
				cmd_value.active_power_max = power_ref_latched;
   21edc:	d0a34e17 	ldw	r2,-29384(gp)
   21ee0:	d0e34f17 	ldw	r3,-29380(gp)
   21ee4:	e0bfeb15 	stw	r2,-84(fp)
   21ee8:	e0ffec15 	stw	r3,-80(fp)
				if (debug){
   21eec:	e0bfe817 	ldw	r2,-96(fp)
   21ef0:	10001426 	beq	r2,zero,21f44 <frequency_response_update+0x3bc>

				printf(
   21ef4:	010000f4 	movhi	r4,3
   21ef8:	210bf504 	addi	r4,r4,12244
   21efc:	00255340 	call	25534 <puts>
						"** Transition back to NOMINAL after timeout and hysteresis conditions met.\r\n");
				printf("** Latched power is %f \r\n", power_ref_latched);
   21f00:	d0a34e17 	ldw	r2,-29384(gp)
   21f04:	d0e34f17 	ldw	r3,-29380(gp)
   21f08:	100b883a 	mov	r5,r2
   21f0c:	180d883a 	mov	r6,r3
   21f10:	010000f4 	movhi	r4,3
   21f14:	210c0804 	addi	r4,r4,12320
   21f18:	00254100 	call	25410 <printf>
				printf("** Max power to hold is %f \r\n",
   21f1c:	e0bfeb17 	ldw	r2,-84(fp)
   21f20:	e0ffec17 	ldw	r3,-80(fp)
   21f24:	100b883a 	mov	r5,r2
   21f28:	180d883a 	mov	r6,r3
   21f2c:	010000f4 	movhi	r4,3
   21f30:	210c0f04 	addi	r4,r4,12348
   21f34:	00254100 	call	25410 <printf>
   21f38:	00000206 	br	21f44 <frequency_response_update+0x3bc>
						cmd_value.active_power_max);
				}
			} else {
				ST_GENERAL = FREQ_FALLING;
   21f3c:	00800044 	movi	r2,1
   21f40:	d0a33f15 	stw	r2,-29444(gp)
			}
		}

		*gCommand = cmd_value;
   21f44:	e0bfe917 	ldw	r2,-92(fp)
   21f48:	e0ffeb17 	ldw	r3,-84(fp)
   21f4c:	10c00015 	stw	r3,0(r2)
   21f50:	e0ffec17 	ldw	r3,-80(fp)
   21f54:	10c00115 	stw	r3,4(r2)
   21f58:	e0ffed17 	ldw	r3,-76(fp)
   21f5c:	10c00215 	stw	r3,8(r2)
   21f60:	e0ffee17 	ldw	r3,-72(fp)
   21f64:	10c00315 	stw	r3,12(r2)
   21f68:	e0ffef17 	ldw	r3,-68(fp)
   21f6c:	10c00415 	stw	r3,16(r2)
   21f70:	e0fff017 	ldw	r3,-64(fp)
   21f74:	10c00515 	stw	r3,20(r2)
   21f78:	e0fff117 	ldw	r3,-60(fp)
   21f7c:	10c00615 	stw	r3,24(r2)
   21f80:	e0fff217 	ldw	r3,-56(fp)
   21f84:	10c00715 	stw	r3,28(r2)
		break;
   21f88:	0000ba06 	br	22274 <frequency_response_update+0x6ec>
	}
	case (MAX_POWER): {
		if (sampled_data.freq > F_PMAX) {
   21f8c:	e0bff717 	ldw	r2,-36(fp)
   21f90:	e0fff817 	ldw	r3,-32(fp)
   21f94:	000d883a 	mov	r6,zero
   21f98:	01d01234 	movhi	r7,16456
   21f9c:	1009883a 	mov	r4,r2
   21fa0:	180b883a 	mov	r5,r3
   21fa4:	0023ec40 	call	23ec4 <__gedf2>
   21fa8:	0080080e 	bge	zero,r2,21fcc <frequency_response_update+0x444>
			ST_GENERAL = FREQ_FALLING;
   21fac:	00800044 	movi	r2,1
   21fb0:	d0a33f15 	stw	r2,-29444(gp)

			if (debug) printf("** Transition to FREQ_FALLING\r\n");
   21fb4:	e0bfe817 	ldw	r2,-96(fp)
   21fb8:	10000626 	beq	r2,zero,21fd4 <frequency_response_update+0x44c>
   21fbc:	010000f4 	movhi	r4,3
   21fc0:	210bd804 	addi	r4,r4,12128
   21fc4:	00255340 	call	25534 <puts>
   21fc8:	00000206 	br	21fd4 <frequency_response_update+0x44c>
		} else {
			ST_GENERAL = MAX_POWER;
   21fcc:	00800084 	movi	r2,2
   21fd0:	d0a33f15 	stw	r2,-29444(gp)
		}
		g_max_power_reached = 1;
   21fd4:	00800044 	movi	r2,1
   21fd8:	d0a33d15 	stw	r2,-29452(gp)
		cmd_value.active_power_max = P_MAX;
   21fdc:	e03feb15 	stw	zero,-84(fp)
   21fe0:	00903774 	movhi	r2,16605
   21fe4:	10930004 	addi	r2,r2,19456
   21fe8:	e0bfec15 	stw	r2,-80(fp)
		*gCommand = cmd_value;
   21fec:	e0bfe917 	ldw	r2,-92(fp)
   21ff0:	e0ffeb17 	ldw	r3,-84(fp)
   21ff4:	10c00015 	stw	r3,0(r2)
   21ff8:	e0ffec17 	ldw	r3,-80(fp)
   21ffc:	10c00115 	stw	r3,4(r2)
   22000:	e0ffed17 	ldw	r3,-76(fp)
   22004:	10c00215 	stw	r3,8(r2)
   22008:	e0ffee17 	ldw	r3,-72(fp)
   2200c:	10c00315 	stw	r3,12(r2)
   22010:	e0ffef17 	ldw	r3,-68(fp)
   22014:	10c00415 	stw	r3,16(r2)
   22018:	e0fff017 	ldw	r3,-64(fp)
   2201c:	10c00515 	stw	r3,20(r2)
   22020:	e0fff117 	ldw	r3,-60(fp)
   22024:	10c00615 	stw	r3,24(r2)
   22028:	e0fff217 	ldw	r3,-56(fp)
   2202c:	10c00715 	stw	r3,28(r2)
		break;
   22030:	00009006 	br	22274 <frequency_response_update+0x6ec>
	}

	case (FREQ_RISING): {
		if (sampled_data.freq > F_PMIN) {
   22034:	e0bff717 	ldw	r2,-36(fp)
   22038:	e0fff817 	ldw	r3,-32(fp)
   2203c:	000d883a 	mov	r6,zero
   22040:	01d012b4 	movhi	r7,16458
   22044:	1009883a 	mov	r4,r2
   22048:	180b883a 	mov	r5,r3
   2204c:	0023ec40 	call	23ec4 <__gedf2>
   22050:	00800b0e 	bge	zero,r2,22080 <frequency_response_update+0x4f8>
			ST_GENERAL = MIN_POWER;
   22054:	00800104 	movi	r2,4
   22058:	d0a33f15 	stw	r2,-29444(gp)
			reset_timer_sec();
   2205c:	00219780 	call	21978 <reset_timer_sec>
			cmd_value.active_power_max = P_MIN;
   22060:	e03feb15 	stw	zero,-84(fp)
   22064:	e03fec15 	stw	zero,-80(fp)
			if (debug) printf("** Transition to MIN_POWER\r\n");
   22068:	e0bfe817 	ldw	r2,-96(fp)
   2206c:	10004c26 	beq	r2,zero,221a0 <frequency_response_update+0x618>
   22070:	010000f4 	movhi	r4,3
   22074:	210c1704 	addi	r4,r4,12380
   22078:	00255340 	call	25534 <puts>
   2207c:	00004806 	br	221a0 <frequency_response_update+0x618>
		} else if (sampled_data.freq > (F_ULCO - F_HSYS)) {
   22080:	e0bff717 	ldw	r2,-36(fp)
   22084:	e0fff817 	ldw	r3,-32(fp)
   22088:	018cccf4 	movhi	r6,13107
   2208c:	318cccc4 	addi	r6,r6,13107
   22090:	01d01274 	movhi	r7,16457
   22094:	39c4ccc4 	addi	r7,r7,4915
   22098:	1009883a 	mov	r4,r2
   2209c:	180b883a 	mov	r5,r3
   220a0:	0023ec40 	call	23ec4 <__gedf2>
   220a4:	0080200e 	bge	zero,r2,22128 <frequency_response_update+0x5a0>
			ST_GENERAL = FREQ_RISING;
   220a8:	008000c4 	movi	r2,3
   220ac:	d0a33f15 	stw	r2,-29444(gp)
			reset_timer_sec();
   220b0:	00219780 	call	21978 <reset_timer_sec>
			if (g_min_power_reached) {
   220b4:	d0a33e17 	ldw	r2,-29448(gp)
   220b8:	10000326 	beq	r2,zero,220c8 <frequency_response_update+0x540>
				cmd_value.active_power_max = P_MIN;
   220bc:	e03feb15 	stw	zero,-84(fp)
   220c0:	e03fec15 	stw	zero,-80(fp)
   220c4:	00003606 	br	221a0 <frequency_response_update+0x618>
			} else {
				double power_value = decrement_power(power_ref_latched,
   220c8:	d0a34e17 	ldw	r2,-29384(gp)
   220cc:	d0e34f17 	ldw	r3,-29380(gp)
   220d0:	e13ff717 	ldw	r4,-36(fp)
   220d4:	e17ff817 	ldw	r5,-32(fp)
   220d8:	200d883a 	mov	r6,r4
   220dc:	280f883a 	mov	r7,r5
   220e0:	1009883a 	mov	r4,r2
   220e4:	180b883a 	mov	r5,r3
   220e8:	0021ab00 	call	21ab0 <decrement_power>
   220ec:	e0bffe15 	stw	r2,-8(fp)
   220f0:	e0ffff15 	stw	r3,-4(fp)
						sampled_data.freq);
				if (power_value < cmd_value.active_power_max) {
   220f4:	e0bfeb17 	ldw	r2,-84(fp)
   220f8:	e0ffec17 	ldw	r3,-80(fp)
   220fc:	100d883a 	mov	r6,r2
   22100:	180f883a 	mov	r7,r3
   22104:	e13ffe17 	ldw	r4,-8(fp)
   22108:	e17fff17 	ldw	r5,-4(fp)
   2210c:	0023fac0 	call	23fac <__ledf2>
   22110:	1000230e 	bge	r2,zero,221a0 <frequency_response_update+0x618>
					cmd_value.active_power_max = power_value;
   22114:	e0bffe17 	ldw	r2,-8(fp)
   22118:	e0bfeb15 	stw	r2,-84(fp)
   2211c:	e0bfff17 	ldw	r2,-4(fp)
   22120:	e0bfec15 	stw	r2,-80(fp)
   22124:	00001e06 	br	221a0 <frequency_response_update+0x618>
				}
			}

		} else {
			enable_timer_sec();
   22128:	00219500 	call	21950 <enable_timer_sec>
			//printf("Awaiting timeout...g_sec_counter=  %d\r\n", g_sec_counter);
			if (g_sec_counter > FREQ_MODE_PERSIST_SEC) {
   2212c:	d0a34817 	ldw	r2,-29408(gp)
   22130:	108007d0 	cmplti	r2,r2,31
   22134:	1000181e 	bne	r2,zero,22198 <frequency_response_update+0x610>
				ST_GENERAL = NOMINAL;
   22138:	d0233f15 	stw	zero,-29444(gp)
				if (debug){
   2213c:	e0bfe817 	ldw	r2,-96(fp)
   22140:	10001726 	beq	r2,zero,221a0 <frequency_response_update+0x618>
				printf("\r\nEND");
   22144:	010000f4 	movhi	r4,3
   22148:	210c1e04 	addi	r4,r4,12408
   2214c:	00254100 	call	25410 <printf>
				printf(
   22150:	010000f4 	movhi	r4,3
   22154:	210bf504 	addi	r4,r4,12244
   22158:	00255340 	call	25534 <puts>
						"** Transition back to NOMINAL after timeout and hysteresis conditions met.\r\n");
				printf("** Latched power is %f \r\n", power_ref_latched);
   2215c:	d0a34e17 	ldw	r2,-29384(gp)
   22160:	d0e34f17 	ldw	r3,-29380(gp)
   22164:	100b883a 	mov	r5,r2
   22168:	180d883a 	mov	r6,r3
   2216c:	010000f4 	movhi	r4,3
   22170:	210c0804 	addi	r4,r4,12320
   22174:	00254100 	call	25410 <printf>
				printf("** Min power to hold is %f \r\n",
   22178:	e0bfeb17 	ldw	r2,-84(fp)
   2217c:	e0ffec17 	ldw	r3,-80(fp)
   22180:	100b883a 	mov	r5,r2
   22184:	180d883a 	mov	r6,r3
   22188:	010000f4 	movhi	r4,3
   2218c:	210c2004 	addi	r4,r4,12416
   22190:	00254100 	call	25410 <printf>
   22194:	00000206 	br	221a0 <frequency_response_update+0x618>
						cmd_value.active_power_max);
				}
				//cmd_value.active_power_max = power_ref_latched;
			} else {
				ST_GENERAL = FREQ_RISING;
   22198:	008000c4 	movi	r2,3
   2219c:	d0a33f15 	stw	r2,-29444(gp)
				//cmd_value.active_power_max = P_MAX;
			}
		}

		*gCommand = cmd_value;
   221a0:	e0bfe917 	ldw	r2,-92(fp)
   221a4:	e0ffeb17 	ldw	r3,-84(fp)
   221a8:	10c00015 	stw	r3,0(r2)
   221ac:	e0ffec17 	ldw	r3,-80(fp)
   221b0:	10c00115 	stw	r3,4(r2)
   221b4:	e0ffed17 	ldw	r3,-76(fp)
   221b8:	10c00215 	stw	r3,8(r2)
   221bc:	e0ffee17 	ldw	r3,-72(fp)
   221c0:	10c00315 	stw	r3,12(r2)
   221c4:	e0ffef17 	ldw	r3,-68(fp)
   221c8:	10c00415 	stw	r3,16(r2)
   221cc:	e0fff017 	ldw	r3,-64(fp)
   221d0:	10c00515 	stw	r3,20(r2)
   221d4:	e0fff117 	ldw	r3,-60(fp)
   221d8:	10c00615 	stw	r3,24(r2)
   221dc:	e0fff217 	ldw	r3,-56(fp)
   221e0:	10c00715 	stw	r3,28(r2)
		break;
   221e4:	00002306 	br	22274 <frequency_response_update+0x6ec>
	}

	case (MIN_POWER): {
		if (sampled_data.freq < F_PMIN) {
   221e8:	e0bff717 	ldw	r2,-36(fp)
   221ec:	e0fff817 	ldw	r3,-32(fp)
   221f0:	000d883a 	mov	r6,zero
   221f4:	01d012b4 	movhi	r7,16458
   221f8:	1009883a 	mov	r4,r2
   221fc:	180b883a 	mov	r5,r3
   22200:	0023fac0 	call	23fac <__ledf2>
   22204:	1000030e 	bge	r2,zero,22214 <frequency_response_update+0x68c>
			ST_GENERAL = FREQ_RISING;
   22208:	008000c4 	movi	r2,3
   2220c:	d0a33f15 	stw	r2,-29444(gp)
   22210:	00000206 	br	2221c <frequency_response_update+0x694>
		} else {
			ST_GENERAL = MIN_POWER;
   22214:	00800104 	movi	r2,4
   22218:	d0a33f15 	stw	r2,-29444(gp)
		}
		cmd_value.active_power_max = P_MIN;
   2221c:	e03feb15 	stw	zero,-84(fp)
   22220:	e03fec15 	stw	zero,-80(fp)
		*gCommand = cmd_value;
   22224:	e0bfe917 	ldw	r2,-92(fp)
   22228:	e0ffeb17 	ldw	r3,-84(fp)
   2222c:	10c00015 	stw	r3,0(r2)
   22230:	e0ffec17 	ldw	r3,-80(fp)
   22234:	10c00115 	stw	r3,4(r2)
   22238:	e0ffed17 	ldw	r3,-76(fp)
   2223c:	10c00215 	stw	r3,8(r2)
   22240:	e0ffee17 	ldw	r3,-72(fp)
   22244:	10c00315 	stw	r3,12(r2)
   22248:	e0ffef17 	ldw	r3,-68(fp)
   2224c:	10c00415 	stw	r3,16(r2)
   22250:	e0fff017 	ldw	r3,-64(fp)
   22254:	10c00515 	stw	r3,20(r2)
   22258:	e0fff117 	ldw	r3,-60(fp)
   2225c:	10c00615 	stw	r3,24(r2)
   22260:	e0fff217 	ldw	r3,-56(fp)
   22264:	10c00715 	stw	r3,28(r2)
		g_min_power_reached = 1;
   22268:	00800044 	movi	r2,1
   2226c:	d0a33e15 	stw	r2,-29448(gp)
		break;
   22270:	0001883a 	nop
	}

	}

}
   22274:	0001883a 	nop
   22278:	e037883a 	mov	sp,fp
   2227c:	dfc00117 	ldw	ra,4(sp)
   22280:	df000017 	ldw	fp,0(sp)
   22284:	dec00204 	addi	sp,sp,8
   22288:	f800283a 	ret

0002228c <voltage_sample>:
//===============================================

#include "sampled_data.h"


void voltage_sample(input_t *gInput){
   2228c:	defff404 	addi	sp,sp,-48
   22290:	dfc00b15 	stw	ra,44(sp)
   22294:	df000a15 	stw	fp,40(sp)
   22298:	df000a04 	addi	fp,sp,40
   2229c:	e13ff615 	stw	r4,-40(fp)
	input_t sampled_data;
	sampled_data = *gInput;
   222a0:	e0bff617 	ldw	r2,-40(fp)
   222a4:	10c00017 	ldw	r3,0(r2)
   222a8:	e0fff715 	stw	r3,-36(fp)
   222ac:	10c00117 	ldw	r3,4(r2)
   222b0:	e0fff815 	stw	r3,-32(fp)
   222b4:	10c00217 	ldw	r3,8(r2)
   222b8:	e0fff915 	stw	r3,-28(fp)
   222bc:	10c00317 	ldw	r3,12(r2)
   222c0:	e0fffa15 	stw	r3,-24(fp)
   222c4:	10c00417 	ldw	r3,16(r2)
   222c8:	e0fffb15 	stw	r3,-20(fp)
   222cc:	10c00517 	ldw	r3,20(r2)
   222d0:	e0fffc15 	stw	r3,-16(fp)
   222d4:	10c00617 	ldw	r3,24(r2)
   222d8:	e0fffd15 	stw	r3,-12(fp)
   222dc:	10c00717 	ldw	r3,28(r2)
   222e0:	e0fffe15 	stw	r3,-8(fp)
   222e4:	10800817 	ldw	r2,32(r2)
   222e8:	e0bfff15 	stw	r2,-4(fp)
	sampled_data.sample_k  = IORD_ALTERA_AVALON_PIO_DATA(I_REG32_1_BASE);
   222ec:	00800134 	movhi	r2,4
   222f0:	10855037 	ldwio	r2,5440(r2)
   222f4:	e0bff715 	stw	r2,-36(fp)
	sampled_data.rms = RECIP_ADC_VOLT_GAIN*RECIP_SQRT_3*sqrt((alt_64)sampled_data.sample_k);
   222f8:	e0bff717 	ldw	r2,-36(fp)
   222fc:	100d883a 	mov	r6,r2
   22300:	000f883a 	mov	r7,zero
   22304:	3009883a 	mov	r4,r6
   22308:	380b883a 	mov	r5,r7
   2230c:	0022a580 	call	22a58 <__floatdidf>
   22310:	100d883a 	mov	r6,r2
   22314:	180f883a 	mov	r7,r3
   22318:	3009883a 	mov	r4,r6
   2231c:	380b883a 	mov	r5,r7
   22320:	00227300 	call	22730 <sqrt>
   22324:	1011883a 	mov	r8,r2
   22328:	1813883a 	mov	r9,r3
   2232c:	01916434 	movhi	r6,17808
   22330:	318cc744 	addi	r6,r6,13085
   22334:	01cff0b4 	movhi	r7,16322
   22338:	39de69c4 	addi	r7,r7,31143
   2233c:	4009883a 	mov	r4,r8
   22340:	480b883a 	mov	r5,r9
   22344:	00240940 	call	24094 <__muldf3>
   22348:	1009883a 	mov	r4,r2
   2234c:	180b883a 	mov	r5,r3
   22350:	2005883a 	mov	r2,r4
   22354:	2807883a 	mov	r3,r5
   22358:	e0bff815 	stw	r2,-32(fp)
   2235c:	e0fff915 	stw	r3,-28(fp)
	*gInput = sampled_data;
   22360:	e0bff617 	ldw	r2,-40(fp)
   22364:	e0fff717 	ldw	r3,-36(fp)
   22368:	10c00015 	stw	r3,0(r2)
   2236c:	e0fff817 	ldw	r3,-32(fp)
   22370:	10c00115 	stw	r3,4(r2)
   22374:	e0fff917 	ldw	r3,-28(fp)
   22378:	10c00215 	stw	r3,8(r2)
   2237c:	e0fffa17 	ldw	r3,-24(fp)
   22380:	10c00315 	stw	r3,12(r2)
   22384:	e0fffb17 	ldw	r3,-20(fp)
   22388:	10c00415 	stw	r3,16(r2)
   2238c:	e0fffc17 	ldw	r3,-16(fp)
   22390:	10c00515 	stw	r3,20(r2)
   22394:	e0fffd17 	ldw	r3,-12(fp)
   22398:	10c00615 	stw	r3,24(r2)
   2239c:	e0fffe17 	ldw	r3,-8(fp)
   223a0:	10c00715 	stw	r3,28(r2)
   223a4:	e0ffff17 	ldw	r3,-4(fp)
   223a8:	10c00815 	stw	r3,32(r2)
}
   223ac:	0001883a 	nop
   223b0:	e037883a 	mov	sp,fp
   223b4:	dfc00117 	ldw	ra,4(sp)
   223b8:	df000017 	ldw	fp,0(sp)
   223bc:	dec00204 	addi	sp,sp,8
   223c0:	f800283a 	ret

000223c4 <frequency_sample>:

void frequency_sample(input_t *gInput){
   223c4:	defff404 	addi	sp,sp,-48
   223c8:	dfc00b15 	stw	ra,44(sp)
   223cc:	df000a15 	stw	fp,40(sp)
   223d0:	df000a04 	addi	fp,sp,40
   223d4:	e13ff615 	stw	r4,-40(fp)
	input_t sampled_data;
	sampled_data = *gInput;
   223d8:	e0bff617 	ldw	r2,-40(fp)
   223dc:	10c00017 	ldw	r3,0(r2)
   223e0:	e0fff715 	stw	r3,-36(fp)
   223e4:	10c00117 	ldw	r3,4(r2)
   223e8:	e0fff815 	stw	r3,-32(fp)
   223ec:	10c00217 	ldw	r3,8(r2)
   223f0:	e0fff915 	stw	r3,-28(fp)
   223f4:	10c00317 	ldw	r3,12(r2)
   223f8:	e0fffa15 	stw	r3,-24(fp)
   223fc:	10c00417 	ldw	r3,16(r2)
   22400:	e0fffb15 	stw	r3,-20(fp)
   22404:	10c00517 	ldw	r3,20(r2)
   22408:	e0fffc15 	stw	r3,-16(fp)
   2240c:	10c00617 	ldw	r3,24(r2)
   22410:	e0fffd15 	stw	r3,-12(fp)
   22414:	10c00717 	ldw	r3,28(r2)
   22418:	e0fffe15 	stw	r3,-8(fp)
   2241c:	10800817 	ldw	r2,32(r2)
   22420:	e0bfff15 	stw	r2,-4(fp)
	sampled_data.timer_k   = IORD_ALTERA_AVALON_PIO_DATA(I_REG32_2_BASE);
   22424:	00800134 	movhi	r2,4
   22428:	10850037 	ldwio	r2,5120(r2)
   2242c:	e0bffa15 	stw	r2,-24(fp)
	sampled_data.freq = 1/(FPGA_MCLK*((alt_64)sampled_data.timer_k));
   22430:	e0bffa17 	ldw	r2,-24(fp)
   22434:	100d883a 	mov	r6,r2
   22438:	000f883a 	mov	r7,zero
   2243c:	3009883a 	mov	r4,r6
   22440:	380b883a 	mov	r5,r7
   22444:	0022a580 	call	22a58 <__floatdidf>
   22448:	1011883a 	mov	r8,r2
   2244c:	1813883a 	mov	r9,r3
   22450:	01b88c74 	movhi	r6,57905
   22454:	31a30e84 	addi	r6,r6,-29638
   22458:	01cf9574 	movhi	r7,15957
   2245c:	39de6384 	addi	r7,r7,31118
   22460:	4009883a 	mov	r4,r8
   22464:	480b883a 	mov	r5,r9
   22468:	00240940 	call	24094 <__muldf3>
   2246c:	1009883a 	mov	r4,r2
   22470:	180b883a 	mov	r5,r3
   22474:	2005883a 	mov	r2,r4
   22478:	2807883a 	mov	r3,r5
   2247c:	100d883a 	mov	r6,r2
   22480:	180f883a 	mov	r7,r3
   22484:	0009883a 	mov	r4,zero
   22488:	014ffc34 	movhi	r5,16368
   2248c:	00235940 	call	23594 <__divdf3>
   22490:	1009883a 	mov	r4,r2
   22494:	180b883a 	mov	r5,r3
   22498:	2005883a 	mov	r2,r4
   2249c:	2807883a 	mov	r3,r5
   224a0:	e0bffb15 	stw	r2,-20(fp)
   224a4:	e0fffc15 	stw	r3,-16(fp)
	*gInput = sampled_data;
   224a8:	e0bff617 	ldw	r2,-40(fp)
   224ac:	e0fff717 	ldw	r3,-36(fp)
   224b0:	10c00015 	stw	r3,0(r2)
   224b4:	e0fff817 	ldw	r3,-32(fp)
   224b8:	10c00115 	stw	r3,4(r2)
   224bc:	e0fff917 	ldw	r3,-28(fp)
   224c0:	10c00215 	stw	r3,8(r2)
   224c4:	e0fffa17 	ldw	r3,-24(fp)
   224c8:	10c00315 	stw	r3,12(r2)
   224cc:	e0fffb17 	ldw	r3,-20(fp)
   224d0:	10c00415 	stw	r3,16(r2)
   224d4:	e0fffc17 	ldw	r3,-16(fp)
   224d8:	10c00515 	stw	r3,20(r2)
   224dc:	e0fffd17 	ldw	r3,-12(fp)
   224e0:	10c00615 	stw	r3,24(r2)
   224e4:	e0fffe17 	ldw	r3,-8(fp)
   224e8:	10c00715 	stw	r3,28(r2)
   224ec:	e0ffff17 	ldw	r3,-4(fp)
   224f0:	10c00815 	stw	r3,32(r2)
}
   224f4:	0001883a 	nop
   224f8:	e037883a 	mov	sp,fp
   224fc:	dfc00117 	ldw	ra,4(sp)
   22500:	df000017 	ldw	fp,0(sp)
   22504:	dec00204 	addi	sp,sp,8
   22508:	f800283a 	ret

0002250c <sample_power_values>:

void sample_power_values(input_t *gInput){
   2250c:	defff404 	addi	sp,sp,-48
   22510:	dfc00b15 	stw	ra,44(sp)
   22514:	df000a15 	stw	fp,40(sp)
   22518:	df000a04 	addi	fp,sp,40
   2251c:	e13ff615 	stw	r4,-40(fp)
	input_t power;
	power = *gInput;
   22520:	e0bff617 	ldw	r2,-40(fp)
   22524:	10c00017 	ldw	r3,0(r2)
   22528:	e0fff715 	stw	r3,-36(fp)
   2252c:	10c00117 	ldw	r3,4(r2)
   22530:	e0fff815 	stw	r3,-32(fp)
   22534:	10c00217 	ldw	r3,8(r2)
   22538:	e0fff915 	stw	r3,-28(fp)
   2253c:	10c00317 	ldw	r3,12(r2)
   22540:	e0fffa15 	stw	r3,-24(fp)
   22544:	10c00417 	ldw	r3,16(r2)
   22548:	e0fffb15 	stw	r3,-20(fp)
   2254c:	10c00517 	ldw	r3,20(r2)
   22550:	e0fffc15 	stw	r3,-16(fp)
   22554:	10c00617 	ldw	r3,24(r2)
   22558:	e0fffd15 	stw	r3,-12(fp)
   2255c:	10c00717 	ldw	r3,28(r2)
   22560:	e0fffe15 	stw	r3,-8(fp)
   22564:	10800817 	ldw	r2,32(r2)
   22568:	e0bfff15 	stw	r2,-4(fp)
	power.real_k = IORD_ALTERA_AVALON_PIO_DATA(I_REG32_3_BASE);
   2256c:	00800134 	movhi	r2,4
   22570:	1084fc37 	ldwio	r2,5104(r2)
   22574:	e0bffd15 	stw	r2,-12(fp)
	power.real_power = (SQRT_3_DIV_2 * FILTER_SCALE) * sqrt((alt_64)power.real_k);
   22578:	e0bffd17 	ldw	r2,-12(fp)
   2257c:	100d883a 	mov	r6,r2
   22580:	000f883a 	mov	r7,zero
   22584:	3009883a 	mov	r4,r6
   22588:	380b883a 	mov	r5,r7
   2258c:	0022a580 	call	22a58 <__floatdidf>
   22590:	100d883a 	mov	r6,r2
   22594:	180f883a 	mov	r7,r3
   22598:	3009883a 	mov	r4,r6
   2259c:	380b883a 	mov	r5,r7
   225a0:	00227300 	call	22730 <sqrt>
   225a4:	1011883a 	mov	r8,r2
   225a8:	1813883a 	mov	r9,r3
   225ac:	01850274 	movhi	r6,5129
   225b0:	31884b84 	addi	r6,r6,8494
   225b4:	01cff934 	movhi	r7,16356
   225b8:	39e62384 	addi	r7,r7,-26482
   225bc:	4009883a 	mov	r4,r8
   225c0:	480b883a 	mov	r5,r9
   225c4:	00240940 	call	24094 <__muldf3>
   225c8:	1009883a 	mov	r4,r2
   225cc:	180b883a 	mov	r5,r3
   225d0:	2005883a 	mov	r2,r4
   225d4:	2807883a 	mov	r3,r5
   225d8:	e0bffe15 	stw	r2,-8(fp)
   225dc:	e0ffff15 	stw	r3,-4(fp)
	*gInput = power;
   225e0:	e0bff617 	ldw	r2,-40(fp)
   225e4:	e0fff717 	ldw	r3,-36(fp)
   225e8:	10c00015 	stw	r3,0(r2)
   225ec:	e0fff817 	ldw	r3,-32(fp)
   225f0:	10c00115 	stw	r3,4(r2)
   225f4:	e0fff917 	ldw	r3,-28(fp)
   225f8:	10c00215 	stw	r3,8(r2)
   225fc:	e0fffa17 	ldw	r3,-24(fp)
   22600:	10c00315 	stw	r3,12(r2)
   22604:	e0fffb17 	ldw	r3,-20(fp)
   22608:	10c00415 	stw	r3,16(r2)
   2260c:	e0fffc17 	ldw	r3,-16(fp)
   22610:	10c00515 	stw	r3,20(r2)
   22614:	e0fffd17 	ldw	r3,-12(fp)
   22618:	10c00615 	stw	r3,24(r2)
   2261c:	e0fffe17 	ldw	r3,-8(fp)
   22620:	10c00715 	stw	r3,28(r2)
   22624:	e0ffff17 	ldw	r3,-4(fp)
   22628:	10c00815 	stw	r3,32(r2)
}
   2262c:	0001883a 	nop
   22630:	e037883a 	mov	sp,fp
   22634:	dfc00117 	ldw	ra,4(sp)
   22638:	df000017 	ldw	fp,0(sp)
   2263c:	dec00204 	addi	sp,sp,8
   22640:	f800283a 	ret

00022644 <set_squares_filter>:

void set_squares_filter(filter_t* filter_params){
   22644:	defffe04 	addi	sp,sp,-8
   22648:	df000115 	stw	fp,4(sp)
   2264c:	df000104 	addi	fp,sp,4
   22650:	e13fff15 	stw	r4,-4(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(O_REG32_4_BASE, filter_params->tsx);
   22654:	e0bfff17 	ldw	r2,-4(fp)
   22658:	10800217 	ldw	r2,8(r2)
   2265c:	1007883a 	mov	r3,r2
   22660:	00800134 	movhi	r2,4
   22664:	10c52035 	stwio	r3,5248(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(O_REG32_5_BASE, filter_params->alpha);
   22668:	e0bfff17 	ldw	r2,-4(fp)
   2266c:	10800017 	ldw	r2,0(r2)
   22670:	1007883a 	mov	r3,r2
   22674:	00800134 	movhi	r2,4
   22678:	10c51c35 	stwio	r3,5232(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(O_REG32_6_BASE, filter_params->beta);
   2267c:	e0bfff17 	ldw	r2,-4(fp)
   22680:	10800117 	ldw	r2,4(r2)
   22684:	1007883a 	mov	r3,r2
   22688:	00800134 	movhi	r2,4
   2268c:	10c51835 	stwio	r3,5216(r2)
}
   22690:	0001883a 	nop
   22694:	e037883a 	mov	sp,fp
   22698:	df000017 	ldw	fp,0(sp)
   2269c:	dec00104 	addi	sp,sp,4
   226a0:	f800283a 	ret

000226a4 <set_timer_filter>:

void set_timer_filter(filter_t* filter_params){
   226a4:	defffe04 	addi	sp,sp,-8
   226a8:	df000115 	stw	fp,4(sp)
   226ac:	df000104 	addi	fp,sp,4
   226b0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(O_REG32_11_BASE, filter_params->tsx);
   226b4:	e0bfff17 	ldw	r2,-4(fp)
   226b8:	10800217 	ldw	r2,8(r2)
   226bc:	1007883a 	mov	r3,r2
   226c0:	00800134 	movhi	r2,4
   226c4:	10c50435 	stwio	r3,5136(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(O_REG32_8_BASE, filter_params->alpha);
   226c8:	e0bfff17 	ldw	r2,-4(fp)
   226cc:	10800017 	ldw	r2,0(r2)
   226d0:	1007883a 	mov	r3,r2
   226d4:	00800134 	movhi	r2,4
   226d8:	10c51035 	stwio	r3,5184(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(O_REG32_9_BASE, filter_params->beta);
   226dc:	e0bfff17 	ldw	r2,-4(fp)
   226e0:	10800117 	ldw	r2,4(r2)
   226e4:	1007883a 	mov	r3,r2
   226e8:	00800134 	movhi	r2,4
   226ec:	10c50c35 	stwio	r3,5168(r2)
}
   226f0:	0001883a 	nop
   226f4:	e037883a 	mov	sp,fp
   226f8:	df000017 	ldw	fp,0(sp)
   226fc:	dec00104 	addi	sp,sp,4
   22700:	f800283a 	ret

00022704 <disable_fpga_filter>:



void disable_fpga_filter(){
   22704:	deffff04 	addi	sp,sp,-4
   22708:	df000015 	stw	fp,0(sp)
   2270c:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(O_REG32_7_BASE, 0x0);
   22710:	0007883a 	mov	r3,zero
   22714:	00800134 	movhi	r2,4
   22718:	10c51435 	stwio	r3,5200(r2)
}
   2271c:	0001883a 	nop
   22720:	e037883a 	mov	sp,fp
   22724:	df000017 	ldw	fp,0(sp)
   22728:	dec00104 	addi	sp,sp,4
   2272c:	f800283a 	ret

00022730 <sqrt>:
   22730:	defffb04 	addi	sp,sp,-20
   22734:	dcc00315 	stw	r19,12(sp)
   22738:	dc800215 	stw	r18,8(sp)
   2273c:	dc400115 	stw	r17,4(sp)
   22740:	dc000015 	stw	r16,0(sp)
   22744:	2023883a 	mov	r17,r4
   22748:	dfc00415 	stw	ra,16(sp)
   2274c:	2821883a 	mov	r16,r5
   22750:	00227ec0 	call	227ec <__ieee754_sqrt>
   22754:	010000f4 	movhi	r4,3
   22758:	2110ce17 	ldw	r4,17208(r4)
   2275c:	1027883a 	mov	r19,r2
   22760:	1825883a 	mov	r18,r3
   22764:	213fffe0 	cmpeqi	r4,r4,-1
   22768:	20000c1e 	bne	r4,zero,2279c <sqrt+0x6c>
   2276c:	880d883a 	mov	r6,r17
   22770:	800f883a 	mov	r7,r16
   22774:	8809883a 	mov	r4,r17
   22778:	800b883a 	mov	r5,r16
   2277c:	00250f40 	call	250f4 <__unorddf2>
   22780:	1000061e 	bne	r2,zero,2279c <sqrt+0x6c>
   22784:	000d883a 	mov	r6,zero
   22788:	000f883a 	mov	r7,zero
   2278c:	8809883a 	mov	r4,r17
   22790:	800b883a 	mov	r5,r16
   22794:	0023fac0 	call	23fac <__ledf2>
   22798:	10000916 	blt	r2,zero,227c0 <sqrt+0x90>
   2279c:	9805883a 	mov	r2,r19
   227a0:	9007883a 	mov	r3,r18
   227a4:	dfc00417 	ldw	ra,16(sp)
   227a8:	dcc00317 	ldw	r19,12(sp)
   227ac:	dc800217 	ldw	r18,8(sp)
   227b0:	dc400117 	ldw	r17,4(sp)
   227b4:	dc000017 	ldw	r16,0(sp)
   227b8:	dec00504 	addi	sp,sp,20
   227bc:	f800283a 	ret
   227c0:	00252e40 	call	252e4 <__errno>
   227c4:	00c00844 	movi	r3,33
   227c8:	10c00015 	stw	r3,0(r2)
   227cc:	000d883a 	mov	r6,zero
   227d0:	000f883a 	mov	r7,zero
   227d4:	0009883a 	mov	r4,zero
   227d8:	000b883a 	mov	r5,zero
   227dc:	00235940 	call	23594 <__divdf3>
   227e0:	1027883a 	mov	r19,r2
   227e4:	1825883a 	mov	r18,r3
   227e8:	003fec06 	br	2279c <sqrt+0x6c>

000227ec <__ieee754_sqrt>:
   227ec:	defffd04 	addi	sp,sp,-12
   227f0:	dc400115 	stw	r17,4(sp)
   227f4:	dc000015 	stw	r16,0(sp)
   227f8:	dfc00215 	stw	ra,8(sp)
   227fc:	28dffc2c 	andhi	r3,r5,32752
   22800:	009ffc34 	movhi	r2,32752
   22804:	2821883a 	mov	r16,r5
   22808:	2023883a 	mov	r17,r4
   2280c:	18807726 	beq	r3,r2,229ec <__ieee754_sqrt+0x200>
   22810:	2011883a 	mov	r8,r4
   22814:	01403a0e 	bge	zero,r5,22900 <__ieee754_sqrt+0x114>
   22818:	280bd53a 	srai	r5,r5,20
   2281c:	28004626 	beq	r5,zero,22938 <__ieee754_sqrt+0x14c>
   22820:	00800434 	movhi	r2,16
   22824:	10bfffc4 	addi	r2,r2,-1
   22828:	4006d7fa 	srli	r3,r8,31
   2282c:	8084703a 	and	r2,r16,r2
   22830:	297f0044 	addi	r5,r5,-1023
   22834:	10800434 	orhi	r2,r2,16
   22838:	1085883a 	add	r2,r2,r2
   2283c:	2980004c 	andi	r6,r5,1
   22840:	10c7883a 	add	r3,r2,r3
   22844:	4209883a 	add	r4,r8,r8
   22848:	30000426 	beq	r6,zero,2285c <__ieee754_sqrt+0x70>
   2284c:	2004d7fa 	srli	r2,r4,31
   22850:	400890ba 	slli	r4,r8,2
   22854:	18c7883a 	add	r3,r3,r3
   22858:	1887883a 	add	r3,r3,r2
   2285c:	2815d07a 	srai	r10,r5,1
   22860:	01c00584 	movi	r7,22
   22864:	0019883a 	mov	r12,zero
   22868:	000b883a 	mov	r5,zero
   2286c:	00800834 	movhi	r2,32
   22870:	288d883a 	add	r6,r5,r2
   22874:	2010d7fa 	srli	r8,r4,31
   22878:	39ffffc4 	addi	r7,r7,-1
   2287c:	19800316 	blt	r3,r6,2288c <__ieee754_sqrt+0xa0>
   22880:	1987c83a 	sub	r3,r3,r6
   22884:	308b883a 	add	r5,r6,r2
   22888:	6099883a 	add	r12,r12,r2
   2288c:	18c7883a 	add	r3,r3,r3
   22890:	1004d07a 	srli	r2,r2,1
   22894:	40c7883a 	add	r3,r8,r3
   22898:	2109883a 	add	r4,r4,r4
   2289c:	383ff41e 	bne	r7,zero,22870 <__ieee754_sqrt+0x84>
   228a0:	0013883a 	mov	r9,zero
   228a4:	00800804 	movi	r2,32
   228a8:	01a00034 	movhi	r6,32768
   228ac:	00000806 	br	228d0 <__ieee754_sqrt+0xe4>
   228b0:	19403326 	beq	r3,r5,22980 <__ieee754_sqrt+0x194>
   228b4:	2010d7fa 	srli	r8,r4,31
   228b8:	18c7883a 	add	r3,r3,r3
   228bc:	10bfffc4 	addi	r2,r2,-1
   228c0:	300cd07a 	srli	r6,r6,1
   228c4:	1a07883a 	add	r3,r3,r8
   228c8:	2109883a 	add	r4,r4,r4
   228cc:	10003226 	beq	r2,zero,22998 <__ieee754_sqrt+0x1ac>
   228d0:	31d1883a 	add	r8,r6,r7
   228d4:	28fff60e 	bge	r5,r3,228b0 <__ieee754_sqrt+0xc4>
   228d8:	418f883a 	add	r7,r8,r6
   228dc:	40002516 	blt	r8,zero,22974 <__ieee754_sqrt+0x188>
   228e0:	2817883a 	mov	r11,r5
   228e4:	1947c83a 	sub	r3,r3,r5
   228e8:	2200012e 	bgeu	r4,r8,228f0 <__ieee754_sqrt+0x104>
   228ec:	18ffffc4 	addi	r3,r3,-1
   228f0:	2209c83a 	sub	r4,r4,r8
   228f4:	4993883a 	add	r9,r9,r6
   228f8:	580b883a 	mov	r5,r11
   228fc:	003fed06 	br	228b4 <__ieee754_sqrt+0xc8>
   22900:	00a00034 	movhi	r2,32768
   22904:	10bfffc4 	addi	r2,r2,-1
   22908:	2884703a 	and	r2,r5,r2
   2290c:	1104b03a 	or	r2,r2,r4
   22910:	10004826 	beq	r2,zero,22a34 <__ieee754_sqrt+0x248>
   22914:	28003e1e 	bne	r5,zero,22a10 <__ieee754_sqrt+0x224>
   22918:	000b883a 	mov	r5,zero
   2291c:	4004d2fa 	srli	r2,r8,11
   22920:	297ffac4 	addi	r5,r5,-21
   22924:	4010957a 	slli	r8,r8,21
   22928:	1021883a 	mov	r16,r2
   2292c:	103ffb26 	beq	r2,zero,2291c <__ieee754_sqrt+0x130>
   22930:	10c0042c 	andhi	r3,r2,16
   22934:	1800441e 	bne	r3,zero,22a48 <__ieee754_sqrt+0x25c>
   22938:	0005883a 	mov	r2,zero
   2293c:	8421883a 	add	r16,r16,r16
   22940:	8100042c 	andhi	r4,r16,16
   22944:	1007883a 	mov	r3,r2
   22948:	10800044 	addi	r2,r2,1
   2294c:	203ffb26 	beq	r4,zero,2293c <__ieee754_sqrt+0x150>
   22950:	01800804 	movi	r6,32
   22954:	4009883a 	mov	r4,r8
   22958:	308dc83a 	sub	r6,r6,r2
   2295c:	4090983a 	sll	r8,r8,r2
   22960:	8005883a 	mov	r2,r16
   22964:	218ed83a 	srl	r7,r4,r6
   22968:	28cbc83a 	sub	r5,r5,r3
   2296c:	38a0b03a 	or	r16,r7,r2
   22970:	003fab06 	br	22820 <__ieee754_sqrt+0x34>
   22974:	383fda16 	blt	r7,zero,228e0 <__ieee754_sqrt+0xf4>
   22978:	2ac00044 	addi	r11,r5,1
   2297c:	003fd906 	br	228e4 <__ieee754_sqrt+0xf8>
   22980:	223fcc36 	bltu	r4,r8,228b4 <__ieee754_sqrt+0xc8>
   22984:	418f883a 	add	r7,r8,r6
   22988:	403ffa16 	blt	r8,zero,22974 <__ieee754_sqrt+0x188>
   2298c:	1817883a 	mov	r11,r3
   22990:	0007883a 	mov	r3,zero
   22994:	003fd606 	br	228f0 <__ieee754_sqrt+0x104>
   22998:	1906b03a 	or	r3,r3,r4
   2299c:	18000e1e 	bne	r3,zero,229d8 <__ieee754_sqrt+0x1ec>
   229a0:	4804d07a 	srli	r2,r9,1
   229a4:	6007d07a 	srai	r3,r12,1
   229a8:	01cff834 	movhi	r7,16352
   229ac:	6300004c 	andi	r12,r12,1
   229b0:	19cf883a 	add	r7,r3,r7
   229b4:	60000126 	beq	r12,zero,229bc <__ieee754_sqrt+0x1d0>
   229b8:	10a00034 	orhi	r2,r2,32768
   229bc:	5006953a 	slli	r3,r10,20
   229c0:	19c7883a 	add	r3,r3,r7
   229c4:	dfc00217 	ldw	ra,8(sp)
   229c8:	dc400117 	ldw	r17,4(sp)
   229cc:	dc000017 	ldw	r16,0(sp)
   229d0:	dec00304 	addi	sp,sp,12
   229d4:	f800283a 	ret
   229d8:	48ffffd8 	cmpnei	r3,r9,-1
   229dc:	18001826 	beq	r3,zero,22a40 <__ieee754_sqrt+0x254>
   229e0:	48800044 	addi	r2,r9,1
   229e4:	1004d07a 	srli	r2,r2,1
   229e8:	003fee06 	br	229a4 <__ieee754_sqrt+0x1b8>
   229ec:	200d883a 	mov	r6,r4
   229f0:	280f883a 	mov	r7,r5
   229f4:	00240940 	call	24094 <__muldf3>
   229f8:	880d883a 	mov	r6,r17
   229fc:	800f883a 	mov	r7,r16
   22a00:	1009883a 	mov	r4,r2
   22a04:	180b883a 	mov	r5,r3
   22a08:	0022ca40 	call	22ca4 <__adddf3>
   22a0c:	003fed06 	br	229c4 <__ieee754_sqrt+0x1d8>
   22a10:	200d883a 	mov	r6,r4
   22a14:	280f883a 	mov	r7,r5
   22a18:	00248400 	call	24840 <__subdf3>
   22a1c:	100d883a 	mov	r6,r2
   22a20:	180f883a 	mov	r7,r3
   22a24:	1009883a 	mov	r4,r2
   22a28:	180b883a 	mov	r5,r3
   22a2c:	00235940 	call	23594 <__divdf3>
   22a30:	003fe406 	br	229c4 <__ieee754_sqrt+0x1d8>
   22a34:	2005883a 	mov	r2,r4
   22a38:	2807883a 	mov	r3,r5
   22a3c:	003fe106 	br	229c4 <__ieee754_sqrt+0x1d8>
   22a40:	63000044 	addi	r12,r12,1
   22a44:	003fd706 	br	229a4 <__ieee754_sqrt+0x1b8>
   22a48:	4009883a 	mov	r4,r8
   22a4c:	01800804 	movi	r6,32
   22a50:	00ffffc4 	movi	r3,-1
   22a54:	003fc306 	br	22964 <__ieee754_sqrt+0x178>

00022a58 <__floatdidf>:
   22a58:	defffc04 	addi	sp,sp,-16
   22a5c:	dc800215 	stw	r18,8(sp)
   22a60:	2025883a 	mov	r18,r4
   22a64:	2809883a 	mov	r4,r5
   22a68:	dfc00315 	stw	ra,12(sp)
   22a6c:	dc400115 	stw	r17,4(sp)
   22a70:	dc000015 	stw	r16,0(sp)
   22a74:	00251480 	call	25148 <__floatsidf>
   22a78:	000d883a 	mov	r6,zero
   22a7c:	01d07c34 	movhi	r7,16880
   22a80:	180b883a 	mov	r5,r3
   22a84:	1009883a 	mov	r4,r2
   22a88:	00240940 	call	24094 <__muldf3>
   22a8c:	9009883a 	mov	r4,r18
   22a90:	1023883a 	mov	r17,r2
   22a94:	1821883a 	mov	r16,r3
   22a98:	00252000 	call	25200 <__floatunsidf>
   22a9c:	880d883a 	mov	r6,r17
   22aa0:	800f883a 	mov	r7,r16
   22aa4:	1009883a 	mov	r4,r2
   22aa8:	180b883a 	mov	r5,r3
   22aac:	0022ca40 	call	22ca4 <__adddf3>
   22ab0:	dfc00317 	ldw	ra,12(sp)
   22ab4:	dc800217 	ldw	r18,8(sp)
   22ab8:	dc400117 	ldw	r17,4(sp)
   22abc:	dc000017 	ldw	r16,0(sp)
   22ac0:	dec00404 	addi	sp,sp,16
   22ac4:	f800283a 	ret

00022ac8 <__divsi3>:
   22ac8:	20001a16 	blt	r4,zero,22b34 <__divsi3+0x6c>
   22acc:	000f883a 	mov	r7,zero
   22ad0:	2800020e 	bge	r5,zero,22adc <__divsi3+0x14>
   22ad4:	014bc83a 	sub	r5,zero,r5
   22ad8:	39c0005c 	xori	r7,r7,1
   22adc:	200d883a 	mov	r6,r4
   22ae0:	00c00044 	movi	r3,1
   22ae4:	2900092e 	bgeu	r5,r4,22b0c <__divsi3+0x44>
   22ae8:	00800804 	movi	r2,32
   22aec:	00c00044 	movi	r3,1
   22af0:	00000106 	br	22af8 <__divsi3+0x30>
   22af4:	10001226 	beq	r2,zero,22b40 <__divsi3+0x78>
   22af8:	294b883a 	add	r5,r5,r5
   22afc:	10bfffc4 	addi	r2,r2,-1
   22b00:	18c7883a 	add	r3,r3,r3
   22b04:	293ffb36 	bltu	r5,r4,22af4 <__divsi3+0x2c>
   22b08:	18000d26 	beq	r3,zero,22b40 <__divsi3+0x78>
   22b0c:	0005883a 	mov	r2,zero
   22b10:	31400236 	bltu	r6,r5,22b1c <__divsi3+0x54>
   22b14:	314dc83a 	sub	r6,r6,r5
   22b18:	10c4b03a 	or	r2,r2,r3
   22b1c:	1806d07a 	srli	r3,r3,1
   22b20:	280ad07a 	srli	r5,r5,1
   22b24:	183ffa1e 	bne	r3,zero,22b10 <__divsi3+0x48>
   22b28:	38000126 	beq	r7,zero,22b30 <__divsi3+0x68>
   22b2c:	0085c83a 	sub	r2,zero,r2
   22b30:	f800283a 	ret
   22b34:	0109c83a 	sub	r4,zero,r4
   22b38:	01c00044 	movi	r7,1
   22b3c:	003fe406 	br	22ad0 <__divsi3+0x8>
   22b40:	0005883a 	mov	r2,zero
   22b44:	003ff806 	br	22b28 <__divsi3+0x60>

00022b48 <__modsi3>:
   22b48:	20001916 	blt	r4,zero,22bb0 <__modsi3+0x68>
   22b4c:	000f883a 	mov	r7,zero
   22b50:	2005883a 	mov	r2,r4
   22b54:	2800010e 	bge	r5,zero,22b5c <__modsi3+0x14>
   22b58:	014bc83a 	sub	r5,zero,r5
   22b5c:	00c00044 	movi	r3,1
   22b60:	2900092e 	bgeu	r5,r4,22b88 <__modsi3+0x40>
   22b64:	01800804 	movi	r6,32
   22b68:	00c00044 	movi	r3,1
   22b6c:	00000106 	br	22b74 <__modsi3+0x2c>
   22b70:	30000d26 	beq	r6,zero,22ba8 <__modsi3+0x60>
   22b74:	294b883a 	add	r5,r5,r5
   22b78:	31bfffc4 	addi	r6,r6,-1
   22b7c:	18c7883a 	add	r3,r3,r3
   22b80:	293ffb36 	bltu	r5,r4,22b70 <__modsi3+0x28>
   22b84:	18000826 	beq	r3,zero,22ba8 <__modsi3+0x60>
   22b88:	1806d07a 	srli	r3,r3,1
   22b8c:	11400136 	bltu	r2,r5,22b94 <__modsi3+0x4c>
   22b90:	1145c83a 	sub	r2,r2,r5
   22b94:	280ad07a 	srli	r5,r5,1
   22b98:	183ffb1e 	bne	r3,zero,22b88 <__modsi3+0x40>
   22b9c:	38000126 	beq	r7,zero,22ba4 <__modsi3+0x5c>
   22ba0:	0085c83a 	sub	r2,zero,r2
   22ba4:	f800283a 	ret
   22ba8:	2005883a 	mov	r2,r4
   22bac:	003ffb06 	br	22b9c <__modsi3+0x54>
   22bb0:	0109c83a 	sub	r4,zero,r4
   22bb4:	01c00044 	movi	r7,1
   22bb8:	003fe506 	br	22b50 <__modsi3+0x8>

00022bbc <__udivsi3>:
   22bbc:	200d883a 	mov	r6,r4
   22bc0:	2900152e 	bgeu	r5,r4,22c18 <__udivsi3+0x5c>
   22bc4:	28001416 	blt	r5,zero,22c18 <__udivsi3+0x5c>
   22bc8:	00800804 	movi	r2,32
   22bcc:	00c00044 	movi	r3,1
   22bd0:	00000206 	br	22bdc <__udivsi3+0x20>
   22bd4:	10000e26 	beq	r2,zero,22c10 <__udivsi3+0x54>
   22bd8:	28000516 	blt	r5,zero,22bf0 <__udivsi3+0x34>
   22bdc:	294b883a 	add	r5,r5,r5
   22be0:	10bfffc4 	addi	r2,r2,-1
   22be4:	18c7883a 	add	r3,r3,r3
   22be8:	293ffa36 	bltu	r5,r4,22bd4 <__udivsi3+0x18>
   22bec:	18000826 	beq	r3,zero,22c10 <__udivsi3+0x54>
   22bf0:	0005883a 	mov	r2,zero
   22bf4:	31400236 	bltu	r6,r5,22c00 <__udivsi3+0x44>
   22bf8:	314dc83a 	sub	r6,r6,r5
   22bfc:	10c4b03a 	or	r2,r2,r3
   22c00:	1806d07a 	srli	r3,r3,1
   22c04:	280ad07a 	srli	r5,r5,1
   22c08:	183ffa1e 	bne	r3,zero,22bf4 <__udivsi3+0x38>
   22c0c:	f800283a 	ret
   22c10:	0005883a 	mov	r2,zero
   22c14:	f800283a 	ret
   22c18:	00c00044 	movi	r3,1
   22c1c:	003ff406 	br	22bf0 <__udivsi3+0x34>

00022c20 <__umodsi3>:
   22c20:	2005883a 	mov	r2,r4
   22c24:	2900132e 	bgeu	r5,r4,22c74 <__umodsi3+0x54>
   22c28:	28001216 	blt	r5,zero,22c74 <__umodsi3+0x54>
   22c2c:	01800804 	movi	r6,32
   22c30:	00c00044 	movi	r3,1
   22c34:	00000206 	br	22c40 <__umodsi3+0x20>
   22c38:	30000c26 	beq	r6,zero,22c6c <__umodsi3+0x4c>
   22c3c:	28000516 	blt	r5,zero,22c54 <__umodsi3+0x34>
   22c40:	294b883a 	add	r5,r5,r5
   22c44:	31bfffc4 	addi	r6,r6,-1
   22c48:	18c7883a 	add	r3,r3,r3
   22c4c:	293ffa36 	bltu	r5,r4,22c38 <__umodsi3+0x18>
   22c50:	18000626 	beq	r3,zero,22c6c <__umodsi3+0x4c>
   22c54:	1806d07a 	srli	r3,r3,1
   22c58:	11400136 	bltu	r2,r5,22c60 <__umodsi3+0x40>
   22c5c:	1145c83a 	sub	r2,r2,r5
   22c60:	280ad07a 	srli	r5,r5,1
   22c64:	183ffb1e 	bne	r3,zero,22c54 <__umodsi3+0x34>
   22c68:	f800283a 	ret
   22c6c:	2005883a 	mov	r2,r4
   22c70:	f800283a 	ret
   22c74:	00c00044 	movi	r3,1
   22c78:	003ff606 	br	22c54 <__umodsi3+0x34>

00022c7c <__mulsi3>:
   22c7c:	0005883a 	mov	r2,zero
   22c80:	20000726 	beq	r4,zero,22ca0 <__mulsi3+0x24>
   22c84:	20c0004c 	andi	r3,r4,1
   22c88:	2008d07a 	srli	r4,r4,1
   22c8c:	18000126 	beq	r3,zero,22c94 <__mulsi3+0x18>
   22c90:	1145883a 	add	r2,r2,r5
   22c94:	294b883a 	add	r5,r5,r5
   22c98:	203ffa1e 	bne	r4,zero,22c84 <__mulsi3+0x8>
   22c9c:	f800283a 	ret
   22ca0:	f800283a 	ret

00022ca4 <__adddf3>:
   22ca4:	02000434 	movhi	r8,16
   22ca8:	423fffc4 	addi	r8,r8,-1
   22cac:	2806d53a 	srli	r3,r5,20
   22cb0:	3804d53a 	srli	r2,r7,20
   22cb4:	2a14703a 	and	r10,r5,r8
   22cb8:	3a12703a 	and	r9,r7,r8
   22cbc:	280ad7fa 	srli	r5,r5,31
   22cc0:	501490fa 	slli	r10,r10,3
   22cc4:	2018d77a 	srli	r12,r4,29
   22cc8:	481290fa 	slli	r9,r9,3
   22ccc:	3016d77a 	srli	r11,r6,29
   22cd0:	380ed7fa 	srli	r7,r7,31
   22cd4:	defffb04 	addi	sp,sp,-20
   22cd8:	dc800215 	stw	r18,8(sp)
   22cdc:	dc000015 	stw	r16,0(sp)
   22ce0:	1c81ffcc 	andi	r18,r3,2047
   22ce4:	1081ffcc 	andi	r2,r2,2047
   22ce8:	dfc00415 	stw	ra,16(sp)
   22cec:	dcc00315 	stw	r19,12(sp)
   22cf0:	dc400115 	stw	r17,4(sp)
   22cf4:	201c90fa 	slli	r14,r4,3
   22cf8:	301a90fa 	slli	r13,r6,3
   22cfc:	2821883a 	mov	r16,r5
   22d00:	6294b03a 	or	r10,r12,r10
   22d04:	5a52b03a 	or	r9,r11,r9
   22d08:	9087c83a 	sub	r3,r18,r2
   22d0c:	29c06126 	beq	r5,r7,22e94 <__adddf3+0x1f0>
   22d10:	00c0550e 	bge	zero,r3,22e68 <__adddf3+0x1c4>
   22d14:	10007326 	beq	r2,zero,22ee4 <__adddf3+0x240>
   22d18:	9081ffd8 	cmpnei	r2,r18,2047
   22d1c:	1000bd26 	beq	r2,zero,23014 <__adddf3+0x370>
   22d20:	4a402034 	orhi	r9,r9,128
   22d24:	18800e48 	cmpgei	r2,r3,57
   22d28:	1000ef1e 	bne	r2,zero,230e8 <__adddf3+0x444>
   22d2c:	18800808 	cmpgei	r2,r3,32
   22d30:	1001321e 	bne	r2,zero,231fc <__adddf3+0x558>
   22d34:	00800804 	movi	r2,32
   22d38:	10c5c83a 	sub	r2,r2,r3
   22d3c:	68c8d83a 	srl	r4,r13,r3
   22d40:	48a2983a 	sll	r17,r9,r2
   22d44:	689a983a 	sll	r13,r13,r2
   22d48:	48c6d83a 	srl	r3,r9,r3
   22d4c:	8922b03a 	or	r17,r17,r4
   22d50:	681ac03a 	cmpne	r13,r13,zero
   22d54:	8b62b03a 	or	r17,r17,r13
   22d58:	50d5c83a 	sub	r10,r10,r3
   22d5c:	7463c83a 	sub	r17,r14,r17
   22d60:	7451803a 	cmpltu	r8,r14,r17
   22d64:	5211c83a 	sub	r8,r10,r8
   22d68:	4080202c 	andhi	r2,r8,128
   22d6c:	10008d26 	beq	r2,zero,22fa4 <__adddf3+0x300>
   22d70:	02402034 	movhi	r9,128
   22d74:	4a7fffc4 	addi	r9,r9,-1
   22d78:	4266703a 	and	r19,r8,r9
   22d7c:	9800b326 	beq	r19,zero,2304c <__adddf3+0x3a8>
   22d80:	9809883a 	mov	r4,r19
   22d84:	00252900 	call	25290 <__clzsi2>
   22d88:	10fffe04 	addi	r3,r2,-8
   22d8c:	02000804 	movi	r8,32
   22d90:	40d1c83a 	sub	r8,r8,r3
   22d94:	8a10d83a 	srl	r8,r17,r8
   22d98:	98d2983a 	sll	r9,r19,r3
   22d9c:	88e2983a 	sll	r17,r17,r3
   22da0:	4250b03a 	or	r8,r8,r9
   22da4:	1c80b216 	blt	r3,r18,23070 <__adddf3+0x3cc>
   22da8:	1c87c83a 	sub	r3,r3,r18
   22dac:	19000044 	addi	r4,r3,1
   22db0:	20800808 	cmpgei	r2,r4,32
   22db4:	10006f1e 	bne	r2,zero,22f74 <__adddf3+0x2d0>
   22db8:	00800804 	movi	r2,32
   22dbc:	1105c83a 	sub	r2,r2,r4
   22dc0:	8906d83a 	srl	r3,r17,r4
   22dc4:	88a2983a 	sll	r17,r17,r2
   22dc8:	4084983a 	sll	r2,r8,r2
   22dcc:	4110d83a 	srl	r8,r8,r4
   22dd0:	8822c03a 	cmpne	r17,r17,zero
   22dd4:	10c4b03a 	or	r2,r2,r3
   22dd8:	1462b03a 	or	r17,r2,r17
   22ddc:	0025883a 	mov	r18,zero
   22de0:	888001cc 	andi	r2,r17,7
   22de4:	10000726 	beq	r2,zero,22e04 <__adddf3+0x160>
   22de8:	888003cc 	andi	r2,r17,15
   22dec:	10800120 	cmpeqi	r2,r2,4
   22df0:	1000041e 	bne	r2,zero,22e04 <__adddf3+0x160>
   22df4:	88c00104 	addi	r3,r17,4
   22df8:	1c63803a 	cmpltu	r17,r3,r17
   22dfc:	4451883a 	add	r8,r8,r17
   22e00:	1823883a 	mov	r17,r3
   22e04:	4080202c 	andhi	r2,r8,128
   22e08:	10006826 	beq	r2,zero,22fac <__adddf3+0x308>
   22e0c:	90c00044 	addi	r3,r18,1
   22e10:	1881ffe0 	cmpeqi	r2,r3,2047
   22e14:	18c1ffcc 	andi	r3,r3,2047
   22e18:	10007a1e 	bne	r2,zero,23004 <__adddf3+0x360>
   22e1c:	00bfe034 	movhi	r2,65408
   22e20:	10bfffc4 	addi	r2,r2,-1
   22e24:	4090703a 	and	r8,r8,r2
   22e28:	4004977a 	slli	r2,r8,29
   22e2c:	4010927a 	slli	r8,r8,9
   22e30:	8822d0fa 	srli	r17,r17,3
   22e34:	4010d33a 	srli	r8,r8,12
   22e38:	1444b03a 	or	r2,r2,r17
   22e3c:	1806953a 	slli	r3,r3,20
   22e40:	802097fa 	slli	r16,r16,31
   22e44:	1a06b03a 	or	r3,r3,r8
   22e48:	1c06b03a 	or	r3,r3,r16
   22e4c:	dfc00417 	ldw	ra,16(sp)
   22e50:	dcc00317 	ldw	r19,12(sp)
   22e54:	dc800217 	ldw	r18,8(sp)
   22e58:	dc400117 	ldw	r17,4(sp)
   22e5c:	dc000017 	ldw	r16,0(sp)
   22e60:	dec00504 	addi	sp,sp,20
   22e64:	f800283a 	ret
   22e68:	18002626 	beq	r3,zero,22f04 <__adddf3+0x260>
   22e6c:	1487c83a 	sub	r3,r2,r18
   22e70:	9000ba1e 	bne	r18,zero,2315c <__adddf3+0x4b8>
   22e74:	5388b03a 	or	r4,r10,r14
   22e78:	20011826 	beq	r4,zero,232dc <__adddf3+0x638>
   22e7c:	193fffc4 	addi	r4,r3,-1
   22e80:	20015726 	beq	r4,zero,233e0 <__adddf3+0x73c>
   22e84:	18c1ffd8 	cmpnei	r3,r3,2047
   22e88:	18013026 	beq	r3,zero,2334c <__adddf3+0x6a8>
   22e8c:	2007883a 	mov	r3,r4
   22e90:	0000b506 	br	23168 <__adddf3+0x4c4>
   22e94:	00c07b0e 	bge	zero,r3,23084 <__adddf3+0x3e0>
   22e98:	10002e26 	beq	r2,zero,22f54 <__adddf3+0x2b0>
   22e9c:	9081ffd8 	cmpnei	r2,r18,2047
   22ea0:	10005c26 	beq	r2,zero,23014 <__adddf3+0x370>
   22ea4:	4a402034 	orhi	r9,r9,128
   22ea8:	18800e48 	cmpgei	r2,r3,57
   22eac:	10004b1e 	bne	r2,zero,22fdc <__adddf3+0x338>
   22eb0:	18800808 	cmpgei	r2,r3,32
   22eb4:	1000ec26 	beq	r2,zero,23268 <__adddf3+0x5c4>
   22eb8:	1c7ff804 	addi	r17,r3,-32
   22ebc:	19000820 	cmpeqi	r4,r3,32
   22ec0:	4c44d83a 	srl	r2,r9,r17
   22ec4:	2000041e 	bne	r4,zero,22ed8 <__adddf3+0x234>
   22ec8:	01001004 	movi	r4,64
   22ecc:	20c7c83a 	sub	r3,r4,r3
   22ed0:	48d2983a 	sll	r9,r9,r3
   22ed4:	6a5ab03a 	or	r13,r13,r9
   22ed8:	6822c03a 	cmpne	r17,r13,zero
   22edc:	88a2b03a 	or	r17,r17,r2
   22ee0:	00004006 	br	22fe4 <__adddf3+0x340>
   22ee4:	4b44b03a 	or	r2,r9,r13
   22ee8:	10008226 	beq	r2,zero,230f4 <__adddf3+0x450>
   22eec:	18bfffc4 	addi	r2,r3,-1
   22ef0:	10011026 	beq	r2,zero,23334 <__adddf3+0x690>
   22ef4:	18c1ffd8 	cmpnei	r3,r3,2047
   22ef8:	18004626 	beq	r3,zero,23014 <__adddf3+0x370>
   22efc:	1007883a 	mov	r3,r2
   22f00:	003f8806 	br	22d24 <__adddf3+0x80>
   22f04:	90800044 	addi	r2,r18,1
   22f08:	1081ff8c 	andi	r2,r2,2046
   22f0c:	1000a51e 	bne	r2,zero,231a4 <__adddf3+0x500>
   22f10:	538ab03a 	or	r5,r10,r14
   22f14:	4b44b03a 	or	r2,r9,r13
   22f18:	9000f81e 	bne	r18,zero,232fc <__adddf3+0x658>
   22f1c:	28013726 	beq	r5,zero,233fc <__adddf3+0x758>
   22f20:	10011226 	beq	r2,zero,2336c <__adddf3+0x6c8>
   22f24:	7363c83a 	sub	r17,r14,r13
   22f28:	7445803a 	cmpltu	r2,r14,r17
   22f2c:	5251c83a 	sub	r8,r10,r9
   22f30:	4091c83a 	sub	r8,r8,r2
   22f34:	4080202c 	andhi	r2,r8,128
   22f38:	10018f26 	beq	r2,zero,23578 <__adddf3+0x8d4>
   22f3c:	6ba3c83a 	sub	r17,r13,r14
   22f40:	4a95c83a 	sub	r10,r9,r10
   22f44:	6c51803a 	cmpltu	r8,r13,r17
   22f48:	5211c83a 	sub	r8,r10,r8
   22f4c:	3821883a 	mov	r16,r7
   22f50:	003fa306 	br	22de0 <__adddf3+0x13c>
   22f54:	4b44b03a 	or	r2,r9,r13
   22f58:	10006626 	beq	r2,zero,230f4 <__adddf3+0x450>
   22f5c:	18bfffc4 	addi	r2,r3,-1
   22f60:	1000ec26 	beq	r2,zero,23314 <__adddf3+0x670>
   22f64:	18c1ffd8 	cmpnei	r3,r3,2047
   22f68:	18012d26 	beq	r3,zero,23420 <__adddf3+0x77c>
   22f6c:	1007883a 	mov	r3,r2
   22f70:	003fcd06 	br	22ea8 <__adddf3+0x204>
   22f74:	18fff844 	addi	r3,r3,-31
   22f78:	20800820 	cmpeqi	r2,r4,32
   22f7c:	40c6d83a 	srl	r3,r8,r3
   22f80:	1000041e 	bne	r2,zero,22f94 <__adddf3+0x2f0>
   22f84:	00801004 	movi	r2,64
   22f88:	1109c83a 	sub	r4,r2,r4
   22f8c:	4110983a 	sll	r8,r8,r4
   22f90:	8a22b03a 	or	r17,r17,r8
   22f94:	8822c03a 	cmpne	r17,r17,zero
   22f98:	88e2b03a 	or	r17,r17,r3
   22f9c:	0011883a 	mov	r8,zero
   22fa0:	0025883a 	mov	r18,zero
   22fa4:	888001cc 	andi	r2,r17,7
   22fa8:	103f8f1e 	bne	r2,zero,22de8 <__adddf3+0x144>
   22fac:	8822d0fa 	srli	r17,r17,3
   22fb0:	4004977a 	slli	r2,r8,29
   22fb4:	4014d0fa 	srli	r10,r8,3
   22fb8:	9007883a 	mov	r3,r18
   22fbc:	8884b03a 	or	r2,r17,r2
   22fc0:	1901ffe0 	cmpeqi	r4,r3,2047
   22fc4:	2000191e 	bne	r4,zero,2302c <__adddf3+0x388>
   22fc8:	02000434 	movhi	r8,16
   22fcc:	423fffc4 	addi	r8,r8,-1
   22fd0:	5210703a 	and	r8,r10,r8
   22fd4:	18c1ffcc 	andi	r3,r3,2047
   22fd8:	003f9806 	br	22e3c <__adddf3+0x198>
   22fdc:	4b62b03a 	or	r17,r9,r13
   22fe0:	8822c03a 	cmpne	r17,r17,zero
   22fe4:	8ba3883a 	add	r17,r17,r14
   22fe8:	8b91803a 	cmpltu	r8,r17,r14
   22fec:	4291883a 	add	r8,r8,r10
   22ff0:	4080202c 	andhi	r2,r8,128
   22ff4:	103feb26 	beq	r2,zero,22fa4 <__adddf3+0x300>
   22ff8:	94800044 	addi	r18,r18,1
   22ffc:	9081ffe0 	cmpeqi	r2,r18,2047
   23000:	10007426 	beq	r2,zero,231d4 <__adddf3+0x530>
   23004:	00c1ffc4 	movi	r3,2047
   23008:	0011883a 	mov	r8,zero
   2300c:	0005883a 	mov	r2,zero
   23010:	003f8a06 	br	22e3c <__adddf3+0x198>
   23014:	500a977a 	slli	r5,r10,29
   23018:	00c80034 	movhi	r3,8192
   2301c:	18ffffc4 	addi	r3,r3,-1
   23020:	5014d0fa 	srli	r10,r10,3
   23024:	20c4703a 	and	r2,r4,r3
   23028:	1144b03a 	or	r2,r2,r5
   2302c:	1286b03a 	or	r3,r2,r10
   23030:	18015426 	beq	r3,zero,23584 <__adddf3+0x8e0>
   23034:	00c00434 	movhi	r3,16
   23038:	18ffffc4 	addi	r3,r3,-1
   2303c:	52000234 	orhi	r8,r10,8
   23040:	40d0703a 	and	r8,r8,r3
   23044:	00c1ffc4 	movi	r3,2047
   23048:	003f7c06 	br	22e3c <__adddf3+0x198>
   2304c:	8809883a 	mov	r4,r17
   23050:	00252900 	call	25290 <__clzsi2>
   23054:	10c00604 	addi	r3,r2,24
   23058:	19000808 	cmpgei	r4,r3,32
   2305c:	203f4b26 	beq	r4,zero,22d8c <__adddf3+0xe8>
   23060:	123ffe04 	addi	r8,r2,-8
   23064:	8a10983a 	sll	r8,r17,r8
   23068:	0023883a 	mov	r17,zero
   2306c:	1cbf4e0e 	bge	r3,r18,22da8 <__adddf3+0x104>
   23070:	00bfe034 	movhi	r2,65408
   23074:	10bfffc4 	addi	r2,r2,-1
   23078:	90e5c83a 	sub	r18,r18,r3
   2307c:	4090703a 	and	r8,r8,r2
   23080:	003f5706 	br	22de0 <__adddf3+0x13c>
   23084:	18002226 	beq	r3,zero,23110 <__adddf3+0x46c>
   23088:	1487c83a 	sub	r3,r2,r18
   2308c:	90006e26 	beq	r18,zero,23248 <__adddf3+0x5a4>
   23090:	1101ffd8 	cmpnei	r4,r2,2047
   23094:	2000e926 	beq	r4,zero,2343c <__adddf3+0x798>
   23098:	52802034 	orhi	r10,r10,128
   2309c:	19000e48 	cmpgei	r4,r3,57
   230a0:	2000b91e 	bne	r4,zero,23388 <__adddf3+0x6e4>
   230a4:	19000808 	cmpgei	r4,r3,32
   230a8:	2001101e 	bne	r4,zero,234ec <__adddf3+0x848>
   230ac:	01000804 	movi	r4,32
   230b0:	20c9c83a 	sub	r4,r4,r3
   230b4:	5122983a 	sll	r17,r10,r4
   230b8:	70cad83a 	srl	r5,r14,r3
   230bc:	7108983a 	sll	r4,r14,r4
   230c0:	50d4d83a 	srl	r10,r10,r3
   230c4:	8962b03a 	or	r17,r17,r5
   230c8:	2008c03a 	cmpne	r4,r4,zero
   230cc:	8922b03a 	or	r17,r17,r4
   230d0:	4a93883a 	add	r9,r9,r10
   230d4:	8b63883a 	add	r17,r17,r13
   230d8:	8b51803a 	cmpltu	r8,r17,r13
   230dc:	4251883a 	add	r8,r8,r9
   230e0:	1025883a 	mov	r18,r2
   230e4:	003fc206 	br	22ff0 <__adddf3+0x34c>
   230e8:	4b62b03a 	or	r17,r9,r13
   230ec:	8822c03a 	cmpne	r17,r17,zero
   230f0:	003f1a06 	br	22d5c <__adddf3+0xb8>
   230f4:	500c977a 	slli	r6,r10,29
   230f8:	01480034 	movhi	r5,8192
   230fc:	297fffc4 	addi	r5,r5,-1
   23100:	2144703a 	and	r2,r4,r5
   23104:	5014d0fa 	srli	r10,r10,3
   23108:	1184b03a 	or	r2,r2,r6
   2310c:	003fac06 	br	22fc0 <__adddf3+0x31c>
   23110:	90800044 	addi	r2,r18,1
   23114:	1141ff8c 	andi	r5,r2,2046
   23118:	28005e1e 	bne	r5,zero,23294 <__adddf3+0x5f0>
   2311c:	5384b03a 	or	r2,r10,r14
   23120:	9000a71e 	bne	r18,zero,233c0 <__adddf3+0x71c>
   23124:	1000e526 	beq	r2,zero,234bc <__adddf3+0x818>
   23128:	4b44b03a 	or	r2,r9,r13
   2312c:	10008f26 	beq	r2,zero,2336c <__adddf3+0x6c8>
   23130:	7363883a 	add	r17,r14,r13
   23134:	5255883a 	add	r10,r10,r9
   23138:	8b91803a 	cmpltu	r8,r17,r14
   2313c:	5211883a 	add	r8,r10,r8
   23140:	4080202c 	andhi	r2,r8,128
   23144:	103f9726 	beq	r2,zero,22fa4 <__adddf3+0x300>
   23148:	00bfe034 	movhi	r2,65408
   2314c:	10bfffc4 	addi	r2,r2,-1
   23150:	4090703a 	and	r8,r8,r2
   23154:	04800044 	movi	r18,1
   23158:	003f9206 	br	22fa4 <__adddf3+0x300>
   2315c:	1101ffd8 	cmpnei	r4,r2,2047
   23160:	20007a26 	beq	r4,zero,2334c <__adddf3+0x6a8>
   23164:	52802034 	orhi	r10,r10,128
   23168:	19000e48 	cmpgei	r4,r3,57
   2316c:	20002e1e 	bne	r4,zero,23228 <__adddf3+0x584>
   23170:	19000808 	cmpgei	r4,r3,32
   23174:	2000871e 	bne	r4,zero,23394 <__adddf3+0x6f0>
   23178:	01000804 	movi	r4,32
   2317c:	20c9c83a 	sub	r4,r4,r3
   23180:	5122983a 	sll	r17,r10,r4
   23184:	70cad83a 	srl	r5,r14,r3
   23188:	711c983a 	sll	r14,r14,r4
   2318c:	50d4d83a 	srl	r10,r10,r3
   23190:	8962b03a 	or	r17,r17,r5
   23194:	701cc03a 	cmpne	r14,r14,zero
   23198:	8ba2b03a 	or	r17,r17,r14
   2319c:	4a93c83a 	sub	r9,r9,r10
   231a0:	00002306 	br	23230 <__adddf3+0x58c>
   231a4:	7363c83a 	sub	r17,r14,r13
   231a8:	5267c83a 	sub	r19,r10,r9
   231ac:	7451803a 	cmpltu	r8,r14,r17
   231b0:	9a27c83a 	sub	r19,r19,r8
   231b4:	9880202c 	andhi	r2,r19,128
   231b8:	1000421e 	bne	r2,zero,232c4 <__adddf3+0x620>
   231bc:	8cc4b03a 	or	r2,r17,r19
   231c0:	103eee1e 	bne	r2,zero,22d7c <__adddf3+0xd8>
   231c4:	0015883a 	mov	r10,zero
   231c8:	0021883a 	mov	r16,zero
   231cc:	003f7e06 	br	22fc8 <__adddf3+0x324>
   231d0:	04800084 	movi	r18,2
   231d4:	00bfe034 	movhi	r2,65408
   231d8:	10bfffc4 	addi	r2,r2,-1
   231dc:	8806d07a 	srli	r3,r17,1
   231e0:	4090703a 	and	r8,r8,r2
   231e4:	400497fa 	slli	r2,r8,31
   231e8:	8c40004c 	andi	r17,r17,1
   231ec:	1c62b03a 	or	r17,r3,r17
   231f0:	4010d07a 	srli	r8,r8,1
   231f4:	1462b03a 	or	r17,r2,r17
   231f8:	003ef906 	br	22de0 <__adddf3+0x13c>
   231fc:	1c7ff804 	addi	r17,r3,-32
   23200:	19000820 	cmpeqi	r4,r3,32
   23204:	4c44d83a 	srl	r2,r9,r17
   23208:	2000041e 	bne	r4,zero,2321c <__adddf3+0x578>
   2320c:	01001004 	movi	r4,64
   23210:	20c7c83a 	sub	r3,r4,r3
   23214:	48d2983a 	sll	r9,r9,r3
   23218:	6a5ab03a 	or	r13,r13,r9
   2321c:	6822c03a 	cmpne	r17,r13,zero
   23220:	88a2b03a 	or	r17,r17,r2
   23224:	003ecd06 	br	22d5c <__adddf3+0xb8>
   23228:	5394b03a 	or	r10,r10,r14
   2322c:	5022c03a 	cmpne	r17,r10,zero
   23230:	6c63c83a 	sub	r17,r13,r17
   23234:	6c51803a 	cmpltu	r8,r13,r17
   23238:	4a11c83a 	sub	r8,r9,r8
   2323c:	3821883a 	mov	r16,r7
   23240:	1025883a 	mov	r18,r2
   23244:	003ec806 	br	22d68 <__adddf3+0xc4>
   23248:	5388b03a 	or	r4,r10,r14
   2324c:	20008226 	beq	r4,zero,23458 <__adddf3+0x7b4>
   23250:	193fffc4 	addi	r4,r3,-1
   23254:	2000b026 	beq	r4,zero,23518 <__adddf3+0x874>
   23258:	18c1ffd8 	cmpnei	r3,r3,2047
   2325c:	18007726 	beq	r3,zero,2343c <__adddf3+0x798>
   23260:	2007883a 	mov	r3,r4
   23264:	003f8d06 	br	2309c <__adddf3+0x3f8>
   23268:	00800804 	movi	r2,32
   2326c:	10c5c83a 	sub	r2,r2,r3
   23270:	68c8d83a 	srl	r4,r13,r3
   23274:	48a2983a 	sll	r17,r9,r2
   23278:	689a983a 	sll	r13,r13,r2
   2327c:	48c6d83a 	srl	r3,r9,r3
   23280:	8922b03a 	or	r17,r17,r4
   23284:	681ac03a 	cmpne	r13,r13,zero
   23288:	8b62b03a 	or	r17,r17,r13
   2328c:	50d5883a 	add	r10,r10,r3
   23290:	003f5406 	br	22fe4 <__adddf3+0x340>
   23294:	10c1ffe0 	cmpeqi	r3,r2,2047
   23298:	183f5a1e 	bne	r3,zero,23004 <__adddf3+0x360>
   2329c:	7351883a 	add	r8,r14,r13
   232a0:	4387803a 	cmpltu	r3,r8,r14
   232a4:	5255883a 	add	r10,r10,r9
   232a8:	50c7883a 	add	r3,r10,r3
   232ac:	401ad07a 	srli	r13,r8,1
   232b0:	182297fa 	slli	r17,r3,31
   232b4:	1810d07a 	srli	r8,r3,1
   232b8:	1025883a 	mov	r18,r2
   232bc:	8b62b03a 	or	r17,r17,r13
   232c0:	003f3806 	br	22fa4 <__adddf3+0x300>
   232c4:	6ba3c83a 	sub	r17,r13,r14
   232c8:	4a93c83a 	sub	r9,r9,r10
   232cc:	6c51803a 	cmpltu	r8,r13,r17
   232d0:	4a27c83a 	sub	r19,r9,r8
   232d4:	3821883a 	mov	r16,r7
   232d8:	003ea806 	br	22d7c <__adddf3+0xd8>
   232dc:	480a977a 	slli	r5,r9,29
   232e0:	01080034 	movhi	r4,8192
   232e4:	213fffc4 	addi	r4,r4,-1
   232e8:	3104703a 	and	r2,r6,r4
   232ec:	4814d0fa 	srli	r10,r9,3
   232f0:	1144b03a 	or	r2,r2,r5
   232f4:	3821883a 	mov	r16,r7
   232f8:	003f3106 	br	22fc0 <__adddf3+0x31c>
   232fc:	28005d1e 	bne	r5,zero,23474 <__adddf3+0x7d0>
   23300:	1000121e 	bne	r2,zero,2334c <__adddf3+0x6a8>
   23304:	0021883a 	mov	r16,zero
   23308:	4015883a 	mov	r10,r8
   2330c:	00bfffc4 	movi	r2,-1
   23310:	003f4806 	br	23034 <__adddf3+0x390>
   23314:	7363883a 	add	r17,r14,r13
   23318:	5255883a 	add	r10,r10,r9
   2331c:	8b91803a 	cmpltu	r8,r17,r14
   23320:	5211883a 	add	r8,r10,r8
   23324:	4080202c 	andhi	r2,r8,128
   23328:	103fa91e 	bne	r2,zero,231d0 <__adddf3+0x52c>
   2332c:	04800044 	movi	r18,1
   23330:	003f1c06 	br	22fa4 <__adddf3+0x300>
   23334:	7363c83a 	sub	r17,r14,r13
   23338:	5255c83a 	sub	r10,r10,r9
   2333c:	7451803a 	cmpltu	r8,r14,r17
   23340:	5211c83a 	sub	r8,r10,r8
   23344:	04800044 	movi	r18,1
   23348:	003e8706 	br	22d68 <__adddf3+0xc4>
   2334c:	4806977a 	slli	r3,r9,29
   23350:	00880034 	movhi	r2,8192
   23354:	10bfffc4 	addi	r2,r2,-1
   23358:	3084703a 	and	r2,r6,r2
   2335c:	4814d0fa 	srli	r10,r9,3
   23360:	10c4b03a 	or	r2,r2,r3
   23364:	3821883a 	mov	r16,r7
   23368:	003f3006 	br	2302c <__adddf3+0x388>
   2336c:	500a977a 	slli	r5,r10,29
   23370:	00880034 	movhi	r2,8192
   23374:	10bfffc4 	addi	r2,r2,-1
   23378:	2084703a 	and	r2,r4,r2
   2337c:	5014d0fa 	srli	r10,r10,3
   23380:	1144b03a 	or	r2,r2,r5
   23384:	003f1006 	br	22fc8 <__adddf3+0x324>
   23388:	5394b03a 	or	r10,r10,r14
   2338c:	5022c03a 	cmpne	r17,r10,zero
   23390:	003f5006 	br	230d4 <__adddf3+0x430>
   23394:	1c7ff804 	addi	r17,r3,-32
   23398:	19400820 	cmpeqi	r5,r3,32
   2339c:	5448d83a 	srl	r4,r10,r17
   233a0:	2800041e 	bne	r5,zero,233b4 <__adddf3+0x710>
   233a4:	01401004 	movi	r5,64
   233a8:	28c7c83a 	sub	r3,r5,r3
   233ac:	50d4983a 	sll	r10,r10,r3
   233b0:	729cb03a 	or	r14,r14,r10
   233b4:	7022c03a 	cmpne	r17,r14,zero
   233b8:	8922b03a 	or	r17,r17,r4
   233bc:	003f9c06 	br	23230 <__adddf3+0x58c>
   233c0:	10005a1e 	bne	r2,zero,2352c <__adddf3+0x888>
   233c4:	4804977a 	slli	r2,r9,29
   233c8:	00c80034 	movhi	r3,8192
   233cc:	18ffffc4 	addi	r3,r3,-1
   233d0:	30cc703a 	and	r6,r6,r3
   233d4:	4814d0fa 	srli	r10,r9,3
   233d8:	1184b03a 	or	r2,r2,r6
   233dc:	003f1306 	br	2302c <__adddf3+0x388>
   233e0:	6ba3c83a 	sub	r17,r13,r14
   233e4:	4a95c83a 	sub	r10,r9,r10
   233e8:	6c51803a 	cmpltu	r8,r13,r17
   233ec:	5211c83a 	sub	r8,r10,r8
   233f0:	3821883a 	mov	r16,r7
   233f4:	04800044 	movi	r18,1
   233f8:	003e5b06 	br	22d68 <__adddf3+0xc4>
   233fc:	103f7126 	beq	r2,zero,231c4 <__adddf3+0x520>
   23400:	4808977a 	slli	r4,r9,29
   23404:	00880034 	movhi	r2,8192
   23408:	10bfffc4 	addi	r2,r2,-1
   2340c:	3084703a 	and	r2,r6,r2
   23410:	4814d0fa 	srli	r10,r9,3
   23414:	1104b03a 	or	r2,r2,r4
   23418:	3821883a 	mov	r16,r7
   2341c:	003eea06 	br	22fc8 <__adddf3+0x324>
   23420:	5006977a 	slli	r3,r10,29
   23424:	00880034 	movhi	r2,8192
   23428:	10bfffc4 	addi	r2,r2,-1
   2342c:	2084703a 	and	r2,r4,r2
   23430:	5014d0fa 	srli	r10,r10,3
   23434:	10c4b03a 	or	r2,r2,r3
   23438:	003efc06 	br	2302c <__adddf3+0x388>
   2343c:	4806977a 	slli	r3,r9,29
   23440:	00880034 	movhi	r2,8192
   23444:	10bfffc4 	addi	r2,r2,-1
   23448:	3084703a 	and	r2,r6,r2
   2344c:	4814d0fa 	srli	r10,r9,3
   23450:	10c4b03a 	or	r2,r2,r3
   23454:	003ef506 	br	2302c <__adddf3+0x388>
   23458:	4808977a 	slli	r4,r9,29
   2345c:	00880034 	movhi	r2,8192
   23460:	10bfffc4 	addi	r2,r2,-1
   23464:	3084703a 	and	r2,r6,r2
   23468:	4814d0fa 	srli	r10,r9,3
   2346c:	1104b03a 	or	r2,r2,r4
   23470:	003ed306 	br	22fc0 <__adddf3+0x31c>
   23474:	500a977a 	slli	r5,r10,29
   23478:	5014d0fa 	srli	r10,r10,3
   2347c:	10001626 	beq	r2,zero,234d8 <__adddf3+0x834>
   23480:	00c80034 	movhi	r3,8192
   23484:	18ffffc4 	addi	r3,r3,-1
   23488:	20c4703a 	and	r2,r4,r3
   2348c:	5100022c 	andhi	r4,r10,8
   23490:	1144b03a 	or	r2,r2,r5
   23494:	203ee526 	beq	r4,zero,2302c <__adddf3+0x388>
   23498:	4808d0fa 	srli	r4,r9,3
   2349c:	2140022c 	andhi	r5,r4,8
   234a0:	283ee21e 	bne	r5,zero,2302c <__adddf3+0x388>
   234a4:	4812977a 	slli	r9,r9,29
   234a8:	30c4703a 	and	r2,r6,r3
   234ac:	3821883a 	mov	r16,r7
   234b0:	1244b03a 	or	r2,r2,r9
   234b4:	2015883a 	mov	r10,r4
   234b8:	003edc06 	br	2302c <__adddf3+0x388>
   234bc:	4804977a 	slli	r2,r9,29
   234c0:	01080034 	movhi	r4,8192
   234c4:	213fffc4 	addi	r4,r4,-1
   234c8:	310c703a 	and	r6,r6,r4
   234cc:	4814d0fa 	srli	r10,r9,3
   234d0:	1184b03a 	or	r2,r2,r6
   234d4:	003ebc06 	br	22fc8 <__adddf3+0x324>
   234d8:	00880034 	movhi	r2,8192
   234dc:	10bfffc4 	addi	r2,r2,-1
   234e0:	2084703a 	and	r2,r4,r2
   234e4:	1144b03a 	or	r2,r2,r5
   234e8:	003ed006 	br	2302c <__adddf3+0x388>
   234ec:	193ff804 	addi	r4,r3,-32
   234f0:	19400820 	cmpeqi	r5,r3,32
   234f4:	5108d83a 	srl	r4,r10,r4
   234f8:	2800041e 	bne	r5,zero,2350c <__adddf3+0x868>
   234fc:	01401004 	movi	r5,64
   23500:	28c7c83a 	sub	r3,r5,r3
   23504:	50d4983a 	sll	r10,r10,r3
   23508:	729cb03a 	or	r14,r14,r10
   2350c:	7022c03a 	cmpne	r17,r14,zero
   23510:	8922b03a 	or	r17,r17,r4
   23514:	003eef06 	br	230d4 <__adddf3+0x430>
   23518:	7363883a 	add	r17,r14,r13
   2351c:	5255883a 	add	r10,r10,r9
   23520:	8b51803a 	cmpltu	r8,r17,r13
   23524:	5211883a 	add	r8,r10,r8
   23528:	003f7e06 	br	23324 <__adddf3+0x680>
   2352c:	4b50b03a 	or	r8,r9,r13
   23530:	500a977a 	slli	r5,r10,29
   23534:	5014d0fa 	srli	r10,r10,3
   23538:	403fe726 	beq	r8,zero,234d8 <__adddf3+0x834>
   2353c:	00c80034 	movhi	r3,8192
   23540:	18ffffc4 	addi	r3,r3,-1
   23544:	20c4703a 	and	r2,r4,r3
   23548:	5100022c 	andhi	r4,r10,8
   2354c:	1144b03a 	or	r2,r2,r5
   23550:	203eb626 	beq	r4,zero,2302c <__adddf3+0x388>
   23554:	4808d0fa 	srli	r4,r9,3
   23558:	2140022c 	andhi	r5,r4,8
   2355c:	283eb31e 	bne	r5,zero,2302c <__adddf3+0x388>
   23560:	4804977a 	slli	r2,r9,29
   23564:	30cc703a 	and	r6,r6,r3
   23568:	3821883a 	mov	r16,r7
   2356c:	3084b03a 	or	r2,r6,r2
   23570:	2015883a 	mov	r10,r4
   23574:	003ead06 	br	2302c <__adddf3+0x388>
   23578:	8a04b03a 	or	r2,r17,r8
   2357c:	103f1126 	beq	r2,zero,231c4 <__adddf3+0x520>
   23580:	003e8806 	br	22fa4 <__adddf3+0x300>
   23584:	0005883a 	mov	r2,zero
   23588:	00c1ffc4 	movi	r3,2047
   2358c:	0011883a 	mov	r8,zero
   23590:	003e2a06 	br	22e3c <__adddf3+0x198>

00023594 <__divdf3>:
   23594:	2810d53a 	srli	r8,r5,20
   23598:	defff004 	addi	sp,sp,-64
   2359c:	dc000615 	stw	r16,24(sp)
   235a0:	04000434 	movhi	r16,16
   235a4:	df000e15 	stw	fp,56(sp)
   235a8:	ddc00d15 	stw	r23,52(sp)
   235ac:	dd800c15 	stw	r22,48(sp)
   235b0:	dd000a15 	stw	r20,40(sp)
   235b4:	843fffc4 	addi	r16,r16,-1
   235b8:	dfc00f15 	stw	ra,60(sp)
   235bc:	dd400b15 	stw	r21,44(sp)
   235c0:	dcc00915 	stw	r19,36(sp)
   235c4:	dc800815 	stw	r18,32(sp)
   235c8:	dc400715 	stw	r17,28(sp)
   235cc:	4201ffcc 	andi	r8,r8,2047
   235d0:	282ed7fa 	srli	r23,r5,31
   235d4:	3039883a 	mov	fp,r6
   235d8:	382d883a 	mov	r22,r7
   235dc:	2029883a 	mov	r20,r4
   235e0:	2c20703a 	and	r16,r5,r16
   235e4:	40006826 	beq	r8,zero,23788 <__divdf3+0x1f4>
   235e8:	4081ffe0 	cmpeqi	r2,r8,2047
   235ec:	1000791e 	bne	r2,zero,237d4 <__divdf3+0x240>
   235f0:	2026d77a 	srli	r19,r4,29
   235f4:	800a90fa 	slli	r5,r16,3
   235f8:	202890fa 	slli	r20,r4,3
   235fc:	44bf0044 	addi	r18,r8,-1023
   23600:	994ab03a 	or	r5,r19,r5
   23604:	2cc02034 	orhi	r19,r5,128
   23608:	0021883a 	mov	r16,zero
   2360c:	0023883a 	mov	r17,zero
   23610:	b010d53a 	srli	r8,r22,20
   23614:	00c00434 	movhi	r3,16
   23618:	18ffffc4 	addi	r3,r3,-1
   2361c:	4201ffcc 	andi	r8,r8,2047
   23620:	b02ad7fa 	srli	r21,r22,31
   23624:	b0ec703a 	and	r22,r22,r3
   23628:	40004626 	beq	r8,zero,23744 <__divdf3+0x1b0>
   2362c:	4081ffe0 	cmpeqi	r2,r8,2047
   23630:	10006f1e 	bne	r2,zero,237f0 <__divdf3+0x25c>
   23634:	b00690fa 	slli	r3,r22,3
   23638:	e004d77a 	srli	r2,fp,29
   2363c:	e01290fa 	slli	r9,fp,3
   23640:	423f0044 	addi	r8,r8,-1023
   23644:	10c6b03a 	or	r3,r2,r3
   23648:	1d802034 	orhi	r22,r3,128
   2364c:	9225c83a 	sub	r18,r18,r8
   23650:	0007883a 	mov	r3,zero
   23654:	80800428 	cmpgeui	r2,r16,16
   23658:	bd4ef03a 	xor	r7,r23,r21
   2365c:	1000a71e 	bne	r2,zero,238fc <__divdf3+0x368>
   23660:	800c90ba 	slli	r6,r16,2
   23664:	008000b4 	movhi	r2,2
   23668:	3085883a 	add	r2,r6,r2
   2366c:	108d9d17 	ldw	r2,13940(r2)
   23670:	1000683a 	jmp	r2
   23674:	000238fc 	xorhi	zero,zero,2275
   23678:	00023720 	cmpeqi	zero,zero,2268
   2367c:	000236d0 	cmplti	zero,zero,2267
   23680:	00023730 	cmpltui	zero,zero,2268
   23684:	000236d0 	cmplti	zero,zero,2267
   23688:	000238a0 	cmpeqi	zero,zero,2274
   2368c:	000236d0 	cmplti	zero,zero,2267
   23690:	00023730 	cmpltui	zero,zero,2268
   23694:	00023720 	cmpeqi	zero,zero,2268
   23698:	00023720 	cmpeqi	zero,zero,2268
   2369c:	000238a0 	cmpeqi	zero,zero,2274
   236a0:	00023730 	cmpltui	zero,zero,2268
   236a4:	000236b4 	movhi	zero,2266
   236a8:	000236b4 	movhi	zero,2266
   236ac:	000236b4 	movhi	zero,2266
   236b0:	000238b8 	rdprs	zero,zero,2274
   236b4:	b80f883a 	mov	r7,r23
   236b8:	888000a0 	cmpeqi	r2,r17,2
   236bc:	1000181e 	bne	r2,zero,23720 <__divdf3+0x18c>
   236c0:	888000e0 	cmpeqi	r2,r17,3
   236c4:	1001f61e 	bne	r2,zero,23ea0 <__divdf3+0x90c>
   236c8:	88800060 	cmpeqi	r2,r17,1
   236cc:	10006126 	beq	r2,zero,23854 <__divdf3+0x2c0>
   236d0:	0007883a 	mov	r3,zero
   236d4:	000b883a 	mov	r5,zero
   236d8:	0029883a 	mov	r20,zero
   236dc:	1806953a 	slli	r3,r3,20
   236e0:	380e97fa 	slli	r7,r7,31
   236e4:	a005883a 	mov	r2,r20
   236e8:	1946b03a 	or	r3,r3,r5
   236ec:	19c6b03a 	or	r3,r3,r7
   236f0:	dfc00f17 	ldw	ra,60(sp)
   236f4:	df000e17 	ldw	fp,56(sp)
   236f8:	ddc00d17 	ldw	r23,52(sp)
   236fc:	dd800c17 	ldw	r22,48(sp)
   23700:	dd400b17 	ldw	r21,44(sp)
   23704:	dd000a17 	ldw	r20,40(sp)
   23708:	dcc00917 	ldw	r19,36(sp)
   2370c:	dc800817 	ldw	r18,32(sp)
   23710:	dc400717 	ldw	r17,28(sp)
   23714:	dc000617 	ldw	r16,24(sp)
   23718:	dec01004 	addi	sp,sp,64
   2371c:	f800283a 	ret
   23720:	00c1ffc4 	movi	r3,2047
   23724:	000b883a 	mov	r5,zero
   23728:	0029883a 	mov	r20,zero
   2372c:	003feb06 	br	236dc <__divdf3+0x148>
   23730:	a80f883a 	mov	r7,r21
   23734:	b027883a 	mov	r19,r22
   23738:	4829883a 	mov	r20,r9
   2373c:	1823883a 	mov	r17,r3
   23740:	003fdd06 	br	236b8 <__divdf3+0x124>
   23744:	b712b03a 	or	r9,r22,fp
   23748:	48003e26 	beq	r9,zero,23844 <__divdf3+0x2b0>
   2374c:	b0017726 	beq	r22,zero,23d2c <__divdf3+0x798>
   23750:	b009883a 	mov	r4,r22
   23754:	00252900 	call	25290 <__clzsi2>
   23758:	117ffd44 	addi	r5,r2,-11
   2375c:	01000744 	movi	r4,29
   23760:	127ffe04 	addi	r9,r2,-8
   23764:	2149c83a 	sub	r4,r4,r5
   23768:	b246983a 	sll	r3,r22,r9
   2376c:	e108d83a 	srl	r4,fp,r4
   23770:	e252983a 	sll	r9,fp,r9
   23774:	20ecb03a 	or	r22,r4,r3
   23778:	1491883a 	add	r8,r2,r18
   2377c:	4480fcc4 	addi	r18,r8,1011
   23780:	0007883a 	mov	r3,zero
   23784:	003fb306 	br	23654 <__divdf3+0xc0>
   23788:	8126b03a 	or	r19,r16,r4
   2378c:	2023883a 	mov	r17,r4
   23790:	98002726 	beq	r19,zero,23830 <__divdf3+0x29c>
   23794:	80017026 	beq	r16,zero,23d58 <__divdf3+0x7c4>
   23798:	8009883a 	mov	r4,r16
   2379c:	00252900 	call	25290 <__clzsi2>
   237a0:	113ffd44 	addi	r4,r2,-11
   237a4:	00c00744 	movi	r3,29
   237a8:	14fffe04 	addi	r19,r2,-8
   237ac:	1907c83a 	sub	r3,r3,r4
   237b0:	84ca983a 	sll	r5,r16,r19
   237b4:	88c6d83a 	srl	r3,r17,r3
   237b8:	8ce8983a 	sll	r20,r17,r19
   237bc:	1966b03a 	or	r19,r3,r5
   237c0:	023f0344 	movi	r8,-1011
   237c4:	40a5c83a 	sub	r18,r8,r2
   237c8:	0021883a 	mov	r16,zero
   237cc:	0023883a 	mov	r17,zero
   237d0:	003f8f06 	br	23610 <__divdf3+0x7c>
   237d4:	8126b03a 	or	r19,r16,r4
   237d8:	9800101e 	bne	r19,zero,2381c <__divdf3+0x288>
   237dc:	0029883a 	mov	r20,zero
   237e0:	04000204 	movi	r16,8
   237e4:	0481ffc4 	movi	r18,2047
   237e8:	04400084 	movi	r17,2
   237ec:	003f8806 	br	23610 <__divdf3+0x7c>
   237f0:	b712b03a 	or	r9,r22,fp
   237f4:	94be0044 	addi	r18,r18,-2047
   237f8:	4800041e 	bne	r9,zero,2380c <__divdf3+0x278>
   237fc:	84000094 	ori	r16,r16,2
   23800:	002d883a 	mov	r22,zero
   23804:	00c00084 	movi	r3,2
   23808:	003f9206 	br	23654 <__divdf3+0xc0>
   2380c:	840000d4 	ori	r16,r16,3
   23810:	e013883a 	mov	r9,fp
   23814:	00c000c4 	movi	r3,3
   23818:	003f8e06 	br	23654 <__divdf3+0xc0>
   2381c:	8027883a 	mov	r19,r16
   23820:	0481ffc4 	movi	r18,2047
   23824:	04000304 	movi	r16,12
   23828:	044000c4 	movi	r17,3
   2382c:	003f7806 	br	23610 <__divdf3+0x7c>
   23830:	0029883a 	mov	r20,zero
   23834:	04000104 	movi	r16,4
   23838:	0025883a 	mov	r18,zero
   2383c:	04400044 	movi	r17,1
   23840:	003f7306 	br	23610 <__divdf3+0x7c>
   23844:	84000054 	ori	r16,r16,1
   23848:	002d883a 	mov	r22,zero
   2384c:	00c00044 	movi	r3,1
   23850:	003f8006 	br	23654 <__divdf3+0xc0>
   23854:	9440ffc4 	addi	r17,r18,1023
   23858:	0441050e 	bge	zero,r17,23c70 <__divdf3+0x6dc>
   2385c:	a08001cc 	andi	r2,r20,7
   23860:	10016c1e 	bne	r2,zero,23e14 <__divdf3+0x880>
   23864:	a008d0fa 	srli	r4,r20,3
   23868:	9880402c 	andhi	r2,r19,256
   2386c:	10000426 	beq	r2,zero,23880 <__divdf3+0x2ec>
   23870:	00bfc034 	movhi	r2,65280
   23874:	10bfffc4 	addi	r2,r2,-1
   23878:	98a6703a 	and	r19,r19,r2
   2387c:	94410004 	addi	r17,r18,1024
   23880:	8881ffc8 	cmpgei	r2,r17,2047
   23884:	103fa61e 	bne	r2,zero,23720 <__divdf3+0x18c>
   23888:	9828977a 	slli	r20,r19,29
   2388c:	980a927a 	slli	r5,r19,9
   23890:	88c1ffcc 	andi	r3,r17,2047
   23894:	a128b03a 	or	r20,r20,r4
   23898:	280ad33a 	srli	r5,r5,12
   2389c:	003f8f06 	br	236dc <__divdf3+0x148>
   238a0:	01400434 	movhi	r5,16
   238a4:	000f883a 	mov	r7,zero
   238a8:	297fffc4 	addi	r5,r5,-1
   238ac:	053fffc4 	movi	r20,-1
   238b0:	00c1ffc4 	movi	r3,2047
   238b4:	003f8906 	br	236dc <__divdf3+0x148>
   238b8:	9880022c 	andhi	r2,r19,8
   238bc:	10000926 	beq	r2,zero,238e4 <__divdf3+0x350>
   238c0:	b080022c 	andhi	r2,r22,8
   238c4:	1000071e 	bne	r2,zero,238e4 <__divdf3+0x350>
   238c8:	00800434 	movhi	r2,16
   238cc:	b1400234 	orhi	r5,r22,8
   238d0:	10bfffc4 	addi	r2,r2,-1
   238d4:	288a703a 	and	r5,r5,r2
   238d8:	a80f883a 	mov	r7,r21
   238dc:	4829883a 	mov	r20,r9
   238e0:	003ff306 	br	238b0 <__divdf3+0x31c>
   238e4:	00800434 	movhi	r2,16
   238e8:	99400234 	orhi	r5,r19,8
   238ec:	10bfffc4 	addi	r2,r2,-1
   238f0:	288a703a 	and	r5,r5,r2
   238f4:	b80f883a 	mov	r7,r23
   238f8:	003fed06 	br	238b0 <__divdf3+0x31c>
   238fc:	b4c10536 	bltu	r22,r19,23d14 <__divdf3+0x780>
   23900:	b4c10326 	beq	r22,r19,23d10 <__divdf3+0x77c>
   23904:	94bfffc4 	addi	r18,r18,-1
   23908:	a039883a 	mov	fp,r20
   2390c:	9821883a 	mov	r16,r19
   23910:	0023883a 	mov	r17,zero
   23914:	b006923a 	slli	r3,r22,8
   23918:	482cd63a 	srli	r22,r9,24
   2391c:	8009883a 	mov	r4,r16
   23920:	182ed43a 	srli	r23,r3,16
   23924:	b0ecb03a 	or	r22,r22,r3
   23928:	d9c00015 	stw	r7,0(sp)
   2392c:	b80b883a 	mov	r5,r23
   23930:	482a923a 	slli	r21,r9,8
   23934:	b53fffcc 	andi	r20,r22,65535
   23938:	0022bbc0 	call	22bbc <__udivsi3>
   2393c:	100b883a 	mov	r5,r2
   23940:	a009883a 	mov	r4,r20
   23944:	1027883a 	mov	r19,r2
   23948:	0022c7c0 	call	22c7c <__mulsi3>
   2394c:	8009883a 	mov	r4,r16
   23950:	b80b883a 	mov	r5,r23
   23954:	1021883a 	mov	r16,r2
   23958:	0022c200 	call	22c20 <__umodsi3>
   2395c:	1004943a 	slli	r2,r2,16
   23960:	e008d43a 	srli	r4,fp,16
   23964:	d9c00017 	ldw	r7,0(sp)
   23968:	2088b03a 	or	r4,r4,r2
   2396c:	2400042e 	bgeu	r4,r16,23980 <__divdf3+0x3ec>
   23970:	2589883a 	add	r4,r4,r22
   23974:	98bfffc4 	addi	r2,r19,-1
   23978:	2581082e 	bgeu	r4,r22,23d9c <__divdf3+0x808>
   2397c:	1027883a 	mov	r19,r2
   23980:	2421c83a 	sub	r16,r4,r16
   23984:	b80b883a 	mov	r5,r23
   23988:	8009883a 	mov	r4,r16
   2398c:	d9c00215 	stw	r7,8(sp)
   23990:	0022bbc0 	call	22bbc <__udivsi3>
   23994:	100b883a 	mov	r5,r2
   23998:	a009883a 	mov	r4,r20
   2399c:	d8800115 	stw	r2,4(sp)
   239a0:	0022c7c0 	call	22c7c <__mulsi3>
   239a4:	b80b883a 	mov	r5,r23
   239a8:	8009883a 	mov	r4,r16
   239ac:	d8800015 	stw	r2,0(sp)
   239b0:	0022c200 	call	22c20 <__umodsi3>
   239b4:	100c943a 	slli	r6,r2,16
   239b8:	d8c00017 	ldw	r3,0(sp)
   239bc:	e73fffcc 	andi	fp,fp,65535
   239c0:	e18cb03a 	or	r6,fp,r6
   239c4:	da000117 	ldw	r8,4(sp)
   239c8:	d9c00217 	ldw	r7,8(sp)
   239cc:	30c0042e 	bgeu	r6,r3,239e0 <__divdf3+0x44c>
   239d0:	358d883a 	add	r6,r6,r22
   239d4:	40bfffc4 	addi	r2,r8,-1
   239d8:	3580ec2e 	bgeu	r6,r22,23d8c <__divdf3+0x7f8>
   239dc:	1011883a 	mov	r8,r2
   239e0:	9826943a 	slli	r19,r19,16
   239e4:	af3fffcc 	andi	fp,r21,65535
   239e8:	30c7c83a 	sub	r3,r6,r3
   239ec:	9a26b03a 	or	r19,r19,r8
   239f0:	9810d43a 	srli	r8,r19,16
   239f4:	9abfffcc 	andi	r10,r19,65535
   239f8:	5009883a 	mov	r4,r10
   239fc:	e00b883a 	mov	r5,fp
   23a00:	d9c00515 	stw	r7,20(sp)
   23a04:	d8c00315 	stw	r3,12(sp)
   23a08:	da800415 	stw	r10,16(sp)
   23a0c:	da000015 	stw	r8,0(sp)
   23a10:	0022c7c0 	call	22c7c <__mulsi3>
   23a14:	da000017 	ldw	r8,0(sp)
   23a18:	e00b883a 	mov	r5,fp
   23a1c:	d8800215 	stw	r2,8(sp)
   23a20:	4009883a 	mov	r4,r8
   23a24:	0022c7c0 	call	22c7c <__mulsi3>
   23a28:	da000017 	ldw	r8,0(sp)
   23a2c:	a820d43a 	srli	r16,r21,16
   23a30:	d8800115 	stw	r2,4(sp)
   23a34:	4009883a 	mov	r4,r8
   23a38:	800b883a 	mov	r5,r16
   23a3c:	0022c7c0 	call	22c7c <__mulsi3>
   23a40:	da800417 	ldw	r10,16(sp)
   23a44:	8009883a 	mov	r4,r16
   23a48:	d8800015 	stw	r2,0(sp)
   23a4c:	500b883a 	mov	r5,r10
   23a50:	0022c7c0 	call	22c7c <__mulsi3>
   23a54:	d9800217 	ldw	r6,8(sp)
   23a58:	da000117 	ldw	r8,4(sp)
   23a5c:	da400017 	ldw	r9,0(sp)
   23a60:	3008d43a 	srli	r4,r6,16
   23a64:	1205883a 	add	r2,r2,r8
   23a68:	d8c00317 	ldw	r3,12(sp)
   23a6c:	2089883a 	add	r4,r4,r2
   23a70:	d9c00517 	ldw	r7,20(sp)
   23a74:	2200022e 	bgeu	r4,r8,23a80 <__divdf3+0x4ec>
   23a78:	00800074 	movhi	r2,1
   23a7c:	4893883a 	add	r9,r9,r2
   23a80:	200ad43a 	srli	r5,r4,16
   23a84:	2008943a 	slli	r4,r4,16
   23a88:	31bfffcc 	andi	r6,r6,65535
   23a8c:	2a4b883a 	add	r5,r5,r9
   23a90:	218d883a 	add	r6,r4,r6
   23a94:	19409436 	bltu	r3,r5,23ce8 <__divdf3+0x754>
   23a98:	19409226 	beq	r3,r5,23ce4 <__divdf3+0x750>
   23a9c:	898dc83a 	sub	r6,r17,r6
   23aa0:	89a3803a 	cmpltu	r17,r17,r6
   23aa4:	1947c83a 	sub	r3,r3,r5
   23aa8:	1c47c83a 	sub	r3,r3,r17
   23aac:	9440ffc4 	addi	r17,r18,1023
   23ab0:	b0c0d326 	beq	r22,r3,23e00 <__divdf3+0x86c>
   23ab4:	1809883a 	mov	r4,r3
   23ab8:	b80b883a 	mov	r5,r23
   23abc:	d9800315 	stw	r6,12(sp)
   23ac0:	d9c00215 	stw	r7,8(sp)
   23ac4:	d8c00015 	stw	r3,0(sp)
   23ac8:	0022bbc0 	call	22bbc <__udivsi3>
   23acc:	100b883a 	mov	r5,r2
   23ad0:	a009883a 	mov	r4,r20
   23ad4:	d8800115 	stw	r2,4(sp)
   23ad8:	0022c7c0 	call	22c7c <__mulsi3>
   23adc:	d8c00017 	ldw	r3,0(sp)
   23ae0:	b80b883a 	mov	r5,r23
   23ae4:	d8800015 	stw	r2,0(sp)
   23ae8:	1809883a 	mov	r4,r3
   23aec:	0022c200 	call	22c20 <__umodsi3>
   23af0:	d9800317 	ldw	r6,12(sp)
   23af4:	1006943a 	slli	r3,r2,16
   23af8:	da400017 	ldw	r9,0(sp)
   23afc:	3008d43a 	srli	r4,r6,16
   23b00:	da000117 	ldw	r8,4(sp)
   23b04:	d9c00217 	ldw	r7,8(sp)
   23b08:	20c6b03a 	or	r3,r4,r3
   23b0c:	1a40062e 	bgeu	r3,r9,23b28 <__divdf3+0x594>
   23b10:	1d87883a 	add	r3,r3,r22
   23b14:	40bfffc4 	addi	r2,r8,-1
   23b18:	1d80c836 	bltu	r3,r22,23e3c <__divdf3+0x8a8>
   23b1c:	1a40c72e 	bgeu	r3,r9,23e3c <__divdf3+0x8a8>
   23b20:	423fff84 	addi	r8,r8,-2
   23b24:	1d87883a 	add	r3,r3,r22
   23b28:	1a47c83a 	sub	r3,r3,r9
   23b2c:	1809883a 	mov	r4,r3
   23b30:	b80b883a 	mov	r5,r23
   23b34:	d9800415 	stw	r6,16(sp)
   23b38:	d9c00315 	stw	r7,12(sp)
   23b3c:	da000215 	stw	r8,8(sp)
   23b40:	d8c00115 	stw	r3,4(sp)
   23b44:	0022bbc0 	call	22bbc <__udivsi3>
   23b48:	100b883a 	mov	r5,r2
   23b4c:	a009883a 	mov	r4,r20
   23b50:	d8800015 	stw	r2,0(sp)
   23b54:	0022c7c0 	call	22c7c <__mulsi3>
   23b58:	d8c00117 	ldw	r3,4(sp)
   23b5c:	b80b883a 	mov	r5,r23
   23b60:	102f883a 	mov	r23,r2
   23b64:	1809883a 	mov	r4,r3
   23b68:	0022c200 	call	22c20 <__umodsi3>
   23b6c:	d9800417 	ldw	r6,16(sp)
   23b70:	1004943a 	slli	r2,r2,16
   23b74:	da400017 	ldw	r9,0(sp)
   23b78:	31bfffcc 	andi	r6,r6,65535
   23b7c:	308cb03a 	or	r6,r6,r2
   23b80:	da000217 	ldw	r8,8(sp)
   23b84:	d9c00317 	ldw	r7,12(sp)
   23b88:	35c0062e 	bgeu	r6,r23,23ba4 <__divdf3+0x610>
   23b8c:	358d883a 	add	r6,r6,r22
   23b90:	48bfffc4 	addi	r2,r9,-1
   23b94:	3580a736 	bltu	r6,r22,23e34 <__divdf3+0x8a0>
   23b98:	35c0a62e 	bgeu	r6,r23,23e34 <__divdf3+0x8a0>
   23b9c:	4a7fff84 	addi	r9,r9,-2
   23ba0:	358d883a 	add	r6,r6,r22
   23ba4:	4028943a 	slli	r20,r8,16
   23ba8:	35d5c83a 	sub	r10,r6,r23
   23bac:	e009883a 	mov	r4,fp
   23bb0:	a268b03a 	or	r20,r20,r9
   23bb4:	a23fffcc 	andi	r8,r20,65535
   23bb8:	a02ed43a 	srli	r23,r20,16
   23bbc:	400b883a 	mov	r5,r8
   23bc0:	d9c00315 	stw	r7,12(sp)
   23bc4:	da800215 	stw	r10,8(sp)
   23bc8:	da000115 	stw	r8,4(sp)
   23bcc:	0022c7c0 	call	22c7c <__mulsi3>
   23bd0:	e00b883a 	mov	r5,fp
   23bd4:	b809883a 	mov	r4,r23
   23bd8:	1039883a 	mov	fp,r2
   23bdc:	0022c7c0 	call	22c7c <__mulsi3>
   23be0:	8009883a 	mov	r4,r16
   23be4:	b80b883a 	mov	r5,r23
   23be8:	d8800015 	stw	r2,0(sp)
   23bec:	0022c7c0 	call	22c7c <__mulsi3>
   23bf0:	da000117 	ldw	r8,4(sp)
   23bf4:	8009883a 	mov	r4,r16
   23bf8:	1021883a 	mov	r16,r2
   23bfc:	400b883a 	mov	r5,r8
   23c00:	0022c7c0 	call	22c7c <__mulsi3>
   23c04:	d9800017 	ldw	r6,0(sp)
   23c08:	e006d43a 	srli	r3,fp,16
   23c0c:	da800217 	ldw	r10,8(sp)
   23c10:	1185883a 	add	r2,r2,r6
   23c14:	1887883a 	add	r3,r3,r2
   23c18:	d9c00317 	ldw	r7,12(sp)
   23c1c:	1980022e 	bgeu	r3,r6,23c28 <__divdf3+0x694>
   23c20:	00800074 	movhi	r2,1
   23c24:	80a1883a 	add	r16,r16,r2
   23c28:	1808d43a 	srli	r4,r3,16
   23c2c:	1806943a 	slli	r3,r3,16
   23c30:	e73fffcc 	andi	fp,fp,65535
   23c34:	2409883a 	add	r4,r4,r16
   23c38:	1f07883a 	add	r3,r3,fp
   23c3c:	51000436 	bltu	r10,r4,23c50 <__divdf3+0x6bc>
   23c40:	51000226 	beq	r10,r4,23c4c <__divdf3+0x6b8>
   23c44:	a5000054 	ori	r20,r20,1
   23c48:	003f0306 	br	23858 <__divdf3+0x2c4>
   23c4c:	183f0226 	beq	r3,zero,23858 <__divdf3+0x2c4>
   23c50:	b28d883a 	add	r6,r22,r10
   23c54:	a0bfffc4 	addi	r2,r20,-1
   23c58:	35806536 	bltu	r6,r22,23df0 <__divdf3+0x85c>
   23c5c:	31008036 	bltu	r6,r4,23e60 <__divdf3+0x8cc>
   23c60:	31009426 	beq	r6,r4,23eb4 <__divdf3+0x920>
   23c64:	1029883a 	mov	r20,r2
   23c68:	003ff606 	br	23c44 <__divdf3+0x6b0>
   23c6c:	053fffc4 	movi	r20,-1
   23c70:	01400044 	movi	r5,1
   23c74:	2c4bc83a 	sub	r5,r5,r17
   23c78:	28800e48 	cmpgei	r2,r5,57
   23c7c:	103e941e 	bne	r2,zero,236d0 <__divdf3+0x13c>
   23c80:	28800808 	cmpgei	r2,r5,32
   23c84:	1000491e 	bne	r2,zero,23dac <__divdf3+0x818>
   23c88:	92010784 	addi	r8,r18,1054
   23c8c:	9a04983a 	sll	r2,r19,r8
   23c90:	a146d83a 	srl	r3,r20,r5
   23c94:	a210983a 	sll	r8,r20,r8
   23c98:	994ad83a 	srl	r5,r19,r5
   23c9c:	10e8b03a 	or	r20,r2,r3
   23ca0:	4010c03a 	cmpne	r8,r8,zero
   23ca4:	a228b03a 	or	r20,r20,r8
   23ca8:	a08001cc 	andi	r2,r20,7
   23cac:	10000726 	beq	r2,zero,23ccc <__divdf3+0x738>
   23cb0:	a08003cc 	andi	r2,r20,15
   23cb4:	10800120 	cmpeqi	r2,r2,4
   23cb8:	1000041e 	bne	r2,zero,23ccc <__divdf3+0x738>
   23cbc:	a0800104 	addi	r2,r20,4
   23cc0:	1529803a 	cmpltu	r20,r2,r20
   23cc4:	2d0b883a 	add	r5,r5,r20
   23cc8:	1029883a 	mov	r20,r2
   23ccc:	2880202c 	andhi	r2,r5,128
   23cd0:	10006f26 	beq	r2,zero,23e90 <__divdf3+0x8fc>
   23cd4:	00c00044 	movi	r3,1
   23cd8:	000b883a 	mov	r5,zero
   23cdc:	0029883a 	mov	r20,zero
   23ce0:	003e7e06 	br	236dc <__divdf3+0x148>
   23ce4:	89bf6d2e 	bgeu	r17,r6,23a9c <__divdf3+0x508>
   23ce8:	8d63883a 	add	r17,r17,r21
   23cec:	8d45803a 	cmpltu	r2,r17,r21
   23cf0:	1585883a 	add	r2,r2,r22
   23cf4:	1887883a 	add	r3,r3,r2
   23cf8:	98bfffc4 	addi	r2,r19,-1
   23cfc:	b0c0202e 	bgeu	r22,r3,23d80 <__divdf3+0x7ec>
   23d00:	19405136 	bltu	r3,r5,23e48 <__divdf3+0x8b4>
   23d04:	28c04f26 	beq	r5,r3,23e44 <__divdf3+0x8b0>
   23d08:	1027883a 	mov	r19,r2
   23d0c:	003f6306 	br	23a9c <__divdf3+0x508>
   23d10:	a27efc36 	bltu	r20,r9,23904 <__divdf3+0x370>
   23d14:	983897fa 	slli	fp,r19,31
   23d18:	a004d07a 	srli	r2,r20,1
   23d1c:	9820d07a 	srli	r16,r19,1
   23d20:	a02297fa 	slli	r17,r20,31
   23d24:	e0b8b03a 	or	fp,fp,r2
   23d28:	003efa06 	br	23914 <__divdf3+0x380>
   23d2c:	e009883a 	mov	r4,fp
   23d30:	00252900 	call	25290 <__clzsi2>
   23d34:	11400544 	addi	r5,r2,21
   23d38:	29000748 	cmpgei	r4,r5,29
   23d3c:	1007883a 	mov	r3,r2
   23d40:	10800804 	addi	r2,r2,32
   23d44:	203e8526 	beq	r4,zero,2375c <__divdf3+0x1c8>
   23d48:	18fffe04 	addi	r3,r3,-8
   23d4c:	e0ec983a 	sll	r22,fp,r3
   23d50:	0013883a 	mov	r9,zero
   23d54:	003e8806 	br	23778 <__divdf3+0x1e4>
   23d58:	00252900 	call	25290 <__clzsi2>
   23d5c:	11000544 	addi	r4,r2,21
   23d60:	20c00748 	cmpgei	r3,r4,29
   23d64:	100b883a 	mov	r5,r2
   23d68:	10800804 	addi	r2,r2,32
   23d6c:	183e8d26 	beq	r3,zero,237a4 <__divdf3+0x210>
   23d70:	297ffe04 	addi	r5,r5,-8
   23d74:	a166983a 	sll	r19,r20,r5
   23d78:	0029883a 	mov	r20,zero
   23d7c:	003e9006 	br	237c0 <__divdf3+0x22c>
   23d80:	b0ffe11e 	bne	r22,r3,23d08 <__divdf3+0x774>
   23d84:	8d7fe036 	bltu	r17,r21,23d08 <__divdf3+0x774>
   23d88:	003fdd06 	br	23d00 <__divdf3+0x76c>
   23d8c:	30ff132e 	bgeu	r6,r3,239dc <__divdf3+0x448>
   23d90:	423fff84 	addi	r8,r8,-2
   23d94:	358d883a 	add	r6,r6,r22
   23d98:	003f1106 	br	239e0 <__divdf3+0x44c>
   23d9c:	243ef72e 	bgeu	r4,r16,2397c <__divdf3+0x3e8>
   23da0:	9cffff84 	addi	r19,r19,-2
   23da4:	2589883a 	add	r4,r4,r22
   23da8:	003ef506 	br	23980 <__divdf3+0x3ec>
   23dac:	00fff844 	movi	r3,-31
   23db0:	1c47c83a 	sub	r3,r3,r17
   23db4:	29400820 	cmpeqi	r5,r5,32
   23db8:	98c6d83a 	srl	r3,r19,r3
   23dbc:	2800031e 	bne	r5,zero,23dcc <__divdf3+0x838>
   23dc0:	91410f84 	addi	r5,r18,1086
   23dc4:	994a983a 	sll	r5,r19,r5
   23dc8:	a168b03a 	or	r20,r20,r5
   23dcc:	a028c03a 	cmpne	r20,r20,zero
   23dd0:	a0e8b03a 	or	r20,r20,r3
   23dd4:	a4c001cc 	andi	r19,r20,7
   23dd8:	9800291e 	bne	r19,zero,23e80 <__divdf3+0x8ec>
   23ddc:	000b883a 	mov	r5,zero
   23de0:	a028d0fa 	srli	r20,r20,3
   23de4:	0007883a 	mov	r3,zero
   23de8:	a4e8b03a 	or	r20,r20,r19
   23dec:	003e3b06 	br	236dc <__divdf3+0x148>
   23df0:	1029883a 	mov	r20,r2
   23df4:	313f931e 	bne	r6,r4,23c44 <__divdf3+0x6b0>
   23df8:	1d7f921e 	bne	r3,r21,23c44 <__divdf3+0x6b0>
   23dfc:	003e9606 	br	23858 <__divdf3+0x2c4>
   23e00:	047f9a0e 	bge	zero,r17,23c6c <__divdf3+0x6d8>
   23e04:	0009883a 	mov	r4,zero
   23e08:	05000044 	movi	r20,1
   23e0c:	9d27883a 	add	r19,r19,r20
   23e10:	003e9506 	br	23868 <__divdf3+0x2d4>
   23e14:	a08003cc 	andi	r2,r20,15
   23e18:	10800118 	cmpnei	r2,r2,4
   23e1c:	103e9126 	beq	r2,zero,23864 <__divdf3+0x2d0>
   23e20:	a1000104 	addi	r4,r20,4
   23e24:	00bffec4 	movi	r2,-5
   23e28:	2008d0fa 	srli	r4,r4,3
   23e2c:	1529803a 	cmpltu	r20,r2,r20
   23e30:	003ff606 	br	23e0c <__divdf3+0x878>
   23e34:	1013883a 	mov	r9,r2
   23e38:	003f5a06 	br	23ba4 <__divdf3+0x610>
   23e3c:	1011883a 	mov	r8,r2
   23e40:	003f3906 	br	23b28 <__divdf3+0x594>
   23e44:	89bfb02e 	bgeu	r17,r6,23d08 <__divdf3+0x774>
   23e48:	8d63883a 	add	r17,r17,r21
   23e4c:	8d45803a 	cmpltu	r2,r17,r21
   23e50:	1585883a 	add	r2,r2,r22
   23e54:	9cffff84 	addi	r19,r19,-2
   23e58:	1887883a 	add	r3,r3,r2
   23e5c:	003f0f06 	br	23a9c <__divdf3+0x508>
   23e60:	ad45883a 	add	r2,r21,r21
   23e64:	156b803a 	cmpltu	r21,r2,r21
   23e68:	adad883a 	add	r22,r21,r22
   23e6c:	358d883a 	add	r6,r6,r22
   23e70:	a53fff84 	addi	r20,r20,-2
   23e74:	102b883a 	mov	r21,r2
   23e78:	313fdf26 	beq	r6,r4,23df8 <__divdf3+0x864>
   23e7c:	003f7106 	br	23c44 <__divdf3+0x6b0>
   23e80:	a08003cc 	andi	r2,r20,15
   23e84:	10800118 	cmpnei	r2,r2,4
   23e88:	000b883a 	mov	r5,zero
   23e8c:	103f8b1e 	bne	r2,zero,23cbc <__divdf3+0x728>
   23e90:	2804927a 	slli	r2,r5,9
   23e94:	2826977a 	slli	r19,r5,29
   23e98:	100ad33a 	srli	r5,r2,12
   23e9c:	003fd006 	br	23de0 <__divdf3+0x84c>
   23ea0:	00800434 	movhi	r2,16
   23ea4:	99400234 	orhi	r5,r19,8
   23ea8:	10bfffc4 	addi	r2,r2,-1
   23eac:	288a703a 	and	r5,r5,r2
   23eb0:	003e7f06 	br	238b0 <__divdf3+0x31c>
   23eb4:	a8ffea36 	bltu	r21,r3,23e60 <__divdf3+0x8cc>
   23eb8:	1029883a 	mov	r20,r2
   23ebc:	1d7f611e 	bne	r3,r21,23c44 <__divdf3+0x6b0>
   23ec0:	003e6506 	br	23858 <__divdf3+0x2c4>

00023ec4 <__gedf2>:
   23ec4:	2810d53a 	srli	r8,r5,20
   23ec8:	3812d53a 	srli	r9,r7,20
   23ecc:	00c00434 	movhi	r3,16
   23ed0:	4201ffcc 	andi	r8,r8,2047
   23ed4:	18ffffc4 	addi	r3,r3,-1
   23ed8:	4281ffd8 	cmpnei	r10,r8,2047
   23edc:	2816d7fa 	srli	r11,r5,31
   23ee0:	3804d7fa 	srli	r2,r7,31
   23ee4:	28ca703a 	and	r5,r5,r3
   23ee8:	38ce703a 	and	r7,r7,r3
   23eec:	48c1ffcc 	andi	r3,r9,2047
   23ef0:	50000a26 	beq	r10,zero,23f1c <__gedf2+0x58>
   23ef4:	1a41ffd8 	cmpnei	r9,r3,2047
   23ef8:	48000c26 	beq	r9,zero,23f2c <__gedf2+0x68>
   23efc:	4000171e 	bne	r8,zero,23f5c <__gedf2+0x98>
   23f00:	2912b03a 	or	r9,r5,r4
   23f04:	1800121e 	bne	r3,zero,23f50 <__gedf2+0x8c>
   23f08:	3994b03a 	or	r10,r7,r6
   23f0c:	5000101e 	bne	r10,zero,23f50 <__gedf2+0x8c>
   23f10:	48000a1e 	bne	r9,zero,23f3c <__gedf2+0x78>
   23f14:	0005883a 	mov	r2,zero
   23f18:	f800283a 	ret
   23f1c:	2912b03a 	or	r9,r5,r4
   23f20:	48001d1e 	bne	r9,zero,23f98 <__gedf2+0xd4>
   23f24:	1a41ffe0 	cmpeqi	r9,r3,2047
   23f28:	48000c26 	beq	r9,zero,23f5c <__gedf2+0x98>
   23f2c:	3992b03a 	or	r9,r7,r6
   23f30:	4800191e 	bne	r9,zero,23f98 <__gedf2+0xd4>
   23f34:	40000526 	beq	r8,zero,23f4c <__gedf2+0x88>
   23f38:	58800c26 	beq	r11,r2,23f6c <__gedf2+0xa8>
   23f3c:	00800044 	movi	r2,1
   23f40:	58000526 	beq	r11,zero,23f58 <__gedf2+0x94>
   23f44:	00bfffc4 	movi	r2,-1
   23f48:	f800283a 	ret
   23f4c:	2912b03a 	or	r9,r5,r4
   23f50:	483ff91e 	bne	r9,zero,23f38 <__gedf2+0x74>
   23f54:	103ffb26 	beq	r2,zero,23f44 <__gedf2+0x80>
   23f58:	f800283a 	ret
   23f5c:	183ff61e 	bne	r3,zero,23f38 <__gedf2+0x74>
   23f60:	3992b03a 	or	r9,r7,r6
   23f64:	483ff41e 	bne	r9,zero,23f38 <__gedf2+0x74>
   23f68:	003ff406 	br	23f3c <__gedf2+0x78>
   23f6c:	1a000716 	blt	r3,r8,23f8c <__gedf2+0xc8>
   23f70:	40fff816 	blt	r8,r3,23f54 <__gedf2+0x90>
   23f74:	397ff136 	bltu	r7,r5,23f3c <__gedf2+0x78>
   23f78:	29c00926 	beq	r5,r7,23fa0 <__gedf2+0xdc>
   23f7c:	29ffe52e 	bgeu	r5,r7,23f14 <__gedf2+0x50>
   23f80:	583ff026 	beq	r11,zero,23f44 <__gedf2+0x80>
   23f84:	5805883a 	mov	r2,r11
   23f88:	f800283a 	ret
   23f8c:	103fed1e 	bne	r2,zero,23f44 <__gedf2+0x80>
   23f90:	00800044 	movi	r2,1
   23f94:	f800283a 	ret
   23f98:	00bfff84 	movi	r2,-2
   23f9c:	f800283a 	ret
   23fa0:	313fe636 	bltu	r6,r4,23f3c <__gedf2+0x78>
   23fa4:	21bfdb2e 	bgeu	r4,r6,23f14 <__gedf2+0x50>
   23fa8:	003ff506 	br	23f80 <__gedf2+0xbc>

00023fac <__ledf2>:
   23fac:	2810d53a 	srli	r8,r5,20
   23fb0:	3812d53a 	srli	r9,r7,20
   23fb4:	00c00434 	movhi	r3,16
   23fb8:	4201ffcc 	andi	r8,r8,2047
   23fbc:	18ffffc4 	addi	r3,r3,-1
   23fc0:	4281ffd8 	cmpnei	r10,r8,2047
   23fc4:	2816d7fa 	srli	r11,r5,31
   23fc8:	3804d7fa 	srli	r2,r7,31
   23fcc:	28ca703a 	and	r5,r5,r3
   23fd0:	38ce703a 	and	r7,r7,r3
   23fd4:	48c1ffcc 	andi	r3,r9,2047
   23fd8:	50000a26 	beq	r10,zero,24004 <__ledf2+0x58>
   23fdc:	1a41ffd8 	cmpnei	r9,r3,2047
   23fe0:	48000c26 	beq	r9,zero,24014 <__ledf2+0x68>
   23fe4:	4000191e 	bne	r8,zero,2404c <__ledf2+0xa0>
   23fe8:	2912b03a 	or	r9,r5,r4
   23fec:	18000d1e 	bne	r3,zero,24024 <__ledf2+0x78>
   23ff0:	3994b03a 	or	r10,r7,r6
   23ff4:	50000b1e 	bne	r10,zero,24024 <__ledf2+0x78>
   23ff8:	48000c1e 	bne	r9,zero,2402c <__ledf2+0x80>
   23ffc:	0005883a 	mov	r2,zero
   24000:	f800283a 	ret
   24004:	2912b03a 	or	r9,r5,r4
   24008:	48000c1e 	bne	r9,zero,2403c <__ledf2+0x90>
   2400c:	1a41ffe0 	cmpeqi	r9,r3,2047
   24010:	48000e26 	beq	r9,zero,2404c <__ledf2+0xa0>
   24014:	3992b03a 	or	r9,r7,r6
   24018:	4800081e 	bne	r9,zero,2403c <__ledf2+0x90>
   2401c:	4000021e 	bne	r8,zero,24028 <__ledf2+0x7c>
   24020:	2912b03a 	or	r9,r5,r4
   24024:	48000726 	beq	r9,zero,24044 <__ledf2+0x98>
   24028:	58800c26 	beq	r11,r2,2405c <__ledf2+0xb0>
   2402c:	00800044 	movi	r2,1
   24030:	58000526 	beq	r11,zero,24048 <__ledf2+0x9c>
   24034:	00bfffc4 	movi	r2,-1
   24038:	f800283a 	ret
   2403c:	00800084 	movi	r2,2
   24040:	f800283a 	ret
   24044:	103ffb26 	beq	r2,zero,24034 <__ledf2+0x88>
   24048:	f800283a 	ret
   2404c:	183ff61e 	bne	r3,zero,24028 <__ledf2+0x7c>
   24050:	3992b03a 	or	r9,r7,r6
   24054:	483ff41e 	bne	r9,zero,24028 <__ledf2+0x7c>
   24058:	003ff406 	br	2402c <__ledf2+0x80>
   2405c:	1a00030e 	bge	r3,r8,2406c <__ledf2+0xc0>
   24060:	103ff41e 	bne	r2,zero,24034 <__ledf2+0x88>
   24064:	00800044 	movi	r2,1
   24068:	f800283a 	ret
   2406c:	40fff516 	blt	r8,r3,24044 <__ledf2+0x98>
   24070:	397fee36 	bltu	r7,r5,2402c <__ledf2+0x80>
   24074:	29c00426 	beq	r5,r7,24088 <__ledf2+0xdc>
   24078:	29ffe02e 	bgeu	r5,r7,23ffc <__ledf2+0x50>
   2407c:	583fed26 	beq	r11,zero,24034 <__ledf2+0x88>
   24080:	5805883a 	mov	r2,r11
   24084:	f800283a 	ret
   24088:	313fe836 	bltu	r6,r4,2402c <__ledf2+0x80>
   2408c:	21bfdb2e 	bgeu	r4,r6,23ffc <__ledf2+0x50>
   24090:	003ffa06 	br	2407c <__ledf2+0xd0>

00024094 <__muldf3>:
   24094:	2810d53a 	srli	r8,r5,20
   24098:	defff004 	addi	sp,sp,-64
   2409c:	00800434 	movhi	r2,16
   240a0:	df000e15 	stw	fp,56(sp)
   240a4:	dd000a15 	stw	r20,40(sp)
   240a8:	dcc00915 	stw	r19,36(sp)
   240ac:	dc400715 	stw	r17,28(sp)
   240b0:	10bfffc4 	addi	r2,r2,-1
   240b4:	dfc00f15 	stw	ra,60(sp)
   240b8:	ddc00d15 	stw	r23,52(sp)
   240bc:	dd800c15 	stw	r22,48(sp)
   240c0:	dd400b15 	stw	r21,44(sp)
   240c4:	dc800815 	stw	r18,32(sp)
   240c8:	dc000615 	stw	r16,24(sp)
   240cc:	4201ffcc 	andi	r8,r8,2047
   240d0:	2828d7fa 	srli	r20,r5,31
   240d4:	2023883a 	mov	r17,r4
   240d8:	3039883a 	mov	fp,r6
   240dc:	28a6703a 	and	r19,r5,r2
   240e0:	40013426 	beq	r8,zero,245b4 <__muldf3+0x520>
   240e4:	4081ffe0 	cmpeqi	r2,r8,2047
   240e8:	1001461e 	bne	r2,zero,24604 <__muldf3+0x570>
   240ec:	980a90fa 	slli	r5,r19,3
   240f0:	2026d77a 	srli	r19,r4,29
   240f4:	202490fa 	slli	r18,r4,3
   240f8:	423f0044 	addi	r8,r8,-1023
   240fc:	9966b03a 	or	r19,r19,r5
   24100:	9cc02034 	orhi	r19,r19,128
   24104:	002b883a 	mov	r21,zero
   24108:	002d883a 	mov	r22,zero
   2410c:	3804d53a 	srli	r2,r7,20
   24110:	00c00434 	movhi	r3,16
   24114:	18ffffc4 	addi	r3,r3,-1
   24118:	1081ffcc 	andi	r2,r2,2047
   2411c:	382ed7fa 	srli	r23,r7,31
   24120:	38e0703a 	and	r16,r7,r3
   24124:	10011026 	beq	r2,zero,24568 <__muldf3+0x4d4>
   24128:	10c1ffe0 	cmpeqi	r3,r2,2047
   2412c:	18013c1e 	bne	r3,zero,24620 <__muldf3+0x58c>
   24130:	e008d77a 	srli	r4,fp,29
   24134:	802090fa 	slli	r16,r16,3
   24138:	e02290fa 	slli	r17,fp,3
   2413c:	10bf0044 	addi	r2,r2,-1023
   24140:	2420b03a 	or	r16,r4,r16
   24144:	84002034 	orhi	r16,r16,128
   24148:	4091883a 	add	r8,r8,r2
   2414c:	0009883a 	mov	r4,zero
   24150:	a8800428 	cmpgeui	r2,r21,16
   24154:	a5ccf03a 	xor	r6,r20,r23
   24158:	41c00044 	addi	r7,r8,1
   2415c:	1000371e 	bne	r2,zero,2423c <__muldf3+0x1a8>
   24160:	a80490ba 	slli	r2,r21,2
   24164:	00c000b4 	movhi	r3,2
   24168:	10c7883a 	add	r3,r2,r3
   2416c:	18905d17 	ldw	r2,16756(r3)
   24170:	1000683a 	jmp	r2
   24174:	0002423c 	xorhi	zero,zero,2312
   24178:	000241b8 	rdprs	zero,zero,2310
   2417c:	000241b8 	rdprs	zero,zero,2310
   24180:	000241b4 	movhi	zero,2310
   24184:	000241c4 	movi	zero,2311
   24188:	000241c4 	movi	zero,2311
   2418c:	00024694 	movui	zero,2330
   24190:	000241b4 	movhi	zero,2310
   24194:	000241c4 	movi	zero,2311
   24198:	00024694 	movui	zero,2330
   2419c:	000241c4 	movi	zero,2311
   241a0:	000241b4 	movhi	zero,2310
   241a4:	0002463c 	xorhi	zero,zero,2328
   241a8:	0002463c 	xorhi	zero,zero,2328
   241ac:	0002463c 	xorhi	zero,zero,2328
   241b0:	00024720 	cmpeqi	zero,zero,2332
   241b4:	b80d883a 	mov	r6,r23
   241b8:	8027883a 	mov	r19,r16
   241bc:	8825883a 	mov	r18,r17
   241c0:	202d883a 	mov	r22,r4
   241c4:	b08000a0 	cmpeqi	r2,r22,2
   241c8:	1000181e 	bne	r2,zero,2422c <__muldf3+0x198>
   241cc:	b08000e0 	cmpeqi	r2,r22,3
   241d0:	1001961e 	bne	r2,zero,2482c <__muldf3+0x798>
   241d4:	b0800060 	cmpeqi	r2,r22,1
   241d8:	1000c926 	beq	r2,zero,24500 <__muldf3+0x46c>
   241dc:	0007883a 	mov	r3,zero
   241e0:	0027883a 	mov	r19,zero
   241e4:	0025883a 	mov	r18,zero
   241e8:	1806953a 	slli	r3,r3,20
   241ec:	300c97fa 	slli	r6,r6,31
   241f0:	9005883a 	mov	r2,r18
   241f4:	1cc6b03a 	or	r3,r3,r19
   241f8:	1986b03a 	or	r3,r3,r6
   241fc:	dfc00f17 	ldw	ra,60(sp)
   24200:	df000e17 	ldw	fp,56(sp)
   24204:	ddc00d17 	ldw	r23,52(sp)
   24208:	dd800c17 	ldw	r22,48(sp)
   2420c:	dd400b17 	ldw	r21,44(sp)
   24210:	dd000a17 	ldw	r20,40(sp)
   24214:	dcc00917 	ldw	r19,36(sp)
   24218:	dc800817 	ldw	r18,32(sp)
   2421c:	dc400717 	ldw	r17,28(sp)
   24220:	dc000617 	ldw	r16,24(sp)
   24224:	dec01004 	addi	sp,sp,64
   24228:	f800283a 	ret
   2422c:	00c1ffc4 	movi	r3,2047
   24230:	0027883a 	mov	r19,zero
   24234:	0025883a 	mov	r18,zero
   24238:	003feb06 	br	241e8 <__muldf3+0x154>
   2423c:	9028d43a 	srli	r20,r18,16
   24240:	8f3fffcc 	andi	fp,r17,65535
   24244:	957fffcc 	andi	r21,r18,65535
   24248:	a80b883a 	mov	r5,r21
   2424c:	e009883a 	mov	r4,fp
   24250:	d9800315 	stw	r6,12(sp)
   24254:	da000215 	stw	r8,8(sp)
   24258:	d9c00115 	stw	r7,4(sp)
   2425c:	8822d43a 	srli	r17,r17,16
   24260:	0022c7c0 	call	22c7c <__mulsi3>
   24264:	e00b883a 	mov	r5,fp
   24268:	a009883a 	mov	r4,r20
   2426c:	102d883a 	mov	r22,r2
   24270:	0022c7c0 	call	22c7c <__mulsi3>
   24274:	880b883a 	mov	r5,r17
   24278:	a009883a 	mov	r4,r20
   2427c:	102f883a 	mov	r23,r2
   24280:	0022c7c0 	call	22c7c <__mulsi3>
   24284:	a80b883a 	mov	r5,r21
   24288:	8809883a 	mov	r4,r17
   2428c:	d8800015 	stw	r2,0(sp)
   24290:	0022c7c0 	call	22c7c <__mulsi3>
   24294:	b006d43a 	srli	r3,r22,16
   24298:	15e5883a 	add	r18,r2,r23
   2429c:	d9c00117 	ldw	r7,4(sp)
   242a0:	1c87883a 	add	r3,r3,r18
   242a4:	da000217 	ldw	r8,8(sp)
   242a8:	d9800317 	ldw	r6,12(sp)
   242ac:	1dc0042e 	bgeu	r3,r23,242c0 <__muldf3+0x22c>
   242b0:	d9000017 	ldw	r4,0(sp)
   242b4:	00800074 	movhi	r2,1
   242b8:	2085883a 	add	r2,r4,r2
   242bc:	d8800015 	stw	r2,0(sp)
   242c0:	1804943a 	slli	r2,r3,16
   242c4:	85ffffcc 	andi	r23,r16,65535
   242c8:	b5bfffcc 	andi	r22,r22,65535
   242cc:	1585883a 	add	r2,r2,r22
   242d0:	a80b883a 	mov	r5,r21
   242d4:	b809883a 	mov	r4,r23
   242d8:	1824d43a 	srli	r18,r3,16
   242dc:	d9800515 	stw	r6,20(sp)
   242e0:	da000415 	stw	r8,16(sp)
   242e4:	d9c00315 	stw	r7,12(sp)
   242e8:	8020d43a 	srli	r16,r16,16
   242ec:	d8800115 	stw	r2,4(sp)
   242f0:	0022c7c0 	call	22c7c <__mulsi3>
   242f4:	a009883a 	mov	r4,r20
   242f8:	b80b883a 	mov	r5,r23
   242fc:	d8800215 	stw	r2,8(sp)
   24300:	0022c7c0 	call	22c7c <__mulsi3>
   24304:	a009883a 	mov	r4,r20
   24308:	800b883a 	mov	r5,r16
   2430c:	102d883a 	mov	r22,r2
   24310:	0022c7c0 	call	22c7c <__mulsi3>
   24314:	a80b883a 	mov	r5,r21
   24318:	8009883a 	mov	r4,r16
   2431c:	1029883a 	mov	r20,r2
   24320:	0022c7c0 	call	22c7c <__mulsi3>
   24324:	da800217 	ldw	r10,8(sp)
   24328:	1585883a 	add	r2,r2,r22
   2432c:	d9c00317 	ldw	r7,12(sp)
   24330:	5006d43a 	srli	r3,r10,16
   24334:	da000417 	ldw	r8,16(sp)
   24338:	d9800517 	ldw	r6,20(sp)
   2433c:	1887883a 	add	r3,r3,r2
   24340:	1d80022e 	bgeu	r3,r22,2434c <__muldf3+0x2b8>
   24344:	00800074 	movhi	r2,1
   24348:	a0a9883a 	add	r20,r20,r2
   2434c:	1804d43a 	srli	r2,r3,16
   24350:	1806943a 	slli	r3,r3,16
   24354:	982cd43a 	srli	r22,r19,16
   24358:	9d7fffcc 	andi	r21,r19,65535
   2435c:	e009883a 	mov	r4,fp
   24360:	54ffffcc 	andi	r19,r10,65535
   24364:	a80b883a 	mov	r5,r21
   24368:	1ce7883a 	add	r19,r3,r19
   2436c:	d9800515 	stw	r6,20(sp)
   24370:	da000415 	stw	r8,16(sp)
   24374:	d9c00315 	stw	r7,12(sp)
   24378:	1529883a 	add	r20,r2,r20
   2437c:	0022c7c0 	call	22c7c <__mulsi3>
   24380:	e00b883a 	mov	r5,fp
   24384:	b009883a 	mov	r4,r22
   24388:	d8800215 	stw	r2,8(sp)
   2438c:	0022c7c0 	call	22c7c <__mulsi3>
   24390:	8809883a 	mov	r4,r17
   24394:	b00b883a 	mov	r5,r22
   24398:	1039883a 	mov	fp,r2
   2439c:	0022c7c0 	call	22c7c <__mulsi3>
   243a0:	8809883a 	mov	r4,r17
   243a4:	a80b883a 	mov	r5,r21
   243a8:	1023883a 	mov	r17,r2
   243ac:	0022c7c0 	call	22c7c <__mulsi3>
   243b0:	d8c00217 	ldw	r3,8(sp)
   243b4:	1705883a 	add	r2,r2,fp
   243b8:	d9c00317 	ldw	r7,12(sp)
   243bc:	1808d43a 	srli	r4,r3,16
   243c0:	da000417 	ldw	r8,16(sp)
   243c4:	d9800517 	ldw	r6,20(sp)
   243c8:	2089883a 	add	r4,r4,r2
   243cc:	94e5883a 	add	r18,r18,r19
   243d0:	2700022e 	bgeu	r4,fp,243dc <__muldf3+0x348>
   243d4:	00800074 	movhi	r2,1
   243d8:	88a3883a 	add	r17,r17,r2
   243dc:	2004d43a 	srli	r2,r4,16
   243e0:	2038943a 	slli	fp,r4,16
   243e4:	18ffffcc 	andi	r3,r3,65535
   243e8:	b809883a 	mov	r4,r23
   243ec:	a80b883a 	mov	r5,r21
   243f0:	d9800415 	stw	r6,16(sp)
   243f4:	da000315 	stw	r8,12(sp)
   243f8:	d9c00215 	stw	r7,8(sp)
   243fc:	e0f9883a 	add	fp,fp,r3
   24400:	1463883a 	add	r17,r2,r17
   24404:	0022c7c0 	call	22c7c <__mulsi3>
   24408:	b80b883a 	mov	r5,r23
   2440c:	b009883a 	mov	r4,r22
   24410:	102f883a 	mov	r23,r2
   24414:	0022c7c0 	call	22c7c <__mulsi3>
   24418:	b00b883a 	mov	r5,r22
   2441c:	8009883a 	mov	r4,r16
   24420:	102d883a 	mov	r22,r2
   24424:	0022c7c0 	call	22c7c <__mulsi3>
   24428:	a80b883a 	mov	r5,r21
   2442c:	8009883a 	mov	r4,r16
   24430:	1021883a 	mov	r16,r2
   24434:	0022c7c0 	call	22c7c <__mulsi3>
   24438:	b80ad43a 	srli	r5,r23,16
   2443c:	1585883a 	add	r2,r2,r22
   24440:	d9c00217 	ldw	r7,8(sp)
   24444:	288b883a 	add	r5,r5,r2
   24448:	da000317 	ldw	r8,12(sp)
   2444c:	d9800417 	ldw	r6,16(sp)
   24450:	2d80022e 	bgeu	r5,r22,2445c <__muldf3+0x3c8>
   24454:	00800074 	movhi	r2,1
   24458:	80a1883a 	add	r16,r16,r2
   2445c:	2806943a 	slli	r3,r5,16
   24460:	d8800017 	ldw	r2,0(sp)
   24464:	bdffffcc 	andi	r23,r23,65535
   24468:	1dc7883a 	add	r3,r3,r23
   2446c:	90ab883a 	add	r21,r18,r2
   24470:	acd5803a 	cmpltu	r10,r21,r19
   24474:	1d07883a 	add	r3,r3,r20
   24478:	af2b883a 	add	r21,r21,fp
   2447c:	1a97883a 	add	r11,r3,r10
   24480:	af09803a 	cmpltu	r4,r21,fp
   24484:	2826d43a 	srli	r19,r5,16
   24488:	5c53883a 	add	r9,r11,r17
   2448c:	4905883a 	add	r2,r9,r4
   24490:	1d07803a 	cmpltu	r3,r3,r20
   24494:	5a95803a 	cmpltu	r10,r11,r10
   24498:	1a86b03a 	or	r3,r3,r10
   2449c:	1109803a 	cmpltu	r4,r2,r4
   244a0:	4c53803a 	cmpltu	r9,r9,r17
   244a4:	1ce7883a 	add	r19,r3,r19
   244a8:	4908b03a 	or	r4,r9,r4
   244ac:	a824927a 	slli	r18,r21,9
   244b0:	d8c00117 	ldw	r3,4(sp)
   244b4:	9927883a 	add	r19,r19,r4
   244b8:	9c27883a 	add	r19,r19,r16
   244bc:	9826927a 	slli	r19,r19,9
   244c0:	a82ad5fa 	srli	r21,r21,23
   244c4:	100ad5fa 	srli	r5,r2,23
   244c8:	90e4b03a 	or	r18,r18,r3
   244cc:	1004927a 	slli	r2,r2,9
   244d0:	9024c03a 	cmpne	r18,r18,zero
   244d4:	9564b03a 	or	r18,r18,r21
   244d8:	98c0402c 	andhi	r3,r19,256
   244dc:	90a4b03a 	or	r18,r18,r2
   244e0:	9966b03a 	or	r19,r19,r5
   244e4:	1800b626 	beq	r3,zero,247c0 <__muldf3+0x72c>
   244e8:	9006d07a 	srli	r3,r18,1
   244ec:	980497fa 	slli	r2,r19,31
   244f0:	9480004c 	andi	r18,r18,1
   244f4:	9826d07a 	srli	r19,r19,1
   244f8:	1c86b03a 	or	r3,r3,r18
   244fc:	18a4b03a 	or	r18,r3,r2
   24500:	3900ffc4 	addi	r4,r7,1023
   24504:	0100690e 	bge	zero,r4,246ac <__muldf3+0x618>
   24508:	908001cc 	andi	r2,r18,7
   2450c:	10000726 	beq	r2,zero,2452c <__muldf3+0x498>
   24510:	908003cc 	andi	r2,r18,15
   24514:	10800120 	cmpeqi	r2,r2,4
   24518:	1000041e 	bne	r2,zero,2452c <__muldf3+0x498>
   2451c:	90800104 	addi	r2,r18,4
   24520:	14a5803a 	cmpltu	r18,r2,r18
   24524:	9ca7883a 	add	r19,r19,r18
   24528:	1025883a 	mov	r18,r2
   2452c:	9880402c 	andhi	r2,r19,256
   24530:	10000426 	beq	r2,zero,24544 <__muldf3+0x4b0>
   24534:	00bfc034 	movhi	r2,65280
   24538:	10bfffc4 	addi	r2,r2,-1
   2453c:	98a6703a 	and	r19,r19,r2
   24540:	39010004 	addi	r4,r7,1024
   24544:	2081ffc8 	cmpgei	r2,r4,2047
   24548:	103f381e 	bne	r2,zero,2422c <__muldf3+0x198>
   2454c:	9804977a 	slli	r2,r19,29
   24550:	9024d0fa 	srli	r18,r18,3
   24554:	9826927a 	slli	r19,r19,9
   24558:	20c1ffcc 	andi	r3,r4,2047
   2455c:	14a4b03a 	or	r18,r2,r18
   24560:	9826d33a 	srli	r19,r19,12
   24564:	003f2006 	br	241e8 <__muldf3+0x154>
   24568:	8722b03a 	or	r17,r16,fp
   2456c:	88004526 	beq	r17,zero,24684 <__muldf3+0x5f0>
   24570:	da000015 	stw	r8,0(sp)
   24574:	80008626 	beq	r16,zero,24790 <__muldf3+0x6fc>
   24578:	8009883a 	mov	r4,r16
   2457c:	00252900 	call	25290 <__clzsi2>
   24580:	da000017 	ldw	r8,0(sp)
   24584:	117ffd44 	addi	r5,r2,-11
   24588:	01000744 	movi	r4,29
   2458c:	147ffe04 	addi	r17,r2,-8
   24590:	2149c83a 	sub	r4,r4,r5
   24594:	8460983a 	sll	r16,r16,r17
   24598:	e108d83a 	srl	r4,fp,r4
   2459c:	e462983a 	sll	r17,fp,r17
   245a0:	2420b03a 	or	r16,r4,r16
   245a4:	4091c83a 	sub	r8,r8,r2
   245a8:	423f0344 	addi	r8,r8,-1011
   245ac:	0009883a 	mov	r4,zero
   245b0:	003ee706 	br	24150 <__muldf3+0xbc>
   245b4:	9924b03a 	or	r18,r19,r4
   245b8:	90002d26 	beq	r18,zero,24670 <__muldf3+0x5dc>
   245bc:	d9c00015 	stw	r7,0(sp)
   245c0:	98006826 	beq	r19,zero,24764 <__muldf3+0x6d0>
   245c4:	9809883a 	mov	r4,r19
   245c8:	00252900 	call	25290 <__clzsi2>
   245cc:	d9c00017 	ldw	r7,0(sp)
   245d0:	113ffd44 	addi	r4,r2,-11
   245d4:	00c00744 	movi	r3,29
   245d8:	14bffe04 	addi	r18,r2,-8
   245dc:	1907c83a 	sub	r3,r3,r4
   245e0:	9ca6983a 	sll	r19,r19,r18
   245e4:	88c6d83a 	srl	r3,r17,r3
   245e8:	8ca4983a 	sll	r18,r17,r18
   245ec:	1ce6b03a 	or	r19,r3,r19
   245f0:	023f0344 	movi	r8,-1011
   245f4:	4091c83a 	sub	r8,r8,r2
   245f8:	002b883a 	mov	r21,zero
   245fc:	002d883a 	mov	r22,zero
   24600:	003ec206 	br	2410c <__muldf3+0x78>
   24604:	9924b03a 	or	r18,r19,r4
   24608:	9000141e 	bne	r18,zero,2465c <__muldf3+0x5c8>
   2460c:	0027883a 	mov	r19,zero
   24610:	05400204 	movi	r21,8
   24614:	0201ffc4 	movi	r8,2047
   24618:	05800084 	movi	r22,2
   2461c:	003ebb06 	br	2410c <__muldf3+0x78>
   24620:	8722b03a 	or	r17,r16,fp
   24624:	4201ffc4 	addi	r8,r8,2047
   24628:	8800081e 	bne	r17,zero,2464c <__muldf3+0x5b8>
   2462c:	ad400094 	ori	r21,r21,2
   24630:	0021883a 	mov	r16,zero
   24634:	01000084 	movi	r4,2
   24638:	003ec506 	br	24150 <__muldf3+0xbc>
   2463c:	b08000a0 	cmpeqi	r2,r22,2
   24640:	a00d883a 	mov	r6,r20
   24644:	103ee126 	beq	r2,zero,241cc <__muldf3+0x138>
   24648:	003ef806 	br	2422c <__muldf3+0x198>
   2464c:	ad4000d4 	ori	r21,r21,3
   24650:	e023883a 	mov	r17,fp
   24654:	010000c4 	movi	r4,3
   24658:	003ebd06 	br	24150 <__muldf3+0xbc>
   2465c:	2025883a 	mov	r18,r4
   24660:	05400304 	movi	r21,12
   24664:	0201ffc4 	movi	r8,2047
   24668:	058000c4 	movi	r22,3
   2466c:	003ea706 	br	2410c <__muldf3+0x78>
   24670:	0027883a 	mov	r19,zero
   24674:	05400104 	movi	r21,4
   24678:	0011883a 	mov	r8,zero
   2467c:	05800044 	movi	r22,1
   24680:	003ea206 	br	2410c <__muldf3+0x78>
   24684:	ad400054 	ori	r21,r21,1
   24688:	0021883a 	mov	r16,zero
   2468c:	01000044 	movi	r4,1
   24690:	003eaf06 	br	24150 <__muldf3+0xbc>
   24694:	04c00434 	movhi	r19,16
   24698:	000d883a 	mov	r6,zero
   2469c:	9cffffc4 	addi	r19,r19,-1
   246a0:	04bfffc4 	movi	r18,-1
   246a4:	00c1ffc4 	movi	r3,2047
   246a8:	003ecf06 	br	241e8 <__muldf3+0x154>
   246ac:	00800044 	movi	r2,1
   246b0:	1105c83a 	sub	r2,r2,r4
   246b4:	10c00e48 	cmpgei	r3,r2,57
   246b8:	183ec81e 	bne	r3,zero,241dc <__muldf3+0x148>
   246bc:	10c00808 	cmpgei	r3,r2,32
   246c0:	1800411e 	bne	r3,zero,247c8 <__muldf3+0x734>
   246c4:	39c10784 	addi	r7,r7,1054
   246c8:	99c6983a 	sll	r3,r19,r7
   246cc:	9088d83a 	srl	r4,r18,r2
   246d0:	91ce983a 	sll	r7,r18,r7
   246d4:	98a6d83a 	srl	r19,r19,r2
   246d8:	1904b03a 	or	r2,r3,r4
   246dc:	3824c03a 	cmpne	r18,r7,zero
   246e0:	1484b03a 	or	r2,r2,r18
   246e4:	10c001cc 	andi	r3,r2,7
   246e8:	18000726 	beq	r3,zero,24708 <__muldf3+0x674>
   246ec:	10c003cc 	andi	r3,r2,15
   246f0:	18c00120 	cmpeqi	r3,r3,4
   246f4:	1800041e 	bne	r3,zero,24708 <__muldf3+0x674>
   246f8:	10c00104 	addi	r3,r2,4
   246fc:	1885803a 	cmpltu	r2,r3,r2
   24700:	98a7883a 	add	r19,r19,r2
   24704:	1805883a 	mov	r2,r3
   24708:	98c0202c 	andhi	r3,r19,128
   2470c:	18004326 	beq	r3,zero,2481c <__muldf3+0x788>
   24710:	00c00044 	movi	r3,1
   24714:	0027883a 	mov	r19,zero
   24718:	0025883a 	mov	r18,zero
   2471c:	003eb206 	br	241e8 <__muldf3+0x154>
   24720:	9880022c 	andhi	r2,r19,8
   24724:	10000926 	beq	r2,zero,2474c <__muldf3+0x6b8>
   24728:	8080022c 	andhi	r2,r16,8
   2472c:	1000071e 	bne	r2,zero,2474c <__muldf3+0x6b8>
   24730:	00800434 	movhi	r2,16
   24734:	84c00234 	orhi	r19,r16,8
   24738:	10bfffc4 	addi	r2,r2,-1
   2473c:	98a6703a 	and	r19,r19,r2
   24740:	b80d883a 	mov	r6,r23
   24744:	8825883a 	mov	r18,r17
   24748:	003fd606 	br	246a4 <__muldf3+0x610>
   2474c:	00800434 	movhi	r2,16
   24750:	9cc00234 	orhi	r19,r19,8
   24754:	10bfffc4 	addi	r2,r2,-1
   24758:	98a6703a 	and	r19,r19,r2
   2475c:	a00d883a 	mov	r6,r20
   24760:	003fd006 	br	246a4 <__muldf3+0x610>
   24764:	00252900 	call	25290 <__clzsi2>
   24768:	11000544 	addi	r4,r2,21
   2476c:	21400748 	cmpgei	r5,r4,29
   24770:	1007883a 	mov	r3,r2
   24774:	d9c00017 	ldw	r7,0(sp)
   24778:	10800804 	addi	r2,r2,32
   2477c:	283f9526 	beq	r5,zero,245d4 <__muldf3+0x540>
   24780:	18fffe04 	addi	r3,r3,-8
   24784:	88e6983a 	sll	r19,r17,r3
   24788:	0025883a 	mov	r18,zero
   2478c:	003f9806 	br	245f0 <__muldf3+0x55c>
   24790:	e009883a 	mov	r4,fp
   24794:	00252900 	call	25290 <__clzsi2>
   24798:	11400544 	addi	r5,r2,21
   2479c:	29000748 	cmpgei	r4,r5,29
   247a0:	1007883a 	mov	r3,r2
   247a4:	da000017 	ldw	r8,0(sp)
   247a8:	10800804 	addi	r2,r2,32
   247ac:	203f7626 	beq	r4,zero,24588 <__muldf3+0x4f4>
   247b0:	1c3ffe04 	addi	r16,r3,-8
   247b4:	e420983a 	sll	r16,fp,r16
   247b8:	0023883a 	mov	r17,zero
   247bc:	003f7906 	br	245a4 <__muldf3+0x510>
   247c0:	400f883a 	mov	r7,r8
   247c4:	003f4e06 	br	24500 <__muldf3+0x46c>
   247c8:	00fff844 	movi	r3,-31
   247cc:	1907c83a 	sub	r3,r3,r4
   247d0:	10800820 	cmpeqi	r2,r2,32
   247d4:	98c6d83a 	srl	r3,r19,r3
   247d8:	1000031e 	bne	r2,zero,247e8 <__muldf3+0x754>
   247dc:	39c10f84 	addi	r7,r7,1086
   247e0:	99e6983a 	sll	r19,r19,r7
   247e4:	94e4b03a 	or	r18,r18,r19
   247e8:	9024c03a 	cmpne	r18,r18,zero
   247ec:	90c4b03a 	or	r2,r18,r3
   247f0:	148001cc 	andi	r18,r2,7
   247f4:	9000051e 	bne	r18,zero,2480c <__muldf3+0x778>
   247f8:	0027883a 	mov	r19,zero
   247fc:	1004d0fa 	srli	r2,r2,3
   24800:	0007883a 	mov	r3,zero
   24804:	14a4b03a 	or	r18,r2,r18
   24808:	003e7706 	br	241e8 <__muldf3+0x154>
   2480c:	10c003cc 	andi	r3,r2,15
   24810:	18c00118 	cmpnei	r3,r3,4
   24814:	0027883a 	mov	r19,zero
   24818:	183fb71e 	bne	r3,zero,246f8 <__muldf3+0x664>
   2481c:	9806927a 	slli	r3,r19,9
   24820:	9824977a 	slli	r18,r19,29
   24824:	1826d33a 	srli	r19,r3,12
   24828:	003ff406 	br	247fc <__muldf3+0x768>
   2482c:	00800434 	movhi	r2,16
   24830:	9cc00234 	orhi	r19,r19,8
   24834:	10bfffc4 	addi	r2,r2,-1
   24838:	98a6703a 	and	r19,r19,r2
   2483c:	003f9906 	br	246a4 <__muldf3+0x610>

00024840 <__subdf3>:
   24840:	00800434 	movhi	r2,16
   24844:	3810d53a 	srli	r8,r7,20
   24848:	10bfffc4 	addi	r2,r2,-1
   2484c:	2806d53a 	srli	r3,r5,20
   24850:	2892703a 	and	r9,r5,r2
   24854:	3884703a 	and	r2,r7,r2
   24858:	280ad7fa 	srli	r5,r5,31
   2485c:	481290fa 	slli	r9,r9,3
   24860:	2018d77a 	srli	r12,r4,29
   24864:	100490fa 	slli	r2,r2,3
   24868:	3016d77a 	srli	r11,r6,29
   2486c:	defffb04 	addi	sp,sp,-20
   24870:	4201ffcc 	andi	r8,r8,2047
   24874:	dc800215 	stw	r18,8(sp)
   24878:	dc400115 	stw	r17,4(sp)
   2487c:	1c81ffcc 	andi	r18,r3,2047
   24880:	dfc00415 	stw	ra,16(sp)
   24884:	dcc00315 	stw	r19,12(sp)
   24888:	dc000015 	stw	r16,0(sp)
   2488c:	4281ffd8 	cmpnei	r10,r8,2047
   24890:	2823883a 	mov	r17,r5
   24894:	201c90fa 	slli	r14,r4,3
   24898:	380ed7fa 	srli	r7,r7,31
   2489c:	301a90fa 	slli	r13,r6,3
   248a0:	29403fcc 	andi	r5,r5,255
   248a4:	6252b03a 	or	r9,r12,r9
   248a8:	589eb03a 	or	r15,r11,r2
   248ac:	9207c83a 	sub	r3,r18,r8
   248b0:	50006826 	beq	r10,zero,24a54 <__subdf3+0x214>
   248b4:	3ac0005c 	xori	r11,r7,1
   248b8:	2ac07326 	beq	r5,r11,24a88 <__subdf3+0x248>
   248bc:	00c0590e 	bge	zero,r3,24a24 <__subdf3+0x1e4>
   248c0:	4000691e 	bne	r8,zero,24a68 <__subdf3+0x228>
   248c4:	7b44b03a 	or	r2,r15,r13
   248c8:	1000fb26 	beq	r2,zero,24cb8 <__subdf3+0x478>
   248cc:	18bfffc4 	addi	r2,r3,-1
   248d0:	10019126 	beq	r2,zero,24f18 <__subdf3+0x6d8>
   248d4:	18c1ffd8 	cmpnei	r3,r3,2047
   248d8:	1800c326 	beq	r3,zero,24be8 <__subdf3+0x3a8>
   248dc:	1007883a 	mov	r3,r2
   248e0:	18800e48 	cmpgei	r2,r3,57
   248e4:	1000651e 	bne	r2,zero,24a7c <__subdf3+0x23c>
   248e8:	18800808 	cmpgei	r2,r3,32
   248ec:	1001331e 	bne	r2,zero,24dbc <__subdf3+0x57c>
   248f0:	00800804 	movi	r2,32
   248f4:	10c5c83a 	sub	r2,r2,r3
   248f8:	78a0983a 	sll	r16,r15,r2
   248fc:	68c8d83a 	srl	r4,r13,r3
   24900:	689a983a 	sll	r13,r13,r2
   24904:	78c4d83a 	srl	r2,r15,r3
   24908:	8120b03a 	or	r16,r16,r4
   2490c:	681ac03a 	cmpne	r13,r13,zero
   24910:	8360b03a 	or	r16,r16,r13
   24914:	4893c83a 	sub	r9,r9,r2
   24918:	7421c83a 	sub	r16,r14,r16
   2491c:	7409803a 	cmpltu	r4,r14,r16
   24920:	4909c83a 	sub	r4,r9,r4
   24924:	2080202c 	andhi	r2,r4,128
   24928:	10009326 	beq	r2,zero,24b78 <__subdf3+0x338>
   2492c:	04c02034 	movhi	r19,128
   24930:	9cffffc4 	addi	r19,r19,-1
   24934:	24e6703a 	and	r19,r4,r19
   24938:	9800b926 	beq	r19,zero,24c20 <__subdf3+0x3e0>
   2493c:	9809883a 	mov	r4,r19
   24940:	00252900 	call	25290 <__clzsi2>
   24944:	10fffe04 	addi	r3,r2,-8
   24948:	01000804 	movi	r4,32
   2494c:	20c9c83a 	sub	r4,r4,r3
   24950:	8108d83a 	srl	r4,r16,r4
   24954:	98e6983a 	sll	r19,r19,r3
   24958:	80e0983a 	sll	r16,r16,r3
   2495c:	24c8b03a 	or	r4,r4,r19
   24960:	1c80b816 	blt	r3,r18,24c44 <__subdf3+0x404>
   24964:	1c87c83a 	sub	r3,r3,r18
   24968:	19400044 	addi	r5,r3,1
   2496c:	28800808 	cmpgei	r2,r5,32
   24970:	1000751e 	bne	r2,zero,24b48 <__subdf3+0x308>
   24974:	00800804 	movi	r2,32
   24978:	1145c83a 	sub	r2,r2,r5
   2497c:	8146d83a 	srl	r3,r16,r5
   24980:	80a0983a 	sll	r16,r16,r2
   24984:	2084983a 	sll	r2,r4,r2
   24988:	2148d83a 	srl	r4,r4,r5
   2498c:	8020c03a 	cmpne	r16,r16,zero
   24990:	10c4b03a 	or	r2,r2,r3
   24994:	1420b03a 	or	r16,r2,r16
   24998:	0025883a 	mov	r18,zero
   2499c:	808001cc 	andi	r2,r16,7
   249a0:	10000726 	beq	r2,zero,249c0 <__subdf3+0x180>
   249a4:	808003cc 	andi	r2,r16,15
   249a8:	10800120 	cmpeqi	r2,r2,4
   249ac:	1000041e 	bne	r2,zero,249c0 <__subdf3+0x180>
   249b0:	80800104 	addi	r2,r16,4
   249b4:	1421803a 	cmpltu	r16,r2,r16
   249b8:	2409883a 	add	r4,r4,r16
   249bc:	1021883a 	mov	r16,r2
   249c0:	2080202c 	andhi	r2,r4,128
   249c4:	10006e26 	beq	r2,zero,24b80 <__subdf3+0x340>
   249c8:	90c00044 	addi	r3,r18,1
   249cc:	1881ffe0 	cmpeqi	r2,r3,2047
   249d0:	18c1ffcc 	andi	r3,r3,2047
   249d4:	1000801e 	bne	r2,zero,24bd8 <__subdf3+0x398>
   249d8:	00bfe034 	movhi	r2,65408
   249dc:	10bfffc4 	addi	r2,r2,-1
   249e0:	2088703a 	and	r4,r4,r2
   249e4:	2004977a 	slli	r2,r4,29
   249e8:	2008927a 	slli	r4,r4,9
   249ec:	8020d0fa 	srli	r16,r16,3
   249f0:	2008d33a 	srli	r4,r4,12
   249f4:	1404b03a 	or	r2,r2,r16
   249f8:	1806953a 	slli	r3,r3,20
   249fc:	882297fa 	slli	r17,r17,31
   24a00:	1906b03a 	or	r3,r3,r4
   24a04:	1c46b03a 	or	r3,r3,r17
   24a08:	dfc00417 	ldw	ra,16(sp)
   24a0c:	dcc00317 	ldw	r19,12(sp)
   24a10:	dc800217 	ldw	r18,8(sp)
   24a14:	dc400117 	ldw	r17,4(sp)
   24a18:	dc000017 	ldw	r16,0(sp)
   24a1c:	dec00504 	addi	sp,sp,20
   24a20:	f800283a 	ret
   24a24:	18002c26 	beq	r3,zero,24ad8 <__subdf3+0x298>
   24a28:	4487c83a 	sub	r3,r8,r18
   24a2c:	5823883a 	mov	r17,r11
   24a30:	9000bb1e 	bne	r18,zero,24d20 <__subdf3+0x4e0>
   24a34:	4b84b03a 	or	r2,r9,r14
   24a38:	10011726 	beq	r2,zero,24e98 <__subdf3+0x658>
   24a3c:	18bfffc4 	addi	r2,r3,-1
   24a40:	10016326 	beq	r2,zero,24fd0 <__subdf3+0x790>
   24a44:	18c1ffd8 	cmpnei	r3,r3,2047
   24a48:	18012c26 	beq	r3,zero,24efc <__subdf3+0x6bc>
   24a4c:	1007883a 	mov	r3,r2
   24a50:	0000b506 	br	24d28 <__subdf3+0x4e8>
   24a54:	7b44b03a 	or	r2,r15,r13
   24a58:	103f9626 	beq	r2,zero,248b4 <__subdf3+0x74>
   24a5c:	3ac03fcc 	andi	r11,r7,255
   24a60:	29c07d26 	beq	r5,r7,24c58 <__subdf3+0x418>
   24a64:	00ffef0e 	bge	zero,r3,24a24 <__subdf3+0x1e4>
   24a68:	9081ffd8 	cmpnei	r2,r18,2047
   24a6c:	10005e26 	beq	r2,zero,24be8 <__subdf3+0x3a8>
   24a70:	18800e48 	cmpgei	r2,r3,57
   24a74:	7bc02034 	orhi	r15,r15,128
   24a78:	103f9b26 	beq	r2,zero,248e8 <__subdf3+0xa8>
   24a7c:	7b60b03a 	or	r16,r15,r13
   24a80:	8020c03a 	cmpne	r16,r16,zero
   24a84:	003fa406 	br	24918 <__subdf3+0xd8>
   24a88:	00c0730e 	bge	zero,r3,24c58 <__subdf3+0x418>
   24a8c:	40002626 	beq	r8,zero,24b28 <__subdf3+0x2e8>
   24a90:	9081ffd8 	cmpnei	r2,r18,2047
   24a94:	10005426 	beq	r2,zero,24be8 <__subdf3+0x3a8>
   24a98:	7bc02034 	orhi	r15,r15,128
   24a9c:	18800e48 	cmpgei	r2,r3,57
   24aa0:	1000431e 	bne	r2,zero,24bb0 <__subdf3+0x370>
   24aa4:	18800808 	cmpgei	r2,r3,32
   24aa8:	1000de26 	beq	r2,zero,24e24 <__subdf3+0x5e4>
   24aac:	1c3ff804 	addi	r16,r3,-32
   24ab0:	18800820 	cmpeqi	r2,r3,32
   24ab4:	7c0ad83a 	srl	r5,r15,r16
   24ab8:	1000041e 	bne	r2,zero,24acc <__subdf3+0x28c>
   24abc:	00801004 	movi	r2,64
   24ac0:	10c5c83a 	sub	r2,r2,r3
   24ac4:	7884983a 	sll	r2,r15,r2
   24ac8:	689ab03a 	or	r13,r13,r2
   24acc:	6820c03a 	cmpne	r16,r13,zero
   24ad0:	8160b03a 	or	r16,r16,r5
   24ad4:	00003806 	br	24bb8 <__subdf3+0x378>
   24ad8:	90800044 	addi	r2,r18,1
   24adc:	1081ff8c 	andi	r2,r2,2046
   24ae0:	1000a01e 	bne	r2,zero,24d64 <__subdf3+0x524>
   24ae4:	4b8ab03a 	or	r5,r9,r14
   24ae8:	7b44b03a 	or	r2,r15,r13
   24aec:	9000f11e 	bne	r18,zero,24eb4 <__subdf3+0x674>
   24af0:	28012e26 	beq	r5,zero,24fac <__subdf3+0x76c>
   24af4:	10010e26 	beq	r2,zero,24f30 <__subdf3+0x6f0>
   24af8:	7361c83a 	sub	r16,r14,r13
   24afc:	7405803a 	cmpltu	r2,r14,r16
   24b00:	4bc9c83a 	sub	r4,r9,r15
   24b04:	2089c83a 	sub	r4,r4,r2
   24b08:	2080202c 	andhi	r2,r4,128
   24b0c:	10016d26 	beq	r2,zero,250c4 <__subdf3+0x884>
   24b10:	6ba1c83a 	sub	r16,r13,r14
   24b14:	7a49c83a 	sub	r4,r15,r9
   24b18:	6c1b803a 	cmpltu	r13,r13,r16
   24b1c:	2349c83a 	sub	r4,r4,r13
   24b20:	5823883a 	mov	r17,r11
   24b24:	003f9d06 	br	2499c <__subdf3+0x15c>
   24b28:	7b44b03a 	or	r2,r15,r13
   24b2c:	10006226 	beq	r2,zero,24cb8 <__subdf3+0x478>
   24b30:	18bfffc4 	addi	r2,r3,-1
   24b34:	1000e926 	beq	r2,zero,24edc <__subdf3+0x69c>
   24b38:	18c1ffd8 	cmpnei	r3,r3,2047
   24b3c:	18012a26 	beq	r3,zero,24fe8 <__subdf3+0x7a8>
   24b40:	1007883a 	mov	r3,r2
   24b44:	003fd506 	br	24a9c <__subdf3+0x25c>
   24b48:	18fff844 	addi	r3,r3,-31
   24b4c:	28800820 	cmpeqi	r2,r5,32
   24b50:	20c6d83a 	srl	r3,r4,r3
   24b54:	1000041e 	bne	r2,zero,24b68 <__subdf3+0x328>
   24b58:	00801004 	movi	r2,64
   24b5c:	114bc83a 	sub	r5,r2,r5
   24b60:	2148983a 	sll	r4,r4,r5
   24b64:	8120b03a 	or	r16,r16,r4
   24b68:	8020c03a 	cmpne	r16,r16,zero
   24b6c:	80e0b03a 	or	r16,r16,r3
   24b70:	0009883a 	mov	r4,zero
   24b74:	0025883a 	mov	r18,zero
   24b78:	808001cc 	andi	r2,r16,7
   24b7c:	103f891e 	bne	r2,zero,249a4 <__subdf3+0x164>
   24b80:	8020d0fa 	srli	r16,r16,3
   24b84:	2004977a 	slli	r2,r4,29
   24b88:	2012d0fa 	srli	r9,r4,3
   24b8c:	9007883a 	mov	r3,r18
   24b90:	8084b03a 	or	r2,r16,r2
   24b94:	1901ffe0 	cmpeqi	r4,r3,2047
   24b98:	2000191e 	bne	r4,zero,24c00 <__subdf3+0x3c0>
   24b9c:	01000434 	movhi	r4,16
   24ba0:	213fffc4 	addi	r4,r4,-1
   24ba4:	4908703a 	and	r4,r9,r4
   24ba8:	18c1ffcc 	andi	r3,r3,2047
   24bac:	003f9206 	br	249f8 <__subdf3+0x1b8>
   24bb0:	7b60b03a 	or	r16,r15,r13
   24bb4:	8020c03a 	cmpne	r16,r16,zero
   24bb8:	83a1883a 	add	r16,r16,r14
   24bbc:	8389803a 	cmpltu	r4,r16,r14
   24bc0:	2249883a 	add	r4,r4,r9
   24bc4:	2080202c 	andhi	r2,r4,128
   24bc8:	103feb26 	beq	r2,zero,24b78 <__subdf3+0x338>
   24bcc:	94800044 	addi	r18,r18,1
   24bd0:	9081ffe0 	cmpeqi	r2,r18,2047
   24bd4:	10006f26 	beq	r2,zero,24d94 <__subdf3+0x554>
   24bd8:	00c1ffc4 	movi	r3,2047
   24bdc:	0009883a 	mov	r4,zero
   24be0:	0005883a 	mov	r2,zero
   24be4:	003f8406 	br	249f8 <__subdf3+0x1b8>
   24be8:	4806977a 	slli	r3,r9,29
   24bec:	00880034 	movhi	r2,8192
   24bf0:	10bfffc4 	addi	r2,r2,-1
   24bf4:	4812d0fa 	srli	r9,r9,3
   24bf8:	2088703a 	and	r4,r4,r2
   24bfc:	20c4b03a 	or	r2,r4,r3
   24c00:	4886b03a 	or	r3,r9,r2
   24c04:	18013726 	beq	r3,zero,250e4 <__subdf3+0x8a4>
   24c08:	00c00434 	movhi	r3,16
   24c0c:	18ffffc4 	addi	r3,r3,-1
   24c10:	49000234 	orhi	r4,r9,8
   24c14:	20c8703a 	and	r4,r4,r3
   24c18:	00c1ffc4 	movi	r3,2047
   24c1c:	003f7606 	br	249f8 <__subdf3+0x1b8>
   24c20:	8009883a 	mov	r4,r16
   24c24:	00252900 	call	25290 <__clzsi2>
   24c28:	10c00604 	addi	r3,r2,24
   24c2c:	19000808 	cmpgei	r4,r3,32
   24c30:	203f4526 	beq	r4,zero,24948 <__subdf3+0x108>
   24c34:	113ffe04 	addi	r4,r2,-8
   24c38:	8108983a 	sll	r4,r16,r4
   24c3c:	0021883a 	mov	r16,zero
   24c40:	1cbf480e 	bge	r3,r18,24964 <__subdf3+0x124>
   24c44:	00bfe034 	movhi	r2,65408
   24c48:	10bfffc4 	addi	r2,r2,-1
   24c4c:	90e5c83a 	sub	r18,r18,r3
   24c50:	2088703a 	and	r4,r4,r2
   24c54:	003f5106 	br	2499c <__subdf3+0x15c>
   24c58:	18001e26 	beq	r3,zero,24cd4 <__subdf3+0x494>
   24c5c:	4487c83a 	sub	r3,r8,r18
   24c60:	90006826 	beq	r18,zero,24e04 <__subdf3+0x5c4>
   24c64:	5000a526 	beq	r10,zero,24efc <__subdf3+0x6bc>
   24c68:	4a402034 	orhi	r9,r9,128
   24c6c:	18800e48 	cmpgei	r2,r3,57
   24c70:	1000b61e 	bne	r2,zero,24f4c <__subdf3+0x70c>
   24c74:	18800808 	cmpgei	r2,r3,32
   24c78:	1001021e 	bne	r2,zero,25084 <__subdf3+0x844>
   24c7c:	00800804 	movi	r2,32
   24c80:	10c5c83a 	sub	r2,r2,r3
   24c84:	48a0983a 	sll	r16,r9,r2
   24c88:	70c8d83a 	srl	r4,r14,r3
   24c8c:	7084983a 	sll	r2,r14,r2
   24c90:	48d2d83a 	srl	r9,r9,r3
   24c94:	8120b03a 	or	r16,r16,r4
   24c98:	1004c03a 	cmpne	r2,r2,zero
   24c9c:	80a0b03a 	or	r16,r16,r2
   24ca0:	7a5f883a 	add	r15,r15,r9
   24ca4:	8361883a 	add	r16,r16,r13
   24ca8:	8349803a 	cmpltu	r4,r16,r13
   24cac:	23c9883a 	add	r4,r4,r15
   24cb0:	4025883a 	mov	r18,r8
   24cb4:	003fc306 	br	24bc4 <__subdf3+0x384>
   24cb8:	480a977a 	slli	r5,r9,29
   24cbc:	00880034 	movhi	r2,8192
   24cc0:	10bfffc4 	addi	r2,r2,-1
   24cc4:	2088703a 	and	r4,r4,r2
   24cc8:	4812d0fa 	srli	r9,r9,3
   24ccc:	2144b03a 	or	r2,r4,r5
   24cd0:	003fb006 	br	24b94 <__subdf3+0x354>
   24cd4:	90800044 	addi	r2,r18,1
   24cd8:	1141ff8c 	andi	r5,r2,2046
   24cdc:	28005c1e 	bne	r5,zero,24e50 <__subdf3+0x610>
   24ce0:	4b84b03a 	or	r2,r9,r14
   24ce4:	9000a71e 	bne	r18,zero,24f84 <__subdf3+0x744>
   24ce8:	1000df26 	beq	r2,zero,25068 <__subdf3+0x828>
   24cec:	7b44b03a 	or	r2,r15,r13
   24cf0:	10008f26 	beq	r2,zero,24f30 <__subdf3+0x6f0>
   24cf4:	7361883a 	add	r16,r14,r13
   24cf8:	4bc9883a 	add	r4,r9,r15
   24cfc:	839d803a 	cmpltu	r14,r16,r14
   24d00:	2389883a 	add	r4,r4,r14
   24d04:	2080202c 	andhi	r2,r4,128
   24d08:	103f9b26 	beq	r2,zero,24b78 <__subdf3+0x338>
   24d0c:	00bfe034 	movhi	r2,65408
   24d10:	10bfffc4 	addi	r2,r2,-1
   24d14:	2088703a 	and	r4,r4,r2
   24d18:	04800044 	movi	r18,1
   24d1c:	003f9606 	br	24b78 <__subdf3+0x338>
   24d20:	50007626 	beq	r10,zero,24efc <__subdf3+0x6bc>
   24d24:	4a402034 	orhi	r9,r9,128
   24d28:	18800e48 	cmpgei	r2,r3,57
   24d2c:	10002e1e 	bne	r2,zero,24de8 <__subdf3+0x5a8>
   24d30:	18800808 	cmpgei	r2,r3,32
   24d34:	1000881e 	bne	r2,zero,24f58 <__subdf3+0x718>
   24d38:	00800804 	movi	r2,32
   24d3c:	10c5c83a 	sub	r2,r2,r3
   24d40:	48a0983a 	sll	r16,r9,r2
   24d44:	70c8d83a 	srl	r4,r14,r3
   24d48:	709c983a 	sll	r14,r14,r2
   24d4c:	48d2d83a 	srl	r9,r9,r3
   24d50:	8120b03a 	or	r16,r16,r4
   24d54:	701cc03a 	cmpne	r14,r14,zero
   24d58:	83a0b03a 	or	r16,r16,r14
   24d5c:	7a5fc83a 	sub	r15,r15,r9
   24d60:	00002306 	br	24df0 <__subdf3+0x5b0>
   24d64:	7361c83a 	sub	r16,r14,r13
   24d68:	4be7c83a 	sub	r19,r9,r15
   24d6c:	7409803a 	cmpltu	r4,r14,r16
   24d70:	9927c83a 	sub	r19,r19,r4
   24d74:	9880202c 	andhi	r2,r19,128
   24d78:	1000411e 	bne	r2,zero,24e80 <__subdf3+0x640>
   24d7c:	84c4b03a 	or	r2,r16,r19
   24d80:	103eed1e 	bne	r2,zero,24938 <__subdf3+0xf8>
   24d84:	0013883a 	mov	r9,zero
   24d88:	0023883a 	mov	r17,zero
   24d8c:	003f8306 	br	24b9c <__subdf3+0x35c>
   24d90:	04800084 	movi	r18,2
   24d94:	00bfe034 	movhi	r2,65408
   24d98:	10bfffc4 	addi	r2,r2,-1
   24d9c:	8006d07a 	srli	r3,r16,1
   24da0:	2088703a 	and	r4,r4,r2
   24da4:	200497fa 	slli	r2,r4,31
   24da8:	8400004c 	andi	r16,r16,1
   24dac:	1c20b03a 	or	r16,r3,r16
   24db0:	2008d07a 	srli	r4,r4,1
   24db4:	1420b03a 	or	r16,r2,r16
   24db8:	003ef806 	br	2499c <__subdf3+0x15c>
   24dbc:	1c3ff804 	addi	r16,r3,-32
   24dc0:	18800820 	cmpeqi	r2,r3,32
   24dc4:	7c0ad83a 	srl	r5,r15,r16
   24dc8:	1000041e 	bne	r2,zero,24ddc <__subdf3+0x59c>
   24dcc:	00801004 	movi	r2,64
   24dd0:	10c5c83a 	sub	r2,r2,r3
   24dd4:	7884983a 	sll	r2,r15,r2
   24dd8:	689ab03a 	or	r13,r13,r2
   24ddc:	6820c03a 	cmpne	r16,r13,zero
   24de0:	8160b03a 	or	r16,r16,r5
   24de4:	003ecc06 	br	24918 <__subdf3+0xd8>
   24de8:	4b92b03a 	or	r9,r9,r14
   24dec:	4820c03a 	cmpne	r16,r9,zero
   24df0:	6c21c83a 	sub	r16,r13,r16
   24df4:	6c09803a 	cmpltu	r4,r13,r16
   24df8:	7909c83a 	sub	r4,r15,r4
   24dfc:	4025883a 	mov	r18,r8
   24e00:	003ec806 	br	24924 <__subdf3+0xe4>
   24e04:	4b84b03a 	or	r2,r9,r14
   24e08:	10007e26 	beq	r2,zero,25004 <__subdf3+0x7c4>
   24e0c:	18bfffc4 	addi	r2,r3,-1
   24e10:	1000a726 	beq	r2,zero,250b0 <__subdf3+0x870>
   24e14:	18c1ffd8 	cmpnei	r3,r3,2047
   24e18:	18003826 	beq	r3,zero,24efc <__subdf3+0x6bc>
   24e1c:	1007883a 	mov	r3,r2
   24e20:	003f9206 	br	24c6c <__subdf3+0x42c>
   24e24:	00800804 	movi	r2,32
   24e28:	10c5c83a 	sub	r2,r2,r3
   24e2c:	78a0983a 	sll	r16,r15,r2
   24e30:	68c8d83a 	srl	r4,r13,r3
   24e34:	689a983a 	sll	r13,r13,r2
   24e38:	78c4d83a 	srl	r2,r15,r3
   24e3c:	8120b03a 	or	r16,r16,r4
   24e40:	681ac03a 	cmpne	r13,r13,zero
   24e44:	8360b03a 	or	r16,r16,r13
   24e48:	4893883a 	add	r9,r9,r2
   24e4c:	003f5a06 	br	24bb8 <__subdf3+0x378>
   24e50:	10c1ffe0 	cmpeqi	r3,r2,2047
   24e54:	183f601e 	bne	r3,zero,24bd8 <__subdf3+0x398>
   24e58:	735b883a 	add	r13,r14,r13
   24e5c:	6b9d803a 	cmpltu	r14,r13,r14
   24e60:	4bc9883a 	add	r4,r9,r15
   24e64:	2389883a 	add	r4,r4,r14
   24e68:	202097fa 	slli	r16,r4,31
   24e6c:	681ad07a 	srli	r13,r13,1
   24e70:	2008d07a 	srli	r4,r4,1
   24e74:	1025883a 	mov	r18,r2
   24e78:	8360b03a 	or	r16,r16,r13
   24e7c:	003f3e06 	br	24b78 <__subdf3+0x338>
   24e80:	6ba1c83a 	sub	r16,r13,r14
   24e84:	7a49c83a 	sub	r4,r15,r9
   24e88:	6c1b803a 	cmpltu	r13,r13,r16
   24e8c:	2367c83a 	sub	r19,r4,r13
   24e90:	5823883a 	mov	r17,r11
   24e94:	003ea806 	br	24938 <__subdf3+0xf8>
   24e98:	7808977a 	slli	r4,r15,29
   24e9c:	00880034 	movhi	r2,8192
   24ea0:	10bfffc4 	addi	r2,r2,-1
   24ea4:	308c703a 	and	r6,r6,r2
   24ea8:	7812d0fa 	srli	r9,r15,3
   24eac:	3104b03a 	or	r2,r6,r4
   24eb0:	003f3806 	br	24b94 <__subdf3+0x354>
   24eb4:	28005a1e 	bne	r5,zero,25020 <__subdf3+0x7e0>
   24eb8:	10008526 	beq	r2,zero,250d0 <__subdf3+0x890>
   24ebc:	7806977a 	slli	r3,r15,29
   24ec0:	00880034 	movhi	r2,8192
   24ec4:	10bfffc4 	addi	r2,r2,-1
   24ec8:	3084703a 	and	r2,r6,r2
   24ecc:	7812d0fa 	srli	r9,r15,3
   24ed0:	10c4b03a 	or	r2,r2,r3
   24ed4:	5823883a 	mov	r17,r11
   24ed8:	003f4906 	br	24c00 <__subdf3+0x3c0>
   24edc:	7361883a 	add	r16,r14,r13
   24ee0:	4bc9883a 	add	r4,r9,r15
   24ee4:	839d803a 	cmpltu	r14,r16,r14
   24ee8:	2389883a 	add	r4,r4,r14
   24eec:	2080202c 	andhi	r2,r4,128
   24ef0:	103fa71e 	bne	r2,zero,24d90 <__subdf3+0x550>
   24ef4:	04800044 	movi	r18,1
   24ef8:	003f1f06 	br	24b78 <__subdf3+0x338>
   24efc:	7806977a 	slli	r3,r15,29
   24f00:	00880034 	movhi	r2,8192
   24f04:	10bfffc4 	addi	r2,r2,-1
   24f08:	3084703a 	and	r2,r6,r2
   24f0c:	7812d0fa 	srli	r9,r15,3
   24f10:	10c4b03a 	or	r2,r2,r3
   24f14:	003f3a06 	br	24c00 <__subdf3+0x3c0>
   24f18:	7361c83a 	sub	r16,r14,r13
   24f1c:	4bc9c83a 	sub	r4,r9,r15
   24f20:	741d803a 	cmpltu	r14,r14,r16
   24f24:	2389c83a 	sub	r4,r4,r14
   24f28:	04800044 	movi	r18,1
   24f2c:	003e7d06 	br	24924 <__subdf3+0xe4>
   24f30:	480a977a 	slli	r5,r9,29
   24f34:	00880034 	movhi	r2,8192
   24f38:	10bfffc4 	addi	r2,r2,-1
   24f3c:	2084703a 	and	r2,r4,r2
   24f40:	4812d0fa 	srli	r9,r9,3
   24f44:	1144b03a 	or	r2,r2,r5
   24f48:	003f1406 	br	24b9c <__subdf3+0x35c>
   24f4c:	4b92b03a 	or	r9,r9,r14
   24f50:	4820c03a 	cmpne	r16,r9,zero
   24f54:	003f5306 	br	24ca4 <__subdf3+0x464>
   24f58:	1c3ff804 	addi	r16,r3,-32
   24f5c:	19000820 	cmpeqi	r4,r3,32
   24f60:	4c04d83a 	srl	r2,r9,r16
   24f64:	2000041e 	bne	r4,zero,24f78 <__subdf3+0x738>
   24f68:	01001004 	movi	r4,64
   24f6c:	20c7c83a 	sub	r3,r4,r3
   24f70:	48d2983a 	sll	r9,r9,r3
   24f74:	725cb03a 	or	r14,r14,r9
   24f78:	7020c03a 	cmpne	r16,r14,zero
   24f7c:	80a0b03a 	or	r16,r16,r2
   24f80:	003f9b06 	br	24df0 <__subdf3+0x5b0>
   24f84:	103fdd26 	beq	r2,zero,24efc <__subdf3+0x6bc>
   24f88:	7b5ab03a 	or	r13,r15,r13
   24f8c:	480a977a 	slli	r5,r9,29
   24f90:	4812d0fa 	srli	r9,r9,3
   24f94:	6800251e 	bne	r13,zero,2502c <__subdf3+0x7ec>
   24f98:	00880034 	movhi	r2,8192
   24f9c:	10bfffc4 	addi	r2,r2,-1
   24fa0:	2084703a 	and	r2,r4,r2
   24fa4:	1144b03a 	or	r2,r2,r5
   24fa8:	003f1506 	br	24c00 <__subdf3+0x3c0>
   24fac:	103f7526 	beq	r2,zero,24d84 <__subdf3+0x544>
   24fb0:	7808977a 	slli	r4,r15,29
   24fb4:	00880034 	movhi	r2,8192
   24fb8:	10bfffc4 	addi	r2,r2,-1
   24fbc:	3084703a 	and	r2,r6,r2
   24fc0:	7812d0fa 	srli	r9,r15,3
   24fc4:	1104b03a 	or	r2,r2,r4
   24fc8:	5823883a 	mov	r17,r11
   24fcc:	003ef306 	br	24b9c <__subdf3+0x35c>
   24fd0:	6ba1c83a 	sub	r16,r13,r14
   24fd4:	7a49c83a 	sub	r4,r15,r9
   24fd8:	6c1b803a 	cmpltu	r13,r13,r16
   24fdc:	2349c83a 	sub	r4,r4,r13
   24fe0:	04800044 	movi	r18,1
   24fe4:	003e4f06 	br	24924 <__subdf3+0xe4>
   24fe8:	4806977a 	slli	r3,r9,29
   24fec:	00880034 	movhi	r2,8192
   24ff0:	10bfffc4 	addi	r2,r2,-1
   24ff4:	2084703a 	and	r2,r4,r2
   24ff8:	4812d0fa 	srli	r9,r9,3
   24ffc:	10c4b03a 	or	r2,r2,r3
   25000:	003eff06 	br	24c00 <__subdf3+0x3c0>
   25004:	7808977a 	slli	r4,r15,29
   25008:	00880034 	movhi	r2,8192
   2500c:	10bfffc4 	addi	r2,r2,-1
   25010:	3084703a 	and	r2,r6,r2
   25014:	7812d0fa 	srli	r9,r15,3
   25018:	1104b03a 	or	r2,r2,r4
   2501c:	003edd06 	br	24b94 <__subdf3+0x354>
   25020:	480a977a 	slli	r5,r9,29
   25024:	4812d0fa 	srli	r9,r9,3
   25028:	103fdb26 	beq	r2,zero,24f98 <__subdf3+0x758>
   2502c:	00c80034 	movhi	r3,8192
   25030:	18ffffc4 	addi	r3,r3,-1
   25034:	20c4703a 	and	r2,r4,r3
   25038:	4900022c 	andhi	r4,r9,8
   2503c:	1144b03a 	or	r2,r2,r5
   25040:	203eef26 	beq	r4,zero,24c00 <__subdf3+0x3c0>
   25044:	7808d0fa 	srli	r4,r15,3
   25048:	2140022c 	andhi	r5,r4,8
   2504c:	283eec1e 	bne	r5,zero,24c00 <__subdf3+0x3c0>
   25050:	7804977a 	slli	r2,r15,29
   25054:	30cc703a 	and	r6,r6,r3
   25058:	5823883a 	mov	r17,r11
   2505c:	3084b03a 	or	r2,r6,r2
   25060:	2013883a 	mov	r9,r4
   25064:	003ee606 	br	24c00 <__subdf3+0x3c0>
   25068:	7808977a 	slli	r4,r15,29
   2506c:	00880034 	movhi	r2,8192
   25070:	10bfffc4 	addi	r2,r2,-1
   25074:	3084703a 	and	r2,r6,r2
   25078:	7812d0fa 	srli	r9,r15,3
   2507c:	1104b03a 	or	r2,r2,r4
   25080:	003ec606 	br	24b9c <__subdf3+0x35c>
   25084:	18bff804 	addi	r2,r3,-32
   25088:	19000820 	cmpeqi	r4,r3,32
   2508c:	4884d83a 	srl	r2,r9,r2
   25090:	2000041e 	bne	r4,zero,250a4 <__subdf3+0x864>
   25094:	01001004 	movi	r4,64
   25098:	20c7c83a 	sub	r3,r4,r3
   2509c:	48d2983a 	sll	r9,r9,r3
   250a0:	725cb03a 	or	r14,r14,r9
   250a4:	7020c03a 	cmpne	r16,r14,zero
   250a8:	80a0b03a 	or	r16,r16,r2
   250ac:	003efd06 	br	24ca4 <__subdf3+0x464>
   250b0:	7361883a 	add	r16,r14,r13
   250b4:	4bc9883a 	add	r4,r9,r15
   250b8:	835b803a 	cmpltu	r13,r16,r13
   250bc:	2349883a 	add	r4,r4,r13
   250c0:	003f8a06 	br	24eec <__subdf3+0x6ac>
   250c4:	8104b03a 	or	r2,r16,r4
   250c8:	103f2e26 	beq	r2,zero,24d84 <__subdf3+0x544>
   250cc:	003eaa06 	br	24b78 <__subdf3+0x338>
   250d0:	02400434 	movhi	r9,16
   250d4:	0023883a 	mov	r17,zero
   250d8:	00bfffc4 	movi	r2,-1
   250dc:	4a7fffc4 	addi	r9,r9,-1
   250e0:	003ec906 	br	24c08 <__subdf3+0x3c8>
   250e4:	0005883a 	mov	r2,zero
   250e8:	00c1ffc4 	movi	r3,2047
   250ec:	0009883a 	mov	r4,zero
   250f0:	003e4106 	br	249f8 <__subdf3+0x1b8>

000250f4 <__unorddf2>:
   250f4:	2806d53a 	srli	r3,r5,20
   250f8:	3810d53a 	srli	r8,r7,20
   250fc:	02400434 	movhi	r9,16
   25100:	18c1ffcc 	andi	r3,r3,2047
   25104:	4a7fffc4 	addi	r9,r9,-1
   25108:	18c1ffd8 	cmpnei	r3,r3,2047
   2510c:	2a4a703a 	and	r5,r5,r9
   25110:	3a4e703a 	and	r7,r7,r9
   25114:	4201ffcc 	andi	r8,r8,2047
   25118:	18000426 	beq	r3,zero,2512c <__unorddf2+0x38>
   2511c:	4201ffd8 	cmpnei	r8,r8,2047
   25120:	40000626 	beq	r8,zero,2513c <__unorddf2+0x48>
   25124:	0005883a 	mov	r2,zero
   25128:	f800283a 	ret
   2512c:	290ab03a 	or	r5,r5,r4
   25130:	283ffa26 	beq	r5,zero,2511c <__unorddf2+0x28>
   25134:	00800044 	movi	r2,1
   25138:	f800283a 	ret
   2513c:	398eb03a 	or	r7,r7,r6
   25140:	3804c03a 	cmpne	r2,r7,zero
   25144:	f800283a 	ret

00025148 <__floatsidf>:
   25148:	defffd04 	addi	sp,sp,-12
   2514c:	dfc00215 	stw	ra,8(sp)
   25150:	dc400115 	stw	r17,4(sp)
   25154:	dc000015 	stw	r16,0(sp)
   25158:	20001326 	beq	r4,zero,251a8 <__floatsidf+0x60>
   2515c:	2022d7fa 	srli	r17,r4,31
   25160:	2021883a 	mov	r16,r4
   25164:	20002416 	blt	r4,zero,251f8 <__floatsidf+0xb0>
   25168:	8009883a 	mov	r4,r16
   2516c:	00252900 	call	25290 <__clzsi2>
   25170:	01010784 	movi	r4,1054
   25174:	2089c83a 	sub	r4,r4,r2
   25178:	114002c8 	cmpgei	r5,r2,11
   2517c:	20c1ffcc 	andi	r3,r4,2047
   25180:	2800161e 	bne	r5,zero,251dc <__floatsidf+0x94>
   25184:	010002c4 	movi	r4,11
   25188:	2089c83a 	sub	r4,r4,r2
   2518c:	810ad83a 	srl	r5,r16,r4
   25190:	01000434 	movhi	r4,16
   25194:	10800544 	addi	r2,r2,21
   25198:	213fffc4 	addi	r4,r4,-1
   2519c:	8084983a 	sll	r2,r16,r2
   251a0:	290a703a 	and	r5,r5,r4
   251a4:	00000406 	br	251b8 <__floatsidf+0x70>
   251a8:	0023883a 	mov	r17,zero
   251ac:	0007883a 	mov	r3,zero
   251b0:	000b883a 	mov	r5,zero
   251b4:	0005883a 	mov	r2,zero
   251b8:	1808953a 	slli	r4,r3,20
   251bc:	880697fa 	slli	r3,r17,31
   251c0:	2148b03a 	or	r4,r4,r5
   251c4:	20c6b03a 	or	r3,r4,r3
   251c8:	dfc00217 	ldw	ra,8(sp)
   251cc:	dc400117 	ldw	r17,4(sp)
   251d0:	dc000017 	ldw	r16,0(sp)
   251d4:	dec00304 	addi	sp,sp,12
   251d8:	f800283a 	ret
   251dc:	10bffd44 	addi	r2,r2,-11
   251e0:	808a983a 	sll	r5,r16,r2
   251e4:	00800434 	movhi	r2,16
   251e8:	10bfffc4 	addi	r2,r2,-1
   251ec:	288a703a 	and	r5,r5,r2
   251f0:	0005883a 	mov	r2,zero
   251f4:	003ff006 	br	251b8 <__floatsidf+0x70>
   251f8:	0121c83a 	sub	r16,zero,r4
   251fc:	003fda06 	br	25168 <__floatsidf+0x20>

00025200 <__floatunsidf>:
   25200:	defffe04 	addi	sp,sp,-8
   25204:	dc000015 	stw	r16,0(sp)
   25208:	dfc00115 	stw	ra,4(sp)
   2520c:	2021883a 	mov	r16,r4
   25210:	20000f26 	beq	r4,zero,25250 <__floatunsidf+0x50>
   25214:	00252900 	call	25290 <__clzsi2>
   25218:	00c10784 	movi	r3,1054
   2521c:	1887c83a 	sub	r3,r3,r2
   25220:	110002c8 	cmpgei	r4,r2,11
   25224:	18c1ffcc 	andi	r3,r3,2047
   25228:	2000121e 	bne	r4,zero,25274 <__floatunsidf+0x74>
   2522c:	014002c4 	movi	r5,11
   25230:	288bc83a 	sub	r5,r5,r2
   25234:	814ad83a 	srl	r5,r16,r5
   25238:	01000434 	movhi	r4,16
   2523c:	10800544 	addi	r2,r2,21
   25240:	213fffc4 	addi	r4,r4,-1
   25244:	80a0983a 	sll	r16,r16,r2
   25248:	290a703a 	and	r5,r5,r4
   2524c:	00000206 	br	25258 <__floatunsidf+0x58>
   25250:	0007883a 	mov	r3,zero
   25254:	000b883a 	mov	r5,zero
   25258:	1806953a 	slli	r3,r3,20
   2525c:	8005883a 	mov	r2,r16
   25260:	1946b03a 	or	r3,r3,r5
   25264:	dfc00117 	ldw	ra,4(sp)
   25268:	dc000017 	ldw	r16,0(sp)
   2526c:	dec00204 	addi	sp,sp,8
   25270:	f800283a 	ret
   25274:	117ffd44 	addi	r5,r2,-11
   25278:	814a983a 	sll	r5,r16,r5
   2527c:	00800434 	movhi	r2,16
   25280:	10bfffc4 	addi	r2,r2,-1
   25284:	288a703a 	and	r5,r5,r2
   25288:	0021883a 	mov	r16,zero
   2528c:	003ff206 	br	25258 <__floatunsidf+0x58>

00025290 <__clzsi2>:
   25290:	00bfffd4 	movui	r2,65535
   25294:	11000436 	bltu	r2,r4,252a8 <__clzsi2+0x18>
   25298:	20804030 	cmpltui	r2,r4,256
   2529c:	10000e26 	beq	r2,zero,252d8 <__clzsi2+0x48>
   252a0:	01400804 	movi	r5,32
   252a4:	00000406 	br	252b8 <__clzsi2+0x28>
   252a8:	00804034 	movhi	r2,256
   252ac:	20800736 	bltu	r4,r2,252cc <__clzsi2+0x3c>
   252b0:	2008d63a 	srli	r4,r4,24
   252b4:	01400204 	movi	r5,8
   252b8:	00c000f4 	movhi	r3,3
   252bc:	20c7883a 	add	r3,r4,r3
   252c0:	188c2803 	ldbu	r2,12448(r3)
   252c4:	2885c83a 	sub	r2,r5,r2
   252c8:	f800283a 	ret
   252cc:	2008d43a 	srli	r4,r4,16
   252d0:	01400404 	movi	r5,16
   252d4:	003ff806 	br	252b8 <__clzsi2+0x28>
   252d8:	2008d23a 	srli	r4,r4,8
   252dc:	01400604 	movi	r5,24
   252e0:	003ff506 	br	252b8 <__clzsi2+0x28>

000252e4 <__errno>:
   252e4:	008000f4 	movhi	r2,3
   252e8:	1090d017 	ldw	r2,17216(r2)
   252ec:	f800283a 	ret

000252f0 <memset>:
   252f0:	20c000cc 	andi	r3,r4,3
   252f4:	2005883a 	mov	r2,r4
   252f8:	18003626 	beq	r3,zero,253d4 <memset+0xe4>
   252fc:	31ffffc4 	addi	r7,r6,-1
   25300:	30003326 	beq	r6,zero,253d0 <memset+0xe0>
   25304:	2811883a 	mov	r8,r5
   25308:	2007883a 	mov	r3,r4
   2530c:	00000306 	br	2531c <memset+0x2c>
   25310:	39ffffc4 	addi	r7,r7,-1
   25314:	39bfffe0 	cmpeqi	r6,r7,-1
   25318:	30002d1e 	bne	r6,zero,253d0 <memset+0xe0>
   2531c:	18c00044 	addi	r3,r3,1
   25320:	198000cc 	andi	r6,r3,3
   25324:	1a3fffc5 	stb	r8,-1(r3)
   25328:	303ff91e 	bne	r6,zero,25310 <memset+0x20>
   2532c:	39000130 	cmpltui	r4,r7,4
   25330:	2000221e 	bne	r4,zero,253bc <memset+0xcc>
   25334:	29003fcc 	andi	r4,r5,255
   25338:	200c923a 	slli	r6,r4,8
   2533c:	3a000430 	cmpltui	r8,r7,16
   25340:	3108b03a 	or	r4,r6,r4
   25344:	200c943a 	slli	r6,r4,16
   25348:	310cb03a 	or	r6,r6,r4
   2534c:	40000e1e 	bne	r8,zero,25388 <memset+0x98>
   25350:	393ffc04 	addi	r4,r7,-16
   25354:	2008d13a 	srli	r4,r4,4
   25358:	21000044 	addi	r4,r4,1
   2535c:	2008913a 	slli	r4,r4,4
   25360:	1909883a 	add	r4,r3,r4
   25364:	19800015 	stw	r6,0(r3)
   25368:	19800115 	stw	r6,4(r3)
   2536c:	19800215 	stw	r6,8(r3)
   25370:	19800315 	stw	r6,12(r3)
   25374:	18c00404 	addi	r3,r3,16
   25378:	20fffa1e 	bne	r4,r3,25364 <memset+0x74>
   2537c:	3900030c 	andi	r4,r7,12
   25380:	39c003cc 	andi	r7,r7,15
   25384:	20000d26 	beq	r4,zero,253bc <memset+0xcc>
   25388:	1811883a 	mov	r8,r3
   2538c:	42000104 	addi	r8,r8,4
   25390:	3a09c83a 	sub	r4,r7,r8
   25394:	1909883a 	add	r4,r3,r4
   25398:	21000128 	cmpgeui	r4,r4,4
   2539c:	41bfff15 	stw	r6,-4(r8)
   253a0:	203ffa1e 	bne	r4,zero,2538c <memset+0x9c>
   253a4:	393fff04 	addi	r4,r7,-4
   253a8:	2008d0ba 	srli	r4,r4,2
   253ac:	39c000cc 	andi	r7,r7,3
   253b0:	21000044 	addi	r4,r4,1
   253b4:	200890ba 	slli	r4,r4,2
   253b8:	1907883a 	add	r3,r3,r4
   253bc:	38000426 	beq	r7,zero,253d0 <memset+0xe0>
   253c0:	19cf883a 	add	r7,r3,r7
   253c4:	18c00044 	addi	r3,r3,1
   253c8:	197fffc5 	stb	r5,-1(r3)
   253cc:	38fffd1e 	bne	r7,r3,253c4 <memset+0xd4>
   253d0:	f800283a 	ret
   253d4:	2007883a 	mov	r3,r4
   253d8:	300f883a 	mov	r7,r6
   253dc:	003fd306 	br	2532c <memset+0x3c>

000253e0 <_printf_r>:
   253e0:	defffd04 	addi	sp,sp,-12
   253e4:	2805883a 	mov	r2,r5
   253e8:	dfc00015 	stw	ra,0(sp)
   253ec:	d9800115 	stw	r6,4(sp)
   253f0:	d9c00215 	stw	r7,8(sp)
   253f4:	21400217 	ldw	r5,8(r4)
   253f8:	d9c00104 	addi	r7,sp,4
   253fc:	100d883a 	mov	r6,r2
   25400:	00256940 	call	25694 <___vfprintf_internal_r>
   25404:	dfc00017 	ldw	ra,0(sp)
   25408:	dec00304 	addi	sp,sp,12
   2540c:	f800283a 	ret

00025410 <printf>:
   25410:	defffc04 	addi	sp,sp,-16
   25414:	dfc00015 	stw	ra,0(sp)
   25418:	d9400115 	stw	r5,4(sp)
   2541c:	d9800215 	stw	r6,8(sp)
   25420:	d9c00315 	stw	r7,12(sp)
   25424:	008000f4 	movhi	r2,3
   25428:	1090d017 	ldw	r2,17216(r2)
   2542c:	200b883a 	mov	r5,r4
   25430:	d9800104 	addi	r6,sp,4
   25434:	11000217 	ldw	r4,8(r2)
   25438:	00277980 	call	27798 <__vfprintf_internal>
   2543c:	dfc00017 	ldw	ra,0(sp)
   25440:	dec00404 	addi	sp,sp,16
   25444:	f800283a 	ret

00025448 <_putchar_r>:
   25448:	21800217 	ldw	r6,8(r4)
   2544c:	002c34c1 	jmpi	2c34c <_putc_r>

00025450 <putchar>:
   25450:	008000f4 	movhi	r2,3
   25454:	1090d017 	ldw	r2,17216(r2)
   25458:	200b883a 	mov	r5,r4
   2545c:	11800217 	ldw	r6,8(r2)
   25460:	1009883a 	mov	r4,r2
   25464:	002c34c1 	jmpi	2c34c <_putc_r>

00025468 <_puts_r>:
   25468:	defff504 	addi	sp,sp,-44
   2546c:	dc000815 	stw	r16,32(sp)
   25470:	2021883a 	mov	r16,r4
   25474:	2809883a 	mov	r4,r5
   25478:	dc400915 	stw	r17,36(sp)
   2547c:	dfc00a15 	stw	ra,40(sp)
   25480:	2823883a 	mov	r17,r5
   25484:	00255fc0 	call	255fc <strlen>
   25488:	11000044 	addi	r4,r2,1
   2548c:	d8800515 	stw	r2,20(sp)
   25490:	00800044 	movi	r2,1
   25494:	00c000f4 	movhi	r3,3
   25498:	d8800715 	stw	r2,28(sp)
   2549c:	d8800404 	addi	r2,sp,16
   254a0:	18cc6804 	addi	r3,r3,12704
   254a4:	d8800115 	stw	r2,4(sp)
   254a8:	00800084 	movi	r2,2
   254ac:	dc400415 	stw	r17,16(sp)
   254b0:	d8c00615 	stw	r3,24(sp)
   254b4:	d9000315 	stw	r4,12(sp)
   254b8:	d8800215 	stw	r2,8(sp)
   254bc:	81400217 	ldw	r5,8(r16)
   254c0:	80000226 	beq	r16,zero,254cc <_puts_r+0x64>
   254c4:	80800e17 	ldw	r2,56(r16)
   254c8:	10001326 	beq	r2,zero,25518 <_puts_r+0xb0>
   254cc:	2880030b 	ldhu	r2,12(r5)
   254d0:	10c8000c 	andi	r3,r2,8192
   254d4:	1800061e 	bne	r3,zero,254f0 <_puts_r+0x88>
   254d8:	28c01917 	ldw	r3,100(r5)
   254dc:	0137ffc4 	movi	r4,-8193
   254e0:	10880014 	ori	r2,r2,8192
   254e4:	1906703a 	and	r3,r3,r4
   254e8:	2880030d 	sth	r2,12(r5)
   254ec:	28c01915 	stw	r3,100(r5)
   254f0:	d9800104 	addi	r6,sp,4
   254f4:	8009883a 	mov	r4,r16
   254f8:	0029e100 	call	29e10 <__sfvwrite_r>
   254fc:	10000b1e 	bne	r2,zero,2552c <_puts_r+0xc4>
   25500:	00800284 	movi	r2,10
   25504:	dfc00a17 	ldw	ra,40(sp)
   25508:	dc400917 	ldw	r17,36(sp)
   2550c:	dc000817 	ldw	r16,32(sp)
   25510:	dec00b04 	addi	sp,sp,44
   25514:	f800283a 	ret
   25518:	8009883a 	mov	r4,r16
   2551c:	d9400015 	stw	r5,0(sp)
   25520:	00299b00 	call	299b0 <__sinit>
   25524:	d9400017 	ldw	r5,0(sp)
   25528:	003fe806 	br	254cc <_puts_r+0x64>
   2552c:	00bfffc4 	movi	r2,-1
   25530:	003ff406 	br	25504 <_puts_r+0x9c>

00025534 <puts>:
   25534:	008000f4 	movhi	r2,3
   25538:	200b883a 	mov	r5,r4
   2553c:	1110d017 	ldw	r4,17216(r2)
   25540:	00254681 	jmpi	25468 <_puts_r>

00025544 <strcmp>:
   25544:	2144b03a 	or	r2,r4,r5
   25548:	108000cc 	andi	r2,r2,3
   2554c:	1000141e 	bne	r2,zero,255a0 <strcmp+0x5c>
   25550:	20800017 	ldw	r2,0(r4)
   25554:	28c00017 	ldw	r3,0(r5)
   25558:	10c0111e 	bne	r2,r3,255a0 <strcmp+0x5c>
   2555c:	01ffbff4 	movhi	r7,65279
   25560:	01a02074 	movhi	r6,32897
   25564:	39ffbfc4 	addi	r7,r7,-257
   25568:	31a02004 	addi	r6,r6,-32640
   2556c:	00000306 	br	2557c <strcmp+0x38>
   25570:	20800017 	ldw	r2,0(r4)
   25574:	28c00017 	ldw	r3,0(r5)
   25578:	10c0091e 	bne	r2,r3,255a0 <strcmp+0x5c>
   2557c:	11c7883a 	add	r3,r2,r7
   25580:	0084303a 	nor	r2,zero,r2
   25584:	1884703a 	and	r2,r3,r2
   25588:	1184703a 	and	r2,r2,r6
   2558c:	21000104 	addi	r4,r4,4
   25590:	29400104 	addi	r5,r5,4
   25594:	103ff626 	beq	r2,zero,25570 <strcmp+0x2c>
   25598:	0005883a 	mov	r2,zero
   2559c:	f800283a 	ret
   255a0:	20c00003 	ldbu	r3,0(r4)
   255a4:	18803fcc 	andi	r2,r3,255
   255a8:	1080201c 	xori	r2,r2,128
   255ac:	10bfe004 	addi	r2,r2,-128
   255b0:	1000071e 	bne	r2,zero,255d0 <strcmp+0x8c>
   255b4:	00000a06 	br	255e0 <strcmp+0x9c>
   255b8:	20c00003 	ldbu	r3,0(r4)
   255bc:	29400044 	addi	r5,r5,1
   255c0:	18803fcc 	andi	r2,r3,255
   255c4:	1080201c 	xori	r2,r2,128
   255c8:	10bfe004 	addi	r2,r2,-128
   255cc:	10000726 	beq	r2,zero,255ec <strcmp+0xa8>
   255d0:	29800007 	ldb	r6,0(r5)
   255d4:	21000044 	addi	r4,r4,1
   255d8:	30bff726 	beq	r6,r2,255b8 <strcmp+0x74>
   255dc:	18803fcc 	andi	r2,r3,255
   255e0:	28c00003 	ldbu	r3,0(r5)
   255e4:	10c5c83a 	sub	r2,r2,r3
   255e8:	f800283a 	ret
   255ec:	28c00003 	ldbu	r3,0(r5)
   255f0:	0005883a 	mov	r2,zero
   255f4:	10c5c83a 	sub	r2,r2,r3
   255f8:	f800283a 	ret

000255fc <strlen>:
   255fc:	208000cc 	andi	r2,r4,3
   25600:	10000926 	beq	r2,zero,25628 <strlen+0x2c>
   25604:	2005883a 	mov	r2,r4
   25608:	00000306 	br	25618 <strlen+0x1c>
   2560c:	10800044 	addi	r2,r2,1
   25610:	10c000cc 	andi	r3,r2,3
   25614:	18000526 	beq	r3,zero,2562c <strlen+0x30>
   25618:	10c00007 	ldb	r3,0(r2)
   2561c:	183ffb1e 	bne	r3,zero,2560c <strlen+0x10>
   25620:	1105c83a 	sub	r2,r2,r4
   25624:	f800283a 	ret
   25628:	2005883a 	mov	r2,r4
   2562c:	11400017 	ldw	r5,0(r2)
   25630:	01ffbff4 	movhi	r7,65279
   25634:	39ffbfc4 	addi	r7,r7,-257
   25638:	29c7883a 	add	r3,r5,r7
   2563c:	01a02074 	movhi	r6,32897
   25640:	014a303a 	nor	r5,zero,r5
   25644:	1946703a 	and	r3,r3,r5
   25648:	31a02004 	addi	r6,r6,-32640
   2564c:	1986703a 	and	r3,r3,r6
   25650:	1800071e 	bne	r3,zero,25670 <strlen+0x74>
   25654:	11400117 	ldw	r5,4(r2)
   25658:	10800104 	addi	r2,r2,4
   2565c:	29c7883a 	add	r3,r5,r7
   25660:	014a303a 	nor	r5,zero,r5
   25664:	1946703a 	and	r3,r3,r5
   25668:	1986703a 	and	r3,r3,r6
   2566c:	183ff926 	beq	r3,zero,25654 <strlen+0x58>
   25670:	10c00007 	ldb	r3,0(r2)
   25674:	183fea26 	beq	r3,zero,25620 <strlen+0x24>
   25678:	10c00047 	ldb	r3,1(r2)
   2567c:	10800044 	addi	r2,r2,1
   25680:	183fe726 	beq	r3,zero,25620 <strlen+0x24>
   25684:	10c00047 	ldb	r3,1(r2)
   25688:	10800044 	addi	r2,r2,1
   2568c:	183ffa1e 	bne	r3,zero,25678 <strlen+0x7c>
   25690:	003fe306 	br	25620 <strlen+0x24>

00025694 <___vfprintf_internal_r>:
   25694:	deffbf04 	addi	sp,sp,-260
   25698:	dfc04015 	stw	ra,256(sp)
   2569c:	dd803d15 	stw	r22,244(sp)
   256a0:	dcc03a15 	stw	r19,232(sp)
   256a4:	dc803915 	stw	r18,228(sp)
   256a8:	2027883a 	mov	r19,r4
   256ac:	2825883a 	mov	r18,r5
   256b0:	302d883a 	mov	r22,r6
   256b4:	d9c00615 	stw	r7,24(sp)
   256b8:	df003f15 	stw	fp,252(sp)
   256bc:	ddc03e15 	stw	r23,248(sp)
   256c0:	dd403c15 	stw	r21,240(sp)
   256c4:	dd003b15 	stw	r20,236(sp)
   256c8:	dc403815 	stw	r17,224(sp)
   256cc:	dc003715 	stw	r16,220(sp)
   256d0:	002a4200 	call	2a420 <_localeconv_r>
   256d4:	10800017 	ldw	r2,0(r2)
   256d8:	1009883a 	mov	r4,r2
   256dc:	d8800d15 	stw	r2,52(sp)
   256e0:	00255fc0 	call	255fc <strlen>
   256e4:	d8800b15 	stw	r2,44(sp)
   256e8:	98000226 	beq	r19,zero,256f4 <___vfprintf_internal_r+0x60>
   256ec:	98800e17 	ldw	r2,56(r19)
   256f0:	1001e026 	beq	r2,zero,25e74 <___vfprintf_internal_r+0x7e0>
   256f4:	9080030b 	ldhu	r2,12(r18)
   256f8:	10c8000c 	andi	r3,r2,8192
   256fc:	1800061e 	bne	r3,zero,25718 <___vfprintf_internal_r+0x84>
   25700:	90c01917 	ldw	r3,100(r18)
   25704:	0137ffc4 	movi	r4,-8193
   25708:	10880014 	ori	r2,r2,8192
   2570c:	1906703a 	and	r3,r3,r4
   25710:	9080030d 	sth	r2,12(r18)
   25714:	90c01915 	stw	r3,100(r18)
   25718:	10c0020c 	andi	r3,r2,8
   2571c:	1800fc26 	beq	r3,zero,25b10 <___vfprintf_internal_r+0x47c>
   25720:	90c00417 	ldw	r3,16(r18)
   25724:	1800fa26 	beq	r3,zero,25b10 <___vfprintf_internal_r+0x47c>
   25728:	1080068c 	andi	r2,r2,26
   2572c:	10800298 	cmpnei	r2,r2,10
   25730:	1000ff26 	beq	r2,zero,25b30 <___vfprintf_internal_r+0x49c>
   25734:	d8802704 	addi	r2,sp,156
   25738:	b02f883a 	mov	r23,r22
   2573c:	d8801a15 	stw	r2,104(sp)
   25740:	d8001c15 	stw	zero,112(sp)
   25744:	d8001b15 	stw	zero,108(sp)
   25748:	d8000815 	stw	zero,32(sp)
   2574c:	d8000915 	stw	zero,36(sp)
   25750:	d8000a15 	stw	zero,40(sp)
   25754:	d8000c15 	stw	zero,48(sp)
   25758:	d8001015 	stw	zero,64(sp)
   2575c:	d8000515 	stw	zero,20(sp)
   25760:	102d883a 	mov	r22,r2
   25764:	b8800007 	ldb	r2,0(r23)
   25768:	1000d726 	beq	r2,zero,25ac8 <___vfprintf_internal_r+0x434>
   2576c:	b821883a 	mov	r16,r23
   25770:	00000306 	br	25780 <___vfprintf_internal_r+0xec>
   25774:	80800047 	ldb	r2,1(r16)
   25778:	84000044 	addi	r16,r16,1
   2577c:	10012226 	beq	r2,zero,25c08 <___vfprintf_internal_r+0x574>
   25780:	10800958 	cmpnei	r2,r2,37
   25784:	103ffb1e 	bne	r2,zero,25774 <___vfprintf_internal_r+0xe0>
   25788:	85e3c83a 	sub	r17,r16,r23
   2578c:	85c1201e 	bne	r16,r23,25c10 <___vfprintf_internal_r+0x57c>
   25790:	80800003 	ldbu	r2,0(r16)
   25794:	10803fcc 	andi	r2,r2,255
   25798:	1080201c 	xori	r2,r2,128
   2579c:	10bfe004 	addi	r2,r2,-128
   257a0:	1000c926 	beq	r2,zero,25ac8 <___vfprintf_internal_r+0x434>
   257a4:	82c00047 	ldb	r11,1(r16)
   257a8:	85c00044 	addi	r23,r16,1
   257ac:	d8001345 	stb	zero,77(sp)
   257b0:	0009883a 	mov	r4,zero
   257b4:	000b883a 	mov	r5,zero
   257b8:	023fffc4 	movi	r8,-1
   257bc:	0021883a 	mov	r16,zero
   257c0:	0019883a 	mov	r12,zero
   257c4:	bdc00044 	addi	r23,r23,1
   257c8:	5839883a 	mov	fp,r11
   257cc:	e0bff804 	addi	r2,fp,-32
   257d0:	10c01668 	cmpgeui	r3,r2,89
   257d4:	18006c1e 	bne	r3,zero,25988 <___vfprintf_internal_r+0x2f4>
   257d8:	100490ba 	slli	r2,r2,2
   257dc:	00c000b4 	movhi	r3,2
   257e0:	10c7883a 	add	r3,r2,r3
   257e4:	1895fb17 	ldw	r2,22508(r3)
   257e8:	1000683a 	jmp	r2
   257ec:	0002613c 	xorhi	zero,zero,2436
   257f0:	00025988 	cmpgei	zero,zero,2406
   257f4:	00025988 	cmpgei	zero,zero,2406
   257f8:	00026130 	cmpltui	zero,zero,2436
   257fc:	00025988 	cmpgei	zero,zero,2406
   25800:	00025988 	cmpgei	zero,zero,2406
   25804:	00025988 	cmpgei	zero,zero,2406
   25808:	00025988 	cmpgei	zero,zero,2406
   2580c:	00025988 	cmpgei	zero,zero,2406
   25810:	00025988 	cmpgei	zero,zero,2406
   25814:	00026108 	cmpgei	zero,zero,2436
   25818:	000260f8 	rdprs	zero,zero,2435
   2581c:	00025988 	cmpgei	zero,zero,2406
   25820:	000260e0 	cmpeqi	zero,zero,2435
   25824:	00026094 	movui	zero,2434
   25828:	00025988 	cmpgei	zero,zero,2406
   2582c:	00026088 	cmpgei	zero,zero,2434
   25830:	00025950 	cmplti	zero,zero,2405
   25834:	00025950 	cmplti	zero,zero,2405
   25838:	00025950 	cmplti	zero,zero,2405
   2583c:	00025950 	cmplti	zero,zero,2405
   25840:	00025950 	cmplti	zero,zero,2405
   25844:	00025950 	cmplti	zero,zero,2405
   25848:	00025950 	cmplti	zero,zero,2405
   2584c:	00025950 	cmplti	zero,zero,2405
   25850:	00025950 	cmplti	zero,zero,2405
   25854:	00025988 	cmpgei	zero,zero,2406
   25858:	00025988 	cmpgei	zero,zero,2406
   2585c:	00025988 	cmpgei	zero,zero,2406
   25860:	00025988 	cmpgei	zero,zero,2406
   25864:	00025988 	cmpgei	zero,zero,2406
   25868:	00025988 	cmpgei	zero,zero,2406
   2586c:	00025988 	cmpgei	zero,zero,2406
   25870:	00025988 	cmpgei	zero,zero,2406
   25874:	00025988 	cmpgei	zero,zero,2406
   25878:	00025988 	cmpgei	zero,zero,2406
   2587c:	00025fa0 	cmpeqi	zero,zero,2430
   25880:	00025c6c 	andhi	zero,zero,2417
   25884:	00025988 	cmpgei	zero,zero,2406
   25888:	00025c6c 	andhi	zero,zero,2417
   2588c:	00025988 	cmpgei	zero,zero,2406
   25890:	00025988 	cmpgei	zero,zero,2406
   25894:	00025988 	cmpgei	zero,zero,2406
   25898:	00025988 	cmpgei	zero,zero,2406
   2589c:	00025f94 	movui	zero,2430
   258a0:	00025988 	cmpgei	zero,zero,2406
   258a4:	00025988 	cmpgei	zero,zero,2406
   258a8:	00025ba0 	cmpeqi	zero,zero,2414
   258ac:	00025988 	cmpgei	zero,zero,2406
   258b0:	00025988 	cmpgei	zero,zero,2406
   258b4:	00025988 	cmpgei	zero,zero,2406
   258b8:	00025988 	cmpgei	zero,zero,2406
   258bc:	00025988 	cmpgei	zero,zero,2406
   258c0:	00025b78 	rdprs	zero,zero,2413
   258c4:	00025988 	cmpgei	zero,zero,2406
   258c8:	00025988 	cmpgei	zero,zero,2406
   258cc:	00025f4c 	andi	zero,zero,2429
   258d0:	00025988 	cmpgei	zero,zero,2406
   258d4:	00025988 	cmpgei	zero,zero,2406
   258d8:	00025988 	cmpgei	zero,zero,2406
   258dc:	00025988 	cmpgei	zero,zero,2406
   258e0:	00025988 	cmpgei	zero,zero,2406
   258e4:	00025988 	cmpgei	zero,zero,2406
   258e8:	00025988 	cmpgei	zero,zero,2406
   258ec:	00025988 	cmpgei	zero,zero,2406
   258f0:	00025988 	cmpgei	zero,zero,2406
   258f4:	00025988 	cmpgei	zero,zero,2406
   258f8:	00025f24 	muli	zero,zero,2428
   258fc:	00025e80 	call	25e8 <__alt_mem_onchip_memory2_0-0x1da18>
   25900:	00025c6c 	andhi	zero,zero,2417
   25904:	00025c6c 	andhi	zero,zero,2417
   25908:	00025c6c 	andhi	zero,zero,2417
   2590c:	00025f18 	cmpnei	zero,zero,2428
   25910:	00025e80 	call	25e8 <__alt_mem_onchip_memory2_0-0x1da18>
   25914:	00025988 	cmpgei	zero,zero,2406
   25918:	00025988 	cmpgei	zero,zero,2406
   2591c:	00026290 	cmplti	zero,zero,2442
   25920:	00025988 	cmpgei	zero,zero,2406
   25924:	00026254 	movui	zero,2441
   25928:	00025ba4 	muli	zero,zero,2414
   2592c:	00026214 	movui	zero,2440
   25930:	00026208 	cmpgei	zero,zero,2440
   25934:	00025988 	cmpgei	zero,zero,2406
   25938:	000261b0 	cmpltui	zero,zero,2438
   2593c:	00025988 	cmpgei	zero,zero,2406
   25940:	00025b7c 	xorhi	zero,zero,2413
   25944:	00025988 	cmpgei	zero,zero,2406
   25948:	00025988 	cmpgei	zero,zero,2406
   2594c:	00026168 	cmpgeui	zero,zero,2437
   25950:	0021883a 	mov	r16,zero
   25954:	e0fff404 	addi	r3,fp,-48
   25958:	800490ba 	slli	r2,r16,2
   2595c:	bf000007 	ldb	fp,0(r23)
   25960:	bdc00044 	addi	r23,r23,1
   25964:	1421883a 	add	r16,r2,r16
   25968:	8421883a 	add	r16,r16,r16
   2596c:	1c21883a 	add	r16,r3,r16
   25970:	e0fff404 	addi	r3,fp,-48
   25974:	188002b0 	cmpltui	r2,r3,10
   25978:	103ff71e 	bne	r2,zero,25958 <___vfprintf_internal_r+0x2c4>
   2597c:	e0bff804 	addi	r2,fp,-32
   25980:	10c01668 	cmpgeui	r3,r2,89
   25984:	183f9426 	beq	r3,zero,257d8 <___vfprintf_internal_r+0x144>
   25988:	21003fcc 	andi	r4,r4,255
   2598c:	2006871e 	bne	r4,zero,273ac <___vfprintf_internal_r+0x1d18>
   25990:	e0004d26 	beq	fp,zero,25ac8 <___vfprintf_internal_r+0x434>
   25994:	df001d05 	stb	fp,116(sp)
   25998:	d8001345 	stb	zero,77(sp)
   2599c:	05000044 	movi	r20,1
   259a0:	05400044 	movi	r21,1
   259a4:	dc401d04 	addi	r17,sp,116
   259a8:	db000415 	stw	r12,16(sp)
   259ac:	0011883a 	mov	r8,zero
   259b0:	d8000715 	stw	zero,28(sp)
   259b4:	d8800417 	ldw	r2,16(sp)
   259b8:	1380008c 	andi	r14,r2,2
   259bc:	70000126 	beq	r14,zero,259c4 <___vfprintf_internal_r+0x330>
   259c0:	a5000084 	addi	r20,r20,2
   259c4:	d8800417 	ldw	r2,16(sp)
   259c8:	d8c01c17 	ldw	r3,112(sp)
   259cc:	1340210c 	andi	r13,r2,132
   259d0:	6800021e 	bne	r13,zero,259dc <___vfprintf_internal_r+0x348>
   259d4:	850fc83a 	sub	r7,r16,r20
   259d8:	01c34516 	blt	zero,r7,266f0 <___vfprintf_internal_r+0x105c>
   259dc:	d8801347 	ldb	r2,77(sp)
   259e0:	10000c26 	beq	r2,zero,25a14 <___vfprintf_internal_r+0x380>
   259e4:	d8801b17 	ldw	r2,108(sp)
   259e8:	d9001344 	addi	r4,sp,77
   259ec:	18c00044 	addi	r3,r3,1
   259f0:	10800044 	addi	r2,r2,1
   259f4:	b1000015 	stw	r4,0(r22)
   259f8:	01000044 	movi	r4,1
   259fc:	d8801b15 	stw	r2,108(sp)
   25a00:	b1000115 	stw	r4,4(r22)
   25a04:	d8c01c15 	stw	r3,112(sp)
   25a08:	10800208 	cmpgei	r2,r2,8
   25a0c:	1003791e 	bne	r2,zero,267f4 <___vfprintf_internal_r+0x1160>
   25a10:	b5800204 	addi	r22,r22,8
   25a14:	70000c26 	beq	r14,zero,25a48 <___vfprintf_internal_r+0x3b4>
   25a18:	d8801b17 	ldw	r2,108(sp)
   25a1c:	d9001384 	addi	r4,sp,78
   25a20:	18c00084 	addi	r3,r3,2
   25a24:	10800044 	addi	r2,r2,1
   25a28:	b1000015 	stw	r4,0(r22)
   25a2c:	01000084 	movi	r4,2
   25a30:	d8801b15 	stw	r2,108(sp)
   25a34:	b1000115 	stw	r4,4(r22)
   25a38:	d8c01c15 	stw	r3,112(sp)
   25a3c:	10800208 	cmpgei	r2,r2,8
   25a40:	10037a1e 	bne	r2,zero,2682c <___vfprintf_internal_r+0x1198>
   25a44:	b5800204 	addi	r22,r22,8
   25a48:	6b402018 	cmpnei	r13,r13,128
   25a4c:	68025b26 	beq	r13,zero,263bc <___vfprintf_internal_r+0xd28>
   25a50:	4551c83a 	sub	r8,r8,r21
   25a54:	02029316 	blt	zero,r8,264a4 <___vfprintf_internal_r+0xe10>
   25a58:	d8800417 	ldw	r2,16(sp)
   25a5c:	1080400c 	andi	r2,r2,256
   25a60:	1002101e 	bne	r2,zero,262a4 <___vfprintf_internal_r+0xc10>
   25a64:	d8801b17 	ldw	r2,108(sp)
   25a68:	1d47883a 	add	r3,r3,r21
   25a6c:	b4400015 	stw	r17,0(r22)
   25a70:	10800044 	addi	r2,r2,1
   25a74:	b5400115 	stw	r21,4(r22)
   25a78:	d8801b15 	stw	r2,108(sp)
   25a7c:	d8c01c15 	stw	r3,112(sp)
   25a80:	10800208 	cmpgei	r2,r2,8
   25a84:	1003101e 	bne	r2,zero,266c8 <___vfprintf_internal_r+0x1034>
   25a88:	b5800204 	addi	r22,r22,8
   25a8c:	d8800417 	ldw	r2,16(sp)
   25a90:	1440010c 	andi	r17,r2,4
   25a94:	88000226 	beq	r17,zero,25aa0 <___vfprintf_internal_r+0x40c>
   25a98:	8523c83a 	sub	r17,r16,r20
   25a9c:	0440c616 	blt	zero,r17,25db8 <___vfprintf_internal_r+0x724>
   25aa0:	8500010e 	bge	r16,r20,25aa8 <___vfprintf_internal_r+0x414>
   25aa4:	a021883a 	mov	r16,r20
   25aa8:	d8800517 	ldw	r2,20(sp)
   25aac:	1405883a 	add	r2,r2,r16
   25ab0:	d8800515 	stw	r2,20(sp)
   25ab4:	1802c21e 	bne	r3,zero,265c0 <___vfprintf_internal_r+0xf2c>
   25ab8:	b8800007 	ldb	r2,0(r23)
   25abc:	d8001b15 	stw	zero,108(sp)
   25ac0:	dd802704 	addi	r22,sp,156
   25ac4:	103f291e 	bne	r2,zero,2576c <___vfprintf_internal_r+0xd8>
   25ac8:	d8801c17 	ldw	r2,112(sp)
   25acc:	1006391e 	bne	r2,zero,273b4 <___vfprintf_internal_r+0x1d20>
   25ad0:	9080030b 	ldhu	r2,12(r18)
   25ad4:	1080100c 	andi	r2,r2,64
   25ad8:	1006cf1e 	bne	r2,zero,27618 <___vfprintf_internal_r+0x1f84>
   25adc:	d8800517 	ldw	r2,20(sp)
   25ae0:	dfc04017 	ldw	ra,256(sp)
   25ae4:	df003f17 	ldw	fp,252(sp)
   25ae8:	ddc03e17 	ldw	r23,248(sp)
   25aec:	dd803d17 	ldw	r22,244(sp)
   25af0:	dd403c17 	ldw	r21,240(sp)
   25af4:	dd003b17 	ldw	r20,236(sp)
   25af8:	dcc03a17 	ldw	r19,232(sp)
   25afc:	dc803917 	ldw	r18,228(sp)
   25b00:	dc403817 	ldw	r17,224(sp)
   25b04:	dc003717 	ldw	r16,220(sp)
   25b08:	dec04104 	addi	sp,sp,260
   25b0c:	f800283a 	ret
   25b10:	900b883a 	mov	r5,r18
   25b14:	9809883a 	mov	r4,r19
   25b18:	00278740 	call	27874 <__swsetup_r>
   25b1c:	1006be1e 	bne	r2,zero,27618 <___vfprintf_internal_r+0x1f84>
   25b20:	9080030b 	ldhu	r2,12(r18)
   25b24:	1080068c 	andi	r2,r2,26
   25b28:	10800298 	cmpnei	r2,r2,10
   25b2c:	103f011e 	bne	r2,zero,25734 <___vfprintf_internal_r+0xa0>
   25b30:	9080038f 	ldh	r2,14(r18)
   25b34:	103eff16 	blt	r2,zero,25734 <___vfprintf_internal_r+0xa0>
   25b38:	d9c00617 	ldw	r7,24(sp)
   25b3c:	b00d883a 	mov	r6,r22
   25b40:	900b883a 	mov	r5,r18
   25b44:	9809883a 	mov	r4,r19
   25b48:	dfc04017 	ldw	ra,256(sp)
   25b4c:	df003f17 	ldw	fp,252(sp)
   25b50:	ddc03e17 	ldw	r23,248(sp)
   25b54:	dd803d17 	ldw	r22,244(sp)
   25b58:	dd403c17 	ldw	r21,240(sp)
   25b5c:	dd003b17 	ldw	r20,236(sp)
   25b60:	dcc03a17 	ldw	r19,232(sp)
   25b64:	dc803917 	ldw	r18,228(sp)
   25b68:	dc403817 	ldw	r17,224(sp)
   25b6c:	dc003717 	ldw	r16,220(sp)
   25b70:	dec04104 	addi	sp,sp,260
   25b74:	00277b41 	jmpi	277b4 <__sbprintf>
   25b78:	63000414 	ori	r12,r12,16
   25b7c:	6080080c 	andi	r2,r12,32
   25b80:	10008126 	beq	r2,zero,25d88 <___vfprintf_internal_r+0x6f4>
   25b84:	d8c00617 	ldw	r3,24(sp)
   25b88:	00800044 	movi	r2,1
   25b8c:	1d000017 	ldw	r20,0(r3)
   25b90:	1d400117 	ldw	r21,4(r3)
   25b94:	18c00204 	addi	r3,r3,8
   25b98:	d8c00615 	stw	r3,24(sp)
   25b9c:	00000906 	br	25bc4 <___vfprintf_internal_r+0x530>
   25ba0:	63000414 	ori	r12,r12,16
   25ba4:	6080080c 	andi	r2,r12,32
   25ba8:	10006b26 	beq	r2,zero,25d58 <___vfprintf_internal_r+0x6c4>
   25bac:	d8c00617 	ldw	r3,24(sp)
   25bb0:	0005883a 	mov	r2,zero
   25bb4:	1d000017 	ldw	r20,0(r3)
   25bb8:	1d400117 	ldw	r21,4(r3)
   25bbc:	18c00204 	addi	r3,r3,8
   25bc0:	d8c00615 	stw	r3,24(sp)
   25bc4:	d8001345 	stb	zero,77(sp)
   25bc8:	40ffffe0 	cmpeqi	r3,r8,-1
   25bcc:	001b883a 	mov	r13,zero
   25bd0:	18010e1e 	bne	r3,zero,2600c <___vfprintf_internal_r+0x978>
   25bd4:	047fdfc4 	movi	r17,-129
   25bd8:	6448703a 	and	r4,r12,r17
   25bdc:	a546b03a 	or	r3,r20,r21
   25be0:	d9000415 	stw	r4,16(sp)
   25be4:	1802c01e 	bne	r3,zero,266e8 <___vfprintf_internal_r+0x1054>
   25be8:	40025f1e 	bne	r8,zero,26568 <___vfprintf_internal_r+0xed4>
   25bec:	1003751e 	bne	r2,zero,269c4 <___vfprintf_internal_r+0x1330>
   25bf0:	6540004c 	andi	r21,r12,1
   25bf4:	a803b026 	beq	r21,zero,26ab8 <___vfprintf_internal_r+0x1424>
   25bf8:	00800c04 	movi	r2,48
   25bfc:	d88026c5 	stb	r2,155(sp)
   25c00:	dc4026c4 	addi	r17,sp,155
   25c04:	0000ba06 	br	25ef0 <___vfprintf_internal_r+0x85c>
   25c08:	85e3c83a 	sub	r17,r16,r23
   25c0c:	85ffae26 	beq	r16,r23,25ac8 <___vfprintf_internal_r+0x434>
   25c10:	d8c01c17 	ldw	r3,112(sp)
   25c14:	d8801b17 	ldw	r2,108(sp)
   25c18:	b5c00015 	stw	r23,0(r22)
   25c1c:	1c47883a 	add	r3,r3,r17
   25c20:	10800044 	addi	r2,r2,1
   25c24:	d8801b15 	stw	r2,108(sp)
   25c28:	b4400115 	stw	r17,4(r22)
   25c2c:	d8c01c15 	stw	r3,112(sp)
   25c30:	10800208 	cmpgei	r2,r2,8
   25c34:	1000061e 	bne	r2,zero,25c50 <___vfprintf_internal_r+0x5bc>
   25c38:	b5800204 	addi	r22,r22,8
   25c3c:	d8c00517 	ldw	r3,20(sp)
   25c40:	80800003 	ldbu	r2,0(r16)
   25c44:	1c47883a 	add	r3,r3,r17
   25c48:	d8c00515 	stw	r3,20(sp)
   25c4c:	003ed106 	br	25794 <___vfprintf_internal_r+0x100>
   25c50:	d9801a04 	addi	r6,sp,104
   25c54:	900b883a 	mov	r5,r18
   25c58:	9809883a 	mov	r4,r19
   25c5c:	002cce80 	call	2cce8 <__sprint_r>
   25c60:	103f9b1e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   25c64:	dd802704 	addi	r22,sp,156
   25c68:	003ff406 	br	25c3c <___vfprintf_internal_r+0x5a8>
   25c6c:	21003fcc 	andi	r4,r4,255
   25c70:	2006671e 	bne	r4,zero,27610 <___vfprintf_internal_r+0x1f7c>
   25c74:	d8c00617 	ldw	r3,24(sp)
   25c78:	6080020c 	andi	r2,r12,8
   25c7c:	19000204 	addi	r4,r3,8
   25c80:	d9000e15 	stw	r4,56(sp)
   25c84:	1003a71e 	bne	r2,zero,26b24 <___vfprintf_internal_r+0x1490>
   25c88:	d8800617 	ldw	r2,24(sp)
   25c8c:	10c00017 	ldw	r3,0(r2)
   25c90:	10800117 	ldw	r2,4(r2)
   25c94:	d8c00915 	stw	r3,36(sp)
   25c98:	d8800a15 	stw	r2,40(sp)
   25c9c:	dd400a17 	ldw	r21,40(sp)
   25ca0:	dd000917 	ldw	r20,36(sp)
   25ca4:	00a00034 	movhi	r2,32768
   25ca8:	10bfffc4 	addi	r2,r2,-1
   25cac:	a8a2703a 	and	r17,r21,r2
   25cb0:	01dffc34 	movhi	r7,32752
   25cb4:	01bfffc4 	movi	r6,-1
   25cb8:	39ffffc4 	addi	r7,r7,-1
   25cbc:	a009883a 	mov	r4,r20
   25cc0:	880b883a 	mov	r5,r17
   25cc4:	da000615 	stw	r8,24(sp)
   25cc8:	db000415 	stw	r12,16(sp)
   25ccc:	00250f40 	call	250f4 <__unorddf2>
   25cd0:	db000417 	ldw	r12,16(sp)
   25cd4:	da000617 	ldw	r8,24(sp)
   25cd8:	1004641e 	bne	r2,zero,26e6c <___vfprintf_internal_r+0x17d8>
   25cdc:	01dffc34 	movhi	r7,32752
   25ce0:	01bfffc4 	movi	r6,-1
   25ce4:	39ffffc4 	addi	r7,r7,-1
   25ce8:	a009883a 	mov	r4,r20
   25cec:	880b883a 	mov	r5,r17
   25cf0:	0023fac0 	call	23fac <__ledf2>
   25cf4:	db000417 	ldw	r12,16(sp)
   25cf8:	da000617 	ldw	r8,24(sp)
   25cfc:	00845b0e 	bge	zero,r2,26e6c <___vfprintf_internal_r+0x17d8>
   25d00:	000d883a 	mov	r6,zero
   25d04:	000f883a 	mov	r7,zero
   25d08:	a009883a 	mov	r4,r20
   25d0c:	a80b883a 	mov	r5,r21
   25d10:	0023fac0 	call	23fac <__ledf2>
   25d14:	db000417 	ldw	r12,16(sp)
   25d18:	10059116 	blt	r2,zero,27360 <___vfprintf_internal_r+0x1ccc>
   25d1c:	db401343 	ldbu	r13,77(sp)
   25d20:	e0801210 	cmplti	r2,fp,72
   25d24:	1005391e 	bne	r2,zero,2720c <___vfprintf_internal_r+0x1b78>
   25d28:	044000f4 	movhi	r17,3
   25d2c:	8c4c6a04 	addi	r17,r17,12712
   25d30:	00bfdfc4 	movi	r2,-129
   25d34:	6084703a 	and	r2,r12,r2
   25d38:	d8800415 	stw	r2,16(sp)
   25d3c:	d8800e17 	ldw	r2,56(sp)
   25d40:	050000c4 	movi	r20,3
   25d44:	054000c4 	movi	r21,3
   25d48:	d8800615 	stw	r2,24(sp)
   25d4c:	0011883a 	mov	r8,zero
   25d50:	d8000715 	stw	zero,28(sp)
   25d54:	00006a06 	br	25f00 <___vfprintf_internal_r+0x86c>
   25d58:	d9000617 	ldw	r4,24(sp)
   25d5c:	6080040c 	andi	r2,r12,16
   25d60:	20c00104 	addi	r3,r4,4
   25d64:	10036a1e 	bne	r2,zero,26b10 <___vfprintf_internal_r+0x147c>
   25d68:	6080100c 	andi	r2,r12,64
   25d6c:	10052126 	beq	r2,zero,271f4 <___vfprintf_internal_r+0x1b60>
   25d70:	d8800617 	ldw	r2,24(sp)
   25d74:	002b883a 	mov	r21,zero
   25d78:	d8c00615 	stw	r3,24(sp)
   25d7c:	1500000b 	ldhu	r20,0(r2)
   25d80:	0005883a 	mov	r2,zero
   25d84:	003f8f06 	br	25bc4 <___vfprintf_internal_r+0x530>
   25d88:	d9000617 	ldw	r4,24(sp)
   25d8c:	6080040c 	andi	r2,r12,16
   25d90:	20c00104 	addi	r3,r4,4
   25d94:	1003501e 	bne	r2,zero,26ad8 <___vfprintf_internal_r+0x1444>
   25d98:	6080100c 	andi	r2,r12,64
   25d9c:	10055926 	beq	r2,zero,27304 <___vfprintf_internal_r+0x1c70>
   25da0:	d8800617 	ldw	r2,24(sp)
   25da4:	002b883a 	mov	r21,zero
   25da8:	d8c00615 	stw	r3,24(sp)
   25dac:	1500000b 	ldhu	r20,0(r2)
   25db0:	00800044 	movi	r2,1
   25db4:	003f8306 	br	25bc4 <___vfprintf_internal_r+0x530>
   25db8:	030000f4 	movhi	r12,3
   25dbc:	89000450 	cmplti	r4,r17,17
   25dc0:	d8801b17 	ldw	r2,108(sp)
   25dc4:	630c7e04 	addi	r12,r12,12792
   25dc8:	20001b1e 	bne	r4,zero,25e38 <___vfprintf_internal_r+0x7a4>
   25dcc:	05400404 	movi	r21,16
   25dd0:	6039883a 	mov	fp,r12
   25dd4:	00000406 	br	25de8 <___vfprintf_internal_r+0x754>
   25dd8:	8c7ffc04 	addi	r17,r17,-16
   25ddc:	89000448 	cmpgei	r4,r17,17
   25de0:	b5800204 	addi	r22,r22,8
   25de4:	20001326 	beq	r4,zero,25e34 <___vfprintf_internal_r+0x7a0>
   25de8:	10800044 	addi	r2,r2,1
   25dec:	18c00404 	addi	r3,r3,16
   25df0:	b7000015 	stw	fp,0(r22)
   25df4:	b5400115 	stw	r21,4(r22)
   25df8:	d8c01c15 	stw	r3,112(sp)
   25dfc:	d8801b15 	stw	r2,108(sp)
   25e00:	11000208 	cmpgei	r4,r2,8
   25e04:	203ff426 	beq	r4,zero,25dd8 <___vfprintf_internal_r+0x744>
   25e08:	d9801a04 	addi	r6,sp,104
   25e0c:	900b883a 	mov	r5,r18
   25e10:	9809883a 	mov	r4,r19
   25e14:	002cce80 	call	2cce8 <__sprint_r>
   25e18:	103f2d1e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   25e1c:	8c7ffc04 	addi	r17,r17,-16
   25e20:	89000448 	cmpgei	r4,r17,17
   25e24:	d8c01c17 	ldw	r3,112(sp)
   25e28:	d8801b17 	ldw	r2,108(sp)
   25e2c:	dd802704 	addi	r22,sp,156
   25e30:	203fed1e 	bne	r4,zero,25de8 <___vfprintf_internal_r+0x754>
   25e34:	e019883a 	mov	r12,fp
   25e38:	10800044 	addi	r2,r2,1
   25e3c:	1c47883a 	add	r3,r3,r17
   25e40:	d8801b15 	stw	r2,108(sp)
   25e44:	b3000015 	stw	r12,0(r22)
   25e48:	b4400115 	stw	r17,4(r22)
   25e4c:	d8c01c15 	stw	r3,112(sp)
   25e50:	10800210 	cmplti	r2,r2,8
   25e54:	103f121e 	bne	r2,zero,25aa0 <___vfprintf_internal_r+0x40c>
   25e58:	d9801a04 	addi	r6,sp,104
   25e5c:	900b883a 	mov	r5,r18
   25e60:	9809883a 	mov	r4,r19
   25e64:	002cce80 	call	2cce8 <__sprint_r>
   25e68:	103f191e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   25e6c:	d8c01c17 	ldw	r3,112(sp)
   25e70:	003f0b06 	br	25aa0 <___vfprintf_internal_r+0x40c>
   25e74:	9809883a 	mov	r4,r19
   25e78:	00299b00 	call	299b0 <__sinit>
   25e7c:	003e1d06 	br	256f4 <___vfprintf_internal_r+0x60>
   25e80:	21003fcc 	andi	r4,r4,255
   25e84:	2005de1e 	bne	r4,zero,27600 <___vfprintf_internal_r+0x1f6c>
   25e88:	6080080c 	andi	r2,r12,32
   25e8c:	10004926 	beq	r2,zero,25fb4 <___vfprintf_internal_r+0x920>
   25e90:	d8c00617 	ldw	r3,24(sp)
   25e94:	18800117 	ldw	r2,4(r3)
   25e98:	1d000017 	ldw	r20,0(r3)
   25e9c:	18c00204 	addi	r3,r3,8
   25ea0:	d8c00615 	stw	r3,24(sp)
   25ea4:	102b883a 	mov	r21,r2
   25ea8:	10004e16 	blt	r2,zero,25fe4 <___vfprintf_internal_r+0x950>
   25eac:	40bfffd8 	cmpnei	r2,r8,-1
   25eb0:	db401343 	ldbu	r13,77(sp)
   25eb4:	10000626 	beq	r2,zero,25ed0 <___vfprintf_internal_r+0x83c>
   25eb8:	047fdfc4 	movi	r17,-129
   25ebc:	6446703a 	and	r3,r12,r17
   25ec0:	a544b03a 	or	r2,r20,r21
   25ec4:	d8c00415 	stw	r3,16(sp)
   25ec8:	1002bd26 	beq	r2,zero,269c0 <___vfprintf_internal_r+0x132c>
   25ecc:	db000417 	ldw	r12,16(sp)
   25ed0:	a803701e 	bne	r21,zero,26c94 <___vfprintf_internal_r+0x1600>
   25ed4:	a08002a8 	cmpgeui	r2,r20,10
   25ed8:	10036e1e 	bne	r2,zero,26c94 <___vfprintf_internal_r+0x1600>
   25edc:	a5000c04 	addi	r20,r20,48
   25ee0:	dd0026c5 	stb	r20,155(sp)
   25ee4:	db000415 	stw	r12,16(sp)
   25ee8:	05400044 	movi	r21,1
   25eec:	dc4026c4 	addi	r17,sp,155
   25ef0:	4029883a 	mov	r20,r8
   25ef4:	4540010e 	bge	r8,r21,25efc <___vfprintf_internal_r+0x868>
   25ef8:	a829883a 	mov	r20,r21
   25efc:	d8000715 	stw	zero,28(sp)
   25f00:	6b403fcc 	andi	r13,r13,255
   25f04:	6b40201c 	xori	r13,r13,128
   25f08:	6b7fe004 	addi	r13,r13,-128
   25f0c:	683ea926 	beq	r13,zero,259b4 <___vfprintf_internal_r+0x320>
   25f10:	a5000044 	addi	r20,r20,1
   25f14:	003ea706 	br	259b4 <___vfprintf_internal_r+0x320>
   25f18:	bac00007 	ldb	r11,0(r23)
   25f1c:	63001014 	ori	r12,r12,64
   25f20:	003e2806 	br	257c4 <___vfprintf_internal_r+0x130>
   25f24:	d8c00617 	ldw	r3,24(sp)
   25f28:	d8001345 	stb	zero,77(sp)
   25f2c:	05000044 	movi	r20,1
   25f30:	18800017 	ldw	r2,0(r3)
   25f34:	18c00104 	addi	r3,r3,4
   25f38:	d8c00615 	stw	r3,24(sp)
   25f3c:	d8801d05 	stb	r2,116(sp)
   25f40:	05400044 	movi	r21,1
   25f44:	dc401d04 	addi	r17,sp,116
   25f48:	003e9706 	br	259a8 <___vfprintf_internal_r+0x314>
   25f4c:	21003fcc 	andi	r4,r4,255
   25f50:	2005a71e 	bne	r4,zero,275f0 <___vfprintf_internal_r+0x1f5c>
   25f54:	008000f4 	movhi	r2,3
   25f58:	108c7204 	addi	r2,r2,12744
   25f5c:	d8800c15 	stw	r2,48(sp)
   25f60:	6080080c 	andi	r2,r12,32
   25f64:	10008726 	beq	r2,zero,26184 <___vfprintf_internal_r+0xaf0>
   25f68:	d8800617 	ldw	r2,24(sp)
   25f6c:	15000017 	ldw	r20,0(r2)
   25f70:	15400117 	ldw	r21,4(r2)
   25f74:	10800204 	addi	r2,r2,8
   25f78:	d8800615 	stw	r2,24(sp)
   25f7c:	6080004c 	andi	r2,r12,1
   25f80:	10000226 	beq	r2,zero,25f8c <___vfprintf_internal_r+0x8f8>
   25f84:	a544b03a 	or	r2,r20,r21
   25f88:	1002cd1e 	bne	r2,zero,26ac0 <___vfprintf_internal_r+0x142c>
   25f8c:	00800084 	movi	r2,2
   25f90:	003f0c06 	br	25bc4 <___vfprintf_internal_r+0x530>
   25f94:	bac00007 	ldb	r11,0(r23)
   25f98:	63000214 	ori	r12,r12,8
   25f9c:	003e0906 	br	257c4 <___vfprintf_internal_r+0x130>
   25fa0:	21003fcc 	andi	r4,r4,255
   25fa4:	2005981e 	bne	r4,zero,27608 <___vfprintf_internal_r+0x1f74>
   25fa8:	63000414 	ori	r12,r12,16
   25fac:	6080080c 	andi	r2,r12,32
   25fb0:	103fb71e 	bne	r2,zero,25e90 <___vfprintf_internal_r+0x7fc>
   25fb4:	d9000617 	ldw	r4,24(sp)
   25fb8:	6080040c 	andi	r2,r12,16
   25fbc:	20c00104 	addi	r3,r4,4
   25fc0:	1002dd1e 	bne	r2,zero,26b38 <___vfprintf_internal_r+0x14a4>
   25fc4:	6080100c 	andi	r2,r12,64
   25fc8:	10048426 	beq	r2,zero,271dc <___vfprintf_internal_r+0x1b48>
   25fcc:	d8800617 	ldw	r2,24(sp)
   25fd0:	d8c00615 	stw	r3,24(sp)
   25fd4:	1500000f 	ldh	r20,0(r2)
   25fd8:	a02bd7fa 	srai	r21,r20,31
   25fdc:	a805883a 	mov	r2,r21
   25fe0:	103fb20e 	bge	r2,zero,25eac <___vfprintf_internal_r+0x818>
   25fe4:	a004c03a 	cmpne	r2,r20,zero
   25fe8:	056bc83a 	sub	r21,zero,r21
   25fec:	a8abc83a 	sub	r21,r21,r2
   25ff0:	00800b44 	movi	r2,45
   25ff4:	d8801345 	stb	r2,77(sp)
   25ff8:	40ffffe0 	cmpeqi	r3,r8,-1
   25ffc:	0529c83a 	sub	r20,zero,r20
   26000:	03400b44 	movi	r13,45
   26004:	00800044 	movi	r2,1
   26008:	183ef226 	beq	r3,zero,25bd4 <___vfprintf_internal_r+0x540>
   2600c:	10c00060 	cmpeqi	r3,r2,1
   26010:	183faf1e 	bne	r3,zero,25ed0 <___vfprintf_internal_r+0x83c>
   26014:	108000a0 	cmpeqi	r2,r2,2
   26018:	1001581e 	bne	r2,zero,2657c <___vfprintf_internal_r+0xee8>
   2601c:	dc402704 	addi	r17,sp,156
   26020:	a006d0fa 	srli	r3,r20,3
   26024:	a808977a 	slli	r4,r21,29
   26028:	a82ad0fa 	srli	r21,r21,3
   2602c:	a50001cc 	andi	r20,r20,7
   26030:	a0800c04 	addi	r2,r20,48
   26034:	20e8b03a 	or	r20,r4,r3
   26038:	88bfffc5 	stb	r2,-1(r17)
   2603c:	a546b03a 	or	r3,r20,r21
   26040:	880b883a 	mov	r5,r17
   26044:	8c7fffc4 	addi	r17,r17,-1
   26048:	183ff51e 	bne	r3,zero,26020 <___vfprintf_internal_r+0x98c>
   2604c:	60c0004c 	andi	r3,r12,1
   26050:	18015726 	beq	r3,zero,265b0 <___vfprintf_internal_r+0xf1c>
   26054:	10803fcc 	andi	r2,r2,255
   26058:	1080201c 	xori	r2,r2,128
   2605c:	10bfe004 	addi	r2,r2,-128
   26060:	10800c18 	cmpnei	r2,r2,48
   26064:	10015226 	beq	r2,zero,265b0 <___vfprintf_internal_r+0xf1c>
   26068:	00800c04 	movi	r2,48
   2606c:	297fff84 	addi	r5,r5,-2
   26070:	88bfffc5 	stb	r2,-1(r17)
   26074:	d8802704 	addi	r2,sp,156
   26078:	116bc83a 	sub	r21,r2,r5
   2607c:	db000415 	stw	r12,16(sp)
   26080:	2823883a 	mov	r17,r5
   26084:	003f9a06 	br	25ef0 <___vfprintf_internal_r+0x85c>
   26088:	bac00007 	ldb	r11,0(r23)
   2608c:	63002014 	ori	r12,r12,128
   26090:	003dcc06 	br	257c4 <___vfprintf_internal_r+0x130>
   26094:	bf000007 	ldb	fp,0(r23)
   26098:	b8800044 	addi	r2,r23,1
   2609c:	e0c00aa0 	cmpeqi	r3,fp,42
   260a0:	1805b11e 	bne	r3,zero,27768 <___vfprintf_internal_r+0x20d4>
   260a4:	e0fff404 	addi	r3,fp,-48
   260a8:	198002b0 	cmpltui	r6,r3,10
   260ac:	102f883a 	mov	r23,r2
   260b0:	0011883a 	mov	r8,zero
   260b4:	303dc526 	beq	r6,zero,257cc <___vfprintf_internal_r+0x138>
   260b8:	400490ba 	slli	r2,r8,2
   260bc:	bf000007 	ldb	fp,0(r23)
   260c0:	bdc00044 	addi	r23,r23,1
   260c4:	1211883a 	add	r8,r2,r8
   260c8:	4211883a 	add	r8,r8,r8
   260cc:	40d1883a 	add	r8,r8,r3
   260d0:	e0fff404 	addi	r3,fp,-48
   260d4:	188002b0 	cmpltui	r2,r3,10
   260d8:	103ff71e 	bne	r2,zero,260b8 <___vfprintf_internal_r+0xa24>
   260dc:	003dbb06 	br	257cc <___vfprintf_internal_r+0x138>
   260e0:	bf000003 	ldbu	fp,0(r23)
   260e4:	e2c03fcc 	andi	r11,fp,255
   260e8:	5ac0201c 	xori	r11,r11,128
   260ec:	63000114 	ori	r12,r12,4
   260f0:	5affe004 	addi	r11,r11,-128
   260f4:	003db306 	br	257c4 <___vfprintf_internal_r+0x130>
   260f8:	bac00007 	ldb	r11,0(r23)
   260fc:	01000044 	movi	r4,1
   26100:	01400ac4 	movi	r5,43
   26104:	003daf06 	br	257c4 <___vfprintf_internal_r+0x130>
   26108:	d8800617 	ldw	r2,24(sp)
   2610c:	bf000003 	ldbu	fp,0(r23)
   26110:	14000017 	ldw	r16,0(r2)
   26114:	10800104 	addi	r2,r2,4
   26118:	80028c16 	blt	r16,zero,26b4c <___vfprintf_internal_r+0x14b8>
   2611c:	d8800615 	stw	r2,24(sp)
   26120:	e2c03fcc 	andi	r11,fp,255
   26124:	5ac0201c 	xori	r11,r11,128
   26128:	5affe004 	addi	r11,r11,-128
   2612c:	003da506 	br	257c4 <___vfprintf_internal_r+0x130>
   26130:	bac00007 	ldb	r11,0(r23)
   26134:	63000054 	ori	r12,r12,1
   26138:	003da206 	br	257c4 <___vfprintf_internal_r+0x130>
   2613c:	28803fcc 	andi	r2,r5,255
   26140:	1080201c 	xori	r2,r2,128
   26144:	10bfe004 	addi	r2,r2,-128
   26148:	bf000003 	ldbu	fp,0(r23)
   2614c:	103ff41e 	bne	r2,zero,26120 <___vfprintf_internal_r+0xa8c>
   26150:	e2c03fcc 	andi	r11,fp,255
   26154:	5ac0201c 	xori	r11,r11,128
   26158:	01000044 	movi	r4,1
   2615c:	01400804 	movi	r5,32
   26160:	5affe004 	addi	r11,r11,-128
   26164:	003d9706 	br	257c4 <___vfprintf_internal_r+0x130>
   26168:	21003fcc 	andi	r4,r4,255
   2616c:	20051e1e 	bne	r4,zero,275e8 <___vfprintf_internal_r+0x1f54>
   26170:	008000f4 	movhi	r2,3
   26174:	108c6d04 	addi	r2,r2,12724
   26178:	d8800c15 	stw	r2,48(sp)
   2617c:	6080080c 	andi	r2,r12,32
   26180:	103f791e 	bne	r2,zero,25f68 <___vfprintf_internal_r+0x8d4>
   26184:	d9000617 	ldw	r4,24(sp)
   26188:	6080040c 	andi	r2,r12,16
   2618c:	20c00104 	addi	r3,r4,4
   26190:	10025b1e 	bne	r2,zero,26b00 <___vfprintf_internal_r+0x146c>
   26194:	6080100c 	andi	r2,r12,64
   26198:	10046026 	beq	r2,zero,2731c <___vfprintf_internal_r+0x1c88>
   2619c:	d8800617 	ldw	r2,24(sp)
   261a0:	002b883a 	mov	r21,zero
   261a4:	d8c00615 	stw	r3,24(sp)
   261a8:	1500000b 	ldhu	r20,0(r2)
   261ac:	003f7306 	br	25f7c <___vfprintf_internal_r+0x8e8>
   261b0:	d8800617 	ldw	r2,24(sp)
   261b4:	d8001345 	stb	zero,77(sp)
   261b8:	14400017 	ldw	r17,0(r2)
   261bc:	10c00104 	addi	r3,r2,4
   261c0:	88028e26 	beq	r17,zero,26bfc <___vfprintf_internal_r+0x1568>
   261c4:	40bfffe0 	cmpeqi	r2,r8,-1
   261c8:	1003c01e 	bne	r2,zero,270cc <___vfprintf_internal_r+0x1a38>
   261cc:	400d883a 	mov	r6,r8
   261d0:	000b883a 	mov	r5,zero
   261d4:	8809883a 	mov	r4,r17
   261d8:	d8c00715 	stw	r3,28(sp)
   261dc:	db000615 	stw	r12,24(sp)
   261e0:	da000415 	stw	r8,16(sp)
   261e4:	002ae600 	call	2ae60 <memchr>
   261e8:	da000417 	ldw	r8,16(sp)
   261ec:	db000617 	ldw	r12,24(sp)
   261f0:	d8c00717 	ldw	r3,28(sp)
   261f4:	1004ec26 	beq	r2,zero,275a8 <___vfprintf_internal_r+0x1f14>
   261f8:	146bc83a 	sub	r21,r2,r17
   261fc:	a829883a 	mov	r20,r21
   26200:	d8c00615 	stw	r3,24(sp)
   26204:	003de806 	br	259a8 <___vfprintf_internal_r+0x314>
   26208:	bac00007 	ldb	r11,0(r23)
   2620c:	63000814 	ori	r12,r12,32
   26210:	003d6c06 	br	257c4 <___vfprintf_internal_r+0x130>
   26214:	d8c00617 	ldw	r3,24(sp)
   26218:	00800c04 	movi	r2,48
   2621c:	d8801385 	stb	r2,78(sp)
   26220:	00801e04 	movi	r2,120
   26224:	010000f4 	movhi	r4,3
   26228:	d88013c5 	stb	r2,79(sp)
   2622c:	18800104 	addi	r2,r3,4
   26230:	d8800615 	stw	r2,24(sp)
   26234:	208c6d04 	addi	r2,r4,12724
   26238:	d8800c15 	stw	r2,48(sp)
   2623c:	1d000017 	ldw	r20,0(r3)
   26240:	002b883a 	mov	r21,zero
   26244:	63000094 	ori	r12,r12,2
   26248:	00800084 	movi	r2,2
   2624c:	07001e04 	movi	fp,120
   26250:	003e5c06 	br	25bc4 <___vfprintf_internal_r+0x530>
   26254:	21003fcc 	andi	r4,r4,255
   26258:	2004e71e 	bne	r4,zero,275f8 <___vfprintf_internal_r+0x1f64>
   2625c:	d9000617 	ldw	r4,24(sp)
   26260:	6080080c 	andi	r2,r12,32
   26264:	20c00017 	ldw	r3,0(r4)
   26268:	21000104 	addi	r4,r4,4
   2626c:	d9000615 	stw	r4,24(sp)
   26270:	10021e1e 	bne	r2,zero,26aec <___vfprintf_internal_r+0x1458>
   26274:	6080040c 	andi	r2,r12,16
   26278:	1002ae1e 	bne	r2,zero,26d34 <___vfprintf_internal_r+0x16a0>
   2627c:	6300100c 	andi	r12,r12,64
   26280:	6002ac26 	beq	r12,zero,26d34 <___vfprintf_internal_r+0x16a0>
   26284:	d8800517 	ldw	r2,20(sp)
   26288:	1880000d 	sth	r2,0(r3)
   2628c:	003d3506 	br	25764 <___vfprintf_internal_r+0xd0>
   26290:	bac00007 	ldb	r11,0(r23)
   26294:	58801b18 	cmpnei	r2,r11,108
   26298:	10024926 	beq	r2,zero,26bc0 <___vfprintf_internal_r+0x152c>
   2629c:	63000414 	ori	r12,r12,16
   262a0:	003d4806 	br	257c4 <___vfprintf_internal_r+0x130>
   262a4:	e2c01990 	cmplti	r11,fp,102
   262a8:	5800cb1e 	bne	r11,zero,265d8 <___vfprintf_internal_r+0xf44>
   262ac:	d9000917 	ldw	r4,36(sp)
   262b0:	d9400a17 	ldw	r5,40(sp)
   262b4:	000d883a 	mov	r6,zero
   262b8:	000f883a 	mov	r7,zero
   262bc:	d8c00e15 	stw	r3,56(sp)
   262c0:	002fdb40 	call	2fdb4 <__eqdf2>
   262c4:	d8c00e17 	ldw	r3,56(sp)
   262c8:	1001641e 	bne	r2,zero,2685c <___vfprintf_internal_r+0x11c8>
   262cc:	d8801b17 	ldw	r2,108(sp)
   262d0:	010000f4 	movhi	r4,3
   262d4:	210c7904 	addi	r4,r4,12772
   262d8:	10800044 	addi	r2,r2,1
   262dc:	18c00044 	addi	r3,r3,1
   262e0:	b1000015 	stw	r4,0(r22)
   262e4:	01000044 	movi	r4,1
   262e8:	d8801b15 	stw	r2,108(sp)
   262ec:	b1000115 	stw	r4,4(r22)
   262f0:	d8c01c15 	stw	r3,112(sp)
   262f4:	10800208 	cmpgei	r2,r2,8
   262f8:	1003621e 	bne	r2,zero,27084 <___vfprintf_internal_r+0x19f0>
   262fc:	b5800204 	addi	r22,r22,8
   26300:	d8801417 	ldw	r2,80(sp)
   26304:	d9000817 	ldw	r4,32(sp)
   26308:	1101e70e 	bge	r2,r4,26aa8 <___vfprintf_internal_r+0x1414>
   2630c:	d8800d17 	ldw	r2,52(sp)
   26310:	d9000b17 	ldw	r4,44(sp)
   26314:	b0800015 	stw	r2,0(r22)
   26318:	d8801b17 	ldw	r2,108(sp)
   2631c:	1907883a 	add	r3,r3,r4
   26320:	b1000115 	stw	r4,4(r22)
   26324:	10800044 	addi	r2,r2,1
   26328:	d8801b15 	stw	r2,108(sp)
   2632c:	d8c01c15 	stw	r3,112(sp)
   26330:	10800208 	cmpgei	r2,r2,8
   26334:	1002291e 	bne	r2,zero,26bdc <___vfprintf_internal_r+0x1548>
   26338:	b5800204 	addi	r22,r22,8
   2633c:	d8800817 	ldw	r2,32(sp)
   26340:	157fffc4 	addi	r21,r2,-1
   26344:	057dd10e 	bge	zero,r21,25a8c <___vfprintf_internal_r+0x3f8>
   26348:	01c000f4 	movhi	r7,3
   2634c:	a9000450 	cmplti	r4,r21,17
   26350:	d8801b17 	ldw	r2,108(sp)
   26354:	39cc7a04 	addi	r7,r7,12776
   26358:	2003461e 	bne	r4,zero,27074 <___vfprintf_internal_r+0x19e0>
   2635c:	07000404 	movi	fp,16
   26360:	3823883a 	mov	r17,r7
   26364:	00000406 	br	26378 <___vfprintf_internal_r+0xce4>
   26368:	b5800204 	addi	r22,r22,8
   2636c:	ad7ffc04 	addi	r21,r21,-16
   26370:	a9000448 	cmpgei	r4,r21,17
   26374:	20033e26 	beq	r4,zero,27070 <___vfprintf_internal_r+0x19dc>
   26378:	10800044 	addi	r2,r2,1
   2637c:	18c00404 	addi	r3,r3,16
   26380:	b4400015 	stw	r17,0(r22)
   26384:	b7000115 	stw	fp,4(r22)
   26388:	d8c01c15 	stw	r3,112(sp)
   2638c:	d8801b15 	stw	r2,108(sp)
   26390:	11000208 	cmpgei	r4,r2,8
   26394:	203ff426 	beq	r4,zero,26368 <___vfprintf_internal_r+0xcd4>
   26398:	d9801a04 	addi	r6,sp,104
   2639c:	900b883a 	mov	r5,r18
   263a0:	9809883a 	mov	r4,r19
   263a4:	002cce80 	call	2cce8 <__sprint_r>
   263a8:	103dc91e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   263ac:	d8c01c17 	ldw	r3,112(sp)
   263b0:	d8801b17 	ldw	r2,108(sp)
   263b4:	dd802704 	addi	r22,sp,156
   263b8:	003fec06 	br	2636c <___vfprintf_internal_r+0xcd8>
   263bc:	8519c83a 	sub	r12,r16,r20
   263c0:	033da30e 	bge	zero,r12,25a50 <___vfprintf_internal_r+0x3bc>
   263c4:	01c000f4 	movhi	r7,3
   263c8:	61000450 	cmplti	r4,r12,17
   263cc:	d8801b17 	ldw	r2,108(sp)
   263d0:	39cc7a04 	addi	r7,r7,12776
   263d4:	2000281e 	bne	r4,zero,26478 <___vfprintf_internal_r+0xde4>
   263d8:	dc400e15 	stw	r17,56(sp)
   263dc:	dc000f15 	stw	r16,60(sp)
   263e0:	b009883a 	mov	r4,r22
   263e4:	03400404 	movi	r13,16
   263e8:	a02d883a 	mov	r22,r20
   263ec:	6021883a 	mov	r16,r12
   263f0:	4029883a 	mov	r20,r8
   263f4:	3823883a 	mov	r17,r7
   263f8:	00000406 	br	2640c <___vfprintf_internal_r+0xd78>
   263fc:	843ffc04 	addi	r16,r16,-16
   26400:	81400448 	cmpgei	r5,r16,17
   26404:	21000204 	addi	r4,r4,8
   26408:	28001426 	beq	r5,zero,2645c <___vfprintf_internal_r+0xdc8>
   2640c:	10800044 	addi	r2,r2,1
   26410:	18c00404 	addi	r3,r3,16
   26414:	24400015 	stw	r17,0(r4)
   26418:	23400115 	stw	r13,4(r4)
   2641c:	d8c01c15 	stw	r3,112(sp)
   26420:	d8801b15 	stw	r2,108(sp)
   26424:	11400208 	cmpgei	r5,r2,8
   26428:	283ff426 	beq	r5,zero,263fc <___vfprintf_internal_r+0xd68>
   2642c:	d9801a04 	addi	r6,sp,104
   26430:	900b883a 	mov	r5,r18
   26434:	9809883a 	mov	r4,r19
   26438:	002cce80 	call	2cce8 <__sprint_r>
   2643c:	103da41e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   26440:	843ffc04 	addi	r16,r16,-16
   26444:	81400448 	cmpgei	r5,r16,17
   26448:	d8c01c17 	ldw	r3,112(sp)
   2644c:	d8801b17 	ldw	r2,108(sp)
   26450:	d9002704 	addi	r4,sp,156
   26454:	03400404 	movi	r13,16
   26458:	283fec1e 	bne	r5,zero,2640c <___vfprintf_internal_r+0xd78>
   2645c:	8019883a 	mov	r12,r16
   26460:	880f883a 	mov	r7,r17
   26464:	dc000f17 	ldw	r16,60(sp)
   26468:	dc400e17 	ldw	r17,56(sp)
   2646c:	a011883a 	mov	r8,r20
   26470:	b029883a 	mov	r20,r22
   26474:	202d883a 	mov	r22,r4
   26478:	10800044 	addi	r2,r2,1
   2647c:	1b07883a 	add	r3,r3,r12
   26480:	d8801b15 	stw	r2,108(sp)
   26484:	b1c00015 	stw	r7,0(r22)
   26488:	b3000115 	stw	r12,4(r22)
   2648c:	d8c01c15 	stw	r3,112(sp)
   26490:	10800208 	cmpgei	r2,r2,8
   26494:	1003031e 	bne	r2,zero,270a4 <___vfprintf_internal_r+0x1a10>
   26498:	4551c83a 	sub	r8,r8,r21
   2649c:	b5800204 	addi	r22,r22,8
   264a0:	023d6d0e 	bge	zero,r8,25a58 <___vfprintf_internal_r+0x3c4>
   264a4:	01c000f4 	movhi	r7,3
   264a8:	41000450 	cmplti	r4,r8,17
   264ac:	d8801b17 	ldw	r2,108(sp)
   264b0:	39cc7a04 	addi	r7,r7,12776
   264b4:	2000221e 	bne	r4,zero,26540 <___vfprintf_internal_r+0xeac>
   264b8:	dc400e15 	stw	r17,56(sp)
   264bc:	dc000f15 	stw	r16,60(sp)
   264c0:	03000404 	movi	r12,16
   264c4:	4021883a 	mov	r16,r8
   264c8:	3823883a 	mov	r17,r7
   264cc:	00000406 	br	264e0 <___vfprintf_internal_r+0xe4c>
   264d0:	843ffc04 	addi	r16,r16,-16
   264d4:	81000448 	cmpgei	r4,r16,17
   264d8:	b5800204 	addi	r22,r22,8
   264dc:	20001426 	beq	r4,zero,26530 <___vfprintf_internal_r+0xe9c>
   264e0:	10800044 	addi	r2,r2,1
   264e4:	18c00404 	addi	r3,r3,16
   264e8:	b4400015 	stw	r17,0(r22)
   264ec:	b3000115 	stw	r12,4(r22)
   264f0:	d8c01c15 	stw	r3,112(sp)
   264f4:	d8801b15 	stw	r2,108(sp)
   264f8:	11000208 	cmpgei	r4,r2,8
   264fc:	203ff426 	beq	r4,zero,264d0 <___vfprintf_internal_r+0xe3c>
   26500:	d9801a04 	addi	r6,sp,104
   26504:	900b883a 	mov	r5,r18
   26508:	9809883a 	mov	r4,r19
   2650c:	002cce80 	call	2cce8 <__sprint_r>
   26510:	103d6f1e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   26514:	843ffc04 	addi	r16,r16,-16
   26518:	81000448 	cmpgei	r4,r16,17
   2651c:	d8c01c17 	ldw	r3,112(sp)
   26520:	d8801b17 	ldw	r2,108(sp)
   26524:	dd802704 	addi	r22,sp,156
   26528:	03000404 	movi	r12,16
   2652c:	203fec1e 	bne	r4,zero,264e0 <___vfprintf_internal_r+0xe4c>
   26530:	8011883a 	mov	r8,r16
   26534:	880f883a 	mov	r7,r17
   26538:	dc000f17 	ldw	r16,60(sp)
   2653c:	dc400e17 	ldw	r17,56(sp)
   26540:	10800044 	addi	r2,r2,1
   26544:	1a07883a 	add	r3,r3,r8
   26548:	d8801b15 	stw	r2,108(sp)
   2654c:	b1c00015 	stw	r7,0(r22)
   26550:	b2000115 	stw	r8,4(r22)
   26554:	d8c01c15 	stw	r3,112(sp)
   26558:	10800208 	cmpgei	r2,r2,8
   2655c:	10014a1e 	bne	r2,zero,26a88 <___vfprintf_internal_r+0x13f4>
   26560:	b5800204 	addi	r22,r22,8
   26564:	003d3c06 	br	25a58 <___vfprintf_internal_r+0x3c4>
   26568:	10c00060 	cmpeqi	r3,r2,1
   2656c:	1803bc1e 	bne	r3,zero,27460 <___vfprintf_internal_r+0x1dcc>
   26570:	108000a0 	cmpeqi	r2,r2,2
   26574:	db000417 	ldw	r12,16(sp)
   26578:	103ea826 	beq	r2,zero,2601c <___vfprintf_internal_r+0x988>
   2657c:	d9000c17 	ldw	r4,48(sp)
   26580:	dc402704 	addi	r17,sp,156
   26584:	a08003cc 	andi	r2,r20,15
   26588:	a806973a 	slli	r3,r21,28
   2658c:	a028d13a 	srli	r20,r20,4
   26590:	2085883a 	add	r2,r4,r2
   26594:	10800003 	ldbu	r2,0(r2)
   26598:	a82ad13a 	srli	r21,r21,4
   2659c:	1d28b03a 	or	r20,r3,r20
   265a0:	88bfffc5 	stb	r2,-1(r17)
   265a4:	a544b03a 	or	r2,r20,r21
   265a8:	8c7fffc4 	addi	r17,r17,-1
   265ac:	103ff51e 	bne	r2,zero,26584 <___vfprintf_internal_r+0xef0>
   265b0:	d8802704 	addi	r2,sp,156
   265b4:	146bc83a 	sub	r21,r2,r17
   265b8:	db000415 	stw	r12,16(sp)
   265bc:	003e4c06 	br	25ef0 <___vfprintf_internal_r+0x85c>
   265c0:	d9801a04 	addi	r6,sp,104
   265c4:	900b883a 	mov	r5,r18
   265c8:	9809883a 	mov	r4,r19
   265cc:	002cce80 	call	2cce8 <__sprint_r>
   265d0:	103d3926 	beq	r2,zero,25ab8 <___vfprintf_internal_r+0x424>
   265d4:	003d3e06 	br	25ad0 <___vfprintf_internal_r+0x43c>
   265d8:	d8800817 	ldw	r2,32(sp)
   265dc:	da001b17 	ldw	r8,108(sp)
   265e0:	18c00044 	addi	r3,r3,1
   265e4:	10800088 	cmpgei	r2,r2,2
   265e8:	45400044 	addi	r21,r8,1
   265ec:	b7000204 	addi	fp,r22,8
   265f0:	1000f826 	beq	r2,zero,269d4 <___vfprintf_internal_r+0x1340>
   265f4:	00800044 	movi	r2,1
   265f8:	b0800115 	stw	r2,4(r22)
   265fc:	b4400015 	stw	r17,0(r22)
   26600:	d8c01c15 	stw	r3,112(sp)
   26604:	dd401b15 	stw	r21,108(sp)
   26608:	a8800210 	cmplti	r2,r21,8
   2660c:	1001cc26 	beq	r2,zero,26d40 <___vfprintf_internal_r+0x16ac>
   26610:	d8800b17 	ldw	r2,44(sp)
   26614:	d9000d17 	ldw	r4,52(sp)
   26618:	ad400044 	addi	r21,r21,1
   2661c:	1887883a 	add	r3,r3,r2
   26620:	e0800115 	stw	r2,4(fp)
   26624:	e1000015 	stw	r4,0(fp)
   26628:	d8c01c15 	stw	r3,112(sp)
   2662c:	dd401b15 	stw	r21,108(sp)
   26630:	a8800208 	cmpgei	r2,r21,8
   26634:	1001cb1e 	bne	r2,zero,26d64 <___vfprintf_internal_r+0x16d0>
   26638:	e7000204 	addi	fp,fp,8
   2663c:	d9000917 	ldw	r4,36(sp)
   26640:	d9400a17 	ldw	r5,40(sp)
   26644:	aa000044 	addi	r8,r21,1
   26648:	000d883a 	mov	r6,zero
   2664c:	000f883a 	mov	r7,zero
   26650:	d8c00e15 	stw	r3,56(sp)
   26654:	da000715 	stw	r8,28(sp)
   26658:	002fdb40 	call	2fdb4 <__eqdf2>
   2665c:	d8c00817 	ldw	r3,32(sp)
   26660:	da000717 	ldw	r8,28(sp)
   26664:	e5800204 	addi	r22,fp,8
   26668:	1affffc4 	addi	r11,r3,-1
   2666c:	d8c00e17 	ldw	r3,56(sp)
   26670:	1000e526 	beq	r2,zero,26a08 <___vfprintf_internal_r+0x1374>
   26674:	8a400044 	addi	r9,r17,1
   26678:	1ac7883a 	add	r3,r3,r11
   2667c:	da001b15 	stw	r8,108(sp)
   26680:	e2400015 	stw	r9,0(fp)
   26684:	e2c00115 	stw	r11,4(fp)
   26688:	d8c01c15 	stw	r3,112(sp)
   2668c:	42000208 	cmpgei	r8,r8,8
   26690:	40013e1e 	bne	r8,zero,26b8c <___vfprintf_internal_r+0x14f8>
   26694:	e0800404 	addi	r2,fp,16
   26698:	aa000084 	addi	r8,r21,2
   2669c:	b039883a 	mov	fp,r22
   266a0:	102d883a 	mov	r22,r2
   266a4:	d9001017 	ldw	r4,64(sp)
   266a8:	d8801644 	addi	r2,sp,89
   266ac:	da001b15 	stw	r8,108(sp)
   266b0:	20c7883a 	add	r3,r4,r3
   266b4:	e0800015 	stw	r2,0(fp)
   266b8:	e1000115 	stw	r4,4(fp)
   266bc:	d8c01c15 	stw	r3,112(sp)
   266c0:	42000210 	cmplti	r8,r8,8
   266c4:	403cf11e 	bne	r8,zero,25a8c <___vfprintf_internal_r+0x3f8>
   266c8:	d9801a04 	addi	r6,sp,104
   266cc:	900b883a 	mov	r5,r18
   266d0:	9809883a 	mov	r4,r19
   266d4:	002cce80 	call	2cce8 <__sprint_r>
   266d8:	103cfd1e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   266dc:	d8c01c17 	ldw	r3,112(sp)
   266e0:	dd802704 	addi	r22,sp,156
   266e4:	003ce906 	br	25a8c <___vfprintf_internal_r+0x3f8>
   266e8:	db000417 	ldw	r12,16(sp)
   266ec:	003e4706 	br	2600c <___vfprintf_internal_r+0x978>
   266f0:	030000f4 	movhi	r12,3
   266f4:	39000450 	cmplti	r4,r7,17
   266f8:	d8801b17 	ldw	r2,108(sp)
   266fc:	630c7e04 	addi	r12,r12,12792
   26700:	2000321e 	bne	r4,zero,267cc <___vfprintf_internal_r+0x1138>
   26704:	dc401115 	stw	r17,68(sp)
   26708:	b009883a 	mov	r4,r22
   2670c:	9023883a 	mov	r17,r18
   26710:	a82d883a 	mov	r22,r21
   26714:	ddc01215 	stw	r23,72(sp)
   26718:	03c00404 	movi	r15,16
   2671c:	a02f883a 	mov	r23,r20
   26720:	db800e15 	stw	r14,56(sp)
   26724:	8029883a 	mov	r20,r16
   26728:	db400f15 	stw	r13,60(sp)
   2672c:	402b883a 	mov	r21,r8
   26730:	3821883a 	mov	r16,r7
   26734:	6025883a 	mov	r18,r12
   26738:	00000406 	br	2674c <___vfprintf_internal_r+0x10b8>
   2673c:	843ffc04 	addi	r16,r16,-16
   26740:	81800448 	cmpgei	r6,r16,17
   26744:	21000204 	addi	r4,r4,8
   26748:	30001426 	beq	r6,zero,2679c <___vfprintf_internal_r+0x1108>
   2674c:	10800044 	addi	r2,r2,1
   26750:	18c00404 	addi	r3,r3,16
   26754:	24800015 	stw	r18,0(r4)
   26758:	23c00115 	stw	r15,4(r4)
   2675c:	d8c01c15 	stw	r3,112(sp)
   26760:	d8801b15 	stw	r2,108(sp)
   26764:	11800208 	cmpgei	r6,r2,8
   26768:	303ff426 	beq	r6,zero,2673c <___vfprintf_internal_r+0x10a8>
   2676c:	d9801a04 	addi	r6,sp,104
   26770:	880b883a 	mov	r5,r17
   26774:	9809883a 	mov	r4,r19
   26778:	002cce80 	call	2cce8 <__sprint_r>
   2677c:	1001b91e 	bne	r2,zero,26e64 <___vfprintf_internal_r+0x17d0>
   26780:	843ffc04 	addi	r16,r16,-16
   26784:	81800448 	cmpgei	r6,r16,17
   26788:	d8c01c17 	ldw	r3,112(sp)
   2678c:	d8801b17 	ldw	r2,108(sp)
   26790:	d9002704 	addi	r4,sp,156
   26794:	03c00404 	movi	r15,16
   26798:	303fec1e 	bne	r6,zero,2674c <___vfprintf_internal_r+0x10b8>
   2679c:	800f883a 	mov	r7,r16
   267a0:	9019883a 	mov	r12,r18
   267a4:	a021883a 	mov	r16,r20
   267a8:	8825883a 	mov	r18,r17
   267ac:	b829883a 	mov	r20,r23
   267b0:	db800e17 	ldw	r14,56(sp)
   267b4:	db400f17 	ldw	r13,60(sp)
   267b8:	ddc01217 	ldw	r23,72(sp)
   267bc:	dc401117 	ldw	r17,68(sp)
   267c0:	a811883a 	mov	r8,r21
   267c4:	b02b883a 	mov	r21,r22
   267c8:	202d883a 	mov	r22,r4
   267cc:	10800044 	addi	r2,r2,1
   267d0:	19c7883a 	add	r3,r3,r7
   267d4:	d8801b15 	stw	r2,108(sp)
   267d8:	b3000015 	stw	r12,0(r22)
   267dc:	b1c00115 	stw	r7,4(r22)
   267e0:	d8c01c15 	stw	r3,112(sp)
   267e4:	10800208 	cmpgei	r2,r2,8
   267e8:	1001671e 	bne	r2,zero,26d88 <___vfprintf_internal_r+0x16f4>
   267ec:	b5800204 	addi	r22,r22,8
   267f0:	003c7a06 	br	259dc <___vfprintf_internal_r+0x348>
   267f4:	d9801a04 	addi	r6,sp,104
   267f8:	900b883a 	mov	r5,r18
   267fc:	9809883a 	mov	r4,r19
   26800:	da001115 	stw	r8,68(sp)
   26804:	db400f15 	stw	r13,60(sp)
   26808:	db800e15 	stw	r14,56(sp)
   2680c:	002cce80 	call	2cce8 <__sprint_r>
   26810:	103caf1e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   26814:	d8c01c17 	ldw	r3,112(sp)
   26818:	da001117 	ldw	r8,68(sp)
   2681c:	db400f17 	ldw	r13,60(sp)
   26820:	db800e17 	ldw	r14,56(sp)
   26824:	dd802704 	addi	r22,sp,156
   26828:	003c7a06 	br	25a14 <___vfprintf_internal_r+0x380>
   2682c:	d9801a04 	addi	r6,sp,104
   26830:	900b883a 	mov	r5,r18
   26834:	9809883a 	mov	r4,r19
   26838:	da000f15 	stw	r8,60(sp)
   2683c:	db400e15 	stw	r13,56(sp)
   26840:	002cce80 	call	2cce8 <__sprint_r>
   26844:	103ca21e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   26848:	d8c01c17 	ldw	r3,112(sp)
   2684c:	da000f17 	ldw	r8,60(sp)
   26850:	db400e17 	ldw	r13,56(sp)
   26854:	dd802704 	addi	r22,sp,156
   26858:	003c7b06 	br	25a48 <___vfprintf_internal_r+0x3b4>
   2685c:	d9401417 	ldw	r5,80(sp)
   26860:	0141570e 	bge	zero,r5,26dc0 <___vfprintf_internal_r+0x172c>
   26864:	d8800717 	ldw	r2,28(sp)
   26868:	d9000817 	ldw	r4,32(sp)
   2686c:	102b883a 	mov	r21,r2
   26870:	2080b916 	blt	r4,r2,26b58 <___vfprintf_internal_r+0x14c4>
   26874:	05400a0e 	bge	zero,r21,268a0 <___vfprintf_internal_r+0x120c>
   26878:	d8801b17 	ldw	r2,108(sp)
   2687c:	1d47883a 	add	r3,r3,r21
   26880:	b4400015 	stw	r17,0(r22)
   26884:	10800044 	addi	r2,r2,1
   26888:	d8801b15 	stw	r2,108(sp)
   2688c:	b5400115 	stw	r21,4(r22)
   26890:	d8c01c15 	stw	r3,112(sp)
   26894:	10800208 	cmpgei	r2,r2,8
   26898:	10032d1e 	bne	r2,zero,27550 <___vfprintf_internal_r+0x1ebc>
   2689c:	b5800204 	addi	r22,r22,8
   268a0:	a800c516 	blt	r21,zero,26bb8 <___vfprintf_internal_r+0x1524>
   268a4:	d8800717 	ldw	r2,28(sp)
   268a8:	156bc83a 	sub	r21,r2,r21
   268ac:	0540db16 	blt	zero,r21,26c1c <___vfprintf_internal_r+0x1588>
   268b0:	dd401417 	ldw	r21,80(sp)
   268b4:	d8800817 	ldw	r2,32(sp)
   268b8:	a880aa0e 	bge	r21,r2,26b64 <___vfprintf_internal_r+0x14d0>
   268bc:	d8800d17 	ldw	r2,52(sp)
   268c0:	d9000b17 	ldw	r4,44(sp)
   268c4:	b0800015 	stw	r2,0(r22)
   268c8:	d8801b17 	ldw	r2,108(sp)
   268cc:	1907883a 	add	r3,r3,r4
   268d0:	b1000115 	stw	r4,4(r22)
   268d4:	10800044 	addi	r2,r2,1
   268d8:	d8801b15 	stw	r2,108(sp)
   268dc:	d8c01c15 	stw	r3,112(sp)
   268e0:	10800208 	cmpgei	r2,r2,8
   268e4:	1003111e 	bne	r2,zero,2752c <___vfprintf_internal_r+0x1e98>
   268e8:	b5800204 	addi	r22,r22,8
   268ec:	d9000817 	ldw	r4,32(sp)
   268f0:	d9400717 	ldw	r5,28(sp)
   268f4:	2545c83a 	sub	r2,r4,r21
   268f8:	2149c83a 	sub	r4,r4,r5
   268fc:	102b883a 	mov	r21,r2
   26900:	2080010e 	bge	r4,r2,26908 <___vfprintf_internal_r+0x1274>
   26904:	202b883a 	mov	r21,r4
   26908:	05400c0e 	bge	zero,r21,2693c <___vfprintf_internal_r+0x12a8>
   2690c:	d9000717 	ldw	r4,28(sp)
   26910:	1d47883a 	add	r3,r3,r21
   26914:	b5400115 	stw	r21,4(r22)
   26918:	8913883a 	add	r9,r17,r4
   2691c:	d9001b17 	ldw	r4,108(sp)
   26920:	b2400015 	stw	r9,0(r22)
   26924:	d8c01c15 	stw	r3,112(sp)
   26928:	21000044 	addi	r4,r4,1
   2692c:	d9001b15 	stw	r4,108(sp)
   26930:	21000208 	cmpgei	r4,r4,8
   26934:	2003111e 	bne	r4,zero,2757c <___vfprintf_internal_r+0x1ee8>
   26938:	b5800204 	addi	r22,r22,8
   2693c:	a800010e 	bge	r21,zero,26944 <___vfprintf_internal_r+0x12b0>
   26940:	002b883a 	mov	r21,zero
   26944:	156bc83a 	sub	r21,r2,r21
   26948:	057c500e 	bge	zero,r21,25a8c <___vfprintf_internal_r+0x3f8>
   2694c:	01c000f4 	movhi	r7,3
   26950:	a9000450 	cmplti	r4,r21,17
   26954:	d8801b17 	ldw	r2,108(sp)
   26958:	39cc7a04 	addi	r7,r7,12776
   2695c:	2001c51e 	bne	r4,zero,27074 <___vfprintf_internal_r+0x19e0>
   26960:	07000404 	movi	fp,16
   26964:	3823883a 	mov	r17,r7
   26968:	00000406 	br	2697c <___vfprintf_internal_r+0x12e8>
   2696c:	b5800204 	addi	r22,r22,8
   26970:	ad7ffc04 	addi	r21,r21,-16
   26974:	a9000448 	cmpgei	r4,r21,17
   26978:	2001bd26 	beq	r4,zero,27070 <___vfprintf_internal_r+0x19dc>
   2697c:	10800044 	addi	r2,r2,1
   26980:	18c00404 	addi	r3,r3,16
   26984:	b4400015 	stw	r17,0(r22)
   26988:	b7000115 	stw	fp,4(r22)
   2698c:	d8c01c15 	stw	r3,112(sp)
   26990:	d8801b15 	stw	r2,108(sp)
   26994:	11000208 	cmpgei	r4,r2,8
   26998:	203ff426 	beq	r4,zero,2696c <___vfprintf_internal_r+0x12d8>
   2699c:	d9801a04 	addi	r6,sp,104
   269a0:	900b883a 	mov	r5,r18
   269a4:	9809883a 	mov	r4,r19
   269a8:	002cce80 	call	2cce8 <__sprint_r>
   269ac:	103c481e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   269b0:	d8c01c17 	ldw	r3,112(sp)
   269b4:	d8801b17 	ldw	r2,108(sp)
   269b8:	dd802704 	addi	r22,sp,156
   269bc:	003fec06 	br	26970 <___vfprintf_internal_r+0x12dc>
   269c0:	4002a71e 	bne	r8,zero,27460 <___vfprintf_internal_r+0x1dcc>
   269c4:	0011883a 	mov	r8,zero
   269c8:	002b883a 	mov	r21,zero
   269cc:	dc402704 	addi	r17,sp,156
   269d0:	003d4706 	br	25ef0 <___vfprintf_internal_r+0x85c>
   269d4:	d8800417 	ldw	r2,16(sp)
   269d8:	1080004c 	andi	r2,r2,1
   269dc:	103f051e 	bne	r2,zero,265f4 <___vfprintf_internal_r+0xf60>
   269e0:	00800044 	movi	r2,1
   269e4:	dd401b15 	stw	r21,108(sp)
   269e8:	b4400015 	stw	r17,0(r22)
   269ec:	b0800115 	stw	r2,4(r22)
   269f0:	d8c01c15 	stw	r3,112(sp)
   269f4:	ad400208 	cmpgei	r21,r21,8
   269f8:	a800641e 	bne	r21,zero,26b8c <___vfprintf_internal_r+0x14f8>
   269fc:	42000084 	addi	r8,r8,2
   26a00:	b5800404 	addi	r22,r22,16
   26a04:	003f2706 	br	266a4 <___vfprintf_internal_r+0x1010>
   26a08:	02ff260e 	bge	zero,r11,266a4 <___vfprintf_internal_r+0x1010>
   26a0c:	58800450 	cmplti	r2,r11,17
   26a10:	01c000f4 	movhi	r7,3
   26a14:	10034c1e 	bne	r2,zero,27748 <___vfprintf_internal_r+0x20b4>
   26a18:	39cc7a04 	addi	r7,r7,12776
   26a1c:	dc000715 	stw	r16,28(sp)
   26a20:	05800404 	movi	r22,16
   26a24:	5823883a 	mov	r17,r11
   26a28:	402b883a 	mov	r21,r8
   26a2c:	3821883a 	mov	r16,r7
   26a30:	00000506 	br	26a48 <___vfprintf_internal_r+0x13b4>
   26a34:	e7000204 	addi	fp,fp,8
   26a38:	8c7ffc04 	addi	r17,r17,-16
   26a3c:	88800448 	cmpgei	r2,r17,17
   26a40:	1001d626 	beq	r2,zero,2719c <___vfprintf_internal_r+0x1b08>
   26a44:	ad400044 	addi	r21,r21,1
   26a48:	18c00404 	addi	r3,r3,16
   26a4c:	e4000015 	stw	r16,0(fp)
   26a50:	e5800115 	stw	r22,4(fp)
   26a54:	d8c01c15 	stw	r3,112(sp)
   26a58:	dd401b15 	stw	r21,108(sp)
   26a5c:	a8800208 	cmpgei	r2,r21,8
   26a60:	103ff426 	beq	r2,zero,26a34 <___vfprintf_internal_r+0x13a0>
   26a64:	d9801a04 	addi	r6,sp,104
   26a68:	900b883a 	mov	r5,r18
   26a6c:	9809883a 	mov	r4,r19
   26a70:	002cce80 	call	2cce8 <__sprint_r>
   26a74:	103c161e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   26a78:	dd401b17 	ldw	r21,108(sp)
   26a7c:	d8c01c17 	ldw	r3,112(sp)
   26a80:	df002704 	addi	fp,sp,156
   26a84:	003fec06 	br	26a38 <___vfprintf_internal_r+0x13a4>
   26a88:	d9801a04 	addi	r6,sp,104
   26a8c:	900b883a 	mov	r5,r18
   26a90:	9809883a 	mov	r4,r19
   26a94:	002cce80 	call	2cce8 <__sprint_r>
   26a98:	103c0d1e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   26a9c:	d8c01c17 	ldw	r3,112(sp)
   26aa0:	dd802704 	addi	r22,sp,156
   26aa4:	003bec06 	br	25a58 <___vfprintf_internal_r+0x3c4>
   26aa8:	d8800417 	ldw	r2,16(sp)
   26aac:	1080004c 	andi	r2,r2,1
   26ab0:	103bf626 	beq	r2,zero,25a8c <___vfprintf_internal_r+0x3f8>
   26ab4:	003e1506 	br	2630c <___vfprintf_internal_r+0xc78>
   26ab8:	dc402704 	addi	r17,sp,156
   26abc:	003d0c06 	br	25ef0 <___vfprintf_internal_r+0x85c>
   26ac0:	00800c04 	movi	r2,48
   26ac4:	d8801385 	stb	r2,78(sp)
   26ac8:	df0013c5 	stb	fp,79(sp)
   26acc:	63000094 	ori	r12,r12,2
   26ad0:	00800084 	movi	r2,2
   26ad4:	003c3b06 	br	25bc4 <___vfprintf_internal_r+0x530>
   26ad8:	25000017 	ldw	r20,0(r4)
   26adc:	002b883a 	mov	r21,zero
   26ae0:	d8c00615 	stw	r3,24(sp)
   26ae4:	00800044 	movi	r2,1
   26ae8:	003c3606 	br	25bc4 <___vfprintf_internal_r+0x530>
   26aec:	d9000517 	ldw	r4,20(sp)
   26af0:	2005d7fa 	srai	r2,r4,31
   26af4:	19000015 	stw	r4,0(r3)
   26af8:	18800115 	stw	r2,4(r3)
   26afc:	003b1906 	br	25764 <___vfprintf_internal_r+0xd0>
   26b00:	25000017 	ldw	r20,0(r4)
   26b04:	002b883a 	mov	r21,zero
   26b08:	d8c00615 	stw	r3,24(sp)
   26b0c:	003d1b06 	br	25f7c <___vfprintf_internal_r+0x8e8>
   26b10:	25000017 	ldw	r20,0(r4)
   26b14:	002b883a 	mov	r21,zero
   26b18:	d8c00615 	stw	r3,24(sp)
   26b1c:	0005883a 	mov	r2,zero
   26b20:	003c2806 	br	25bc4 <___vfprintf_internal_r+0x530>
   26b24:	18800017 	ldw	r2,0(r3)
   26b28:	d8800915 	stw	r2,36(sp)
   26b2c:	18800117 	ldw	r2,4(r3)
   26b30:	d8800a15 	stw	r2,40(sp)
   26b34:	003c5906 	br	25c9c <___vfprintf_internal_r+0x608>
   26b38:	25000017 	ldw	r20,0(r4)
   26b3c:	d8c00615 	stw	r3,24(sp)
   26b40:	a02bd7fa 	srai	r21,r20,31
   26b44:	a805883a 	mov	r2,r21
   26b48:	003cd706 	br	25ea8 <___vfprintf_internal_r+0x814>
   26b4c:	0421c83a 	sub	r16,zero,r16
   26b50:	d8800615 	stw	r2,24(sp)
   26b54:	003d6306 	br	260e4 <___vfprintf_internal_r+0xa50>
   26b58:	202b883a 	mov	r21,r4
   26b5c:	057f4616 	blt	zero,r21,26878 <___vfprintf_internal_r+0x11e4>
   26b60:	003f4f06 	br	268a0 <___vfprintf_internal_r+0x120c>
   26b64:	d8800417 	ldw	r2,16(sp)
   26b68:	1080004c 	andi	r2,r2,1
   26b6c:	103f531e 	bne	r2,zero,268bc <___vfprintf_internal_r+0x1228>
   26b70:	d9000817 	ldw	r4,32(sp)
   26b74:	d9400717 	ldw	r5,28(sp)
   26b78:	2545c83a 	sub	r2,r4,r21
   26b7c:	216bc83a 	sub	r21,r4,r5
   26b80:	157f6e0e 	bge	r2,r21,2693c <___vfprintf_internal_r+0x12a8>
   26b84:	102b883a 	mov	r21,r2
   26b88:	003f6c06 	br	2693c <___vfprintf_internal_r+0x12a8>
   26b8c:	d9801a04 	addi	r6,sp,104
   26b90:	900b883a 	mov	r5,r18
   26b94:	9809883a 	mov	r4,r19
   26b98:	002cce80 	call	2cce8 <__sprint_r>
   26b9c:	103bcc1e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   26ba0:	da001b17 	ldw	r8,108(sp)
   26ba4:	d8c01c17 	ldw	r3,112(sp)
   26ba8:	dd802904 	addi	r22,sp,164
   26bac:	42000044 	addi	r8,r8,1
   26bb0:	df002704 	addi	fp,sp,156
   26bb4:	003ebb06 	br	266a4 <___vfprintf_internal_r+0x1010>
   26bb8:	002b883a 	mov	r21,zero
   26bbc:	003f3906 	br	268a4 <___vfprintf_internal_r+0x1210>
   26bc0:	bf000043 	ldbu	fp,1(r23)
   26bc4:	63000814 	ori	r12,r12,32
   26bc8:	bdc00044 	addi	r23,r23,1
   26bcc:	e2c03fcc 	andi	r11,fp,255
   26bd0:	5ac0201c 	xori	r11,r11,128
   26bd4:	5affe004 	addi	r11,r11,-128
   26bd8:	003afa06 	br	257c4 <___vfprintf_internal_r+0x130>
   26bdc:	d9801a04 	addi	r6,sp,104
   26be0:	900b883a 	mov	r5,r18
   26be4:	9809883a 	mov	r4,r19
   26be8:	002cce80 	call	2cce8 <__sprint_r>
   26bec:	103bb81e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   26bf0:	d8c01c17 	ldw	r3,112(sp)
   26bf4:	dd802704 	addi	r22,sp,156
   26bf8:	003dd006 	br	2633c <___vfprintf_internal_r+0xca8>
   26bfc:	408001f0 	cmpltui	r2,r8,7
   26c00:	402b883a 	mov	r21,r8
   26c04:	1001e726 	beq	r2,zero,273a4 <___vfprintf_internal_r+0x1d10>
   26c08:	044000f4 	movhi	r17,3
   26c0c:	a829883a 	mov	r20,r21
   26c10:	d8c00615 	stw	r3,24(sp)
   26c14:	8c4c7704 	addi	r17,r17,12764
   26c18:	003b6306 	br	259a8 <___vfprintf_internal_r+0x314>
   26c1c:	01c000f4 	movhi	r7,3
   26c20:	a9000450 	cmplti	r4,r21,17
   26c24:	d8801b17 	ldw	r2,108(sp)
   26c28:	39cc7a04 	addi	r7,r7,12776
   26c2c:	2001c21e 	bne	r4,zero,27338 <___vfprintf_internal_r+0x1ca4>
   26c30:	dc000e15 	stw	r16,56(sp)
   26c34:	07000404 	movi	fp,16
   26c38:	3821883a 	mov	r16,r7
   26c3c:	00000406 	br	26c50 <___vfprintf_internal_r+0x15bc>
   26c40:	b5800204 	addi	r22,r22,8
   26c44:	ad7ffc04 	addi	r21,r21,-16
   26c48:	a9000448 	cmpgei	r4,r21,17
   26c4c:	2001b826 	beq	r4,zero,27330 <___vfprintf_internal_r+0x1c9c>
   26c50:	10800044 	addi	r2,r2,1
   26c54:	18c00404 	addi	r3,r3,16
   26c58:	b4000015 	stw	r16,0(r22)
   26c5c:	b7000115 	stw	fp,4(r22)
   26c60:	d8c01c15 	stw	r3,112(sp)
   26c64:	d8801b15 	stw	r2,108(sp)
   26c68:	11000208 	cmpgei	r4,r2,8
   26c6c:	203ff426 	beq	r4,zero,26c40 <___vfprintf_internal_r+0x15ac>
   26c70:	d9801a04 	addi	r6,sp,104
   26c74:	900b883a 	mov	r5,r18
   26c78:	9809883a 	mov	r4,r19
   26c7c:	002cce80 	call	2cce8 <__sprint_r>
   26c80:	103b931e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   26c84:	d8c01c17 	ldw	r3,112(sp)
   26c88:	d8801b17 	ldw	r2,108(sp)
   26c8c:	dd802704 	addi	r22,sp,156
   26c90:	003fec06 	br	26c44 <___vfprintf_internal_r+0x15b0>
   26c94:	dc402704 	addi	r17,sp,156
   26c98:	a805883a 	mov	r2,r21
   26c9c:	dc000715 	stw	r16,28(sp)
   26ca0:	902b883a 	mov	r21,r18
   26ca4:	8821883a 	mov	r16,r17
   26ca8:	db000415 	stw	r12,16(sp)
   26cac:	a023883a 	mov	r17,r20
   26cb0:	da000e15 	stw	r8,56(sp)
   26cb4:	9829883a 	mov	r20,r19
   26cb8:	1025883a 	mov	r18,r2
   26cbc:	6827883a 	mov	r19,r13
   26cc0:	8809883a 	mov	r4,r17
   26cc4:	900b883a 	mov	r5,r18
   26cc8:	01800284 	movi	r6,10
   26ccc:	000f883a 	mov	r7,zero
   26cd0:	002f7f00 	call	2f7f0 <__umoddi3>
   26cd4:	10800c04 	addi	r2,r2,48
   26cd8:	8809883a 	mov	r4,r17
   26cdc:	900b883a 	mov	r5,r18
   26ce0:	01800284 	movi	r6,10
   26ce4:	000f883a 	mov	r7,zero
   26ce8:	80bfffc5 	stb	r2,-1(r16)
   26cec:	002f1d00 	call	2f1d0 <__udivdi3>
   26cf0:	900d883a 	mov	r6,r18
   26cf4:	880f883a 	mov	r7,r17
   26cf8:	843fffc4 	addi	r16,r16,-1
   26cfc:	1023883a 	mov	r17,r2
   26d00:	1825883a 	mov	r18,r3
   26d04:	303fee1e 	bne	r6,zero,26cc0 <___vfprintf_internal_r+0x162c>
   26d08:	39c002a8 	cmpgeui	r7,r7,10
   26d0c:	383fec1e 	bne	r7,zero,26cc0 <___vfprintf_internal_r+0x162c>
   26d10:	8023883a 	mov	r17,r16
   26d14:	d8802704 	addi	r2,sp,156
   26d18:	981b883a 	mov	r13,r19
   26d1c:	a825883a 	mov	r18,r21
   26d20:	dc000717 	ldw	r16,28(sp)
   26d24:	da000e17 	ldw	r8,56(sp)
   26d28:	a027883a 	mov	r19,r20
   26d2c:	146bc83a 	sub	r21,r2,r17
   26d30:	003c6f06 	br	25ef0 <___vfprintf_internal_r+0x85c>
   26d34:	d8800517 	ldw	r2,20(sp)
   26d38:	18800015 	stw	r2,0(r3)
   26d3c:	003a8906 	br	25764 <___vfprintf_internal_r+0xd0>
   26d40:	d9801a04 	addi	r6,sp,104
   26d44:	900b883a 	mov	r5,r18
   26d48:	9809883a 	mov	r4,r19
   26d4c:	002cce80 	call	2cce8 <__sprint_r>
   26d50:	103b5f1e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   26d54:	d8c01c17 	ldw	r3,112(sp)
   26d58:	dd401b17 	ldw	r21,108(sp)
   26d5c:	df002704 	addi	fp,sp,156
   26d60:	003e2b06 	br	26610 <___vfprintf_internal_r+0xf7c>
   26d64:	d9801a04 	addi	r6,sp,104
   26d68:	900b883a 	mov	r5,r18
   26d6c:	9809883a 	mov	r4,r19
   26d70:	002cce80 	call	2cce8 <__sprint_r>
   26d74:	103b561e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   26d78:	d8c01c17 	ldw	r3,112(sp)
   26d7c:	dd401b17 	ldw	r21,108(sp)
   26d80:	df002704 	addi	fp,sp,156
   26d84:	003e2d06 	br	2663c <___vfprintf_internal_r+0xfa8>
   26d88:	d9801a04 	addi	r6,sp,104
   26d8c:	900b883a 	mov	r5,r18
   26d90:	9809883a 	mov	r4,r19
   26d94:	da001115 	stw	r8,68(sp)
   26d98:	db400f15 	stw	r13,60(sp)
   26d9c:	db800e15 	stw	r14,56(sp)
   26da0:	002cce80 	call	2cce8 <__sprint_r>
   26da4:	103b4a1e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   26da8:	d8c01c17 	ldw	r3,112(sp)
   26dac:	da001117 	ldw	r8,68(sp)
   26db0:	db400f17 	ldw	r13,60(sp)
   26db4:	db800e17 	ldw	r14,56(sp)
   26db8:	dd802704 	addi	r22,sp,156
   26dbc:	003b0706 	br	259dc <___vfprintf_internal_r+0x348>
   26dc0:	d8801b17 	ldw	r2,108(sp)
   26dc4:	010000f4 	movhi	r4,3
   26dc8:	210c7904 	addi	r4,r4,12772
   26dcc:	10800044 	addi	r2,r2,1
   26dd0:	18c00044 	addi	r3,r3,1
   26dd4:	b1000015 	stw	r4,0(r22)
   26dd8:	01000044 	movi	r4,1
   26ddc:	d8801b15 	stw	r2,108(sp)
   26de0:	b1000115 	stw	r4,4(r22)
   26de4:	d8c01c15 	stw	r3,112(sp)
   26de8:	10800208 	cmpgei	r2,r2,8
   26dec:	1001641e 	bne	r2,zero,27380 <___vfprintf_internal_r+0x1cec>
   26df0:	b5800204 	addi	r22,r22,8
   26df4:	2800bd1e 	bne	r5,zero,270ec <___vfprintf_internal_r+0x1a58>
   26df8:	d8800417 	ldw	r2,16(sp)
   26dfc:	d9000817 	ldw	r4,32(sp)
   26e00:	1080004c 	andi	r2,r2,1
   26e04:	1104b03a 	or	r2,r2,r4
   26e08:	103b2026 	beq	r2,zero,25a8c <___vfprintf_internal_r+0x3f8>
   26e0c:	d8800d17 	ldw	r2,52(sp)
   26e10:	d9000b17 	ldw	r4,44(sp)
   26e14:	b0800015 	stw	r2,0(r22)
   26e18:	d8801b17 	ldw	r2,108(sp)
   26e1c:	20c7883a 	add	r3,r4,r3
   26e20:	b1000115 	stw	r4,4(r22)
   26e24:	10800044 	addi	r2,r2,1
   26e28:	d8c01c15 	stw	r3,112(sp)
   26e2c:	d8801b15 	stw	r2,108(sp)
   26e30:	11000208 	cmpgei	r4,r2,8
   26e34:	2001771e 	bne	r4,zero,27414 <___vfprintf_internal_r+0x1d80>
   26e38:	b5800204 	addi	r22,r22,8
   26e3c:	d9000817 	ldw	r4,32(sp)
   26e40:	10800044 	addi	r2,r2,1
   26e44:	d8801b15 	stw	r2,108(sp)
   26e48:	20c7883a 	add	r3,r4,r3
   26e4c:	b4400015 	stw	r17,0(r22)
   26e50:	b1000115 	stw	r4,4(r22)
   26e54:	d8c01c15 	stw	r3,112(sp)
   26e58:	10800208 	cmpgei	r2,r2,8
   26e5c:	103b0a26 	beq	r2,zero,25a88 <___vfprintf_internal_r+0x3f4>
   26e60:	003e1906 	br	266c8 <___vfprintf_internal_r+0x1034>
   26e64:	8825883a 	mov	r18,r17
   26e68:	003b1906 	br	25ad0 <___vfprintf_internal_r+0x43c>
   26e6c:	d9000917 	ldw	r4,36(sp)
   26e70:	d9400a17 	ldw	r5,40(sp)
   26e74:	da000615 	stw	r8,24(sp)
   26e78:	200d883a 	mov	r6,r4
   26e7c:	280f883a 	mov	r7,r5
   26e80:	db000415 	stw	r12,16(sp)
   26e84:	00250f40 	call	250f4 <__unorddf2>
   26e88:	db000417 	ldw	r12,16(sp)
   26e8c:	da000617 	ldw	r8,24(sp)
   26e90:	1002061e 	bne	r2,zero,276ac <___vfprintf_internal_r+0x2018>
   26e94:	057ff7c4 	movi	r21,-33
   26e98:	40bfffe0 	cmpeqi	r2,r8,-1
   26e9c:	e56a703a 	and	r21,fp,r21
   26ea0:	1001b41e 	bne	r2,zero,27574 <___vfprintf_internal_r+0x1ee0>
   26ea4:	a88011d8 	cmpnei	r2,r21,71
   26ea8:	10015726 	beq	r2,zero,27408 <___vfprintf_internal_r+0x1d74>
   26eac:	60804014 	ori	r2,r12,256
   26eb0:	d8800415 	stw	r2,16(sp)
   26eb4:	d8800a17 	ldw	r2,40(sp)
   26eb8:	10012d16 	blt	r2,zero,27370 <___vfprintf_internal_r+0x1cdc>
   26ebc:	dd000a17 	ldw	r20,40(sp)
   26ec0:	d8000605 	stb	zero,24(sp)
   26ec4:	e08019a0 	cmpeqi	r2,fp,102
   26ec8:	d8800f15 	stw	r2,60(sp)
   26ecc:	1000d21e 	bne	r2,zero,27218 <___vfprintf_internal_r+0x1b84>
   26ed0:	e08011a0 	cmpeqi	r2,fp,70
   26ed4:	1000d01e 	bne	r2,zero,27218 <___vfprintf_internal_r+0x1b84>
   26ed8:	a8801158 	cmpnei	r2,r21,69
   26edc:	10016226 	beq	r2,zero,27468 <___vfprintf_internal_r+0x1dd4>
   26ee0:	d8801804 	addi	r2,sp,96
   26ee4:	d8800315 	stw	r2,12(sp)
   26ee8:	d9400917 	ldw	r5,36(sp)
   26eec:	d8801504 	addi	r2,sp,84
   26ef0:	d8800215 	stw	r2,8(sp)
   26ef4:	d8801404 	addi	r2,sp,80
   26ef8:	da000015 	stw	r8,0(sp)
   26efc:	9809883a 	mov	r4,r19
   26f00:	d8800115 	stw	r2,4(sp)
   26f04:	01c00084 	movi	r7,2
   26f08:	a00d883a 	mov	r6,r20
   26f0c:	db000815 	stw	r12,32(sp)
   26f10:	da000715 	stw	r8,28(sp)
   26f14:	0027bf80 	call	27bf8 <_dtoa_r>
   26f18:	da000717 	ldw	r8,28(sp)
   26f1c:	e10019d8 	cmpnei	r4,fp,103
   26f20:	db000817 	ldw	r12,32(sp)
   26f24:	1023883a 	mov	r17,r2
   26f28:	4007883a 	mov	r3,r8
   26f2c:	2001621e 	bne	r4,zero,274b8 <___vfprintf_internal_r+0x1e24>
   26f30:	6080004c 	andi	r2,r12,1
   26f34:	1001621e 	bne	r2,zero,274c0 <___vfprintf_internal_r+0x1e2c>
   26f38:	d8801417 	ldw	r2,80(sp)
   26f3c:	ad4011e0 	cmpeqi	r21,r21,71
   26f40:	d8800715 	stw	r2,28(sp)
   26f44:	d8801817 	ldw	r2,96(sp)
   26f48:	1445c83a 	sub	r2,r2,r17
   26f4c:	d8800815 	stw	r2,32(sp)
   26f50:	a8000526 	beq	r21,zero,26f68 <___vfprintf_internal_r+0x18d4>
   26f54:	d8c00717 	ldw	r3,28(sp)
   26f58:	18bfff50 	cmplti	r2,r3,-3
   26f5c:	1000011e 	bne	r2,zero,26f64 <___vfprintf_internal_r+0x18d0>
   26f60:	40c1670e 	bge	r8,r3,27500 <___vfprintf_internal_r+0x1e6c>
   26f64:	e73fff84 	addi	fp,fp,-2
   26f68:	d8800717 	ldw	r2,28(sp)
   26f6c:	df001645 	stb	fp,89(sp)
   26f70:	157fffc4 	addi	r21,r2,-1
   26f74:	dd401415 	stw	r21,80(sp)
   26f78:	a801d416 	blt	r21,zero,276cc <___vfprintf_internal_r+0x2038>
   26f7c:	00800ac4 	movi	r2,43
   26f80:	d8801685 	stb	r2,90(sp)
   26f84:	a8800290 	cmplti	r2,r21,10
   26f88:	1001c11e 	bne	r2,zero,27690 <___vfprintf_internal_r+0x1ffc>
   26f8c:	d98019c4 	addi	r6,sp,103
   26f90:	9029883a 	mov	r20,r18
   26f94:	dc400715 	stw	r17,28(sp)
   26f98:	8025883a 	mov	r18,r16
   26f9c:	db000f15 	stw	r12,60(sp)
   26fa0:	3021883a 	mov	r16,r6
   26fa4:	a809883a 	mov	r4,r21
   26fa8:	01400284 	movi	r5,10
   26fac:	0022b480 	call	22b48 <__modsi3>
   26fb0:	10800c04 	addi	r2,r2,48
   26fb4:	a809883a 	mov	r4,r21
   26fb8:	80bfffc5 	stb	r2,-1(r16)
   26fbc:	01400284 	movi	r5,10
   26fc0:	0022ac80 	call	22ac8 <__divsi3>
   26fc4:	a9001908 	cmpgei	r4,r21,100
   26fc8:	8023883a 	mov	r17,r16
   26fcc:	102b883a 	mov	r21,r2
   26fd0:	843fffc4 	addi	r16,r16,-1
   26fd4:	203ff31e 	bne	r4,zero,26fa4 <___vfprintf_internal_r+0x1910>
   26fd8:	800d883a 	mov	r6,r16
   26fdc:	11000c04 	addi	r4,r2,48
   26fe0:	9021883a 	mov	r16,r18
   26fe4:	a025883a 	mov	r18,r20
   26fe8:	8829883a 	mov	r20,r17
   26fec:	a0bfff84 	addi	r2,r20,-2
   26ff0:	313fffc5 	stb	r4,-1(r6)
   26ff4:	d8c019c4 	addi	r3,sp,103
   26ff8:	db000f17 	ldw	r12,60(sp)
   26ffc:	dc400717 	ldw	r17,28(sp)
   27000:	10c1d62e 	bgeu	r2,r3,2775c <___vfprintf_internal_r+0x20c8>
   27004:	d8c016c4 	addi	r3,sp,91
   27008:	00000106 	br	27010 <___vfprintf_internal_r+0x197c>
   2700c:	11000003 	ldbu	r4,0(r2)
   27010:	19000005 	stb	r4,0(r3)
   27014:	10800044 	addi	r2,r2,1
   27018:	d90019c4 	addi	r4,sp,103
   2701c:	18c00044 	addi	r3,r3,1
   27020:	113ffa1e 	bne	r2,r4,2700c <___vfprintf_internal_r+0x1978>
   27024:	d8801a44 	addi	r2,sp,105
   27028:	d8c016c4 	addi	r3,sp,91
   2702c:	1505c83a 	sub	r2,r2,r20
   27030:	1885883a 	add	r2,r3,r2
   27034:	d8c01644 	addi	r3,sp,89
   27038:	10c5c83a 	sub	r2,r2,r3
   2703c:	d8801015 	stw	r2,64(sp)
   27040:	d8c00817 	ldw	r3,32(sp)
   27044:	d9001017 	ldw	r4,64(sp)
   27048:	18800088 	cmpgei	r2,r3,2
   2704c:	192b883a 	add	r21,r3,r4
   27050:	1001aa26 	beq	r2,zero,276fc <___vfprintf_internal_r+0x2068>
   27054:	d8800b17 	ldw	r2,44(sp)
   27058:	a8ab883a 	add	r21,r21,r2
   2705c:	a829883a 	mov	r20,r21
   27060:	a800010e 	bge	r21,zero,27068 <___vfprintf_internal_r+0x19d4>
   27064:	0029883a 	mov	r20,zero
   27068:	d8000715 	stw	zero,28(sp)
   2706c:	00009d06 	br	272e4 <___vfprintf_internal_r+0x1c50>
   27070:	880f883a 	mov	r7,r17
   27074:	10800044 	addi	r2,r2,1
   27078:	1d47883a 	add	r3,r3,r21
   2707c:	b1c00015 	stw	r7,0(r22)
   27080:	003a7c06 	br	25a74 <___vfprintf_internal_r+0x3e0>
   27084:	d9801a04 	addi	r6,sp,104
   27088:	900b883a 	mov	r5,r18
   2708c:	9809883a 	mov	r4,r19
   27090:	002cce80 	call	2cce8 <__sprint_r>
   27094:	103a8e1e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   27098:	d8c01c17 	ldw	r3,112(sp)
   2709c:	dd802704 	addi	r22,sp,156
   270a0:	003c9706 	br	26300 <___vfprintf_internal_r+0xc6c>
   270a4:	d9801a04 	addi	r6,sp,104
   270a8:	900b883a 	mov	r5,r18
   270ac:	9809883a 	mov	r4,r19
   270b0:	da000e15 	stw	r8,56(sp)
   270b4:	002cce80 	call	2cce8 <__sprint_r>
   270b8:	103a851e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   270bc:	d8c01c17 	ldw	r3,112(sp)
   270c0:	da000e17 	ldw	r8,56(sp)
   270c4:	dd802704 	addi	r22,sp,156
   270c8:	003a6106 	br	25a50 <___vfprintf_internal_r+0x3bc>
   270cc:	8809883a 	mov	r4,r17
   270d0:	db000415 	stw	r12,16(sp)
   270d4:	d8c00615 	stw	r3,24(sp)
   270d8:	00255fc0 	call	255fc <strlen>
   270dc:	db000417 	ldw	r12,16(sp)
   270e0:	102b883a 	mov	r21,r2
   270e4:	1029883a 	mov	r20,r2
   270e8:	003a2f06 	br	259a8 <___vfprintf_internal_r+0x314>
   270ec:	d8800d17 	ldw	r2,52(sp)
   270f0:	d9000b17 	ldw	r4,44(sp)
   270f4:	b0800015 	stw	r2,0(r22)
   270f8:	d8801b17 	ldw	r2,108(sp)
   270fc:	20c7883a 	add	r3,r4,r3
   27100:	b1000115 	stw	r4,4(r22)
   27104:	10800044 	addi	r2,r2,1
   27108:	d8c01c15 	stw	r3,112(sp)
   2710c:	d8801b15 	stw	r2,108(sp)
   27110:	11000208 	cmpgei	r4,r2,8
   27114:	2000bf1e 	bne	r4,zero,27414 <___vfprintf_internal_r+0x1d80>
   27118:	b5800204 	addi	r22,r22,8
   2711c:	283f470e 	bge	r5,zero,26e3c <___vfprintf_internal_r+0x17a8>
   27120:	01c000f4 	movhi	r7,3
   27124:	293ffc08 	cmpgei	r4,r5,-16
   27128:	39cc7a04 	addi	r7,r7,12776
   2712c:	0179c83a 	sub	fp,zero,r5
   27130:	20013f1e 	bne	r4,zero,27630 <___vfprintf_internal_r+0x1f9c>
   27134:	dc000715 	stw	r16,28(sp)
   27138:	05400404 	movi	r21,16
   2713c:	9021883a 	mov	r16,r18
   27140:	3825883a 	mov	r18,r7
   27144:	00000406 	br	27158 <___vfprintf_internal_r+0x1ac4>
   27148:	b5800204 	addi	r22,r22,8
   2714c:	e73ffc04 	addi	fp,fp,-16
   27150:	e1800448 	cmpgei	r6,fp,17
   27154:	30013326 	beq	r6,zero,27624 <___vfprintf_internal_r+0x1f90>
   27158:	10800044 	addi	r2,r2,1
   2715c:	18c00404 	addi	r3,r3,16
   27160:	b4800015 	stw	r18,0(r22)
   27164:	b5400115 	stw	r21,4(r22)
   27168:	d8c01c15 	stw	r3,112(sp)
   2716c:	d8801b15 	stw	r2,108(sp)
   27170:	11800208 	cmpgei	r6,r2,8
   27174:	303ff426 	beq	r6,zero,27148 <___vfprintf_internal_r+0x1ab4>
   27178:	d9801a04 	addi	r6,sp,104
   2717c:	800b883a 	mov	r5,r16
   27180:	9809883a 	mov	r4,r19
   27184:	002cce80 	call	2cce8 <__sprint_r>
   27188:	1001721e 	bne	r2,zero,27754 <___vfprintf_internal_r+0x20c0>
   2718c:	d8c01c17 	ldw	r3,112(sp)
   27190:	d8801b17 	ldw	r2,108(sp)
   27194:	dd802704 	addi	r22,sp,156
   27198:	003fec06 	br	2714c <___vfprintf_internal_r+0x1ab8>
   2719c:	800f883a 	mov	r7,r16
   271a0:	dc000717 	ldw	r16,28(sp)
   271a4:	8817883a 	mov	r11,r17
   271a8:	aa000044 	addi	r8,r21,1
   271ac:	e0800204 	addi	r2,fp,8
   271b0:	1ac7883a 	add	r3,r3,r11
   271b4:	e1c00015 	stw	r7,0(fp)
   271b8:	e2c00115 	stw	r11,4(fp)
   271bc:	d8c01c15 	stw	r3,112(sp)
   271c0:	da001b15 	stw	r8,108(sp)
   271c4:	41000208 	cmpgei	r4,r8,8
   271c8:	203e701e 	bne	r4,zero,26b8c <___vfprintf_internal_r+0x14f8>
   271cc:	42000044 	addi	r8,r8,1
   271d0:	15800204 	addi	r22,r2,8
   271d4:	1039883a 	mov	fp,r2
   271d8:	003d3206 	br	266a4 <___vfprintf_internal_r+0x1010>
   271dc:	d8800617 	ldw	r2,24(sp)
   271e0:	d8c00615 	stw	r3,24(sp)
   271e4:	15000017 	ldw	r20,0(r2)
   271e8:	a02bd7fa 	srai	r21,r20,31
   271ec:	a805883a 	mov	r2,r21
   271f0:	003b2d06 	br	25ea8 <___vfprintf_internal_r+0x814>
   271f4:	d8800617 	ldw	r2,24(sp)
   271f8:	002b883a 	mov	r21,zero
   271fc:	d8c00615 	stw	r3,24(sp)
   27200:	15000017 	ldw	r20,0(r2)
   27204:	0005883a 	mov	r2,zero
   27208:	003a6e06 	br	25bc4 <___vfprintf_internal_r+0x530>
   2720c:	044000f4 	movhi	r17,3
   27210:	8c4c6904 	addi	r17,r17,12708
   27214:	003ac606 	br	25d30 <___vfprintf_internal_r+0x69c>
   27218:	d8801804 	addi	r2,sp,96
   2721c:	d8800315 	stw	r2,12(sp)
   27220:	d9400917 	ldw	r5,36(sp)
   27224:	d8801504 	addi	r2,sp,84
   27228:	d8800215 	stw	r2,8(sp)
   2722c:	d8801404 	addi	r2,sp,80
   27230:	da000015 	stw	r8,0(sp)
   27234:	d8800115 	stw	r2,4(sp)
   27238:	01c000c4 	movi	r7,3
   2723c:	a00d883a 	mov	r6,r20
   27240:	9809883a 	mov	r4,r19
   27244:	db000815 	stw	r12,32(sp)
   27248:	da000715 	stw	r8,28(sp)
   2724c:	0027bf80 	call	27bf8 <_dtoa_r>
   27250:	da000717 	ldw	r8,28(sp)
   27254:	1023883a 	mov	r17,r2
   27258:	db000817 	ldw	r12,32(sp)
   2725c:	1207883a 	add	r3,r2,r8
   27260:	88800007 	ldb	r2,0(r17)
   27264:	10800c20 	cmpeqi	r2,r2,48
   27268:	1000571e 	bne	r2,zero,273c8 <___vfprintf_internal_r+0x1d34>
   2726c:	d8801417 	ldw	r2,80(sp)
   27270:	1893883a 	add	r9,r3,r2
   27274:	d9000917 	ldw	r4,36(sp)
   27278:	000d883a 	mov	r6,zero
   2727c:	000f883a 	mov	r7,zero
   27280:	a00b883a 	mov	r5,r20
   27284:	da401115 	stw	r9,68(sp)
   27288:	da000815 	stw	r8,32(sp)
   2728c:	db000715 	stw	r12,28(sp)
   27290:	002fdb40 	call	2fdb4 <__eqdf2>
   27294:	db000717 	ldw	r12,28(sp)
   27298:	da000817 	ldw	r8,32(sp)
   2729c:	da401117 	ldw	r9,68(sp)
   272a0:	1000891e 	bne	r2,zero,274c8 <___vfprintf_internal_r+0x1e34>
   272a4:	4805883a 	mov	r2,r9
   272a8:	d8c01417 	ldw	r3,80(sp)
   272ac:	1445c83a 	sub	r2,r2,r17
   272b0:	ad4011d8 	cmpnei	r21,r21,71
   272b4:	d8c00715 	stw	r3,28(sp)
   272b8:	d8800815 	stw	r2,32(sp)
   272bc:	a83f2526 	beq	r21,zero,26f54 <___vfprintf_internal_r+0x18c0>
   272c0:	d8800f17 	ldw	r2,60(sp)
   272c4:	103f2826 	beq	r2,zero,26f68 <___vfprintf_internal_r+0x18d4>
   272c8:	d8c00717 	ldw	r3,28(sp)
   272cc:	6080004c 	andi	r2,r12,1
   272d0:	1204b03a 	or	r2,r2,r8
   272d4:	00c1140e 	bge	zero,r3,27728 <___vfprintf_internal_r+0x2094>
   272d8:	1001011e 	bne	r2,zero,276e0 <___vfprintf_internal_r+0x204c>
   272dc:	dd400717 	ldw	r21,28(sp)
   272e0:	a829883a 	mov	r20,r21
   272e4:	d8800607 	ldb	r2,24(sp)
   272e8:	10008026 	beq	r2,zero,274ec <___vfprintf_internal_r+0x1e58>
   272ec:	00800b44 	movi	r2,45
   272f0:	d8801345 	stb	r2,77(sp)
   272f4:	d8800e17 	ldw	r2,56(sp)
   272f8:	0011883a 	mov	r8,zero
   272fc:	d8800615 	stw	r2,24(sp)
   27300:	003b0306 	br	25f10 <___vfprintf_internal_r+0x87c>
   27304:	d8800617 	ldw	r2,24(sp)
   27308:	002b883a 	mov	r21,zero
   2730c:	d8c00615 	stw	r3,24(sp)
   27310:	15000017 	ldw	r20,0(r2)
   27314:	00800044 	movi	r2,1
   27318:	003a2a06 	br	25bc4 <___vfprintf_internal_r+0x530>
   2731c:	d8800617 	ldw	r2,24(sp)
   27320:	002b883a 	mov	r21,zero
   27324:	d8c00615 	stw	r3,24(sp)
   27328:	15000017 	ldw	r20,0(r2)
   2732c:	003b1306 	br	25f7c <___vfprintf_internal_r+0x8e8>
   27330:	800f883a 	mov	r7,r16
   27334:	dc000e17 	ldw	r16,56(sp)
   27338:	10800044 	addi	r2,r2,1
   2733c:	1d47883a 	add	r3,r3,r21
   27340:	d8801b15 	stw	r2,108(sp)
   27344:	b1c00015 	stw	r7,0(r22)
   27348:	b5400115 	stw	r21,4(r22)
   2734c:	d8c01c15 	stw	r3,112(sp)
   27350:	10800208 	cmpgei	r2,r2,8
   27354:	10003a1e 	bne	r2,zero,27440 <___vfprintf_internal_r+0x1dac>
   27358:	b5800204 	addi	r22,r22,8
   2735c:	003d5406 	br	268b0 <___vfprintf_internal_r+0x121c>
   27360:	00800b44 	movi	r2,45
   27364:	d8801345 	stb	r2,77(sp)
   27368:	03400b44 	movi	r13,45
   2736c:	003a6c06 	br	25d20 <___vfprintf_internal_r+0x68c>
   27370:	1520003c 	xorhi	r20,r2,32768
   27374:	00800b44 	movi	r2,45
   27378:	d8800605 	stb	r2,24(sp)
   2737c:	003ed106 	br	26ec4 <___vfprintf_internal_r+0x1830>
   27380:	d9801a04 	addi	r6,sp,104
   27384:	900b883a 	mov	r5,r18
   27388:	9809883a 	mov	r4,r19
   2738c:	002cce80 	call	2cce8 <__sprint_r>
   27390:	1039cf1e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   27394:	d9401417 	ldw	r5,80(sp)
   27398:	d8c01c17 	ldw	r3,112(sp)
   2739c:	dd802704 	addi	r22,sp,156
   273a0:	003e9406 	br	26df4 <___vfprintf_internal_r+0x1760>
   273a4:	05400184 	movi	r21,6
   273a8:	003e1706 	br	26c08 <___vfprintf_internal_r+0x1574>
   273ac:	d9401345 	stb	r5,77(sp)
   273b0:	00397706 	br	25990 <___vfprintf_internal_r+0x2fc>
   273b4:	d9801a04 	addi	r6,sp,104
   273b8:	900b883a 	mov	r5,r18
   273bc:	9809883a 	mov	r4,r19
   273c0:	002cce80 	call	2cce8 <__sprint_r>
   273c4:	0039c206 	br	25ad0 <___vfprintf_internal_r+0x43c>
   273c8:	d9000917 	ldw	r4,36(sp)
   273cc:	000d883a 	mov	r6,zero
   273d0:	000f883a 	mov	r7,zero
   273d4:	a00b883a 	mov	r5,r20
   273d8:	d8c01115 	stw	r3,68(sp)
   273dc:	da000815 	stw	r8,32(sp)
   273e0:	db000715 	stw	r12,28(sp)
   273e4:	002fdb40 	call	2fdb4 <__eqdf2>
   273e8:	db000717 	ldw	r12,28(sp)
   273ec:	da000817 	ldw	r8,32(sp)
   273f0:	d8c01117 	ldw	r3,68(sp)
   273f4:	103f9d26 	beq	r2,zero,2726c <___vfprintf_internal_r+0x1bd8>
   273f8:	00800044 	movi	r2,1
   273fc:	1205c83a 	sub	r2,r2,r8
   27400:	d8801415 	stw	r2,80(sp)
   27404:	003f9a06 	br	27270 <___vfprintf_internal_r+0x1bdc>
   27408:	403ea81e 	bne	r8,zero,26eac <___vfprintf_internal_r+0x1818>
   2740c:	02000044 	movi	r8,1
   27410:	003ea606 	br	26eac <___vfprintf_internal_r+0x1818>
   27414:	d9801a04 	addi	r6,sp,104
   27418:	900b883a 	mov	r5,r18
   2741c:	9809883a 	mov	r4,r19
   27420:	002cce80 	call	2cce8 <__sprint_r>
   27424:	1039aa1e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   27428:	d9401417 	ldw	r5,80(sp)
   2742c:	d8c01c17 	ldw	r3,112(sp)
   27430:	d8801b17 	ldw	r2,108(sp)
   27434:	dd802704 	addi	r22,sp,156
   27438:	283e800e 	bge	r5,zero,26e3c <___vfprintf_internal_r+0x17a8>
   2743c:	003f3806 	br	27120 <___vfprintf_internal_r+0x1a8c>
   27440:	d9801a04 	addi	r6,sp,104
   27444:	900b883a 	mov	r5,r18
   27448:	9809883a 	mov	r4,r19
   2744c:	002cce80 	call	2cce8 <__sprint_r>
   27450:	10399f1e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   27454:	d8c01c17 	ldw	r3,112(sp)
   27458:	dd802704 	addi	r22,sp,156
   2745c:	003d1406 	br	268b0 <___vfprintf_internal_r+0x121c>
   27460:	db000417 	ldw	r12,16(sp)
   27464:	003a9d06 	br	25edc <___vfprintf_internal_r+0x848>
   27468:	d8801804 	addi	r2,sp,96
   2746c:	d8800315 	stw	r2,12(sp)
   27470:	d9400917 	ldw	r5,36(sp)
   27474:	d8801504 	addi	r2,sp,84
   27478:	40c00044 	addi	r3,r8,1
   2747c:	d8800215 	stw	r2,8(sp)
   27480:	d8801404 	addi	r2,sp,80
   27484:	d8c00015 	stw	r3,0(sp)
   27488:	d8800115 	stw	r2,4(sp)
   2748c:	01c00084 	movi	r7,2
   27490:	a00d883a 	mov	r6,r20
   27494:	9809883a 	mov	r4,r19
   27498:	db001115 	stw	r12,68(sp)
   2749c:	da000815 	stw	r8,32(sp)
   274a0:	d8c00715 	stw	r3,28(sp)
   274a4:	0027bf80 	call	27bf8 <_dtoa_r>
   274a8:	d8c00717 	ldw	r3,28(sp)
   274ac:	da000817 	ldw	r8,32(sp)
   274b0:	db001117 	ldw	r12,68(sp)
   274b4:	1023883a 	mov	r17,r2
   274b8:	e08011d8 	cmpnei	r2,fp,71
   274bc:	103e9c26 	beq	r2,zero,26f30 <___vfprintf_internal_r+0x189c>
   274c0:	88d3883a 	add	r9,r17,r3
   274c4:	003f6b06 	br	27274 <___vfprintf_internal_r+0x1be0>
   274c8:	d8801817 	ldw	r2,96(sp)
   274cc:	127f762e 	bgeu	r2,r9,272a8 <___vfprintf_internal_r+0x1c14>
   274d0:	01000c04 	movi	r4,48
   274d4:	10c00044 	addi	r3,r2,1
   274d8:	d8c01815 	stw	r3,96(sp)
   274dc:	11000005 	stb	r4,0(r2)
   274e0:	d8801817 	ldw	r2,96(sp)
   274e4:	127ffb36 	bltu	r2,r9,274d4 <___vfprintf_internal_r+0x1e40>
   274e8:	003f6f06 	br	272a8 <___vfprintf_internal_r+0x1c14>
   274ec:	d8800e17 	ldw	r2,56(sp)
   274f0:	db401343 	ldbu	r13,77(sp)
   274f4:	0011883a 	mov	r8,zero
   274f8:	d8800615 	stw	r2,24(sp)
   274fc:	003a8006 	br	25f00 <___vfprintf_internal_r+0x86c>
   27500:	d8800717 	ldw	r2,28(sp)
   27504:	d8c00817 	ldw	r3,32(sp)
   27508:	10c02b16 	blt	r2,r3,275b8 <___vfprintf_internal_r+0x1f24>
   2750c:	6300004c 	andi	r12,r12,1
   27510:	6000581e 	bne	r12,zero,27674 <___vfprintf_internal_r+0x1fe0>
   27514:	1029883a 	mov	r20,r2
   27518:	1000010e 	bge	r2,zero,27520 <___vfprintf_internal_r+0x1e8c>
   2751c:	0029883a 	mov	r20,zero
   27520:	dd400717 	ldw	r21,28(sp)
   27524:	070019c4 	movi	fp,103
   27528:	003f6e06 	br	272e4 <___vfprintf_internal_r+0x1c50>
   2752c:	d9801a04 	addi	r6,sp,104
   27530:	900b883a 	mov	r5,r18
   27534:	9809883a 	mov	r4,r19
   27538:	002cce80 	call	2cce8 <__sprint_r>
   2753c:	1039641e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   27540:	dd401417 	ldw	r21,80(sp)
   27544:	d8c01c17 	ldw	r3,112(sp)
   27548:	dd802704 	addi	r22,sp,156
   2754c:	003ce706 	br	268ec <___vfprintf_internal_r+0x1258>
   27550:	d9801a04 	addi	r6,sp,104
   27554:	900b883a 	mov	r5,r18
   27558:	9809883a 	mov	r4,r19
   2755c:	002cce80 	call	2cce8 <__sprint_r>
   27560:	10395b1e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   27564:	d8c01c17 	ldw	r3,112(sp)
   27568:	dd802704 	addi	r22,sp,156
   2756c:	a83ccd0e 	bge	r21,zero,268a4 <___vfprintf_internal_r+0x1210>
   27570:	003d9106 	br	26bb8 <___vfprintf_internal_r+0x1524>
   27574:	02000184 	movi	r8,6
   27578:	003e4c06 	br	26eac <___vfprintf_internal_r+0x1818>
   2757c:	d9801a04 	addi	r6,sp,104
   27580:	900b883a 	mov	r5,r18
   27584:	9809883a 	mov	r4,r19
   27588:	002cce80 	call	2cce8 <__sprint_r>
   2758c:	1039501e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   27590:	d8801417 	ldw	r2,80(sp)
   27594:	d9000817 	ldw	r4,32(sp)
   27598:	d8c01c17 	ldw	r3,112(sp)
   2759c:	dd802704 	addi	r22,sp,156
   275a0:	2085c83a 	sub	r2,r4,r2
   275a4:	003ce506 	br	2693c <___vfprintf_internal_r+0x12a8>
   275a8:	4029883a 	mov	r20,r8
   275ac:	d8c00615 	stw	r3,24(sp)
   275b0:	402b883a 	mov	r21,r8
   275b4:	0038fc06 	br	259a8 <___vfprintf_internal_r+0x314>
   275b8:	d8800817 	ldw	r2,32(sp)
   275bc:	d8c00b17 	ldw	r3,44(sp)
   275c0:	10eb883a 	add	r21,r2,r3
   275c4:	d8800717 	ldw	r2,28(sp)
   275c8:	00800316 	blt	zero,r2,275d8 <___vfprintf_internal_r+0x1f44>
   275cc:	d8800717 	ldw	r2,28(sp)
   275d0:	a8abc83a 	sub	r21,r21,r2
   275d4:	ad400044 	addi	r21,r21,1
   275d8:	a829883a 	mov	r20,r21
   275dc:	a8002a16 	blt	r21,zero,27688 <___vfprintf_internal_r+0x1ff4>
   275e0:	070019c4 	movi	fp,103
   275e4:	003f3f06 	br	272e4 <___vfprintf_internal_r+0x1c50>
   275e8:	d9401345 	stb	r5,77(sp)
   275ec:	003ae006 	br	26170 <___vfprintf_internal_r+0xadc>
   275f0:	d9401345 	stb	r5,77(sp)
   275f4:	003a5706 	br	25f54 <___vfprintf_internal_r+0x8c0>
   275f8:	d9401345 	stb	r5,77(sp)
   275fc:	003b1706 	br	2625c <___vfprintf_internal_r+0xbc8>
   27600:	d9401345 	stb	r5,77(sp)
   27604:	003a2006 	br	25e88 <___vfprintf_internal_r+0x7f4>
   27608:	d9401345 	stb	r5,77(sp)
   2760c:	003a6606 	br	25fa8 <___vfprintf_internal_r+0x914>
   27610:	d9401345 	stb	r5,77(sp)
   27614:	00399706 	br	25c74 <___vfprintf_internal_r+0x5e0>
   27618:	00bfffc4 	movi	r2,-1
   2761c:	d8800515 	stw	r2,20(sp)
   27620:	00392e06 	br	25adc <___vfprintf_internal_r+0x448>
   27624:	900f883a 	mov	r7,r18
   27628:	8025883a 	mov	r18,r16
   2762c:	dc000717 	ldw	r16,28(sp)
   27630:	10800044 	addi	r2,r2,1
   27634:	1f07883a 	add	r3,r3,fp
   27638:	b1c00015 	stw	r7,0(r22)
   2763c:	b7000115 	stw	fp,4(r22)
   27640:	d8c01c15 	stw	r3,112(sp)
   27644:	d8801b15 	stw	r2,108(sp)
   27648:	11000208 	cmpgei	r4,r2,8
   2764c:	203dfa26 	beq	r4,zero,26e38 <___vfprintf_internal_r+0x17a4>
   27650:	d9801a04 	addi	r6,sp,104
   27654:	900b883a 	mov	r5,r18
   27658:	9809883a 	mov	r4,r19
   2765c:	002cce80 	call	2cce8 <__sprint_r>
   27660:	10391b1e 	bne	r2,zero,25ad0 <___vfprintf_internal_r+0x43c>
   27664:	d8c01c17 	ldw	r3,112(sp)
   27668:	d8801b17 	ldw	r2,108(sp)
   2766c:	dd802704 	addi	r22,sp,156
   27670:	003df206 	br	26e3c <___vfprintf_internal_r+0x17a8>
   27674:	d8800717 	ldw	r2,28(sp)
   27678:	d8c00b17 	ldw	r3,44(sp)
   2767c:	10eb883a 	add	r21,r2,r3
   27680:	a829883a 	mov	r20,r21
   27684:	a83fd60e 	bge	r21,zero,275e0 <___vfprintf_internal_r+0x1f4c>
   27688:	0029883a 	mov	r20,zero
   2768c:	003fd406 	br	275e0 <___vfprintf_internal_r+0x1f4c>
   27690:	00800c04 	movi	r2,48
   27694:	ad400c04 	addi	r21,r21,48
   27698:	d88016c5 	stb	r2,91(sp)
   2769c:	00800104 	movi	r2,4
   276a0:	dd401705 	stb	r21,92(sp)
   276a4:	d8801015 	stw	r2,64(sp)
   276a8:	003e6506 	br	27040 <___vfprintf_internal_r+0x19ac>
   276ac:	d8800a17 	ldw	r2,40(sp)
   276b0:	10001916 	blt	r2,zero,27718 <___vfprintf_internal_r+0x2084>
   276b4:	db401343 	ldbu	r13,77(sp)
   276b8:	e0801210 	cmplti	r2,fp,72
   276bc:	1000131e 	bne	r2,zero,2770c <___vfprintf_internal_r+0x2078>
   276c0:	044000f4 	movhi	r17,3
   276c4:	8c4c6c04 	addi	r17,r17,12720
   276c8:	00399906 	br	25d30 <___vfprintf_internal_r+0x69c>
   276cc:	05400044 	movi	r21,1
   276d0:	a8abc83a 	sub	r21,r21,r2
   276d4:	00800b44 	movi	r2,45
   276d8:	d8801685 	stb	r2,90(sp)
   276dc:	003e2906 	br	26f84 <___vfprintf_internal_r+0x18f0>
   276e0:	d8800b17 	ldw	r2,44(sp)
   276e4:	18ab883a 	add	r21,r3,r2
   276e8:	aa2b883a 	add	r21,r21,r8
   276ec:	a829883a 	mov	r20,r21
   276f0:	a83efc0e 	bge	r21,zero,272e4 <___vfprintf_internal_r+0x1c50>
   276f4:	0029883a 	mov	r20,zero
   276f8:	003efa06 	br	272e4 <___vfprintf_internal_r+0x1c50>
   276fc:	6080004c 	andi	r2,r12,1
   27700:	d8800715 	stw	r2,28(sp)
   27704:	103e531e 	bne	r2,zero,27054 <___vfprintf_internal_r+0x19c0>
   27708:	003ff806 	br	276ec <___vfprintf_internal_r+0x2058>
   2770c:	044000f4 	movhi	r17,3
   27710:	8c4c6b04 	addi	r17,r17,12716
   27714:	00398606 	br	25d30 <___vfprintf_internal_r+0x69c>
   27718:	00800b44 	movi	r2,45
   2771c:	d8801345 	stb	r2,77(sp)
   27720:	03400b44 	movi	r13,45
   27724:	003fe406 	br	276b8 <___vfprintf_internal_r+0x2024>
   27728:	1000031e 	bne	r2,zero,27738 <___vfprintf_internal_r+0x20a4>
   2772c:	05000044 	movi	r20,1
   27730:	05400044 	movi	r21,1
   27734:	003eeb06 	br	272e4 <___vfprintf_internal_r+0x1c50>
   27738:	d8800b17 	ldw	r2,44(sp)
   2773c:	15400044 	addi	r21,r2,1
   27740:	aa2b883a 	add	r21,r21,r8
   27744:	003fe906 	br	276ec <___vfprintf_internal_r+0x2058>
   27748:	b005883a 	mov	r2,r22
   2774c:	39cc7a04 	addi	r7,r7,12776
   27750:	003e9706 	br	271b0 <___vfprintf_internal_r+0x1b1c>
   27754:	8025883a 	mov	r18,r16
   27758:	0038dd06 	br	25ad0 <___vfprintf_internal_r+0x43c>
   2775c:	00800084 	movi	r2,2
   27760:	d8801015 	stw	r2,64(sp)
   27764:	003e3606 	br	27040 <___vfprintf_internal_r+0x19ac>
   27768:	d8c00617 	ldw	r3,24(sp)
   2776c:	1a000017 	ldw	r8,0(r3)
   27770:	18c00104 	addi	r3,r3,4
   27774:	4000010e 	bge	r8,zero,2777c <___vfprintf_internal_r+0x20e8>
   27778:	023fffc4 	movi	r8,-1
   2777c:	bf000043 	ldbu	fp,1(r23)
   27780:	d8c00615 	stw	r3,24(sp)
   27784:	102f883a 	mov	r23,r2
   27788:	e2c03fcc 	andi	r11,fp,255
   2778c:	5ac0201c 	xori	r11,r11,128
   27790:	5affe004 	addi	r11,r11,-128
   27794:	00380b06 	br	257c4 <___vfprintf_internal_r+0x130>

00027798 <__vfprintf_internal>:
   27798:	00c000f4 	movhi	r3,3
   2779c:	2005883a 	mov	r2,r4
   277a0:	1910d017 	ldw	r4,17216(r3)
   277a4:	300f883a 	mov	r7,r6
   277a8:	280d883a 	mov	r6,r5
   277ac:	100b883a 	mov	r5,r2
   277b0:	00256941 	jmpi	25694 <___vfprintf_internal_r>

000277b4 <__sbprintf>:
   277b4:	2880030b 	ldhu	r2,12(r5)
   277b8:	2b001917 	ldw	r12,100(r5)
   277bc:	2ac0038b 	ldhu	r11,14(r5)
   277c0:	2a800717 	ldw	r10,28(r5)
   277c4:	2a400917 	ldw	r9,36(r5)
   277c8:	defee204 	addi	sp,sp,-1144
   277cc:	da001a04 	addi	r8,sp,104
   277d0:	00c10004 	movi	r3,1024
   277d4:	dc011a15 	stw	r16,1128(sp)
   277d8:	10bfff4c 	andi	r2,r2,65533
   277dc:	2821883a 	mov	r16,r5
   277e0:	d80b883a 	mov	r5,sp
   277e4:	dc811c15 	stw	r18,1136(sp)
   277e8:	dc411b15 	stw	r17,1132(sp)
   277ec:	dfc11d15 	stw	ra,1140(sp)
   277f0:	2025883a 	mov	r18,r4
   277f4:	d880030d 	sth	r2,12(sp)
   277f8:	db001915 	stw	r12,100(sp)
   277fc:	dac0038d 	sth	r11,14(sp)
   27800:	da800715 	stw	r10,28(sp)
   27804:	da400915 	stw	r9,36(sp)
   27808:	da000015 	stw	r8,0(sp)
   2780c:	da000415 	stw	r8,16(sp)
   27810:	d8c00215 	stw	r3,8(sp)
   27814:	d8c00515 	stw	r3,20(sp)
   27818:	d8000615 	stw	zero,24(sp)
   2781c:	00256940 	call	25694 <___vfprintf_internal_r>
   27820:	1023883a 	mov	r17,r2
   27824:	10000d0e 	bge	r2,zero,2785c <__sbprintf+0xa8>
   27828:	d880030b 	ldhu	r2,12(sp)
   2782c:	1080100c 	andi	r2,r2,64
   27830:	10000326 	beq	r2,zero,27840 <__sbprintf+0x8c>
   27834:	8080030b 	ldhu	r2,12(r16)
   27838:	10801014 	ori	r2,r2,64
   2783c:	8080030d 	sth	r2,12(r16)
   27840:	8805883a 	mov	r2,r17
   27844:	dfc11d17 	ldw	ra,1140(sp)
   27848:	dc811c17 	ldw	r18,1136(sp)
   2784c:	dc411b17 	ldw	r17,1132(sp)
   27850:	dc011a17 	ldw	r16,1128(sp)
   27854:	dec11e04 	addi	sp,sp,1144
   27858:	f800283a 	ret
   2785c:	d80b883a 	mov	r5,sp
   27860:	9009883a 	mov	r4,r18
   27864:	00295680 	call	29568 <_fflush_r>
   27868:	103fef26 	beq	r2,zero,27828 <__sbprintf+0x74>
   2786c:	047fffc4 	movi	r17,-1
   27870:	003fed06 	br	27828 <__sbprintf+0x74>

00027874 <__swsetup_r>:
   27874:	008000f4 	movhi	r2,3
   27878:	1090d017 	ldw	r2,17216(r2)
   2787c:	defffd04 	addi	sp,sp,-12
   27880:	dc400115 	stw	r17,4(sp)
   27884:	dc000015 	stw	r16,0(sp)
   27888:	dfc00215 	stw	ra,8(sp)
   2788c:	2023883a 	mov	r17,r4
   27890:	2821883a 	mov	r16,r5
   27894:	10000226 	beq	r2,zero,278a0 <__swsetup_r+0x2c>
   27898:	10c00e17 	ldw	r3,56(r2)
   2789c:	18001f26 	beq	r3,zero,2791c <__swsetup_r+0xa8>
   278a0:	8180030b 	ldhu	r6,12(r16)
   278a4:	30c0020c 	andi	r3,r6,8
   278a8:	3005883a 	mov	r2,r6
   278ac:	18002126 	beq	r3,zero,27934 <__swsetup_r+0xc0>
   278b0:	80c00417 	ldw	r3,16(r16)
   278b4:	18002826 	beq	r3,zero,27958 <__swsetup_r+0xe4>
   278b8:	1100004c 	andi	r4,r2,1
   278bc:	20000b1e 	bne	r4,zero,278ec <__swsetup_r+0x78>
   278c0:	1100008c 	andi	r4,r2,2
   278c4:	20002e1e 	bne	r4,zero,27980 <__swsetup_r+0x10c>
   278c8:	81000517 	ldw	r4,20(r16)
   278cc:	81000215 	stw	r4,8(r16)
   278d0:	18000b26 	beq	r3,zero,27900 <__swsetup_r+0x8c>
   278d4:	0005883a 	mov	r2,zero
   278d8:	dfc00217 	ldw	ra,8(sp)
   278dc:	dc400117 	ldw	r17,4(sp)
   278e0:	dc000017 	ldw	r16,0(sp)
   278e4:	dec00304 	addi	sp,sp,12
   278e8:	f800283a 	ret
   278ec:	81000517 	ldw	r4,20(r16)
   278f0:	80000215 	stw	zero,8(r16)
   278f4:	0109c83a 	sub	r4,zero,r4
   278f8:	81000615 	stw	r4,24(r16)
   278fc:	183ff51e 	bne	r3,zero,278d4 <__swsetup_r+0x60>
   27900:	10c0200c 	andi	r3,r2,128
   27904:	0005883a 	mov	r2,zero
   27908:	183ff326 	beq	r3,zero,278d8 <__swsetup_r+0x64>
   2790c:	31801014 	ori	r6,r6,64
   27910:	8180030d 	sth	r6,12(r16)
   27914:	00bfffc4 	movi	r2,-1
   27918:	003fef06 	br	278d8 <__swsetup_r+0x64>
   2791c:	1009883a 	mov	r4,r2
   27920:	00299b00 	call	299b0 <__sinit>
   27924:	8180030b 	ldhu	r6,12(r16)
   27928:	30c0020c 	andi	r3,r6,8
   2792c:	3005883a 	mov	r2,r6
   27930:	183fdf1e 	bne	r3,zero,278b0 <__swsetup_r+0x3c>
   27934:	3080040c 	andi	r2,r6,16
   27938:	10002126 	beq	r2,zero,279c0 <__swsetup_r+0x14c>
   2793c:	3080010c 	andi	r2,r6,4
   27940:	1000111e 	bne	r2,zero,27988 <__swsetup_r+0x114>
   27944:	80c00417 	ldw	r3,16(r16)
   27948:	30800214 	ori	r2,r6,8
   2794c:	8080030d 	sth	r2,12(r16)
   27950:	100d883a 	mov	r6,r2
   27954:	183fd81e 	bne	r3,zero,278b8 <__swsetup_r+0x44>
   27958:	1100a00c 	andi	r4,r2,640
   2795c:	21008020 	cmpeqi	r4,r4,512
   27960:	203fd51e 	bne	r4,zero,278b8 <__swsetup_r+0x44>
   27964:	800b883a 	mov	r5,r16
   27968:	8809883a 	mov	r4,r17
   2796c:	002a4380 	call	2a438 <__smakebuf_r>
   27970:	8180030b 	ldhu	r6,12(r16)
   27974:	80c00417 	ldw	r3,16(r16)
   27978:	3005883a 	mov	r2,r6
   2797c:	003fce06 	br	278b8 <__swsetup_r+0x44>
   27980:	0009883a 	mov	r4,zero
   27984:	003fd106 	br	278cc <__swsetup_r+0x58>
   27988:	81400c17 	ldw	r5,48(r16)
   2798c:	28000626 	beq	r5,zero,279a8 <__swsetup_r+0x134>
   27990:	80801004 	addi	r2,r16,64
   27994:	28800326 	beq	r5,r2,279a4 <__swsetup_r+0x130>
   27998:	8809883a 	mov	r4,r17
   2799c:	0029b140 	call	29b14 <_free_r>
   279a0:	8180030b 	ldhu	r6,12(r16)
   279a4:	80000c15 	stw	zero,48(r16)
   279a8:	80c00417 	ldw	r3,16(r16)
   279ac:	00bff6c4 	movi	r2,-37
   279b0:	118c703a 	and	r6,r2,r6
   279b4:	80000115 	stw	zero,4(r16)
   279b8:	80c00015 	stw	r3,0(r16)
   279bc:	003fe206 	br	27948 <__swsetup_r+0xd4>
   279c0:	00800244 	movi	r2,9
   279c4:	88800015 	stw	r2,0(r17)
   279c8:	31801014 	ori	r6,r6,64
   279cc:	8180030d 	sth	r6,12(r16)
   279d0:	00bfffc4 	movi	r2,-1
   279d4:	003fc006 	br	278d8 <__swsetup_r+0x64>

000279d8 <quorem>:
   279d8:	defff204 	addi	sp,sp,-56
   279dc:	dc400515 	stw	r17,20(sp)
   279e0:	20800417 	ldw	r2,16(r4)
   279e4:	2c400417 	ldw	r17,16(r5)
   279e8:	dfc00d15 	stw	ra,52(sp)
   279ec:	df000c15 	stw	fp,48(sp)
   279f0:	ddc00b15 	stw	r23,44(sp)
   279f4:	dd800a15 	stw	r22,40(sp)
   279f8:	dd400915 	stw	r21,36(sp)
   279fc:	dd000815 	stw	r20,32(sp)
   27a00:	dcc00715 	stw	r19,28(sp)
   27a04:	dc800615 	stw	r18,24(sp)
   27a08:	dc000415 	stw	r16,16(sp)
   27a0c:	d9000115 	stw	r4,4(sp)
   27a10:	d9400215 	stw	r5,8(sp)
   27a14:	14407616 	blt	r2,r17,27bf0 <quorem+0x218>
   27a18:	8c7fffc4 	addi	r17,r17,-1
   27a1c:	882a90ba 	slli	r21,r17,2
   27a20:	2f000504 	addi	fp,r5,20
   27a24:	25800504 	addi	r22,r4,20
   27a28:	e565883a 	add	r18,fp,r21
   27a2c:	b545883a 	add	r2,r22,r21
   27a30:	95c00017 	ldw	r23,0(r18)
   27a34:	15000017 	ldw	r20,0(r2)
   27a38:	dd800015 	stw	r22,0(sp)
   27a3c:	bdc00044 	addi	r23,r23,1
   27a40:	b80b883a 	mov	r5,r23
   27a44:	a009883a 	mov	r4,r20
   27a48:	d8800315 	stw	r2,12(sp)
   27a4c:	0022bbc0 	call	22bbc <__udivsi3>
   27a50:	1021883a 	mov	r16,r2
   27a54:	a5c02f36 	bltu	r20,r23,27b14 <quorem+0x13c>
   27a58:	e029883a 	mov	r20,fp
   27a5c:	002b883a 	mov	r21,zero
   27a60:	002f883a 	mov	r23,zero
   27a64:	a4c00017 	ldw	r19,0(r20)
   27a68:	800b883a 	mov	r5,r16
   27a6c:	b5800104 	addi	r22,r22,4
   27a70:	993fffcc 	andi	r4,r19,65535
   27a74:	0022c7c0 	call	22c7c <__mulsi3>
   27a78:	9808d43a 	srli	r4,r19,16
   27a7c:	800b883a 	mov	r5,r16
   27a80:	156b883a 	add	r21,r2,r21
   27a84:	0022c7c0 	call	22c7c <__mulsi3>
   27a88:	b0ffff17 	ldw	r3,-4(r22)
   27a8c:	a80ad43a 	srli	r5,r21,16
   27a90:	a93fffcc 	andi	r4,r21,65535
   27a94:	19bfffcc 	andi	r6,r3,65535
   27a98:	b909c83a 	sub	r4,r23,r4
   27a9c:	2189883a 	add	r4,r4,r6
   27aa0:	1806d43a 	srli	r3,r3,16
   27aa4:	1145883a 	add	r2,r2,r5
   27aa8:	200bd43a 	srai	r5,r4,16
   27aac:	11bfffcc 	andi	r6,r2,65535
   27ab0:	1987c83a 	sub	r3,r3,r6
   27ab4:	1947883a 	add	r3,r3,r5
   27ab8:	180a943a 	slli	r5,r3,16
   27abc:	213fffcc 	andi	r4,r4,65535
   27ac0:	a5000104 	addi	r20,r20,4
   27ac4:	2908b03a 	or	r4,r5,r4
   27ac8:	b13fff15 	stw	r4,-4(r22)
   27acc:	102ad43a 	srli	r21,r2,16
   27ad0:	182fd43a 	srai	r23,r3,16
   27ad4:	953fe32e 	bgeu	r18,r20,27a64 <quorem+0x8c>
   27ad8:	d8c00317 	ldw	r3,12(sp)
   27adc:	18800017 	ldw	r2,0(r3)
   27ae0:	10000c1e 	bne	r2,zero,27b14 <quorem+0x13c>
   27ae4:	d8800017 	ldw	r2,0(sp)
   27ae8:	1d7fff04 	addi	r21,r3,-4
   27aec:	15400436 	bltu	r2,r21,27b00 <quorem+0x128>
   27af0:	00000606 	br	27b0c <quorem+0x134>
   27af4:	d8800017 	ldw	r2,0(sp)
   27af8:	8c7fffc4 	addi	r17,r17,-1
   27afc:	1540032e 	bgeu	r2,r21,27b0c <quorem+0x134>
   27b00:	a8800017 	ldw	r2,0(r21)
   27b04:	ad7fff04 	addi	r21,r21,-4
   27b08:	103ffa26 	beq	r2,zero,27af4 <quorem+0x11c>
   27b0c:	d8800117 	ldw	r2,4(sp)
   27b10:	14400415 	stw	r17,16(r2)
   27b14:	d9400217 	ldw	r5,8(sp)
   27b18:	d9000117 	ldw	r4,4(sp)
   27b1c:	002bc100 	call	2bc10 <__mcmp>
   27b20:	10002616 	blt	r2,zero,27bbc <quorem+0x1e4>
   27b24:	d9400017 	ldw	r5,0(sp)
   27b28:	84000044 	addi	r16,r16,1
   27b2c:	0007883a 	mov	r3,zero
   27b30:	e1000017 	ldw	r4,0(fp)
   27b34:	29800017 	ldw	r6,0(r5)
   27b38:	29400104 	addi	r5,r5,4
   27b3c:	20bfffcc 	andi	r2,r4,65535
   27b40:	1887c83a 	sub	r3,r3,r2
   27b44:	30bfffcc 	andi	r2,r6,65535
   27b48:	1885883a 	add	r2,r3,r2
   27b4c:	2008d43a 	srli	r4,r4,16
   27b50:	3006d43a 	srli	r3,r6,16
   27b54:	100fd43a 	srai	r7,r2,16
   27b58:	11bfffcc 	andi	r6,r2,65535
   27b5c:	1907c83a 	sub	r3,r3,r4
   27b60:	19c7883a 	add	r3,r3,r7
   27b64:	1804943a 	slli	r2,r3,16
   27b68:	e7000104 	addi	fp,fp,4
   27b6c:	1807d43a 	srai	r3,r3,16
   27b70:	1184b03a 	or	r2,r2,r6
   27b74:	28bfff15 	stw	r2,-4(r5)
   27b78:	973fed2e 	bgeu	r18,fp,27b30 <quorem+0x158>
   27b7c:	880490ba 	slli	r2,r17,2
   27b80:	d9000017 	ldw	r4,0(sp)
   27b84:	2085883a 	add	r2,r4,r2
   27b88:	10c00017 	ldw	r3,0(r2)
   27b8c:	18000b1e 	bne	r3,zero,27bbc <quorem+0x1e4>
   27b90:	10bfff04 	addi	r2,r2,-4
   27b94:	20800436 	bltu	r4,r2,27ba8 <quorem+0x1d0>
   27b98:	00000606 	br	27bb4 <quorem+0x1dc>
   27b9c:	d8c00017 	ldw	r3,0(sp)
   27ba0:	8c7fffc4 	addi	r17,r17,-1
   27ba4:	1880032e 	bgeu	r3,r2,27bb4 <quorem+0x1dc>
   27ba8:	10c00017 	ldw	r3,0(r2)
   27bac:	10bfff04 	addi	r2,r2,-4
   27bb0:	183ffa26 	beq	r3,zero,27b9c <quorem+0x1c4>
   27bb4:	d8800117 	ldw	r2,4(sp)
   27bb8:	14400415 	stw	r17,16(r2)
   27bbc:	8005883a 	mov	r2,r16
   27bc0:	dfc00d17 	ldw	ra,52(sp)
   27bc4:	df000c17 	ldw	fp,48(sp)
   27bc8:	ddc00b17 	ldw	r23,44(sp)
   27bcc:	dd800a17 	ldw	r22,40(sp)
   27bd0:	dd400917 	ldw	r21,36(sp)
   27bd4:	dd000817 	ldw	r20,32(sp)
   27bd8:	dcc00717 	ldw	r19,28(sp)
   27bdc:	dc800617 	ldw	r18,24(sp)
   27be0:	dc400517 	ldw	r17,20(sp)
   27be4:	dc000417 	ldw	r16,16(sp)
   27be8:	dec00e04 	addi	sp,sp,56
   27bec:	f800283a 	ret
   27bf0:	0005883a 	mov	r2,zero
   27bf4:	003ff206 	br	27bc0 <quorem+0x1e8>

00027bf8 <_dtoa_r>:
   27bf8:	20801017 	ldw	r2,64(r4)
   27bfc:	deffe204 	addi	sp,sp,-120
   27c00:	ddc01b15 	stw	r23,108(sp)
   27c04:	dcc01715 	stw	r19,92(sp)
   27c08:	dc801615 	stw	r18,88(sp)
   27c0c:	dc401515 	stw	r17,84(sp)
   27c10:	dc001415 	stw	r16,80(sp)
   27c14:	dfc01d15 	stw	ra,116(sp)
   27c18:	df001c15 	stw	fp,112(sp)
   27c1c:	dd801a15 	stw	r22,104(sp)
   27c20:	dd401915 	stw	r21,100(sp)
   27c24:	dd001815 	stw	r20,96(sp)
   27c28:	d9c00215 	stw	r7,8(sp)
   27c2c:	dc002017 	ldw	r16,128(sp)
   27c30:	202f883a 	mov	r23,r4
   27c34:	3025883a 	mov	r18,r6
   27c38:	2827883a 	mov	r19,r5
   27c3c:	3023883a 	mov	r17,r6
   27c40:	10000826 	beq	r2,zero,27c64 <_dtoa_r+0x6c>
   27c44:	21801117 	ldw	r6,68(r4)
   27c48:	00c00044 	movi	r3,1
   27c4c:	100b883a 	mov	r5,r2
   27c50:	1986983a 	sll	r3,r3,r6
   27c54:	11800115 	stw	r6,4(r2)
   27c58:	10c00215 	stw	r3,8(r2)
   27c5c:	002b2000 	call	2b200 <_Bfree>
   27c60:	b8001015 	stw	zero,64(r23)
   27c64:	90018816 	blt	r18,zero,28288 <_dtoa_r+0x690>
   27c68:	80000015 	stw	zero,0(r16)
   27c6c:	909ffc2c 	andhi	r2,r18,32752
   27c70:	00dffc34 	movhi	r3,32752
   27c74:	10c18d26 	beq	r2,r3,282ac <_dtoa_r+0x6b4>
   27c78:	000d883a 	mov	r6,zero
   27c7c:	000f883a 	mov	r7,zero
   27c80:	9809883a 	mov	r4,r19
   27c84:	880b883a 	mov	r5,r17
   27c88:	002fdb40 	call	2fdb4 <__eqdf2>
   27c8c:	1000191e 	bne	r2,zero,27cf4 <_dtoa_r+0xfc>
   27c90:	d8c01f17 	ldw	r3,124(sp)
   27c94:	00800044 	movi	r2,1
   27c98:	18800015 	stw	r2,0(r3)
   27c9c:	d8802117 	ldw	r2,132(sp)
   27ca0:	1002f926 	beq	r2,zero,28888 <_dtoa_r+0xc90>
   27ca4:	d9002117 	ldw	r4,132(sp)
   27ca8:	008000f4 	movhi	r2,3
   27cac:	108c7944 	addi	r2,r2,12773
   27cb0:	00c000f4 	movhi	r3,3
   27cb4:	20800015 	stw	r2,0(r4)
   27cb8:	188c7904 	addi	r2,r3,12772
   27cbc:	d8800115 	stw	r2,4(sp)
   27cc0:	d8800117 	ldw	r2,4(sp)
   27cc4:	dfc01d17 	ldw	ra,116(sp)
   27cc8:	df001c17 	ldw	fp,112(sp)
   27ccc:	ddc01b17 	ldw	r23,108(sp)
   27cd0:	dd801a17 	ldw	r22,104(sp)
   27cd4:	dd401917 	ldw	r21,100(sp)
   27cd8:	dd001817 	ldw	r20,96(sp)
   27cdc:	dcc01717 	ldw	r19,92(sp)
   27ce0:	dc801617 	ldw	r18,88(sp)
   27ce4:	dc401517 	ldw	r17,84(sp)
   27ce8:	dc001417 	ldw	r16,80(sp)
   27cec:	dec01e04 	addi	sp,sp,120
   27cf0:	f800283a 	ret
   27cf4:	d8801204 	addi	r2,sp,72
   27cf8:	9020d53a 	srli	r16,r18,20
   27cfc:	d8800015 	stw	r2,0(sp)
   27d00:	d9c01304 	addi	r7,sp,76
   27d04:	980b883a 	mov	r5,r19
   27d08:	880d883a 	mov	r6,r17
   27d0c:	b809883a 	mov	r4,r23
   27d10:	002bff80 	call	2bff8 <__d2b>
   27d14:	1039883a 	mov	fp,r2
   27d18:	8001771e 	bne	r16,zero,282f8 <_dtoa_r+0x700>
   27d1c:	dd001217 	ldw	r20,72(sp)
   27d20:	dc001317 	ldw	r16,76(sp)
   27d24:	a421883a 	add	r16,r20,r16
   27d28:	80810c84 	addi	r2,r16,1074
   27d2c:	10c00850 	cmplti	r3,r2,33
   27d30:	1802e51e 	bne	r3,zero,288c8 <_dtoa_r+0xcd0>
   27d34:	01001004 	movi	r4,64
   27d38:	2085c83a 	sub	r2,r4,r2
   27d3c:	81010484 	addi	r4,r16,1042
   27d40:	90a4983a 	sll	r18,r18,r2
   27d44:	9908d83a 	srl	r4,r19,r4
   27d48:	9108b03a 	or	r4,r18,r4
   27d4c:	00252000 	call	25200 <__floatunsidf>
   27d50:	1009883a 	mov	r4,r2
   27d54:	017f8434 	movhi	r5,65040
   27d58:	00800044 	movi	r2,1
   27d5c:	194b883a 	add	r5,r3,r5
   27d60:	843fffc4 	addi	r16,r16,-1
   27d64:	d8800a15 	stw	r2,40(sp)
   27d68:	000d883a 	mov	r6,zero
   27d6c:	01cffe34 	movhi	r7,16376
   27d70:	00248400 	call	24840 <__subdf3>
   27d74:	0198dbf4 	movhi	r6,25455
   27d78:	01cff4f4 	movhi	r7,16339
   27d7c:	3190d844 	addi	r6,r6,17249
   27d80:	39e1e9c4 	addi	r7,r7,-30809
   27d84:	1009883a 	mov	r4,r2
   27d88:	180b883a 	mov	r5,r3
   27d8c:	00240940 	call	24094 <__muldf3>
   27d90:	01a2d874 	movhi	r6,35681
   27d94:	01cff1f4 	movhi	r7,16327
   27d98:	31b22cc4 	addi	r6,r6,-14157
   27d9c:	39e28a04 	addi	r7,r7,-30168
   27da0:	180b883a 	mov	r5,r3
   27da4:	1009883a 	mov	r4,r2
   27da8:	0022ca40 	call	22ca4 <__adddf3>
   27dac:	8009883a 	mov	r4,r16
   27db0:	102b883a 	mov	r21,r2
   27db4:	1825883a 	mov	r18,r3
   27db8:	00251480 	call	25148 <__floatsidf>
   27dbc:	019427f4 	movhi	r6,20639
   27dc0:	01cff4f4 	movhi	r7,16339
   27dc4:	319e7ec4 	addi	r6,r6,31227
   27dc8:	39d104c4 	addi	r7,r7,17427
   27dcc:	1009883a 	mov	r4,r2
   27dd0:	180b883a 	mov	r5,r3
   27dd4:	00240940 	call	24094 <__muldf3>
   27dd8:	100d883a 	mov	r6,r2
   27ddc:	180f883a 	mov	r7,r3
   27de0:	a809883a 	mov	r4,r21
   27de4:	900b883a 	mov	r5,r18
   27de8:	0022ca40 	call	22ca4 <__adddf3>
   27dec:	1009883a 	mov	r4,r2
   27df0:	180b883a 	mov	r5,r3
   27df4:	1025883a 	mov	r18,r2
   27df8:	182d883a 	mov	r22,r3
   27dfc:	002fe340 	call	2fe34 <__fixdfsi>
   27e00:	000d883a 	mov	r6,zero
   27e04:	000f883a 	mov	r7,zero
   27e08:	9009883a 	mov	r4,r18
   27e0c:	b00b883a 	mov	r5,r22
   27e10:	102b883a 	mov	r21,r2
   27e14:	d8800315 	stw	r2,12(sp)
   27e18:	0023fac0 	call	23fac <__ledf2>
   27e1c:	10028f16 	blt	r2,zero,2885c <_dtoa_r+0xc64>
   27e20:	dc800317 	ldw	r18,12(sp)
   27e24:	a421c83a 	sub	r16,r20,r16
   27e28:	85bfffc4 	addi	r22,r16,-1
   27e2c:	908005e8 	cmpgeui	r2,r18,23
   27e30:	1002821e 	bne	r2,zero,2883c <_dtoa_r+0xc44>
   27e34:	900690fa 	slli	r3,r18,3
   27e38:	008000f4 	movhi	r2,3
   27e3c:	108cc204 	addi	r2,r2,13064
   27e40:	10c5883a 	add	r2,r2,r3
   27e44:	11800017 	ldw	r6,0(r2)
   27e48:	11c00117 	ldw	r7,4(r2)
   27e4c:	9809883a 	mov	r4,r19
   27e50:	880b883a 	mov	r5,r17
   27e54:	0023fac0 	call	23fac <__ledf2>
   27e58:	1002550e 	bge	r2,zero,287b0 <_dtoa_r+0xbb8>
   27e5c:	90bfffc4 	addi	r2,r18,-1
   27e60:	d8800315 	stw	r2,12(sp)
   27e64:	d8000915 	stw	zero,36(sp)
   27e68:	b0027716 	blt	r22,zero,28848 <_dtoa_r+0xc50>
   27e6c:	d8000615 	stw	zero,24(sp)
   27e70:	d8800317 	ldw	r2,12(sp)
   27e74:	1002510e 	bge	r2,zero,287bc <_dtoa_r+0xbc4>
   27e78:	d8800317 	ldw	r2,12(sp)
   27e7c:	d8c00617 	ldw	r3,24(sp)
   27e80:	d8000315 	stw	zero,12(sp)
   27e84:	d8800415 	stw	r2,16(sp)
   27e88:	1887c83a 	sub	r3,r3,r2
   27e8c:	d8c00615 	stw	r3,24(sp)
   27e90:	0087c83a 	sub	r3,zero,r2
   27e94:	d8c00815 	stw	r3,32(sp)
   27e98:	d8c00217 	ldw	r3,8(sp)
   27e9c:	188002a8 	cmpgeui	r2,r3,10
   27ea0:	10024d1e 	bne	r2,zero,287d8 <_dtoa_r+0xbe0>
   27ea4:	18800190 	cmplti	r2,r3,6
   27ea8:	10028b1e 	bne	r2,zero,288d8 <_dtoa_r+0xce0>
   27eac:	18bfff04 	addi	r2,r3,-4
   27eb0:	d8800215 	stw	r2,8(sp)
   27eb4:	0021883a 	mov	r16,zero
   27eb8:	d8c00217 	ldw	r3,8(sp)
   27ebc:	18800120 	cmpeqi	r2,r3,4
   27ec0:	10035d1e 	bne	r2,zero,28c38 <_dtoa_r+0x1040>
   27ec4:	18800160 	cmpeqi	r2,r3,5
   27ec8:	10031b1e 	bne	r2,zero,28b38 <_dtoa_r+0xf40>
   27ecc:	188000a0 	cmpeqi	r2,r3,2
   27ed0:	10024d26 	beq	r2,zero,28808 <_dtoa_r+0xc10>
   27ed4:	d8000715 	stw	zero,28(sp)
   27ed8:	d8801e17 	ldw	r2,120(sp)
   27edc:	0083260e 	bge	zero,r2,28b78 <_dtoa_r+0xf80>
   27ee0:	d8800b15 	stw	r2,44(sp)
   27ee4:	d8800515 	stw	r2,20(sp)
   27ee8:	100d883a 	mov	r6,r2
   27eec:	b8001115 	stw	zero,68(r23)
   27ef0:	30800610 	cmplti	r2,r6,24
   27ef4:	1004f11e 	bne	r2,zero,292bc <_dtoa_r+0x16c4>
   27ef8:	00c00044 	movi	r3,1
   27efc:	00800104 	movi	r2,4
   27f00:	1085883a 	add	r2,r2,r2
   27f04:	11000504 	addi	r4,r2,20
   27f08:	180b883a 	mov	r5,r3
   27f0c:	18c00044 	addi	r3,r3,1
   27f10:	313ffb2e 	bgeu	r6,r4,27f00 <_dtoa_r+0x308>
   27f14:	b9401115 	stw	r5,68(r23)
   27f18:	b809883a 	mov	r4,r23
   27f1c:	002b15c0 	call	2b15c <_Balloc>
   27f20:	d8800115 	stw	r2,4(sp)
   27f24:	1004de26 	beq	r2,zero,292a0 <_dtoa_r+0x16a8>
   27f28:	d8800117 	ldw	r2,4(sp)
   27f2c:	b8801015 	stw	r2,64(r23)
   27f30:	d8800517 	ldw	r2,20(sp)
   27f34:	108003e8 	cmpgeui	r2,r2,15
   27f38:	1001021e 	bne	r2,zero,28344 <_dtoa_r+0x74c>
   27f3c:	80010126 	beq	r16,zero,28344 <_dtoa_r+0x74c>
   27f40:	d9000417 	ldw	r4,16(sp)
   27f44:	01038b0e 	bge	zero,r4,28d74 <_dtoa_r+0x117c>
   27f48:	208003cc 	andi	r2,r4,15
   27f4c:	100690fa 	slli	r3,r2,3
   27f50:	2029d13a 	srai	r20,r4,4
   27f54:	008000f4 	movhi	r2,3
   27f58:	108cc204 	addi	r2,r2,13064
   27f5c:	10c5883a 	add	r2,r2,r3
   27f60:	a0c0040c 	andi	r3,r20,16
   27f64:	12800017 	ldw	r10,0(r2)
   27f68:	12400117 	ldw	r9,4(r2)
   27f6c:	18032c26 	beq	r3,zero,28c20 <_dtoa_r+0x1028>
   27f70:	008000f4 	movhi	r2,3
   27f74:	108cb804 	addi	r2,r2,13024
   27f78:	11800817 	ldw	r6,32(r2)
   27f7c:	11c00917 	ldw	r7,36(r2)
   27f80:	9809883a 	mov	r4,r19
   27f84:	880b883a 	mov	r5,r17
   27f88:	da400e15 	stw	r9,56(sp)
   27f8c:	da800d15 	stw	r10,52(sp)
   27f90:	00235940 	call	23594 <__divdf3>
   27f94:	da800d17 	ldw	r10,52(sp)
   27f98:	da400e17 	ldw	r9,56(sp)
   27f9c:	a50003cc 	andi	r20,r20,15
   27fa0:	d8800c15 	stw	r2,48(sp)
   27fa4:	1825883a 	mov	r18,r3
   27fa8:	054000c4 	movi	r21,3
   27fac:	a0001126 	beq	r20,zero,27ff4 <_dtoa_r+0x3fc>
   27fb0:	040000f4 	movhi	r16,3
   27fb4:	840cb804 	addi	r16,r16,13024
   27fb8:	5009883a 	mov	r4,r10
   27fbc:	480b883a 	mov	r5,r9
   27fc0:	a180004c 	andi	r6,r20,1
   27fc4:	30000626 	beq	r6,zero,27fe0 <_dtoa_r+0x3e8>
   27fc8:	81800017 	ldw	r6,0(r16)
   27fcc:	81c00117 	ldw	r7,4(r16)
   27fd0:	ad400044 	addi	r21,r21,1
   27fd4:	00240940 	call	24094 <__muldf3>
   27fd8:	1009883a 	mov	r4,r2
   27fdc:	180b883a 	mov	r5,r3
   27fe0:	a029d07a 	srai	r20,r20,1
   27fe4:	84000204 	addi	r16,r16,8
   27fe8:	a03ff51e 	bne	r20,zero,27fc0 <_dtoa_r+0x3c8>
   27fec:	2015883a 	mov	r10,r4
   27ff0:	2813883a 	mov	r9,r5
   27ff4:	d9000c17 	ldw	r4,48(sp)
   27ff8:	900b883a 	mov	r5,r18
   27ffc:	500d883a 	mov	r6,r10
   28000:	480f883a 	mov	r7,r9
   28004:	00235940 	call	23594 <__divdf3>
   28008:	1021883a 	mov	r16,r2
   2800c:	1825883a 	mov	r18,r3
   28010:	d8800917 	ldw	r2,36(sp)
   28014:	10000626 	beq	r2,zero,28030 <_dtoa_r+0x438>
   28018:	000d883a 	mov	r6,zero
   2801c:	01cffc34 	movhi	r7,16368
   28020:	8009883a 	mov	r4,r16
   28024:	900b883a 	mov	r5,r18
   28028:	0023fac0 	call	23fac <__ledf2>
   2802c:	10044416 	blt	r2,zero,29140 <_dtoa_r+0x1548>
   28030:	a809883a 	mov	r4,r21
   28034:	00251480 	call	25148 <__floatsidf>
   28038:	800d883a 	mov	r6,r16
   2803c:	900f883a 	mov	r7,r18
   28040:	1009883a 	mov	r4,r2
   28044:	180b883a 	mov	r5,r3
   28048:	00240940 	call	24094 <__muldf3>
   2804c:	000d883a 	mov	r6,zero
   28050:	01d00734 	movhi	r7,16412
   28054:	1009883a 	mov	r4,r2
   28058:	180b883a 	mov	r5,r3
   2805c:	0022ca40 	call	22ca4 <__adddf3>
   28060:	1029883a 	mov	r20,r2
   28064:	00bf3034 	movhi	r2,64704
   28068:	1885883a 	add	r2,r3,r2
   2806c:	d8800c15 	stw	r2,48(sp)
   28070:	d8800517 	ldw	r2,20(sp)
   28074:	10032226 	beq	r2,zero,28d00 <_dtoa_r+0x1108>
   28078:	d8800417 	ldw	r2,16(sp)
   2807c:	d8801115 	stw	r2,68(sp)
   28080:	d8800517 	ldw	r2,20(sp)
   28084:	d8800d15 	stw	r2,52(sp)
   28088:	d8800d17 	ldw	r2,52(sp)
   2808c:	900b883a 	mov	r5,r18
   28090:	8009883a 	mov	r4,r16
   28094:	10bfffc4 	addi	r2,r2,-1
   28098:	100690fa 	slli	r3,r2,3
   2809c:	008000f4 	movhi	r2,3
   280a0:	108cc204 	addi	r2,r2,13064
   280a4:	10c5883a 	add	r2,r2,r3
   280a8:	12800017 	ldw	r10,0(r2)
   280ac:	12c00117 	ldw	r11,4(r2)
   280b0:	da800f15 	stw	r10,60(sp)
   280b4:	dac00e15 	stw	r11,56(sp)
   280b8:	002fe340 	call	2fe34 <__fixdfsi>
   280bc:	1009883a 	mov	r4,r2
   280c0:	10800c04 	addi	r2,r2,48
   280c4:	d8801015 	stw	r2,64(sp)
   280c8:	00251480 	call	25148 <__floatsidf>
   280cc:	8009883a 	mov	r4,r16
   280d0:	100d883a 	mov	r6,r2
   280d4:	180f883a 	mov	r7,r3
   280d8:	900b883a 	mov	r5,r18
   280dc:	00248400 	call	24840 <__subdf3>
   280e0:	d9000117 	ldw	r4,4(sp)
   280e4:	dac00e17 	ldw	r11,56(sp)
   280e8:	da800f17 	ldw	r10,60(sp)
   280ec:	1825883a 	mov	r18,r3
   280f0:	d8c00717 	ldw	r3,28(sp)
   280f4:	25400044 	addi	r21,r4,1
   280f8:	1021883a 	mov	r16,r2
   280fc:	500d883a 	mov	r6,r10
   28100:	580f883a 	mov	r7,r11
   28104:	1803b626 	beq	r3,zero,28fe0 <_dtoa_r+0x13e8>
   28108:	0009883a 	mov	r4,zero
   2810c:	014ff834 	movhi	r5,16352
   28110:	00235940 	call	23594 <__divdf3>
   28114:	d9c00c17 	ldw	r7,48(sp)
   28118:	a00d883a 	mov	r6,r20
   2811c:	1009883a 	mov	r4,r2
   28120:	180b883a 	mov	r5,r3
   28124:	00248400 	call	24840 <__subdf3>
   28128:	d9000117 	ldw	r4,4(sp)
   2812c:	1029883a 	mov	r20,r2
   28130:	d8801017 	ldw	r2,64(sp)
   28134:	800d883a 	mov	r6,r16
   28138:	900f883a 	mov	r7,r18
   2813c:	20800005 	stb	r2,0(r4)
   28140:	180b883a 	mov	r5,r3
   28144:	a009883a 	mov	r4,r20
   28148:	d8c00c15 	stw	r3,48(sp)
   2814c:	0023ec40 	call	23ec4 <__gedf2>
   28150:	0083e716 	blt	zero,r2,290f0 <_dtoa_r+0x14f8>
   28154:	0005883a 	mov	r2,zero
   28158:	dd800e15 	stw	r22,56(sp)
   2815c:	dc400f15 	stw	r17,60(sp)
   28160:	dd800d17 	ldw	r22,52(sp)
   28164:	dc400c17 	ldw	r17,48(sp)
   28168:	ddc00d15 	stw	r23,52(sp)
   2816c:	dcc00c15 	stw	r19,48(sp)
   28170:	1027883a 	mov	r19,r2
   28174:	00002606 	br	28210 <_dtoa_r+0x618>
   28178:	9cc00044 	addi	r19,r19,1
   2817c:	9d806d0e 	bge	r19,r22,28334 <_dtoa_r+0x73c>
   28180:	a009883a 	mov	r4,r20
   28184:	880b883a 	mov	r5,r17
   28188:	000d883a 	mov	r6,zero
   2818c:	01d00934 	movhi	r7,16420
   28190:	00240940 	call	24094 <__muldf3>
   28194:	000d883a 	mov	r6,zero
   28198:	01d00934 	movhi	r7,16420
   2819c:	8009883a 	mov	r4,r16
   281a0:	900b883a 	mov	r5,r18
   281a4:	1029883a 	mov	r20,r2
   281a8:	1823883a 	mov	r17,r3
   281ac:	00240940 	call	24094 <__muldf3>
   281b0:	180b883a 	mov	r5,r3
   281b4:	1009883a 	mov	r4,r2
   281b8:	1821883a 	mov	r16,r3
   281bc:	1025883a 	mov	r18,r2
   281c0:	002fe340 	call	2fe34 <__fixdfsi>
   281c4:	1009883a 	mov	r4,r2
   281c8:	102f883a 	mov	r23,r2
   281cc:	00251480 	call	25148 <__floatsidf>
   281d0:	9009883a 	mov	r4,r18
   281d4:	800b883a 	mov	r5,r16
   281d8:	100d883a 	mov	r6,r2
   281dc:	180f883a 	mov	r7,r3
   281e0:	00248400 	call	24840 <__subdf3>
   281e4:	ad400044 	addi	r21,r21,1
   281e8:	ba000c04 	addi	r8,r23,48
   281ec:	aa3fffc5 	stb	r8,-1(r21)
   281f0:	a00d883a 	mov	r6,r20
   281f4:	880f883a 	mov	r7,r17
   281f8:	1009883a 	mov	r4,r2
   281fc:	180b883a 	mov	r5,r3
   28200:	1021883a 	mov	r16,r2
   28204:	1825883a 	mov	r18,r3
   28208:	0023fac0 	call	23fac <__ledf2>
   2820c:	10040516 	blt	r2,zero,29224 <_dtoa_r+0x162c>
   28210:	800d883a 	mov	r6,r16
   28214:	900f883a 	mov	r7,r18
   28218:	0009883a 	mov	r4,zero
   2821c:	014ffc34 	movhi	r5,16368
   28220:	00248400 	call	24840 <__subdf3>
   28224:	a00d883a 	mov	r6,r20
   28228:	880f883a 	mov	r7,r17
   2822c:	1009883a 	mov	r4,r2
   28230:	180b883a 	mov	r5,r3
   28234:	0023fac0 	call	23fac <__ledf2>
   28238:	103fcf0e 	bge	r2,zero,28178 <_dtoa_r+0x580>
   2823c:	d8801117 	ldw	r2,68(sp)
   28240:	ddc00d17 	ldw	r23,52(sp)
   28244:	d9000117 	ldw	r4,4(sp)
   28248:	10800044 	addi	r2,r2,1
   2824c:	d8800415 	stw	r2,16(sp)
   28250:	a829883a 	mov	r20,r21
   28254:	00000106 	br	2825c <_dtoa_r+0x664>
   28258:	a103da26 	beq	r20,r4,291c4 <_dtoa_r+0x15cc>
   2825c:	a0ffffc3 	ldbu	r3,-1(r20)
   28260:	a02b883a 	mov	r21,r20
   28264:	a53fffc4 	addi	r20,r20,-1
   28268:	18803fcc 	andi	r2,r3,255
   2826c:	1080201c 	xori	r2,r2,128
   28270:	10bfe004 	addi	r2,r2,-128
   28274:	10800e60 	cmpeqi	r2,r2,57
   28278:	103ff71e 	bne	r2,zero,28258 <_dtoa_r+0x660>
   2827c:	18c00044 	addi	r3,r3,1
   28280:	a0c00005 	stb	r3,0(r20)
   28284:	00013f06 	br	28784 <_dtoa_r+0xb8c>
   28288:	04600034 	movhi	r17,32768
   2828c:	8c7fffc4 	addi	r17,r17,-1
   28290:	9462703a 	and	r17,r18,r17
   28294:	00800044 	movi	r2,1
   28298:	8825883a 	mov	r18,r17
   2829c:	80800015 	stw	r2,0(r16)
   282a0:	00dffc34 	movhi	r3,32752
   282a4:	909ffc2c 	andhi	r2,r18,32752
   282a8:	10fe731e 	bne	r2,r3,27c78 <_dtoa_r+0x80>
   282ac:	d9001f17 	ldw	r4,124(sp)
   282b0:	00800434 	movhi	r2,16
   282b4:	10bfffc4 	addi	r2,r2,-1
   282b8:	9084703a 	and	r2,r18,r2
   282bc:	00c9c3c4 	movi	r3,9999
   282c0:	20c00015 	stw	r3,0(r4)
   282c4:	14e6b03a 	or	r19,r2,r19
   282c8:	9800141e 	bne	r19,zero,2831c <_dtoa_r+0x724>
   282cc:	d8802117 	ldw	r2,132(sp)
   282d0:	10041226 	beq	r2,zero,2931c <_dtoa_r+0x1724>
   282d4:	008000f4 	movhi	r2,3
   282d8:	1007883a 	mov	r3,r2
   282dc:	18cc8304 	addi	r3,r3,12812
   282e0:	008000f4 	movhi	r2,3
   282e4:	d8c00115 	stw	r3,4(sp)
   282e8:	108c8504 	addi	r2,r2,12820
   282ec:	d8c02117 	ldw	r3,132(sp)
   282f0:	18800015 	stw	r2,0(r3)
   282f4:	003e7206 	br	27cc0 <_dtoa_r+0xc8>
   282f8:	01400434 	movhi	r5,16
   282fc:	297fffc4 	addi	r5,r5,-1
   28300:	894a703a 	and	r5,r17,r5
   28304:	dd001217 	ldw	r20,72(sp)
   28308:	9809883a 	mov	r4,r19
   2830c:	294ffc34 	orhi	r5,r5,16368
   28310:	843f0044 	addi	r16,r16,-1023
   28314:	d8000a15 	stw	zero,40(sp)
   28318:	003e9306 	br	27d68 <_dtoa_r+0x170>
   2831c:	d8802117 	ldw	r2,132(sp)
   28320:	1001fe1e 	bne	r2,zero,28b1c <_dtoa_r+0xf24>
   28324:	008000f4 	movhi	r2,3
   28328:	108c8204 	addi	r2,r2,12808
   2832c:	d8800115 	stw	r2,4(sp)
   28330:	003e6306 	br	27cc0 <_dtoa_r+0xc8>
   28334:	dd800e17 	ldw	r22,56(sp)
   28338:	ddc00d17 	ldw	r23,52(sp)
   2833c:	dc400f17 	ldw	r17,60(sp)
   28340:	dcc00c17 	ldw	r19,48(sp)
   28344:	d8801317 	ldw	r2,76(sp)
   28348:	10006e16 	blt	r2,zero,28504 <_dtoa_r+0x90c>
   2834c:	d9000417 	ldw	r4,16(sp)
   28350:	20c003c8 	cmpgei	r3,r4,15
   28354:	18006b1e 	bne	r3,zero,28504 <_dtoa_r+0x90c>
   28358:	200690fa 	slli	r3,r4,3
   2835c:	008000f4 	movhi	r2,3
   28360:	108cc204 	addi	r2,r2,13064
   28364:	10c5883a 	add	r2,r2,r3
   28368:	14000017 	ldw	r16,0(r2)
   2836c:	14800117 	ldw	r18,4(r2)
   28370:	d8801e17 	ldw	r2,120(sp)
   28374:	1000150e 	bge	r2,zero,283cc <_dtoa_r+0x7d4>
   28378:	d8800517 	ldw	r2,20(sp)
   2837c:	00801316 	blt	zero,r2,283cc <_dtoa_r+0x7d4>
   28380:	d8800517 	ldw	r2,20(sp)
   28384:	1002721e 	bne	r2,zero,28d50 <_dtoa_r+0x1158>
   28388:	8009883a 	mov	r4,r16
   2838c:	000d883a 	mov	r6,zero
   28390:	01d00534 	movhi	r7,16404
   28394:	900b883a 	mov	r5,r18
   28398:	00240940 	call	24094 <__muldf3>
   2839c:	100d883a 	mov	r6,r2
   283a0:	180f883a 	mov	r7,r3
   283a4:	9809883a 	mov	r4,r19
   283a8:	880b883a 	mov	r5,r17
   283ac:	0023fac0 	call	23fac <__ledf2>
   283b0:	0029883a 	mov	r20,zero
   283b4:	0021883a 	mov	r16,zero
   283b8:	00820216 	blt	zero,r2,28bc4 <_dtoa_r+0xfcc>
   283bc:	d8801e17 	ldw	r2,120(sp)
   283c0:	dd400117 	ldw	r21,4(sp)
   283c4:	00a2303a 	nor	r17,zero,r2
   283c8:	00020406 	br	28bdc <_dtoa_r+0xfe4>
   283cc:	800d883a 	mov	r6,r16
   283d0:	900f883a 	mov	r7,r18
   283d4:	9809883a 	mov	r4,r19
   283d8:	880b883a 	mov	r5,r17
   283dc:	00235940 	call	23594 <__divdf3>
   283e0:	180b883a 	mov	r5,r3
   283e4:	1009883a 	mov	r4,r2
   283e8:	002fe340 	call	2fe34 <__fixdfsi>
   283ec:	1009883a 	mov	r4,r2
   283f0:	102b883a 	mov	r21,r2
   283f4:	00251480 	call	25148 <__floatsidf>
   283f8:	800d883a 	mov	r6,r16
   283fc:	900f883a 	mov	r7,r18
   28400:	1009883a 	mov	r4,r2
   28404:	180b883a 	mov	r5,r3
   28408:	00240940 	call	24094 <__muldf3>
   2840c:	100d883a 	mov	r6,r2
   28410:	9809883a 	mov	r4,r19
   28414:	880b883a 	mov	r5,r17
   28418:	180f883a 	mov	r7,r3
   2841c:	00248400 	call	24840 <__subdf3>
   28420:	d9800117 	ldw	r6,4(sp)
   28424:	dd800517 	ldw	r22,20(sp)
   28428:	1009883a 	mov	r4,r2
   2842c:	a8800c04 	addi	r2,r21,48
   28430:	30800005 	stb	r2,0(r6)
   28434:	b0800060 	cmpeqi	r2,r22,1
   28438:	180b883a 	mov	r5,r3
   2843c:	35000044 	addi	r20,r6,1
   28440:	10029f1e 	bne	r2,zero,28ec0 <_dtoa_r+0x12c8>
   28444:	04400044 	movi	r17,1
   28448:	ddc00215 	stw	r23,8(sp)
   2844c:	00001c06 	br	284c0 <_dtoa_r+0x8c8>
   28450:	800d883a 	mov	r6,r16
   28454:	900f883a 	mov	r7,r18
   28458:	a809883a 	mov	r4,r21
   2845c:	980b883a 	mov	r5,r19
   28460:	00235940 	call	23594 <__divdf3>
   28464:	180b883a 	mov	r5,r3
   28468:	1009883a 	mov	r4,r2
   2846c:	002fe340 	call	2fe34 <__fixdfsi>
   28470:	1009883a 	mov	r4,r2
   28474:	102f883a 	mov	r23,r2
   28478:	00251480 	call	25148 <__floatsidf>
   2847c:	800d883a 	mov	r6,r16
   28480:	900f883a 	mov	r7,r18
   28484:	1009883a 	mov	r4,r2
   28488:	180b883a 	mov	r5,r3
   2848c:	00240940 	call	24094 <__muldf3>
   28490:	a809883a 	mov	r4,r21
   28494:	980b883a 	mov	r5,r19
   28498:	100d883a 	mov	r6,r2
   2849c:	180f883a 	mov	r7,r3
   284a0:	00248400 	call	24840 <__subdf3>
   284a4:	b9000c04 	addi	r4,r23,48
   284a8:	a1000005 	stb	r4,0(r20)
   284ac:	8c400044 	addi	r17,r17,1
   284b0:	a5000044 	addi	r20,r20,1
   284b4:	1009883a 	mov	r4,r2
   284b8:	180b883a 	mov	r5,r3
   284bc:	8d827e26 	beq	r17,r22,28eb8 <_dtoa_r+0x12c0>
   284c0:	000d883a 	mov	r6,zero
   284c4:	01d00934 	movhi	r7,16420
   284c8:	00240940 	call	24094 <__muldf3>
   284cc:	000d883a 	mov	r6,zero
   284d0:	000f883a 	mov	r7,zero
   284d4:	1009883a 	mov	r4,r2
   284d8:	180b883a 	mov	r5,r3
   284dc:	102b883a 	mov	r21,r2
   284e0:	1827883a 	mov	r19,r3
   284e4:	002fdb40 	call	2fdb4 <__eqdf2>
   284e8:	103fd91e 	bne	r2,zero,28450 <_dtoa_r+0x858>
   284ec:	d8800417 	ldw	r2,16(sp)
   284f0:	ddc00217 	ldw	r23,8(sp)
   284f4:	a02b883a 	mov	r21,r20
   284f8:	10800044 	addi	r2,r2,1
   284fc:	d8800415 	stw	r2,16(sp)
   28500:	0000a006 	br	28784 <_dtoa_r+0xb8c>
   28504:	d8c00717 	ldw	r3,28(sp)
   28508:	1800e326 	beq	r3,zero,28898 <_dtoa_r+0xca0>
   2850c:	d8c00217 	ldw	r3,8(sp)
   28510:	18c00088 	cmpgei	r3,r3,2
   28514:	1801e026 	beq	r3,zero,28c98 <_dtoa_r+0x10a0>
   28518:	d8800517 	ldw	r2,20(sp)
   2851c:	153fffc4 	addi	r20,r2,-1
   28520:	d8800817 	ldw	r2,32(sp)
   28524:	1501bc0e 	bge	r2,r20,28c18 <_dtoa_r+0x1020>
   28528:	d8800817 	ldw	r2,32(sp)
   2852c:	d8c00317 	ldw	r3,12(sp)
   28530:	dd000815 	stw	r20,32(sp)
   28534:	a085c83a 	sub	r2,r20,r2
   28538:	1885883a 	add	r2,r3,r2
   2853c:	d8800315 	stw	r2,12(sp)
   28540:	0029883a 	mov	r20,zero
   28544:	d8800517 	ldw	r2,20(sp)
   28548:	10028b16 	blt	r2,zero,28f78 <_dtoa_r+0x1380>
   2854c:	d8c00617 	ldw	r3,24(sp)
   28550:	b0ad883a 	add	r22,r22,r2
   28554:	1885883a 	add	r2,r3,r2
   28558:	1825883a 	mov	r18,r3
   2855c:	d8800615 	stw	r2,24(sp)
   28560:	01400044 	movi	r5,1
   28564:	b809883a 	mov	r4,r23
   28568:	002b5cc0 	call	2b5cc <__i2b>
   2856c:	1021883a 	mov	r16,r2
   28570:	0480080e 	bge	zero,r18,28594 <_dtoa_r+0x99c>
   28574:	0580070e 	bge	zero,r22,28594 <_dtoa_r+0x99c>
   28578:	9005883a 	mov	r2,r18
   2857c:	b4819e16 	blt	r22,r18,28bf8 <_dtoa_r+0x1000>
   28580:	d8c00617 	ldw	r3,24(sp)
   28584:	90a5c83a 	sub	r18,r18,r2
   28588:	b0adc83a 	sub	r22,r22,r2
   2858c:	1887c83a 	sub	r3,r3,r2
   28590:	d8c00615 	stw	r3,24(sp)
   28594:	d8800817 	ldw	r2,32(sp)
   28598:	10001426 	beq	r2,zero,285ec <_dtoa_r+0x9f4>
   2859c:	d8800717 	ldw	r2,28(sp)
   285a0:	1001ee26 	beq	r2,zero,28d5c <_dtoa_r+0x1164>
   285a4:	05000e0e 	bge	zero,r20,285e0 <_dtoa_r+0x9e8>
   285a8:	800b883a 	mov	r5,r16
   285ac:	a00d883a 	mov	r6,r20
   285b0:	b809883a 	mov	r4,r23
   285b4:	002b9400 	call	2b940 <__pow5mult>
   285b8:	e00d883a 	mov	r6,fp
   285bc:	100b883a 	mov	r5,r2
   285c0:	b809883a 	mov	r4,r23
   285c4:	1021883a 	mov	r16,r2
   285c8:	002b67c0 	call	2b67c <__multiply>
   285cc:	102b883a 	mov	r21,r2
   285d0:	e00b883a 	mov	r5,fp
   285d4:	b809883a 	mov	r4,r23
   285d8:	002b2000 	call	2b200 <_Bfree>
   285dc:	a839883a 	mov	fp,r21
   285e0:	d8800817 	ldw	r2,32(sp)
   285e4:	150dc83a 	sub	r6,r2,r20
   285e8:	15025e1e 	bne	r2,r20,28f64 <_dtoa_r+0x136c>
   285ec:	01400044 	movi	r5,1
   285f0:	b809883a 	mov	r4,r23
   285f4:	002b5cc0 	call	2b5cc <__i2b>
   285f8:	d9800317 	ldw	r6,12(sp)
   285fc:	1029883a 	mov	r20,r2
   28600:	0180b716 	blt	zero,r6,288e0 <_dtoa_r+0xce8>
   28604:	d8800217 	ldw	r2,8(sp)
   28608:	10800088 	cmpgei	r2,r2,2
   2860c:	10014d26 	beq	r2,zero,28b44 <_dtoa_r+0xf4c>
   28610:	0023883a 	mov	r17,zero
   28614:	d8c00317 	ldw	r3,12(sp)
   28618:	00800044 	movi	r2,1
   2861c:	1800b81e 	bne	r3,zero,28900 <_dtoa_r+0xd08>
   28620:	1585883a 	add	r2,r2,r22
   28624:	108007cc 	andi	r2,r2,31
   28628:	1000a526 	beq	r2,zero,288c0 <_dtoa_r+0xcc8>
   2862c:	00c00804 	movi	r3,32
   28630:	1887c83a 	sub	r3,r3,r2
   28634:	19000150 	cmplti	r4,r3,5
   28638:	20033c1e 	bne	r4,zero,2932c <_dtoa_r+0x1734>
   2863c:	00c00704 	movi	r3,28
   28640:	1885c83a 	sub	r2,r3,r2
   28644:	d8c00617 	ldw	r3,24(sp)
   28648:	90a5883a 	add	r18,r18,r2
   2864c:	b0ad883a 	add	r22,r22,r2
   28650:	1887883a 	add	r3,r3,r2
   28654:	d8c00615 	stw	r3,24(sp)
   28658:	d8800617 	ldw	r2,24(sp)
   2865c:	00809216 	blt	zero,r2,288a8 <_dtoa_r+0xcb0>
   28660:	0580050e 	bge	zero,r22,28678 <_dtoa_r+0xa80>
   28664:	a00b883a 	mov	r5,r20
   28668:	b00d883a 	mov	r6,r22
   2866c:	b809883a 	mov	r4,r23
   28670:	002ba880 	call	2ba88 <__lshift>
   28674:	1029883a 	mov	r20,r2
   28678:	d8800917 	ldw	r2,36(sp)
   2867c:	1001151e 	bne	r2,zero,28ad4 <_dtoa_r+0xedc>
   28680:	d8800517 	ldw	r2,20(sp)
   28684:	0081020e 	bge	zero,r2,28a90 <_dtoa_r+0xe98>
   28688:	d8800717 	ldw	r2,28(sp)
   2868c:	1000af1e 	bne	r2,zero,2894c <_dtoa_r+0xd54>
   28690:	d8800417 	ldw	r2,16(sp)
   28694:	10800044 	addi	r2,r2,1
   28698:	d8800415 	stw	r2,16(sp)
   2869c:	dc800517 	ldw	r18,20(sp)
   286a0:	dd400117 	ldw	r21,4(sp)
   286a4:	04400044 	movi	r17,1
   286a8:	00000706 	br	286c8 <_dtoa_r+0xad0>
   286ac:	e00b883a 	mov	r5,fp
   286b0:	000f883a 	mov	r7,zero
   286b4:	01800284 	movi	r6,10
   286b8:	b809883a 	mov	r4,r23
   286bc:	002b2240 	call	2b224 <__multadd>
   286c0:	1039883a 	mov	fp,r2
   286c4:	8c400044 	addi	r17,r17,1
   286c8:	a00b883a 	mov	r5,r20
   286cc:	e009883a 	mov	r4,fp
   286d0:	00279d80 	call	279d8 <quorem>
   286d4:	14c00c04 	addi	r19,r2,48
   286d8:	ac45883a 	add	r2,r21,r17
   286dc:	14ffffc5 	stb	r19,-1(r2)
   286e0:	8cbff216 	blt	r17,r18,286ac <_dtoa_r+0xab4>
   286e4:	d8800517 	ldw	r2,20(sp)
   286e8:	0081510e 	bge	zero,r2,28c30 <_dtoa_r+0x1038>
   286ec:	d8c00117 	ldw	r3,4(sp)
   286f0:	0023883a 	mov	r17,zero
   286f4:	18ab883a 	add	r21,r3,r2
   286f8:	e00b883a 	mov	r5,fp
   286fc:	01800044 	movi	r6,1
   28700:	b809883a 	mov	r4,r23
   28704:	002ba880 	call	2ba88 <__lshift>
   28708:	1009883a 	mov	r4,r2
   2870c:	a00b883a 	mov	r5,r20
   28710:	1039883a 	mov	fp,r2
   28714:	002bc100 	call	2bc10 <__mcmp>
   28718:	a93fffc3 	ldbu	r4,-1(r21)
   2871c:	0081490e 	bge	zero,r2,28c44 <_dtoa_r+0x104c>
   28720:	d9400117 	ldw	r5,4(sp)
   28724:	00000306 	br	28734 <_dtoa_r+0xb3c>
   28728:	19415426 	beq	r3,r5,28c7c <_dtoa_r+0x1084>
   2872c:	193fffc3 	ldbu	r4,-1(r3)
   28730:	182b883a 	mov	r21,r3
   28734:	20803fcc 	andi	r2,r4,255
   28738:	1080201c 	xori	r2,r2,128
   2873c:	10bfe004 	addi	r2,r2,-128
   28740:	10800e60 	cmpeqi	r2,r2,57
   28744:	a8ffffc4 	addi	r3,r21,-1
   28748:	103ff71e 	bne	r2,zero,28728 <_dtoa_r+0xb30>
   2874c:	21000044 	addi	r4,r4,1
   28750:	19000005 	stb	r4,0(r3)
   28754:	a00b883a 	mov	r5,r20
   28758:	b809883a 	mov	r4,r23
   2875c:	002b2000 	call	2b200 <_Bfree>
   28760:	80000826 	beq	r16,zero,28784 <_dtoa_r+0xb8c>
   28764:	88000426 	beq	r17,zero,28778 <_dtoa_r+0xb80>
   28768:	8c000326 	beq	r17,r16,28778 <_dtoa_r+0xb80>
   2876c:	880b883a 	mov	r5,r17
   28770:	b809883a 	mov	r4,r23
   28774:	002b2000 	call	2b200 <_Bfree>
   28778:	800b883a 	mov	r5,r16
   2877c:	b809883a 	mov	r4,r23
   28780:	002b2000 	call	2b200 <_Bfree>
   28784:	e00b883a 	mov	r5,fp
   28788:	b809883a 	mov	r4,r23
   2878c:	002b2000 	call	2b200 <_Bfree>
   28790:	d8801f17 	ldw	r2,124(sp)
   28794:	d8c00417 	ldw	r3,16(sp)
   28798:	a8000005 	stb	zero,0(r21)
   2879c:	10c00015 	stw	r3,0(r2)
   287a0:	d8802117 	ldw	r2,132(sp)
   287a4:	103d4626 	beq	r2,zero,27cc0 <_dtoa_r+0xc8>
   287a8:	15400015 	stw	r21,0(r2)
   287ac:	003d4406 	br	27cc0 <_dtoa_r+0xc8>
   287b0:	d8000915 	stw	zero,36(sp)
   287b4:	b0002416 	blt	r22,zero,28848 <_dtoa_r+0xc50>
   287b8:	d8000615 	stw	zero,24(sp)
   287bc:	d8800317 	ldw	r2,12(sp)
   287c0:	d8c00217 	ldw	r3,8(sp)
   287c4:	d8000815 	stw	zero,32(sp)
   287c8:	b0ad883a 	add	r22,r22,r2
   287cc:	d8800415 	stw	r2,16(sp)
   287d0:	188002a8 	cmpgeui	r2,r3,10
   287d4:	103db326 	beq	r2,zero,27ea4 <_dtoa_r+0x2ac>
   287d8:	00800044 	movi	r2,1
   287dc:	d8800715 	stw	r2,28(sp)
   287e0:	00bfffc4 	movi	r2,-1
   287e4:	04000044 	movi	r16,1
   287e8:	d8000215 	stw	zero,8(sp)
   287ec:	d8800515 	stw	r2,20(sp)
   287f0:	d8001e15 	stw	zero,120(sp)
   287f4:	d8800517 	ldw	r2,20(sp)
   287f8:	b8001115 	stw	zero,68(r23)
   287fc:	000b883a 	mov	r5,zero
   28800:	d8800b15 	stw	r2,44(sp)
   28804:	003dc406 	br	27f18 <_dtoa_r+0x320>
   28808:	188000e0 	cmpeqi	r2,r3,3
   2880c:	d8000715 	stw	zero,28(sp)
   28810:	1002ac26 	beq	r2,zero,292c4 <_dtoa_r+0x16cc>
   28814:	d8801e17 	ldw	r2,120(sp)
   28818:	d8c00417 	ldw	r3,16(sp)
   2881c:	10c5883a 	add	r2,r2,r3
   28820:	d8800b15 	stw	r2,44(sp)
   28824:	10800044 	addi	r2,r2,1
   28828:	d8800515 	stw	r2,20(sp)
   2882c:	100d883a 	mov	r6,r2
   28830:	00bdae16 	blt	zero,r2,27eec <_dtoa_r+0x2f4>
   28834:	01800044 	movi	r6,1
   28838:	003dac06 	br	27eec <_dtoa_r+0x2f4>
   2883c:	00800044 	movi	r2,1
   28840:	d8800915 	stw	r2,36(sp)
   28844:	b03d890e 	bge	r22,zero,27e6c <_dtoa_r+0x274>
   28848:	00800044 	movi	r2,1
   2884c:	1405c83a 	sub	r2,r2,r16
   28850:	d8800615 	stw	r2,24(sp)
   28854:	002d883a 	mov	r22,zero
   28858:	003d8506 	br	27e70 <_dtoa_r+0x278>
   2885c:	a809883a 	mov	r4,r21
   28860:	00251480 	call	25148 <__floatsidf>
   28864:	900d883a 	mov	r6,r18
   28868:	b00f883a 	mov	r7,r22
   2886c:	1009883a 	mov	r4,r2
   28870:	180b883a 	mov	r5,r3
   28874:	002fdb40 	call	2fdb4 <__eqdf2>
   28878:	103d6926 	beq	r2,zero,27e20 <_dtoa_r+0x228>
   2887c:	a8bfffc4 	addi	r2,r21,-1
   28880:	d8800315 	stw	r2,12(sp)
   28884:	003d6606 	br	27e20 <_dtoa_r+0x228>
   28888:	008000f4 	movhi	r2,3
   2888c:	108c7904 	addi	r2,r2,12772
   28890:	d8800115 	stw	r2,4(sp)
   28894:	003d0a06 	br	27cc0 <_dtoa_r+0xc8>
   28898:	dd000817 	ldw	r20,32(sp)
   2889c:	dc800617 	ldw	r18,24(sp)
   288a0:	0021883a 	mov	r16,zero
   288a4:	003f3206 	br	28570 <_dtoa_r+0x978>
   288a8:	e00b883a 	mov	r5,fp
   288ac:	100d883a 	mov	r6,r2
   288b0:	b809883a 	mov	r4,r23
   288b4:	002ba880 	call	2ba88 <__lshift>
   288b8:	1039883a 	mov	fp,r2
   288bc:	003f6806 	br	28660 <_dtoa_r+0xa68>
   288c0:	00800704 	movi	r2,28
   288c4:	003f5f06 	br	28644 <_dtoa_r+0xa4c>
   288c8:	01000804 	movi	r4,32
   288cc:	2089c83a 	sub	r4,r4,r2
   288d0:	9908983a 	sll	r4,r19,r4
   288d4:	003d1d06 	br	27d4c <_dtoa_r+0x154>
   288d8:	04000044 	movi	r16,1
   288dc:	003d7606 	br	27eb8 <_dtoa_r+0x2c0>
   288e0:	100b883a 	mov	r5,r2
   288e4:	b809883a 	mov	r4,r23
   288e8:	002b9400 	call	2b940 <__pow5mult>
   288ec:	d8c00217 	ldw	r3,8(sp)
   288f0:	1029883a 	mov	r20,r2
   288f4:	18c00090 	cmplti	r3,r3,2
   288f8:	1801511e 	bne	r3,zero,28e40 <_dtoa_r+0x1248>
   288fc:	0023883a 	mov	r17,zero
   28900:	a0800417 	ldw	r2,16(r20)
   28904:	10800104 	addi	r2,r2,4
   28908:	100490ba 	slli	r2,r2,2
   2890c:	a085883a 	add	r2,r20,r2
   28910:	11000017 	ldw	r4,0(r2)
   28914:	002b4b80 	call	2b4b8 <__hi0bits>
   28918:	00c00804 	movi	r3,32
   2891c:	1885c83a 	sub	r2,r3,r2
   28920:	003f3f06 	br	28620 <_dtoa_r+0xa28>
   28924:	800b883a 	mov	r5,r16
   28928:	000f883a 	mov	r7,zero
   2892c:	01800284 	movi	r6,10
   28930:	b809883a 	mov	r4,r23
   28934:	002b2240 	call	2b224 <__multadd>
   28938:	1021883a 	mov	r16,r2
   2893c:	d8800b17 	ldw	r2,44(sp)
   28940:	00824b0e 	bge	zero,r2,29270 <_dtoa_r+0x1678>
   28944:	dd400415 	stw	r21,16(sp)
   28948:	d8800515 	stw	r2,20(sp)
   2894c:	0480ac16 	blt	zero,r18,28c00 <_dtoa_r+0x1008>
   28950:	8801731e 	bne	r17,zero,28f20 <_dtoa_r+0x1328>
   28954:	8025883a 	mov	r18,r16
   28958:	dd800117 	ldw	r22,4(sp)
   2895c:	d9000517 	ldw	r4,20(sp)
   28960:	98c0004c 	andi	r3,r19,1
   28964:	b0bfffc4 	addi	r2,r22,-1
   28968:	1105883a 	add	r2,r2,r4
   2896c:	d8800515 	stw	r2,20(sp)
   28970:	d8800217 	ldw	r2,8(sp)
   28974:	d8c00815 	stw	r3,32(sp)
   28978:	1884b03a 	or	r2,r3,r2
   2897c:	d8800715 	stw	r2,28(sp)
   28980:	00002906 	br	28a28 <_dtoa_r+0xe30>
   28984:	e009883a 	mov	r4,fp
   28988:	002bc100 	call	2bc10 <__mcmp>
   2898c:	980b883a 	mov	r5,r19
   28990:	b809883a 	mov	r4,r23
   28994:	d8800315 	stw	r2,12(sp)
   28998:	002b2000 	call	2b200 <_Bfree>
   2899c:	d8800317 	ldw	r2,12(sp)
   289a0:	1000021e 	bne	r2,zero,289ac <_dtoa_r+0xdb4>
   289a4:	d8c00717 	ldw	r3,28(sp)
   289a8:	18022326 	beq	r3,zero,29238 <_dtoa_r+0x1640>
   289ac:	b4c00044 	addi	r19,r22,1
   289b0:	88012916 	blt	r17,zero,28e58 <_dtoa_r+0x1260>
   289b4:	d8c00217 	ldw	r3,8(sp)
   289b8:	88e2b03a 	or	r17,r17,r3
   289bc:	d8c00817 	ldw	r3,32(sp)
   289c0:	1c62b03a 	or	r17,r3,r17
   289c4:	88012426 	beq	r17,zero,28e58 <_dtoa_r+0x1260>
   289c8:	00816f16 	blt	zero,r2,28f88 <_dtoa_r+0x1390>
   289cc:	d8800517 	ldw	r2,20(sp)
   289d0:	b5400005 	stb	r21,0(r22)
   289d4:	15817926 	beq	r2,r22,28fbc <_dtoa_r+0x13c4>
   289d8:	e00b883a 	mov	r5,fp
   289dc:	000f883a 	mov	r7,zero
   289e0:	01800284 	movi	r6,10
   289e4:	b809883a 	mov	r4,r23
   289e8:	002b2240 	call	2b224 <__multadd>
   289ec:	1039883a 	mov	fp,r2
   289f0:	800b883a 	mov	r5,r16
   289f4:	000f883a 	mov	r7,zero
   289f8:	01800284 	movi	r6,10
   289fc:	b809883a 	mov	r4,r23
   28a00:	84801f26 	beq	r16,r18,28a80 <_dtoa_r+0xe88>
   28a04:	002b2240 	call	2b224 <__multadd>
   28a08:	900b883a 	mov	r5,r18
   28a0c:	000f883a 	mov	r7,zero
   28a10:	01800284 	movi	r6,10
   28a14:	b809883a 	mov	r4,r23
   28a18:	1021883a 	mov	r16,r2
   28a1c:	002b2240 	call	2b224 <__multadd>
   28a20:	1025883a 	mov	r18,r2
   28a24:	982d883a 	mov	r22,r19
   28a28:	a00b883a 	mov	r5,r20
   28a2c:	e009883a 	mov	r4,fp
   28a30:	00279d80 	call	279d8 <quorem>
   28a34:	800b883a 	mov	r5,r16
   28a38:	e009883a 	mov	r4,fp
   28a3c:	102b883a 	mov	r21,r2
   28a40:	d8800615 	stw	r2,24(sp)
   28a44:	002bc100 	call	2bc10 <__mcmp>
   28a48:	a00b883a 	mov	r5,r20
   28a4c:	900d883a 	mov	r6,r18
   28a50:	b809883a 	mov	r4,r23
   28a54:	1023883a 	mov	r17,r2
   28a58:	002bc680 	call	2bc68 <__mdiff>
   28a5c:	1027883a 	mov	r19,r2
   28a60:	10800317 	ldw	r2,12(r2)
   28a64:	ad400c04 	addi	r21,r21,48
   28a68:	980b883a 	mov	r5,r19
   28a6c:	103fc526 	beq	r2,zero,28984 <_dtoa_r+0xd8c>
   28a70:	b809883a 	mov	r4,r23
   28a74:	002b2000 	call	2b200 <_Bfree>
   28a78:	00800044 	movi	r2,1
   28a7c:	003fcb06 	br	289ac <_dtoa_r+0xdb4>
   28a80:	002b2240 	call	2b224 <__multadd>
   28a84:	1021883a 	mov	r16,r2
   28a88:	1025883a 	mov	r18,r2
   28a8c:	003fe506 	br	28a24 <_dtoa_r+0xe2c>
   28a90:	d8800217 	ldw	r2,8(sp)
   28a94:	108000d0 	cmplti	r2,r2,3
   28a98:	10003e26 	beq	r2,zero,28b94 <_dtoa_r+0xf9c>
   28a9c:	d8800717 	ldw	r2,28(sp)
   28aa0:	103faa1e 	bne	r2,zero,2894c <_dtoa_r+0xd54>
   28aa4:	a00b883a 	mov	r5,r20
   28aa8:	e009883a 	mov	r4,fp
   28aac:	00279d80 	call	279d8 <quorem>
   28ab0:	14c00c04 	addi	r19,r2,48
   28ab4:	d8800117 	ldw	r2,4(sp)
   28ab8:	0023883a 	mov	r17,zero
   28abc:	15400044 	addi	r21,r2,1
   28ac0:	14c00005 	stb	r19,0(r2)
   28ac4:	d8800417 	ldw	r2,16(sp)
   28ac8:	10800044 	addi	r2,r2,1
   28acc:	d8800415 	stw	r2,16(sp)
   28ad0:	003f0906 	br	286f8 <_dtoa_r+0xb00>
   28ad4:	a00b883a 	mov	r5,r20
   28ad8:	e009883a 	mov	r4,fp
   28adc:	002bc100 	call	2bc10 <__mcmp>
   28ae0:	103ee70e 	bge	r2,zero,28680 <_dtoa_r+0xa88>
   28ae4:	e00b883a 	mov	r5,fp
   28ae8:	000f883a 	mov	r7,zero
   28aec:	01800284 	movi	r6,10
   28af0:	b809883a 	mov	r4,r23
   28af4:	002b2240 	call	2b224 <__multadd>
   28af8:	d8c00417 	ldw	r3,16(sp)
   28afc:	1039883a 	mov	fp,r2
   28b00:	d8800717 	ldw	r2,28(sp)
   28b04:	1d7fffc4 	addi	r21,r3,-1
   28b08:	103f861e 	bne	r2,zero,28924 <_dtoa_r+0xd2c>
   28b0c:	d8800b17 	ldw	r2,44(sp)
   28b10:	0081d20e 	bge	zero,r2,2925c <_dtoa_r+0x1664>
   28b14:	d8800515 	stw	r2,20(sp)
   28b18:	003ee006 	br	2869c <_dtoa_r+0xaa4>
   28b1c:	008000f4 	movhi	r2,3
   28b20:	1007883a 	mov	r3,r2
   28b24:	18cc8204 	addi	r3,r3,12808
   28b28:	008000f4 	movhi	r2,3
   28b2c:	d8c00115 	stw	r3,4(sp)
   28b30:	108c82c4 	addi	r2,r2,12811
   28b34:	003ded06 	br	282ec <_dtoa_r+0x6f4>
   28b38:	00800044 	movi	r2,1
   28b3c:	d8800715 	stw	r2,28(sp)
   28b40:	003f3406 	br	28814 <_dtoa_r+0xc1c>
   28b44:	983eb21e 	bne	r19,zero,28610 <_dtoa_r+0xa18>
   28b48:	00800434 	movhi	r2,16
   28b4c:	10bfffc4 	addi	r2,r2,-1
   28b50:	8884703a 	and	r2,r17,r2
   28b54:	103eae1e 	bne	r2,zero,28610 <_dtoa_r+0xa18>
   28b58:	8c5ffc2c 	andhi	r17,r17,32752
   28b5c:	883eac26 	beq	r17,zero,28610 <_dtoa_r+0xa18>
   28b60:	d8800617 	ldw	r2,24(sp)
   28b64:	b5800044 	addi	r22,r22,1
   28b68:	04400044 	movi	r17,1
   28b6c:	10800044 	addi	r2,r2,1
   28b70:	d8800615 	stw	r2,24(sp)
   28b74:	003ea706 	br	28614 <_dtoa_r+0xa1c>
   28b78:	00800044 	movi	r2,1
   28b7c:	d8800515 	stw	r2,20(sp)
   28b80:	d8801e15 	stw	r2,120(sp)
   28b84:	003f1b06 	br	287f4 <_dtoa_r+0xbfc>
   28b88:	d8800b17 	ldw	r2,44(sp)
   28b8c:	dd400415 	stw	r21,16(sp)
   28b90:	d8800515 	stw	r2,20(sp)
   28b94:	d8800517 	ldw	r2,20(sp)
   28b98:	103e081e 	bne	r2,zero,283bc <_dtoa_r+0x7c4>
   28b9c:	a00b883a 	mov	r5,r20
   28ba0:	b809883a 	mov	r4,r23
   28ba4:	000f883a 	mov	r7,zero
   28ba8:	01800144 	movi	r6,5
   28bac:	002b2240 	call	2b224 <__multadd>
   28bb0:	100b883a 	mov	r5,r2
   28bb4:	e009883a 	mov	r4,fp
   28bb8:	1029883a 	mov	r20,r2
   28bbc:	002bc100 	call	2bc10 <__mcmp>
   28bc0:	00bdfe0e 	bge	zero,r2,283bc <_dtoa_r+0x7c4>
   28bc4:	d8c00117 	ldw	r3,4(sp)
   28bc8:	00800c44 	movi	r2,49
   28bcc:	18800005 	stb	r2,0(r3)
   28bd0:	d8800417 	ldw	r2,16(sp)
   28bd4:	1d400044 	addi	r21,r3,1
   28bd8:	14400044 	addi	r17,r2,1
   28bdc:	a00b883a 	mov	r5,r20
   28be0:	b809883a 	mov	r4,r23
   28be4:	002b2000 	call	2b200 <_Bfree>
   28be8:	88800044 	addi	r2,r17,1
   28bec:	d8800415 	stw	r2,16(sp)
   28bf0:	803ee11e 	bne	r16,zero,28778 <_dtoa_r+0xb80>
   28bf4:	003ee306 	br	28784 <_dtoa_r+0xb8c>
   28bf8:	b005883a 	mov	r2,r22
   28bfc:	003e6006 	br	28580 <_dtoa_r+0x988>
   28c00:	800b883a 	mov	r5,r16
   28c04:	900d883a 	mov	r6,r18
   28c08:	b809883a 	mov	r4,r23
   28c0c:	002ba880 	call	2ba88 <__lshift>
   28c10:	1021883a 	mov	r16,r2
   28c14:	003f4e06 	br	28950 <_dtoa_r+0xd58>
   28c18:	1529c83a 	sub	r20,r2,r20
   28c1c:	003e4906 	br	28544 <_dtoa_r+0x94c>
   28c20:	dcc00c15 	stw	r19,48(sp)
   28c24:	8825883a 	mov	r18,r17
   28c28:	05400084 	movi	r21,2
   28c2c:	003cdf06 	br	27fac <_dtoa_r+0x3b4>
   28c30:	00800044 	movi	r2,1
   28c34:	003ead06 	br	286ec <_dtoa_r+0xaf4>
   28c38:	00800044 	movi	r2,1
   28c3c:	d8800715 	stw	r2,28(sp)
   28c40:	003ca506 	br	27ed8 <_dtoa_r+0x2e0>
   28c44:	1000021e 	bne	r2,zero,28c50 <_dtoa_r+0x1058>
   28c48:	98c0004c 	andi	r3,r19,1
   28c4c:	183eb41e 	bne	r3,zero,28720 <_dtoa_r+0xb28>
   28c50:	2005883a 	mov	r2,r4
   28c54:	00000206 	br	28c60 <_dtoa_r+0x1068>
   28c58:	a8bfff83 	ldbu	r2,-2(r21)
   28c5c:	182b883a 	mov	r21,r3
   28c60:	10803fcc 	andi	r2,r2,255
   28c64:	1080201c 	xori	r2,r2,128
   28c68:	10bfe004 	addi	r2,r2,-128
   28c6c:	10800c18 	cmpnei	r2,r2,48
   28c70:	a8ffffc4 	addi	r3,r21,-1
   28c74:	103ff826 	beq	r2,zero,28c58 <_dtoa_r+0x1060>
   28c78:	003eb606 	br	28754 <_dtoa_r+0xb5c>
   28c7c:	d8c00117 	ldw	r3,4(sp)
   28c80:	00800c44 	movi	r2,49
   28c84:	18800005 	stb	r2,0(r3)
   28c88:	d8800417 	ldw	r2,16(sp)
   28c8c:	10800044 	addi	r2,r2,1
   28c90:	d8800415 	stw	r2,16(sp)
   28c94:	003eaf06 	br	28754 <_dtoa_r+0xb5c>
   28c98:	d8c00a17 	ldw	r3,40(sp)
   28c9c:	18011826 	beq	r3,zero,29100 <_dtoa_r+0x1508>
   28ca0:	d8c00617 	ldw	r3,24(sp)
   28ca4:	10810cc4 	addi	r2,r2,1075
   28ca8:	b0ad883a 	add	r22,r22,r2
   28cac:	1885883a 	add	r2,r3,r2
   28cb0:	dd000817 	ldw	r20,32(sp)
   28cb4:	1825883a 	mov	r18,r3
   28cb8:	d8800615 	stw	r2,24(sp)
   28cbc:	003e2806 	br	28560 <_dtoa_r+0x968>
   28cc0:	a809883a 	mov	r4,r21
   28cc4:	00251480 	call	25148 <__floatsidf>
   28cc8:	800d883a 	mov	r6,r16
   28ccc:	900f883a 	mov	r7,r18
   28cd0:	1009883a 	mov	r4,r2
   28cd4:	180b883a 	mov	r5,r3
   28cd8:	00240940 	call	24094 <__muldf3>
   28cdc:	000d883a 	mov	r6,zero
   28ce0:	01d00734 	movhi	r7,16412
   28ce4:	1009883a 	mov	r4,r2
   28ce8:	180b883a 	mov	r5,r3
   28cec:	0022ca40 	call	22ca4 <__adddf3>
   28cf0:	1029883a 	mov	r20,r2
   28cf4:	00bf3034 	movhi	r2,64704
   28cf8:	1885883a 	add	r2,r3,r2
   28cfc:	d8800c15 	stw	r2,48(sp)
   28d00:	8009883a 	mov	r4,r16
   28d04:	900b883a 	mov	r5,r18
   28d08:	000d883a 	mov	r6,zero
   28d0c:	01d00534 	movhi	r7,16404
   28d10:	00248400 	call	24840 <__subdf3>
   28d14:	dd400c17 	ldw	r21,48(sp)
   28d18:	a00d883a 	mov	r6,r20
   28d1c:	1009883a 	mov	r4,r2
   28d20:	a80f883a 	mov	r7,r21
   28d24:	180b883a 	mov	r5,r3
   28d28:	1025883a 	mov	r18,r2
   28d2c:	1821883a 	mov	r16,r3
   28d30:	0023ec40 	call	23ec4 <__gedf2>
   28d34:	00812f16 	blt	zero,r2,291f4 <_dtoa_r+0x15fc>
   28d38:	a9e0003c 	xorhi	r7,r21,32768
   28d3c:	a00d883a 	mov	r6,r20
   28d40:	9009883a 	mov	r4,r18
   28d44:	800b883a 	mov	r5,r16
   28d48:	0023fac0 	call	23fac <__ledf2>
   28d4c:	103d7d0e 	bge	r2,zero,28344 <_dtoa_r+0x74c>
   28d50:	0029883a 	mov	r20,zero
   28d54:	0021883a 	mov	r16,zero
   28d58:	003d9806 	br	283bc <_dtoa_r+0x7c4>
   28d5c:	d9800817 	ldw	r6,32(sp)
   28d60:	e00b883a 	mov	r5,fp
   28d64:	b809883a 	mov	r4,r23
   28d68:	002b9400 	call	2b940 <__pow5mult>
   28d6c:	1039883a 	mov	fp,r2
   28d70:	003e1e06 	br	285ec <_dtoa_r+0x9f4>
   28d74:	d8800417 	ldw	r2,16(sp)
   28d78:	1000ed26 	beq	r2,zero,29130 <_dtoa_r+0x1538>
   28d7c:	00a9c83a 	sub	r20,zero,r2
   28d80:	a08003cc 	andi	r2,r20,15
   28d84:	100690fa 	slli	r3,r2,3
   28d88:	008000f4 	movhi	r2,3
   28d8c:	108cc204 	addi	r2,r2,13064
   28d90:	10c5883a 	add	r2,r2,r3
   28d94:	11800017 	ldw	r6,0(r2)
   28d98:	11c00117 	ldw	r7,4(r2)
   28d9c:	a029d13a 	srai	r20,r20,4
   28da0:	9809883a 	mov	r4,r19
   28da4:	880b883a 	mov	r5,r17
   28da8:	00240940 	call	24094 <__muldf3>
   28dac:	1021883a 	mov	r16,r2
   28db0:	1825883a 	mov	r18,r3
   28db4:	a0013826 	beq	r20,zero,29298 <_dtoa_r+0x16a0>
   28db8:	020000f4 	movhi	r8,3
   28dbc:	05400084 	movi	r21,2
   28dc0:	420cb804 	addi	r8,r8,13024
   28dc4:	1009883a 	mov	r4,r2
   28dc8:	9805883a 	mov	r2,r19
   28dcc:	180b883a 	mov	r5,r3
   28dd0:	dc000c15 	stw	r16,48(sp)
   28dd4:	8827883a 	mov	r19,r17
   28dd8:	0007883a 	mov	r3,zero
   28ddc:	a823883a 	mov	r17,r21
   28de0:	4021883a 	mov	r16,r8
   28de4:	102b883a 	mov	r21,r2
   28de8:	a180004c 	andi	r6,r20,1
   28dec:	30000726 	beq	r6,zero,28e0c <_dtoa_r+0x1214>
   28df0:	81800017 	ldw	r6,0(r16)
   28df4:	81c00117 	ldw	r7,4(r16)
   28df8:	8c400044 	addi	r17,r17,1
   28dfc:	00240940 	call	24094 <__muldf3>
   28e00:	180b883a 	mov	r5,r3
   28e04:	1009883a 	mov	r4,r2
   28e08:	00c00044 	movi	r3,1
   28e0c:	a029d07a 	srai	r20,r20,1
   28e10:	84000204 	addi	r16,r16,8
   28e14:	a03ff41e 	bne	r20,zero,28de8 <_dtoa_r+0x11f0>
   28e18:	a805883a 	mov	r2,r21
   28e1c:	18c03fcc 	andi	r3,r3,255
   28e20:	882b883a 	mov	r21,r17
   28e24:	dc000c17 	ldw	r16,48(sp)
   28e28:	9823883a 	mov	r17,r19
   28e2c:	1027883a 	mov	r19,r2
   28e30:	183c7726 	beq	r3,zero,28010 <_dtoa_r+0x418>
   28e34:	2021883a 	mov	r16,r4
   28e38:	2825883a 	mov	r18,r5
   28e3c:	003c7406 	br	28010 <_dtoa_r+0x418>
   28e40:	983eae1e 	bne	r19,zero,288fc <_dtoa_r+0xd04>
   28e44:	00800434 	movhi	r2,16
   28e48:	10bfffc4 	addi	r2,r2,-1
   28e4c:	8884703a 	and	r2,r17,r2
   28e50:	103f4126 	beq	r2,zero,28b58 <_dtoa_r+0xf60>
   28e54:	003ea906 	br	288fc <_dtoa_r+0xd04>
   28e58:	9807883a 	mov	r3,r19
   28e5c:	a827883a 	mov	r19,r21
   28e60:	182b883a 	mov	r21,r3
   28e64:	d8c00417 	ldw	r3,16(sp)
   28e68:	18c00044 	addi	r3,r3,1
   28e6c:	d8c00415 	stw	r3,16(sp)
   28e70:	00800d0e 	bge	zero,r2,28ea8 <_dtoa_r+0x12b0>
   28e74:	e00b883a 	mov	r5,fp
   28e78:	b809883a 	mov	r4,r23
   28e7c:	01800044 	movi	r6,1
   28e80:	002ba880 	call	2ba88 <__lshift>
   28e84:	a00b883a 	mov	r5,r20
   28e88:	1009883a 	mov	r4,r2
   28e8c:	1039883a 	mov	fp,r2
   28e90:	002bc100 	call	2bc10 <__mcmp>
   28e94:	0080df0e 	bge	zero,r2,29214 <_dtoa_r+0x161c>
   28e98:	98c00e60 	cmpeqi	r3,r19,57
   28e9c:	1800ce1e 	bne	r3,zero,291d8 <_dtoa_r+0x15e0>
   28ea0:	d8800617 	ldw	r2,24(sp)
   28ea4:	14c00c44 	addi	r19,r2,49
   28ea8:	8023883a 	mov	r17,r16
   28eac:	b4c00005 	stb	r19,0(r22)
   28eb0:	9021883a 	mov	r16,r18
   28eb4:	003e2706 	br	28754 <_dtoa_r+0xb5c>
   28eb8:	b82b883a 	mov	r21,r23
   28ebc:	ddc00217 	ldw	r23,8(sp)
   28ec0:	200d883a 	mov	r6,r4
   28ec4:	280f883a 	mov	r7,r5
   28ec8:	0022ca40 	call	22ca4 <__adddf3>
   28ecc:	180b883a 	mov	r5,r3
   28ed0:	800d883a 	mov	r6,r16
   28ed4:	900f883a 	mov	r7,r18
   28ed8:	1009883a 	mov	r4,r2
   28edc:	1823883a 	mov	r17,r3
   28ee0:	1027883a 	mov	r19,r2
   28ee4:	0023ec40 	call	23ec4 <__gedf2>
   28ee8:	d8c00417 	ldw	r3,16(sp)
   28eec:	18c00044 	addi	r3,r3,1
   28ef0:	d8c00415 	stw	r3,16(sp)
   28ef4:	00808c16 	blt	zero,r2,29128 <_dtoa_r+0x1530>
   28ef8:	800d883a 	mov	r6,r16
   28efc:	900f883a 	mov	r7,r18
   28f00:	9809883a 	mov	r4,r19
   28f04:	880b883a 	mov	r5,r17
   28f08:	002fdb40 	call	2fdb4 <__eqdf2>
   28f0c:	1000021e 	bne	r2,zero,28f18 <_dtoa_r+0x1320>
   28f10:	ad40004c 	andi	r21,r21,1
   28f14:	a800841e 	bne	r21,zero,29128 <_dtoa_r+0x1530>
   28f18:	a02b883a 	mov	r21,r20
   28f1c:	003e1906 	br	28784 <_dtoa_r+0xb8c>
   28f20:	81400117 	ldw	r5,4(r16)
   28f24:	b809883a 	mov	r4,r23
   28f28:	002b15c0 	call	2b15c <_Balloc>
   28f2c:	1023883a 	mov	r17,r2
   28f30:	1000f326 	beq	r2,zero,29300 <_dtoa_r+0x1708>
   28f34:	81800417 	ldw	r6,16(r16)
   28f38:	81400304 	addi	r5,r16,12
   28f3c:	11000304 	addi	r4,r2,12
   28f40:	31800084 	addi	r6,r6,2
   28f44:	300c90ba 	slli	r6,r6,2
   28f48:	002af300 	call	2af30 <memcpy>
   28f4c:	01800044 	movi	r6,1
   28f50:	880b883a 	mov	r5,r17
   28f54:	b809883a 	mov	r4,r23
   28f58:	002ba880 	call	2ba88 <__lshift>
   28f5c:	1025883a 	mov	r18,r2
   28f60:	003e7d06 	br	28958 <_dtoa_r+0xd60>
   28f64:	e00b883a 	mov	r5,fp
   28f68:	b809883a 	mov	r4,r23
   28f6c:	002b9400 	call	2b940 <__pow5mult>
   28f70:	1039883a 	mov	fp,r2
   28f74:	003d9d06 	br	285ec <_dtoa_r+0x9f4>
   28f78:	d8800617 	ldw	r2,24(sp)
   28f7c:	d8c00517 	ldw	r3,20(sp)
   28f80:	10e5c83a 	sub	r18,r2,r3
   28f84:	003d7606 	br	28560 <_dtoa_r+0x968>
   28f88:	d8c00417 	ldw	r3,16(sp)
   28f8c:	9805883a 	mov	r2,r19
   28f90:	a827883a 	mov	r19,r21
   28f94:	18c00044 	addi	r3,r3,1
   28f98:	102b883a 	mov	r21,r2
   28f9c:	d8c00415 	stw	r3,16(sp)
   28fa0:	98800e58 	cmpnei	r2,r19,57
   28fa4:	10008c26 	beq	r2,zero,291d8 <_dtoa_r+0x15e0>
   28fa8:	98c00044 	addi	r3,r19,1
   28fac:	8023883a 	mov	r17,r16
   28fb0:	b0c00005 	stb	r3,0(r22)
   28fb4:	9021883a 	mov	r16,r18
   28fb8:	003de606 	br	28754 <_dtoa_r+0xb5c>
   28fbc:	9805883a 	mov	r2,r19
   28fc0:	a827883a 	mov	r19,r21
   28fc4:	102b883a 	mov	r21,r2
   28fc8:	d8800417 	ldw	r2,16(sp)
   28fcc:	8023883a 	mov	r17,r16
   28fd0:	9021883a 	mov	r16,r18
   28fd4:	10800044 	addi	r2,r2,1
   28fd8:	d8800415 	stw	r2,16(sp)
   28fdc:	003dc606 	br	286f8 <_dtoa_r+0xb00>
   28fe0:	d9400c17 	ldw	r5,48(sp)
   28fe4:	a009883a 	mov	r4,r20
   28fe8:	00240940 	call	24094 <__muldf3>
   28fec:	d9800d17 	ldw	r6,52(sp)
   28ff0:	d9400117 	ldw	r5,4(sp)
   28ff4:	d9001017 	ldw	r4,64(sp)
   28ff8:	d8800c15 	stw	r2,48(sp)
   28ffc:	d8c00d15 	stw	r3,52(sp)
   29000:	29000005 	stb	r4,0(r5)
   29004:	31000058 	cmpnei	r4,r6,1
   29008:	29a9883a 	add	r20,r5,r6
   2900c:	2000a026 	beq	r4,zero,29290 <_dtoa_r+0x1698>
   29010:	dc400e15 	stw	r17,56(sp)
   29014:	8009883a 	mov	r4,r16
   29018:	900b883a 	mov	r5,r18
   2901c:	a823883a 	mov	r17,r21
   29020:	000d883a 	mov	r6,zero
   29024:	01d00934 	movhi	r7,16420
   29028:	00240940 	call	24094 <__muldf3>
   2902c:	180b883a 	mov	r5,r3
   29030:	1009883a 	mov	r4,r2
   29034:	1825883a 	mov	r18,r3
   29038:	102b883a 	mov	r21,r2
   2903c:	002fe340 	call	2fe34 <__fixdfsi>
   29040:	1009883a 	mov	r4,r2
   29044:	1021883a 	mov	r16,r2
   29048:	00251480 	call	25148 <__floatsidf>
   2904c:	a809883a 	mov	r4,r21
   29050:	900b883a 	mov	r5,r18
   29054:	100d883a 	mov	r6,r2
   29058:	180f883a 	mov	r7,r3
   2905c:	8c400044 	addi	r17,r17,1
   29060:	84000c04 	addi	r16,r16,48
   29064:	00248400 	call	24840 <__subdf3>
   29068:	8c3fffc5 	stb	r16,-1(r17)
   2906c:	1009883a 	mov	r4,r2
   29070:	180b883a 	mov	r5,r3
   29074:	a47fea1e 	bne	r20,r17,29020 <_dtoa_r+0x1428>
   29078:	dc400e17 	ldw	r17,56(sp)
   2907c:	1021883a 	mov	r16,r2
   29080:	1825883a 	mov	r18,r3
   29084:	d9000c17 	ldw	r4,48(sp)
   29088:	d9400d17 	ldw	r5,52(sp)
   2908c:	000d883a 	mov	r6,zero
   29090:	01cff834 	movhi	r7,16352
   29094:	0022ca40 	call	22ca4 <__adddf3>
   29098:	800d883a 	mov	r6,r16
   2909c:	900f883a 	mov	r7,r18
   290a0:	1009883a 	mov	r4,r2
   290a4:	180b883a 	mov	r5,r3
   290a8:	0023fac0 	call	23fac <__ledf2>
   290ac:	10005416 	blt	r2,zero,29200 <_dtoa_r+0x1608>
   290b0:	d9800c17 	ldw	r6,48(sp)
   290b4:	d9c00d17 	ldw	r7,52(sp)
   290b8:	0009883a 	mov	r4,zero
   290bc:	014ff834 	movhi	r5,16352
   290c0:	00248400 	call	24840 <__subdf3>
   290c4:	800d883a 	mov	r6,r16
   290c8:	900f883a 	mov	r7,r18
   290cc:	1009883a 	mov	r4,r2
   290d0:	180b883a 	mov	r5,r3
   290d4:	0023ec40 	call	23ec4 <__gedf2>
   290d8:	00bc9a0e 	bge	zero,r2,28344 <_dtoa_r+0x74c>
   290dc:	a0bfffc7 	ldb	r2,-1(r20)
   290e0:	a02b883a 	mov	r21,r20
   290e4:	a53fffc4 	addi	r20,r20,-1
   290e8:	10800c20 	cmpeqi	r2,r2,48
   290ec:	103ffb1e 	bne	r2,zero,290dc <_dtoa_r+0x14e4>
   290f0:	d8801117 	ldw	r2,68(sp)
   290f4:	10800044 	addi	r2,r2,1
   290f8:	d8800415 	stw	r2,16(sp)
   290fc:	003da106 	br	28784 <_dtoa_r+0xb8c>
   29100:	d8c01217 	ldw	r3,72(sp)
   29104:	d9000617 	ldw	r4,24(sp)
   29108:	00800d84 	movi	r2,54
   2910c:	10c5c83a 	sub	r2,r2,r3
   29110:	b0ad883a 	add	r22,r22,r2
   29114:	2085883a 	add	r2,r4,r2
   29118:	dd000817 	ldw	r20,32(sp)
   2911c:	2025883a 	mov	r18,r4
   29120:	d8800615 	stw	r2,24(sp)
   29124:	003d0e06 	br	28560 <_dtoa_r+0x968>
   29128:	d9000117 	ldw	r4,4(sp)
   2912c:	003c4b06 	br	2825c <_dtoa_r+0x664>
   29130:	9821883a 	mov	r16,r19
   29134:	8825883a 	mov	r18,r17
   29138:	05400084 	movi	r21,2
   2913c:	003bb406 	br	28010 <_dtoa_r+0x418>
   29140:	d8800517 	ldw	r2,20(sp)
   29144:	103ede26 	beq	r2,zero,28cc0 <_dtoa_r+0x10c8>
   29148:	d8800b17 	ldw	r2,44(sp)
   2914c:	00bc7d0e 	bge	zero,r2,28344 <_dtoa_r+0x74c>
   29150:	900b883a 	mov	r5,r18
   29154:	8009883a 	mov	r4,r16
   29158:	000d883a 	mov	r6,zero
   2915c:	01d00934 	movhi	r7,16420
   29160:	00240940 	call	24094 <__muldf3>
   29164:	a9000044 	addi	r4,r21,1
   29168:	1021883a 	mov	r16,r2
   2916c:	1825883a 	mov	r18,r3
   29170:	00251480 	call	25148 <__floatsidf>
   29174:	800d883a 	mov	r6,r16
   29178:	900f883a 	mov	r7,r18
   2917c:	1009883a 	mov	r4,r2
   29180:	180b883a 	mov	r5,r3
   29184:	00240940 	call	24094 <__muldf3>
   29188:	1009883a 	mov	r4,r2
   2918c:	000d883a 	mov	r6,zero
   29190:	01d00734 	movhi	r7,16412
   29194:	180b883a 	mov	r5,r3
   29198:	0022ca40 	call	22ca4 <__adddf3>
   2919c:	d9000417 	ldw	r4,16(sp)
   291a0:	1029883a 	mov	r20,r2
   291a4:	00bf3034 	movhi	r2,64704
   291a8:	1887883a 	add	r3,r3,r2
   291ac:	d8800b17 	ldw	r2,44(sp)
   291b0:	213fffc4 	addi	r4,r4,-1
   291b4:	d9001115 	stw	r4,68(sp)
   291b8:	d8c00c15 	stw	r3,48(sp)
   291bc:	d8800d15 	stw	r2,52(sp)
   291c0:	003bb106 	br	28088 <_dtoa_r+0x490>
   291c4:	d8800417 	ldw	r2,16(sp)
   291c8:	00c00c44 	movi	r3,49
   291cc:	10800044 	addi	r2,r2,1
   291d0:	d8800415 	stw	r2,16(sp)
   291d4:	003c2a06 	br	28280 <_dtoa_r+0x688>
   291d8:	00800e44 	movi	r2,57
   291dc:	8023883a 	mov	r17,r16
   291e0:	d9400117 	ldw	r5,4(sp)
   291e4:	b0800005 	stb	r2,0(r22)
   291e8:	9021883a 	mov	r16,r18
   291ec:	01000e44 	movi	r4,57
   291f0:	003d5006 	br	28734 <_dtoa_r+0xb3c>
   291f4:	0029883a 	mov	r20,zero
   291f8:	0021883a 	mov	r16,zero
   291fc:	003e7106 	br	28bc4 <_dtoa_r+0xfcc>
   29200:	d8801117 	ldw	r2,68(sp)
   29204:	d9000117 	ldw	r4,4(sp)
   29208:	10800044 	addi	r2,r2,1
   2920c:	d8800415 	stw	r2,16(sp)
   29210:	003c1206 	br	2825c <_dtoa_r+0x664>
   29214:	103f241e 	bne	r2,zero,28ea8 <_dtoa_r+0x12b0>
   29218:	9880004c 	andi	r2,r19,1
   2921c:	103f1e1e 	bne	r2,zero,28e98 <_dtoa_r+0x12a0>
   29220:	003f2106 	br	28ea8 <_dtoa_r+0x12b0>
   29224:	d8801117 	ldw	r2,68(sp)
   29228:	ddc00d17 	ldw	r23,52(sp)
   2922c:	10800044 	addi	r2,r2,1
   29230:	d8800415 	stw	r2,16(sp)
   29234:	003d5306 	br	28784 <_dtoa_r+0xb8c>
   29238:	d8c00417 	ldw	r3,16(sp)
   2923c:	a8800e60 	cmpeqi	r2,r21,57
   29240:	a827883a 	mov	r19,r21
   29244:	18c00044 	addi	r3,r3,1
   29248:	d8c00415 	stw	r3,16(sp)
   2924c:	b5400044 	addi	r21,r22,1
   29250:	103fe11e 	bne	r2,zero,291d8 <_dtoa_r+0x15e0>
   29254:	047f1216 	blt	zero,r17,28ea0 <_dtoa_r+0x12a8>
   29258:	003f1306 	br	28ea8 <_dtoa_r+0x12b0>
   2925c:	d8800217 	ldw	r2,8(sp)
   29260:	108000c8 	cmpgei	r2,r2,3
   29264:	103e481e 	bne	r2,zero,28b88 <_dtoa_r+0xf90>
   29268:	dd400415 	stw	r21,16(sp)
   2926c:	003e0d06 	br	28aa4 <_dtoa_r+0xeac>
   29270:	d8800217 	ldw	r2,8(sp)
   29274:	108000c8 	cmpgei	r2,r2,3
   29278:	103e431e 	bne	r2,zero,28b88 <_dtoa_r+0xf90>
   2927c:	d8800b17 	ldw	r2,44(sp)
   29280:	dd400415 	stw	r21,16(sp)
   29284:	d8800515 	stw	r2,20(sp)
   29288:	04bdb10e 	bge	zero,r18,28950 <_dtoa_r+0xd58>
   2928c:	003e5c06 	br	28c00 <_dtoa_r+0x1008>
   29290:	a829883a 	mov	r20,r21
   29294:	003f7b06 	br	29084 <_dtoa_r+0x148c>
   29298:	05400084 	movi	r21,2
   2929c:	003b5c06 	br	28010 <_dtoa_r+0x418>
   292a0:	01c000f4 	movhi	r7,3
   292a4:	010000f4 	movhi	r4,3
   292a8:	39cc8604 	addi	r7,r7,12824
   292ac:	000d883a 	mov	r6,zero
   292b0:	01406a84 	movi	r5,426
   292b4:	210c8b04 	addi	r4,r4,12844
   292b8:	002e33c0 	call	2e33c <__assert_func>
   292bc:	000b883a 	mov	r5,zero
   292c0:	003b1506 	br	27f18 <_dtoa_r+0x320>
   292c4:	b8001115 	stw	zero,68(r23)
   292c8:	000b883a 	mov	r5,zero
   292cc:	b809883a 	mov	r4,r23
   292d0:	002b15c0 	call	2b15c <_Balloc>
   292d4:	d8800115 	stw	r2,4(sp)
   292d8:	103ff126 	beq	r2,zero,292a0 <_dtoa_r+0x16a8>
   292dc:	d8800117 	ldw	r2,4(sp)
   292e0:	d8001e15 	stw	zero,120(sp)
   292e4:	b8801015 	stw	r2,64(r23)
   292e8:	00bfffc4 	movi	r2,-1
   292ec:	d8800515 	stw	r2,20(sp)
   292f0:	d8800b15 	stw	r2,44(sp)
   292f4:	00800044 	movi	r2,1
   292f8:	d8800715 	stw	r2,28(sp)
   292fc:	003c1106 	br	28344 <_dtoa_r+0x74c>
   29300:	01c000f4 	movhi	r7,3
   29304:	010000f4 	movhi	r4,3
   29308:	39cc8604 	addi	r7,r7,12824
   2930c:	000d883a 	mov	r6,zero
   29310:	0140ba84 	movi	r5,746
   29314:	210c8b04 	addi	r4,r4,12844
   29318:	002e33c0 	call	2e33c <__assert_func>
   2931c:	008000f4 	movhi	r2,3
   29320:	108c8304 	addi	r2,r2,12812
   29324:	d8800115 	stw	r2,4(sp)
   29328:	003a6506 	br	27cc0 <_dtoa_r+0xc8>
   2932c:	18c00120 	cmpeqi	r3,r3,4
   29330:	183cc91e 	bne	r3,zero,28658 <_dtoa_r+0xa60>
   29334:	00c00f04 	movi	r3,60
   29338:	1885c83a 	sub	r2,r3,r2
   2933c:	003cc106 	br	28644 <_dtoa_r+0xa4c>

00029340 <__sflush_r>:
   29340:	2880030b 	ldhu	r2,12(r5)
   29344:	defffb04 	addi	sp,sp,-20
   29348:	dcc00315 	stw	r19,12(sp)
   2934c:	dc000015 	stw	r16,0(sp)
   29350:	dfc00415 	stw	ra,16(sp)
   29354:	dc800215 	stw	r18,8(sp)
   29358:	dc400115 	stw	r17,4(sp)
   2935c:	10c0020c 	andi	r3,r2,8
   29360:	2821883a 	mov	r16,r5
   29364:	2027883a 	mov	r19,r4
   29368:	18003f1e 	bne	r3,zero,29468 <__sflush_r+0x128>
   2936c:	28c00117 	ldw	r3,4(r5)
   29370:	10820014 	ori	r2,r2,2048
   29374:	2880030d 	sth	r2,12(r5)
   29378:	00c0550e 	bge	zero,r3,294d0 <__sflush_r+0x190>
   2937c:	82000a17 	ldw	r8,40(r16)
   29380:	40003126 	beq	r8,zero,29448 <__sflush_r+0x108>
   29384:	9c400017 	ldw	r17,0(r19)
   29388:	1104000c 	andi	r4,r2,4096
   2938c:	98000015 	stw	zero,0(r19)
   29390:	81400717 	ldw	r5,28(r16)
   29394:	1007883a 	mov	r3,r2
   29398:	2000521e 	bne	r4,zero,294e4 <__sflush_r+0x1a4>
   2939c:	01c00044 	movi	r7,1
   293a0:	000d883a 	mov	r6,zero
   293a4:	9809883a 	mov	r4,r19
   293a8:	403ee83a 	callr	r8
   293ac:	10ffffd8 	cmpnei	r3,r2,-1
   293b0:	18005826 	beq	r3,zero,29514 <__sflush_r+0x1d4>
   293b4:	80c0030b 	ldhu	r3,12(r16)
   293b8:	82000a17 	ldw	r8,40(r16)
   293bc:	81400717 	ldw	r5,28(r16)
   293c0:	18c0010c 	andi	r3,r3,4
   293c4:	18000626 	beq	r3,zero,293e0 <__sflush_r+0xa0>
   293c8:	81000117 	ldw	r4,4(r16)
   293cc:	80c00c17 	ldw	r3,48(r16)
   293d0:	1105c83a 	sub	r2,r2,r4
   293d4:	18000226 	beq	r3,zero,293e0 <__sflush_r+0xa0>
   293d8:	80c00f17 	ldw	r3,60(r16)
   293dc:	10c5c83a 	sub	r2,r2,r3
   293e0:	100d883a 	mov	r6,r2
   293e4:	000f883a 	mov	r7,zero
   293e8:	9809883a 	mov	r4,r19
   293ec:	403ee83a 	callr	r8
   293f0:	10ffffd8 	cmpnei	r3,r2,-1
   293f4:	18003d1e 	bne	r3,zero,294ec <__sflush_r+0x1ac>
   293f8:	99000017 	ldw	r4,0(r19)
   293fc:	80c0030b 	ldhu	r3,12(r16)
   29400:	20004e26 	beq	r4,zero,2953c <__sflush_r+0x1fc>
   29404:	21400760 	cmpeqi	r5,r4,29
   29408:	2800021e 	bne	r5,zero,29414 <__sflush_r+0xd4>
   2940c:	210005a0 	cmpeqi	r4,r4,22
   29410:	20002c26 	beq	r4,zero,294c4 <__sflush_r+0x184>
   29414:	80800417 	ldw	r2,16(r16)
   29418:	18fdffcc 	andi	r3,r3,63487
   2941c:	80c0030d 	sth	r3,12(r16)
   29420:	80000115 	stw	zero,4(r16)
   29424:	80800015 	stw	r2,0(r16)
   29428:	81400c17 	ldw	r5,48(r16)
   2942c:	9c400015 	stw	r17,0(r19)
   29430:	28000526 	beq	r5,zero,29448 <__sflush_r+0x108>
   29434:	80801004 	addi	r2,r16,64
   29438:	28800226 	beq	r5,r2,29444 <__sflush_r+0x104>
   2943c:	9809883a 	mov	r4,r19
   29440:	0029b140 	call	29b14 <_free_r>
   29444:	80000c15 	stw	zero,48(r16)
   29448:	0005883a 	mov	r2,zero
   2944c:	dfc00417 	ldw	ra,16(sp)
   29450:	dcc00317 	ldw	r19,12(sp)
   29454:	dc800217 	ldw	r18,8(sp)
   29458:	dc400117 	ldw	r17,4(sp)
   2945c:	dc000017 	ldw	r16,0(sp)
   29460:	dec00504 	addi	sp,sp,20
   29464:	f800283a 	ret
   29468:	2c800417 	ldw	r18,16(r5)
   2946c:	903ff626 	beq	r18,zero,29448 <__sflush_r+0x108>
   29470:	2c400017 	ldw	r17,0(r5)
   29474:	108000cc 	andi	r2,r2,3
   29478:	2c800015 	stw	r18,0(r5)
   2947c:	8ca3c83a 	sub	r17,r17,r18
   29480:	1000161e 	bne	r2,zero,294dc <__sflush_r+0x19c>
   29484:	28800517 	ldw	r2,20(r5)
   29488:	80800215 	stw	r2,8(r16)
   2948c:	04400316 	blt	zero,r17,2949c <__sflush_r+0x15c>
   29490:	003fed06 	br	29448 <__sflush_r+0x108>
   29494:	90a5883a 	add	r18,r18,r2
   29498:	047feb0e 	bge	zero,r17,29448 <__sflush_r+0x108>
   2949c:	80800917 	ldw	r2,36(r16)
   294a0:	81400717 	ldw	r5,28(r16)
   294a4:	880f883a 	mov	r7,r17
   294a8:	900d883a 	mov	r6,r18
   294ac:	9809883a 	mov	r4,r19
   294b0:	103ee83a 	callr	r2
   294b4:	88a3c83a 	sub	r17,r17,r2
   294b8:	00bff616 	blt	zero,r2,29494 <__sflush_r+0x154>
   294bc:	80c0030b 	ldhu	r3,12(r16)
   294c0:	00bfffc4 	movi	r2,-1
   294c4:	18c01014 	ori	r3,r3,64
   294c8:	80c0030d 	sth	r3,12(r16)
   294cc:	003fdf06 	br	2944c <__sflush_r+0x10c>
   294d0:	28c00f17 	ldw	r3,60(r5)
   294d4:	00ffa916 	blt	zero,r3,2937c <__sflush_r+0x3c>
   294d8:	003fdb06 	br	29448 <__sflush_r+0x108>
   294dc:	0005883a 	mov	r2,zero
   294e0:	003fe906 	br	29488 <__sflush_r+0x148>
   294e4:	80801417 	ldw	r2,80(r16)
   294e8:	003fb506 	br	293c0 <__sflush_r+0x80>
   294ec:	80c0030b 	ldhu	r3,12(r16)
   294f0:	81000417 	ldw	r4,16(r16)
   294f4:	80000115 	stw	zero,4(r16)
   294f8:	197dffcc 	andi	r5,r3,63487
   294fc:	8140030d 	sth	r5,12(r16)
   29500:	81000015 	stw	r4,0(r16)
   29504:	18c4000c 	andi	r3,r3,4096
   29508:	183fc726 	beq	r3,zero,29428 <__sflush_r+0xe8>
   2950c:	80801415 	stw	r2,80(r16)
   29510:	003fc506 	br	29428 <__sflush_r+0xe8>
   29514:	98c00017 	ldw	r3,0(r19)
   29518:	183fa626 	beq	r3,zero,293b4 <__sflush_r+0x74>
   2951c:	19000760 	cmpeqi	r4,r3,29
   29520:	20000e1e 	bne	r4,zero,2955c <__sflush_r+0x21c>
   29524:	18c00598 	cmpnei	r3,r3,22
   29528:	18000c26 	beq	r3,zero,2955c <__sflush_r+0x21c>
   2952c:	80c0030b 	ldhu	r3,12(r16)
   29530:	18c01014 	ori	r3,r3,64
   29534:	80c0030d 	sth	r3,12(r16)
   29538:	003fc406 	br	2944c <__sflush_r+0x10c>
   2953c:	81000417 	ldw	r4,16(r16)
   29540:	197dffcc 	andi	r5,r3,63487
   29544:	8140030d 	sth	r5,12(r16)
   29548:	80000115 	stw	zero,4(r16)
   2954c:	81000015 	stw	r4,0(r16)
   29550:	18c4000c 	andi	r3,r3,4096
   29554:	183fb426 	beq	r3,zero,29428 <__sflush_r+0xe8>
   29558:	003fec06 	br	2950c <__sflush_r+0x1cc>
   2955c:	9c400015 	stw	r17,0(r19)
   29560:	0005883a 	mov	r2,zero
   29564:	003fb906 	br	2944c <__sflush_r+0x10c>

00029568 <_fflush_r>:
   29568:	defffd04 	addi	sp,sp,-12
   2956c:	dc000115 	stw	r16,4(sp)
   29570:	dfc00215 	stw	ra,8(sp)
   29574:	2021883a 	mov	r16,r4
   29578:	20000226 	beq	r4,zero,29584 <_fflush_r+0x1c>
   2957c:	20800e17 	ldw	r2,56(r4)
   29580:	10000726 	beq	r2,zero,295a0 <_fflush_r+0x38>
   29584:	2880030f 	ldh	r2,12(r5)
   29588:	10000a1e 	bne	r2,zero,295b4 <_fflush_r+0x4c>
   2958c:	0005883a 	mov	r2,zero
   29590:	dfc00217 	ldw	ra,8(sp)
   29594:	dc000117 	ldw	r16,4(sp)
   29598:	dec00304 	addi	sp,sp,12
   2959c:	f800283a 	ret
   295a0:	d9400015 	stw	r5,0(sp)
   295a4:	00299b00 	call	299b0 <__sinit>
   295a8:	d9400017 	ldw	r5,0(sp)
   295ac:	2880030f 	ldh	r2,12(r5)
   295b0:	103ff626 	beq	r2,zero,2958c <_fflush_r+0x24>
   295b4:	8009883a 	mov	r4,r16
   295b8:	dfc00217 	ldw	ra,8(sp)
   295bc:	dc000117 	ldw	r16,4(sp)
   295c0:	dec00304 	addi	sp,sp,12
   295c4:	00293401 	jmpi	29340 <__sflush_r>

000295c8 <fflush>:
   295c8:	20001726 	beq	r4,zero,29628 <fflush+0x60>
   295cc:	008000f4 	movhi	r2,3
   295d0:	200b883a 	mov	r5,r4
   295d4:	1110d017 	ldw	r4,17216(r2)
   295d8:	20000226 	beq	r4,zero,295e4 <fflush+0x1c>
   295dc:	20800e17 	ldw	r2,56(r4)
   295e0:	10000526 	beq	r2,zero,295f8 <fflush+0x30>
   295e4:	2880030f 	ldh	r2,12(r5)
   295e8:	1000021e 	bne	r2,zero,295f4 <fflush+0x2c>
   295ec:	0005883a 	mov	r2,zero
   295f0:	f800283a 	ret
   295f4:	00293401 	jmpi	29340 <__sflush_r>
   295f8:	defffd04 	addi	sp,sp,-12
   295fc:	d9400115 	stw	r5,4(sp)
   29600:	d9000015 	stw	r4,0(sp)
   29604:	dfc00215 	stw	ra,8(sp)
   29608:	00299b00 	call	299b0 <__sinit>
   2960c:	d9400117 	ldw	r5,4(sp)
   29610:	d9000017 	ldw	r4,0(sp)
   29614:	2880030f 	ldh	r2,12(r5)
   29618:	10000826 	beq	r2,zero,2963c <fflush+0x74>
   2961c:	dfc00217 	ldw	ra,8(sp)
   29620:	dec00304 	addi	sp,sp,12
   29624:	00293401 	jmpi	29340 <__sflush_r>
   29628:	008000f4 	movhi	r2,3
   2962c:	1110cf17 	ldw	r4,17212(r2)
   29630:	014000f4 	movhi	r5,3
   29634:	29655a04 	addi	r5,r5,-27288
   29638:	002a3701 	jmpi	2a370 <_fwalk_reent>
   2963c:	0005883a 	mov	r2,zero
   29640:	dfc00217 	ldw	ra,8(sp)
   29644:	dec00304 	addi	sp,sp,12
   29648:	f800283a 	ret

0002964c <__fp_lock>:
   2964c:	0005883a 	mov	r2,zero
   29650:	f800283a 	ret

00029654 <_cleanup_r>:
   29654:	014000f4 	movhi	r5,3
   29658:	29794e04 	addi	r5,r5,-6856
   2965c:	002a3701 	jmpi	2a370 <_fwalk_reent>

00029660 <__fp_unlock>:
   29660:	0005883a 	mov	r2,zero
   29664:	f800283a 	ret

00029668 <__sinit.part.0>:
   29668:	00c000f4 	movhi	r3,3
   2966c:	20800117 	ldw	r2,4(r4)
   29670:	18e59504 	addi	r3,r3,-27052
   29674:	20c00f15 	stw	r3,60(r4)
   29678:	2140bb04 	addi	r5,r4,748
   2967c:	00c000c4 	movi	r3,3
   29680:	20c0b915 	stw	r3,740(r4)
   29684:	2140ba15 	stw	r5,744(r4)
   29688:	2000b815 	stw	zero,736(r4)
   2968c:	10001705 	stb	zero,92(r2)
   29690:	10001745 	stb	zero,93(r2)
   29694:	10001785 	stb	zero,94(r2)
   29698:	100017c5 	stb	zero,95(r2)
   2969c:	10001805 	stb	zero,96(r2)
   296a0:	10001845 	stb	zero,97(r2)
   296a4:	10001885 	stb	zero,98(r2)
   296a8:	100018c5 	stb	zero,99(r2)
   296ac:	00c00104 	movi	r3,4
   296b0:	10c00315 	stw	r3,12(r2)
   296b4:	020000f4 	movhi	r8,3
   296b8:	20c00217 	ldw	r3,8(r4)
   296bc:	01c000f4 	movhi	r7,3
   296c0:	018000f4 	movhi	r6,3
   296c4:	014000f4 	movhi	r5,3
   296c8:	4232ad04 	addi	r8,r8,-13644
   296cc:	39f2c404 	addi	r7,r7,-13552
   296d0:	31b2e404 	addi	r6,r6,-13424
   296d4:	2972fb04 	addi	r5,r5,-13332
   296d8:	02400074 	movhi	r9,1
   296dc:	10001915 	stw	zero,100(r2)
   296e0:	10000015 	stw	zero,0(r2)
   296e4:	10000115 	stw	zero,4(r2)
   296e8:	10000215 	stw	zero,8(r2)
   296ec:	10000415 	stw	zero,16(r2)
   296f0:	10000515 	stw	zero,20(r2)
   296f4:	10000615 	stw	zero,24(r2)
   296f8:	10800715 	stw	r2,28(r2)
   296fc:	12000815 	stw	r8,32(r2)
   29700:	11c00915 	stw	r7,36(r2)
   29704:	11800a15 	stw	r6,40(r2)
   29708:	11400b15 	stw	r5,44(r2)
   2970c:	4a400284 	addi	r9,r9,10
   29710:	1a400315 	stw	r9,12(r3)
   29714:	18001915 	stw	zero,100(r3)
   29718:	18000015 	stw	zero,0(r3)
   2971c:	18000115 	stw	zero,4(r3)
   29720:	18000215 	stw	zero,8(r3)
   29724:	18000415 	stw	zero,16(r3)
   29728:	18001705 	stb	zero,92(r3)
   2972c:	18001745 	stb	zero,93(r3)
   29730:	18001785 	stb	zero,94(r3)
   29734:	180017c5 	stb	zero,95(r3)
   29738:	18001805 	stb	zero,96(r3)
   2973c:	18001845 	stb	zero,97(r3)
   29740:	18001885 	stb	zero,98(r3)
   29744:	180018c5 	stb	zero,99(r3)
   29748:	20800317 	ldw	r2,12(r4)
   2974c:	024000b4 	movhi	r9,2
   29750:	18000515 	stw	zero,20(r3)
   29754:	18000615 	stw	zero,24(r3)
   29758:	18c00715 	stw	r3,28(r3)
   2975c:	1a000815 	stw	r8,32(r3)
   29760:	19c00915 	stw	r7,36(r3)
   29764:	19800a15 	stw	r6,40(r3)
   29768:	19400b15 	stw	r5,44(r3)
   2976c:	4a400484 	addi	r9,r9,18
   29770:	10001915 	stw	zero,100(r2)
   29774:	10000015 	stw	zero,0(r2)
   29778:	10000115 	stw	zero,4(r2)
   2977c:	10000215 	stw	zero,8(r2)
   29780:	12400315 	stw	r9,12(r2)
   29784:	10000415 	stw	zero,16(r2)
   29788:	10000515 	stw	zero,20(r2)
   2978c:	10000615 	stw	zero,24(r2)
   29790:	10001705 	stb	zero,92(r2)
   29794:	10001745 	stb	zero,93(r2)
   29798:	10001785 	stb	zero,94(r2)
   2979c:	100017c5 	stb	zero,95(r2)
   297a0:	10001805 	stb	zero,96(r2)
   297a4:	10001845 	stb	zero,97(r2)
   297a8:	10001885 	stb	zero,98(r2)
   297ac:	100018c5 	stb	zero,99(r2)
   297b0:	10800715 	stw	r2,28(r2)
   297b4:	12000815 	stw	r8,32(r2)
   297b8:	11c00915 	stw	r7,36(r2)
   297bc:	11800a15 	stw	r6,40(r2)
   297c0:	11400b15 	stw	r5,44(r2)
   297c4:	00800044 	movi	r2,1
   297c8:	20800e15 	stw	r2,56(r4)
   297cc:	f800283a 	ret

000297d0 <__sfmoreglue>:
   297d0:	defffc04 	addi	sp,sp,-16
   297d4:	dc800215 	stw	r18,8(sp)
   297d8:	2825883a 	mov	r18,r5
   297dc:	dc000015 	stw	r16,0(sp)
   297e0:	01401a04 	movi	r5,104
   297e4:	2021883a 	mov	r16,r4
   297e8:	913fffc4 	addi	r4,r18,-1
   297ec:	dfc00315 	stw	ra,12(sp)
   297f0:	dc400115 	stw	r17,4(sp)
   297f4:	0022c7c0 	call	22c7c <__mulsi3>
   297f8:	8009883a 	mov	r4,r16
   297fc:	11401d04 	addi	r5,r2,116
   29800:	1023883a 	mov	r17,r2
   29804:	002a6800 	call	2a680 <_malloc_r>
   29808:	1021883a 	mov	r16,r2
   2980c:	10000726 	beq	r2,zero,2982c <__sfmoreglue+0x5c>
   29810:	11000304 	addi	r4,r2,12
   29814:	10000015 	stw	zero,0(r2)
   29818:	14800115 	stw	r18,4(r2)
   2981c:	11000215 	stw	r4,8(r2)
   29820:	89801a04 	addi	r6,r17,104
   29824:	000b883a 	mov	r5,zero
   29828:	00252f00 	call	252f0 <memset>
   2982c:	8005883a 	mov	r2,r16
   29830:	dfc00317 	ldw	ra,12(sp)
   29834:	dc800217 	ldw	r18,8(sp)
   29838:	dc400117 	ldw	r17,4(sp)
   2983c:	dc000017 	ldw	r16,0(sp)
   29840:	dec00404 	addi	sp,sp,16
   29844:	f800283a 	ret

00029848 <__sfp>:
   29848:	defffb04 	addi	sp,sp,-20
   2984c:	008000f4 	movhi	r2,3
   29850:	dc000015 	stw	r16,0(sp)
   29854:	1410cf17 	ldw	r16,17212(r2)
   29858:	dc400115 	stw	r17,4(sp)
   2985c:	dfc00415 	stw	ra,16(sp)
   29860:	80800e17 	ldw	r2,56(r16)
   29864:	dcc00315 	stw	r19,12(sp)
   29868:	dc800215 	stw	r18,8(sp)
   2986c:	2023883a 	mov	r17,r4
   29870:	10003126 	beq	r2,zero,29938 <__sfp+0xf0>
   29874:	8100ba17 	ldw	r4,744(r16)
   29878:	8140b917 	ldw	r5,740(r16)
   2987c:	04c00104 	movi	r19,4
   29880:	8400b804 	addi	r16,r16,736
   29884:	297fffc4 	addi	r5,r5,-1
   29888:	2800050e 	bge	r5,zero,298a0 <__sfp+0x58>
   2988c:	00002406 	br	29920 <__sfp+0xd8>
   29890:	297fffc4 	addi	r5,r5,-1
   29894:	28bfffd8 	cmpnei	r2,r5,-1
   29898:	21001a04 	addi	r4,r4,104
   2989c:	10002026 	beq	r2,zero,29920 <__sfp+0xd8>
   298a0:	2080030f 	ldh	r2,12(r4)
   298a4:	103ffa1e 	bne	r2,zero,29890 <__sfp+0x48>
   298a8:	00bffff4 	movhi	r2,65535
   298ac:	10800044 	addi	r2,r2,1
   298b0:	20001915 	stw	zero,100(r4)
   298b4:	20000015 	stw	zero,0(r4)
   298b8:	20000115 	stw	zero,4(r4)
   298bc:	20000215 	stw	zero,8(r4)
   298c0:	20800315 	stw	r2,12(r4)
   298c4:	20000415 	stw	zero,16(r4)
   298c8:	20000515 	stw	zero,20(r4)
   298cc:	20000615 	stw	zero,24(r4)
   298d0:	20001705 	stb	zero,92(r4)
   298d4:	20001745 	stb	zero,93(r4)
   298d8:	20001785 	stb	zero,94(r4)
   298dc:	200017c5 	stb	zero,95(r4)
   298e0:	20001805 	stb	zero,96(r4)
   298e4:	20001845 	stb	zero,97(r4)
   298e8:	20001885 	stb	zero,98(r4)
   298ec:	200018c5 	stb	zero,99(r4)
   298f0:	20000c15 	stw	zero,48(r4)
   298f4:	20000d15 	stw	zero,52(r4)
   298f8:	20001115 	stw	zero,68(r4)
   298fc:	20001215 	stw	zero,72(r4)
   29900:	2005883a 	mov	r2,r4
   29904:	dfc00417 	ldw	ra,16(sp)
   29908:	dcc00317 	ldw	r19,12(sp)
   2990c:	dc800217 	ldw	r18,8(sp)
   29910:	dc400117 	ldw	r17,4(sp)
   29914:	dc000017 	ldw	r16,0(sp)
   29918:	dec00504 	addi	sp,sp,20
   2991c:	f800283a 	ret
   29920:	80800017 	ldw	r2,0(r16)
   29924:	10000726 	beq	r2,zero,29944 <__sfp+0xfc>
   29928:	11000217 	ldw	r4,8(r2)
   2992c:	11400117 	ldw	r5,4(r2)
   29930:	1021883a 	mov	r16,r2
   29934:	003fd306 	br	29884 <__sfp+0x3c>
   29938:	8009883a 	mov	r4,r16
   2993c:	00296680 	call	29668 <__sinit.part.0>
   29940:	003fcc06 	br	29874 <__sfp+0x2c>
   29944:	01406b04 	movi	r5,428
   29948:	8809883a 	mov	r4,r17
   2994c:	002a6800 	call	2a680 <_malloc_r>
   29950:	1025883a 	mov	r18,r2
   29954:	10000c26 	beq	r2,zero,29988 <__sfp+0x140>
   29958:	11000304 	addi	r4,r2,12
   2995c:	11000215 	stw	r4,8(r2)
   29960:	000b883a 	mov	r5,zero
   29964:	10000015 	stw	zero,0(r2)
   29968:	14c00115 	stw	r19,4(r2)
   2996c:	01806804 	movi	r6,416
   29970:	00252f00 	call	252f0 <memset>
   29974:	1009883a 	mov	r4,r2
   29978:	84800015 	stw	r18,0(r16)
   2997c:	014000c4 	movi	r5,3
   29980:	9021883a 	mov	r16,r18
   29984:	003fc606 	br	298a0 <__sfp+0x58>
   29988:	80000015 	stw	zero,0(r16)
   2998c:	00800304 	movi	r2,12
   29990:	88800015 	stw	r2,0(r17)
   29994:	0009883a 	mov	r4,zero
   29998:	003fd906 	br	29900 <__sfp+0xb8>

0002999c <_cleanup>:
   2999c:	008000f4 	movhi	r2,3
   299a0:	1110cf17 	ldw	r4,17212(r2)
   299a4:	014000f4 	movhi	r5,3
   299a8:	29794e04 	addi	r5,r5,-6856
   299ac:	002a3701 	jmpi	2a370 <_fwalk_reent>

000299b0 <__sinit>:
   299b0:	20800e17 	ldw	r2,56(r4)
   299b4:	10000126 	beq	r2,zero,299bc <__sinit+0xc>
   299b8:	f800283a 	ret
   299bc:	00296681 	jmpi	29668 <__sinit.part.0>

000299c0 <__sfp_lock_acquire>:
   299c0:	f800283a 	ret

000299c4 <__sfp_lock_release>:
   299c4:	f800283a 	ret

000299c8 <__sinit_lock_acquire>:
   299c8:	f800283a 	ret

000299cc <__sinit_lock_release>:
   299cc:	f800283a 	ret

000299d0 <__fp_lock_all>:
   299d0:	008000f4 	movhi	r2,3
   299d4:	1110d017 	ldw	r4,17216(r2)
   299d8:	014000f4 	movhi	r5,3
   299dc:	29659304 	addi	r5,r5,-27060
   299e0:	002a2d81 	jmpi	2a2d8 <_fwalk>

000299e4 <__fp_unlock_all>:
   299e4:	008000f4 	movhi	r2,3
   299e8:	1110d017 	ldw	r4,17216(r2)
   299ec:	014000f4 	movhi	r5,3
   299f0:	29659804 	addi	r5,r5,-27040
   299f4:	002a2d81 	jmpi	2a2d8 <_fwalk>

000299f8 <_malloc_trim_r>:
   299f8:	defffb04 	addi	sp,sp,-20
   299fc:	dcc00315 	stw	r19,12(sp)
   29a00:	04c000f4 	movhi	r19,3
   29a04:	dc800215 	stw	r18,8(sp)
   29a08:	dc400115 	stw	r17,4(sp)
   29a0c:	dc000015 	stw	r16,0(sp)
   29a10:	dfc00415 	stw	ra,16(sp)
   29a14:	2821883a 	mov	r16,r5
   29a18:	9ccecc04 	addi	r19,r19,15152
   29a1c:	2025883a 	mov	r18,r4
   29a20:	00308b80 	call	308b8 <__malloc_lock>
   29a24:	98800217 	ldw	r2,8(r19)
   29a28:	14400117 	ldw	r17,4(r2)
   29a2c:	00bfff04 	movi	r2,-4
   29a30:	88a2703a 	and	r17,r17,r2
   29a34:	8c21c83a 	sub	r16,r17,r16
   29a38:	8403fbc4 	addi	r16,r16,4079
   29a3c:	8020d33a 	srli	r16,r16,12
   29a40:	843fffc4 	addi	r16,r16,-1
   29a44:	8020933a 	slli	r16,r16,12
   29a48:	80840008 	cmpgei	r2,r16,4096
   29a4c:	10000626 	beq	r2,zero,29a68 <_malloc_trim_r+0x70>
   29a50:	000b883a 	mov	r5,zero
   29a54:	9009883a 	mov	r4,r18
   29a58:	002ca5c0 	call	2ca5c <_sbrk_r>
   29a5c:	98c00217 	ldw	r3,8(r19)
   29a60:	1c47883a 	add	r3,r3,r17
   29a64:	10c00a26 	beq	r2,r3,29a90 <_malloc_trim_r+0x98>
   29a68:	9009883a 	mov	r4,r18
   29a6c:	00308dc0 	call	308dc <__malloc_unlock>
   29a70:	0005883a 	mov	r2,zero
   29a74:	dfc00417 	ldw	ra,16(sp)
   29a78:	dcc00317 	ldw	r19,12(sp)
   29a7c:	dc800217 	ldw	r18,8(sp)
   29a80:	dc400117 	ldw	r17,4(sp)
   29a84:	dc000017 	ldw	r16,0(sp)
   29a88:	dec00504 	addi	sp,sp,20
   29a8c:	f800283a 	ret
   29a90:	040bc83a 	sub	r5,zero,r16
   29a94:	9009883a 	mov	r4,r18
   29a98:	002ca5c0 	call	2ca5c <_sbrk_r>
   29a9c:	10bfffd8 	cmpnei	r2,r2,-1
   29aa0:	10000d26 	beq	r2,zero,29ad8 <_malloc_trim_r+0xe0>
   29aa4:	008000f4 	movhi	r2,3
   29aa8:	10943717 	ldw	r2,20700(r2)
   29aac:	98c00217 	ldw	r3,8(r19)
   29ab0:	8c23c83a 	sub	r17,r17,r16
   29ab4:	8c400054 	ori	r17,r17,1
   29ab8:	1421c83a 	sub	r16,r2,r16
   29abc:	1c400115 	stw	r17,4(r3)
   29ac0:	008000f4 	movhi	r2,3
   29ac4:	9009883a 	mov	r4,r18
   29ac8:	14143715 	stw	r16,20700(r2)
   29acc:	00308dc0 	call	308dc <__malloc_unlock>
   29ad0:	00800044 	movi	r2,1
   29ad4:	003fe706 	br	29a74 <_malloc_trim_r+0x7c>
   29ad8:	000b883a 	mov	r5,zero
   29adc:	9009883a 	mov	r4,r18
   29ae0:	002ca5c0 	call	2ca5c <_sbrk_r>
   29ae4:	99000217 	ldw	r4,8(r19)
   29ae8:	1107c83a 	sub	r3,r2,r4
   29aec:	19400410 	cmplti	r5,r3,16
   29af0:	283fdd1e 	bne	r5,zero,29a68 <_malloc_trim_r+0x70>
   29af4:	014000f4 	movhi	r5,3
   29af8:	2950d117 	ldw	r5,17220(r5)
   29afc:	18c00054 	ori	r3,r3,1
   29b00:	20c00115 	stw	r3,4(r4)
   29b04:	1145c83a 	sub	r2,r2,r5
   29b08:	014000f4 	movhi	r5,3
   29b0c:	28943715 	stw	r2,20700(r5)
   29b10:	003fd506 	br	29a68 <_malloc_trim_r+0x70>

00029b14 <_free_r>:
   29b14:	28004f26 	beq	r5,zero,29c54 <_free_r+0x140>
   29b18:	defffd04 	addi	sp,sp,-12
   29b1c:	dc400115 	stw	r17,4(sp)
   29b20:	dc000015 	stw	r16,0(sp)
   29b24:	2023883a 	mov	r17,r4
   29b28:	2821883a 	mov	r16,r5
   29b2c:	dfc00215 	stw	ra,8(sp)
   29b30:	00308b80 	call	308b8 <__malloc_lock>
   29b34:	81ffff17 	ldw	r7,-4(r16)
   29b38:	00bfff84 	movi	r2,-2
   29b3c:	80fffe04 	addi	r3,r16,-8
   29b40:	3884703a 	and	r2,r7,r2
   29b44:	010000f4 	movhi	r4,3
   29b48:	188d883a 	add	r6,r3,r2
   29b4c:	210ecc04 	addi	r4,r4,15152
   29b50:	31400117 	ldw	r5,4(r6)
   29b54:	22000217 	ldw	r8,8(r4)
   29b58:	027fff04 	movi	r9,-4
   29b5c:	2a4a703a 	and	r5,r5,r9
   29b60:	41806426 	beq	r8,r6,29cf4 <_free_r+0x1e0>
   29b64:	31400115 	stw	r5,4(r6)
   29b68:	39c0004c 	andi	r7,r7,1
   29b6c:	3151883a 	add	r8,r6,r5
   29b70:	3800281e 	bne	r7,zero,29c14 <_free_r+0x100>
   29b74:	82bffe17 	ldw	r10,-8(r16)
   29b78:	42000117 	ldw	r8,4(r8)
   29b7c:	01c000f4 	movhi	r7,3
   29b80:	1a87c83a 	sub	r3,r3,r10
   29b84:	1a400217 	ldw	r9,8(r3)
   29b88:	39cece04 	addi	r7,r7,15160
   29b8c:	1285883a 	add	r2,r2,r10
   29b90:	4200004c 	andi	r8,r8,1
   29b94:	49c04c26 	beq	r9,r7,29cc8 <_free_r+0x1b4>
   29b98:	1a800317 	ldw	r10,12(r3)
   29b9c:	4a800315 	stw	r10,12(r9)
   29ba0:	52400215 	stw	r9,8(r10)
   29ba4:	40007126 	beq	r8,zero,29d6c <_free_r+0x258>
   29ba8:	11400054 	ori	r5,r2,1
   29bac:	19400115 	stw	r5,4(r3)
   29bb0:	30800015 	stw	r2,0(r6)
   29bb4:	11408028 	cmpgeui	r5,r2,512
   29bb8:	28002c1e 	bne	r5,zero,29c6c <_free_r+0x158>
   29bbc:	100ad0fa 	srli	r5,r2,3
   29bc0:	100cd17a 	srli	r6,r2,5
   29bc4:	00800044 	movi	r2,1
   29bc8:	29400044 	addi	r5,r5,1
   29bcc:	280a90fa 	slli	r5,r5,3
   29bd0:	21c00117 	ldw	r7,4(r4)
   29bd4:	1184983a 	sll	r2,r2,r6
   29bd8:	214b883a 	add	r5,r4,r5
   29bdc:	29800017 	ldw	r6,0(r5)
   29be0:	11c4b03a 	or	r2,r2,r7
   29be4:	29fffe04 	addi	r7,r5,-8
   29be8:	19c00315 	stw	r7,12(r3)
   29bec:	19800215 	stw	r6,8(r3)
   29bf0:	20800115 	stw	r2,4(r4)
   29bf4:	28c00015 	stw	r3,0(r5)
   29bf8:	30c00315 	stw	r3,12(r6)
   29bfc:	8809883a 	mov	r4,r17
   29c00:	dfc00217 	ldw	ra,8(sp)
   29c04:	dc400117 	ldw	r17,4(sp)
   29c08:	dc000017 	ldw	r16,0(sp)
   29c0c:	dec00304 	addi	sp,sp,12
   29c10:	00308dc1 	jmpi	308dc <__malloc_unlock>
   29c14:	41c00117 	ldw	r7,4(r8)
   29c18:	39c0004c 	andi	r7,r7,1
   29c1c:	38000e1e 	bne	r7,zero,29c58 <_free_r+0x144>
   29c20:	01c000f4 	movhi	r7,3
   29c24:	1145883a 	add	r2,r2,r5
   29c28:	39cece04 	addi	r7,r7,15160
   29c2c:	31400217 	ldw	r5,8(r6)
   29c30:	12400054 	ori	r9,r2,1
   29c34:	1891883a 	add	r8,r3,r2
   29c38:	29c05226 	beq	r5,r7,29d84 <_free_r+0x270>
   29c3c:	31800317 	ldw	r6,12(r6)
   29c40:	29800315 	stw	r6,12(r5)
   29c44:	31400215 	stw	r5,8(r6)
   29c48:	1a400115 	stw	r9,4(r3)
   29c4c:	40800015 	stw	r2,0(r8)
   29c50:	003fd806 	br	29bb4 <_free_r+0xa0>
   29c54:	f800283a 	ret
   29c58:	11400054 	ori	r5,r2,1
   29c5c:	817fff15 	stw	r5,-4(r16)
   29c60:	30800015 	stw	r2,0(r6)
   29c64:	11408028 	cmpgeui	r5,r2,512
   29c68:	283fd426 	beq	r5,zero,29bbc <_free_r+0xa8>
   29c6c:	100ad27a 	srli	r5,r2,9
   29c70:	29800168 	cmpgeui	r6,r5,5
   29c74:	3000341e 	bne	r6,zero,29d48 <_free_r+0x234>
   29c78:	100ad1ba 	srli	r5,r2,6
   29c7c:	29800e44 	addi	r6,r5,57
   29c80:	300c90fa 	slli	r6,r6,3
   29c84:	29c00e04 	addi	r7,r5,56
   29c88:	218d883a 	add	r6,r4,r6
   29c8c:	31400017 	ldw	r5,0(r6)
   29c90:	31bffe04 	addi	r6,r6,-8
   29c94:	31404226 	beq	r6,r5,29da0 <_free_r+0x28c>
   29c98:	01ffff04 	movi	r7,-4
   29c9c:	29000117 	ldw	r4,4(r5)
   29ca0:	21c8703a 	and	r4,r4,r7
   29ca4:	1100022e 	bgeu	r2,r4,29cb0 <_free_r+0x19c>
   29ca8:	29400217 	ldw	r5,8(r5)
   29cac:	317ffb1e 	bne	r6,r5,29c9c <_free_r+0x188>
   29cb0:	29800317 	ldw	r6,12(r5)
   29cb4:	19800315 	stw	r6,12(r3)
   29cb8:	19400215 	stw	r5,8(r3)
   29cbc:	30c00215 	stw	r3,8(r6)
   29cc0:	28c00315 	stw	r3,12(r5)
   29cc4:	003fcd06 	br	29bfc <_free_r+0xe8>
   29cc8:	40004d1e 	bne	r8,zero,29e00 <_free_r+0x2ec>
   29ccc:	31000317 	ldw	r4,12(r6)
   29cd0:	31800217 	ldw	r6,8(r6)
   29cd4:	2885883a 	add	r2,r5,r2
   29cd8:	11400054 	ori	r5,r2,1
   29cdc:	31000315 	stw	r4,12(r6)
   29ce0:	21800215 	stw	r6,8(r4)
   29ce4:	19400115 	stw	r5,4(r3)
   29ce8:	1887883a 	add	r3,r3,r2
   29cec:	18800015 	stw	r2,0(r3)
   29cf0:	003fc206 	br	29bfc <_free_r+0xe8>
   29cf4:	39c0004c 	andi	r7,r7,1
   29cf8:	1145883a 	add	r2,r2,r5
   29cfc:	3800071e 	bne	r7,zero,29d1c <_free_r+0x208>
   29d00:	81fffe17 	ldw	r7,-8(r16)
   29d04:	19c7c83a 	sub	r3,r3,r7
   29d08:	19400317 	ldw	r5,12(r3)
   29d0c:	19800217 	ldw	r6,8(r3)
   29d10:	11c5883a 	add	r2,r2,r7
   29d14:	31400315 	stw	r5,12(r6)
   29d18:	29800215 	stw	r6,8(r5)
   29d1c:	014000f4 	movhi	r5,3
   29d20:	11800054 	ori	r6,r2,1
   29d24:	2950d217 	ldw	r5,17224(r5)
   29d28:	19800115 	stw	r6,4(r3)
   29d2c:	20c00215 	stw	r3,8(r4)
   29d30:	117fb236 	bltu	r2,r5,29bfc <_free_r+0xe8>
   29d34:	008000f4 	movhi	r2,3
   29d38:	11541617 	ldw	r5,20568(r2)
   29d3c:	8809883a 	mov	r4,r17
   29d40:	00299f80 	call	299f8 <_malloc_trim_r>
   29d44:	003fad06 	br	29bfc <_free_r+0xe8>
   29d48:	29800568 	cmpgeui	r6,r5,21
   29d4c:	30000926 	beq	r6,zero,29d74 <_free_r+0x260>
   29d50:	29801568 	cmpgeui	r6,r5,85
   29d54:	3000191e 	bne	r6,zero,29dbc <_free_r+0x2a8>
   29d58:	100ad33a 	srli	r5,r2,12
   29d5c:	29801bc4 	addi	r6,r5,111
   29d60:	300c90fa 	slli	r6,r6,3
   29d64:	29c01b84 	addi	r7,r5,110
   29d68:	003fc706 	br	29c88 <_free_r+0x174>
   29d6c:	1145883a 	add	r2,r2,r5
   29d70:	003fae06 	br	29c2c <_free_r+0x118>
   29d74:	29801704 	addi	r6,r5,92
   29d78:	300c90fa 	slli	r6,r6,3
   29d7c:	29c016c4 	addi	r7,r5,91
   29d80:	003fc106 	br	29c88 <_free_r+0x174>
   29d84:	20c00515 	stw	r3,20(r4)
   29d88:	20c00415 	stw	r3,16(r4)
   29d8c:	19c00315 	stw	r7,12(r3)
   29d90:	19c00215 	stw	r7,8(r3)
   29d94:	1a400115 	stw	r9,4(r3)
   29d98:	40800015 	stw	r2,0(r8)
   29d9c:	003f9706 	br	29bfc <_free_r+0xe8>
   29da0:	380fd0ba 	srai	r7,r7,2
   29da4:	00800044 	movi	r2,1
   29da8:	22000117 	ldw	r8,4(r4)
   29dac:	11ce983a 	sll	r7,r2,r7
   29db0:	3a0eb03a 	or	r7,r7,r8
   29db4:	21c00115 	stw	r7,4(r4)
   29db8:	003fbe06 	br	29cb4 <_free_r+0x1a0>
   29dbc:	29805568 	cmpgeui	r6,r5,341
   29dc0:	3000051e 	bne	r6,zero,29dd8 <_free_r+0x2c4>
   29dc4:	100ad3fa 	srli	r5,r2,15
   29dc8:	29801e04 	addi	r6,r5,120
   29dcc:	300c90fa 	slli	r6,r6,3
   29dd0:	29c01dc4 	addi	r7,r5,119
   29dd4:	003fac06 	br	29c88 <_free_r+0x174>
   29dd8:	29415568 	cmpgeui	r5,r5,1365
   29ddc:	2800051e 	bne	r5,zero,29df4 <_free_r+0x2e0>
   29de0:	100ad4ba 	srli	r5,r2,18
   29de4:	29801f44 	addi	r6,r5,125
   29de8:	300c90fa 	slli	r6,r6,3
   29dec:	29c01f04 	addi	r7,r5,124
   29df0:	003fa506 	br	29c88 <_free_r+0x174>
   29df4:	0180fe04 	movi	r6,1016
   29df8:	01c01f84 	movi	r7,126
   29dfc:	003fa206 	br	29c88 <_free_r+0x174>
   29e00:	11000054 	ori	r4,r2,1
   29e04:	19000115 	stw	r4,4(r3)
   29e08:	30800015 	stw	r2,0(r6)
   29e0c:	003f7b06 	br	29bfc <_free_r+0xe8>

00029e10 <__sfvwrite_r>:
   29e10:	30800217 	ldw	r2,8(r6)
   29e14:	1000a326 	beq	r2,zero,2a0a4 <__sfvwrite_r+0x294>
   29e18:	29c0030b 	ldhu	r7,12(r5)
   29e1c:	defff404 	addi	sp,sp,-48
   29e20:	ddc00915 	stw	r23,36(sp)
   29e24:	dd400715 	stw	r21,28(sp)
   29e28:	dc000215 	stw	r16,8(sp)
   29e2c:	dfc00b15 	stw	ra,44(sp)
   29e30:	df000a15 	stw	fp,40(sp)
   29e34:	dd800815 	stw	r22,32(sp)
   29e38:	dd000615 	stw	r20,24(sp)
   29e3c:	dcc00515 	stw	r19,20(sp)
   29e40:	dc800415 	stw	r18,16(sp)
   29e44:	dc400315 	stw	r17,12(sp)
   29e48:	3880020c 	andi	r2,r7,8
   29e4c:	302f883a 	mov	r23,r6
   29e50:	202b883a 	mov	r21,r4
   29e54:	2821883a 	mov	r16,r5
   29e58:	10002226 	beq	r2,zero,29ee4 <__sfvwrite_r+0xd4>
   29e5c:	28800417 	ldw	r2,16(r5)
   29e60:	10002026 	beq	r2,zero,29ee4 <__sfvwrite_r+0xd4>
   29e64:	3880008c 	andi	r2,r7,2
   29e68:	bc400017 	ldw	r17,0(r23)
   29e6c:	10002526 	beq	r2,zero,29f04 <__sfvwrite_r+0xf4>
   29e70:	80800917 	ldw	r2,36(r16)
   29e74:	81400717 	ldw	r5,28(r16)
   29e78:	05200034 	movhi	r20,32768
   29e7c:	0027883a 	mov	r19,zero
   29e80:	0025883a 	mov	r18,zero
   29e84:	a53f0004 	addi	r20,r20,-1024
   29e88:	980d883a 	mov	r6,r19
   29e8c:	a809883a 	mov	r4,r21
   29e90:	90001026 	beq	r18,zero,29ed4 <__sfvwrite_r+0xc4>
   29e94:	900f883a 	mov	r7,r18
   29e98:	a480012e 	bgeu	r20,r18,29ea0 <__sfvwrite_r+0x90>
   29e9c:	a00f883a 	mov	r7,r20
   29ea0:	103ee83a 	callr	r2
   29ea4:	00807a0e 	bge	zero,r2,2a090 <__sfvwrite_r+0x280>
   29ea8:	b9000217 	ldw	r4,8(r23)
   29eac:	98a7883a 	add	r19,r19,r2
   29eb0:	90a5c83a 	sub	r18,r18,r2
   29eb4:	2085c83a 	sub	r2,r4,r2
   29eb8:	b8800215 	stw	r2,8(r23)
   29ebc:	10006326 	beq	r2,zero,2a04c <__sfvwrite_r+0x23c>
   29ec0:	80800917 	ldw	r2,36(r16)
   29ec4:	81400717 	ldw	r5,28(r16)
   29ec8:	980d883a 	mov	r6,r19
   29ecc:	a809883a 	mov	r4,r21
   29ed0:	903ff01e 	bne	r18,zero,29e94 <__sfvwrite_r+0x84>
   29ed4:	8cc00017 	ldw	r19,0(r17)
   29ed8:	8c800117 	ldw	r18,4(r17)
   29edc:	8c400204 	addi	r17,r17,8
   29ee0:	003fe906 	br	29e88 <__sfvwrite_r+0x78>
   29ee4:	800b883a 	mov	r5,r16
   29ee8:	a809883a 	mov	r4,r21
   29eec:	00278740 	call	27874 <__swsetup_r>
   29ef0:	1000f71e 	bne	r2,zero,2a2d0 <__sfvwrite_r+0x4c0>
   29ef4:	81c0030b 	ldhu	r7,12(r16)
   29ef8:	bc400017 	ldw	r17,0(r23)
   29efc:	3880008c 	andi	r2,r7,2
   29f00:	103fdb1e 	bne	r2,zero,29e70 <__sfvwrite_r+0x60>
   29f04:	3880004c 	andi	r2,r7,1
   29f08:	84800217 	ldw	r18,8(r16)
   29f0c:	82000017 	ldw	r8,0(r16)
   29f10:	1000661e 	bne	r2,zero,2a0ac <__sfvwrite_r+0x29c>
   29f14:	00a00034 	movhi	r2,32768
   29f18:	10bfff84 	addi	r2,r2,-2
   29f1c:	00e00034 	movhi	r3,32768
   29f20:	d8800015 	stw	r2,0(sp)
   29f24:	18bfffc4 	addi	r2,r3,-1
   29f28:	0039883a 	mov	fp,zero
   29f2c:	0027883a 	mov	r19,zero
   29f30:	d8800115 	stw	r2,4(sp)
   29f34:	98004126 	beq	r19,zero,2a03c <__sfvwrite_r+0x22c>
   29f38:	3880800c 	andi	r2,r7,512
   29f3c:	10009726 	beq	r2,zero,2a19c <__sfvwrite_r+0x38c>
   29f40:	902d883a 	mov	r22,r18
   29f44:	9c80be36 	bltu	r19,r18,2a240 <__sfvwrite_r+0x430>
   29f48:	3881200c 	andi	r2,r7,1152
   29f4c:	10002626 	beq	r2,zero,29fe8 <__sfvwrite_r+0x1d8>
   29f50:	81800517 	ldw	r6,20(r16)
   29f54:	81400417 	ldw	r5,16(r16)
   29f58:	98800044 	addi	r2,r19,1
   29f5c:	3189883a 	add	r4,r6,r6
   29f60:	2189883a 	add	r4,r4,r6
   29f64:	2028d7fa 	srli	r20,r4,31
   29f68:	4165c83a 	sub	r18,r8,r5
   29f6c:	1485883a 	add	r2,r2,r18
   29f70:	a109883a 	add	r4,r20,r4
   29f74:	2029d07a 	srai	r20,r4,1
   29f78:	a00d883a 	mov	r6,r20
   29f7c:	a080022e 	bgeu	r20,r2,29f88 <__sfvwrite_r+0x178>
   29f80:	1029883a 	mov	r20,r2
   29f84:	100d883a 	mov	r6,r2
   29f88:	39c1000c 	andi	r7,r7,1024
   29f8c:	3800c026 	beq	r7,zero,2a290 <__sfvwrite_r+0x480>
   29f90:	a809883a 	mov	r4,r21
   29f94:	300b883a 	mov	r5,r6
   29f98:	002a6800 	call	2a680 <_malloc_r>
   29f9c:	1009883a 	mov	r4,r2
   29fa0:	1000c726 	beq	r2,zero,2a2c0 <__sfvwrite_r+0x4b0>
   29fa4:	81400417 	ldw	r5,16(r16)
   29fa8:	900d883a 	mov	r6,r18
   29fac:	002af300 	call	2af30 <memcpy>
   29fb0:	1009883a 	mov	r4,r2
   29fb4:	8080030b 	ldhu	r2,12(r16)
   29fb8:	00fedfc4 	movi	r3,-1153
   29fbc:	10c4703a 	and	r2,r2,r3
   29fc0:	10802014 	ori	r2,r2,128
   29fc4:	8080030d 	sth	r2,12(r16)
   29fc8:	2491883a 	add	r8,r4,r18
   29fcc:	a485c83a 	sub	r2,r20,r18
   29fd0:	81000415 	stw	r4,16(r16)
   29fd4:	82000015 	stw	r8,0(r16)
   29fd8:	85000515 	stw	r20,20(r16)
   29fdc:	9825883a 	mov	r18,r19
   29fe0:	80800215 	stw	r2,8(r16)
   29fe4:	982d883a 	mov	r22,r19
   29fe8:	4009883a 	mov	r4,r8
   29fec:	b00d883a 	mov	r6,r22
   29ff0:	e00b883a 	mov	r5,fp
   29ff4:	002b0300 	call	2b030 <memmove>
   29ff8:	81000217 	ldw	r4,8(r16)
   29ffc:	80800017 	ldw	r2,0(r16)
   2a000:	9829883a 	mov	r20,r19
   2a004:	24a5c83a 	sub	r18,r4,r18
   2a008:	1585883a 	add	r2,r2,r22
   2a00c:	84800215 	stw	r18,8(r16)
   2a010:	80800015 	stw	r2,0(r16)
   2a014:	0027883a 	mov	r19,zero
   2a018:	b8800217 	ldw	r2,8(r23)
   2a01c:	e539883a 	add	fp,fp,r20
   2a020:	1529c83a 	sub	r20,r2,r20
   2a024:	bd000215 	stw	r20,8(r23)
   2a028:	a0000826 	beq	r20,zero,2a04c <__sfvwrite_r+0x23c>
   2a02c:	81c0030b 	ldhu	r7,12(r16)
   2a030:	84800217 	ldw	r18,8(r16)
   2a034:	82000017 	ldw	r8,0(r16)
   2a038:	983fbf1e 	bne	r19,zero,29f38 <__sfvwrite_r+0x128>
   2a03c:	8f000017 	ldw	fp,0(r17)
   2a040:	8cc00117 	ldw	r19,4(r17)
   2a044:	8c400204 	addi	r17,r17,8
   2a048:	003fba06 	br	29f34 <__sfvwrite_r+0x124>
   2a04c:	0005883a 	mov	r2,zero
   2a050:	dfc00b17 	ldw	ra,44(sp)
   2a054:	df000a17 	ldw	fp,40(sp)
   2a058:	ddc00917 	ldw	r23,36(sp)
   2a05c:	dd800817 	ldw	r22,32(sp)
   2a060:	dd400717 	ldw	r21,28(sp)
   2a064:	dd000617 	ldw	r20,24(sp)
   2a068:	dcc00517 	ldw	r19,20(sp)
   2a06c:	dc800417 	ldw	r18,16(sp)
   2a070:	dc400317 	ldw	r17,12(sp)
   2a074:	dc000217 	ldw	r16,8(sp)
   2a078:	dec00c04 	addi	sp,sp,48
   2a07c:	f800283a 	ret
   2a080:	800b883a 	mov	r5,r16
   2a084:	a809883a 	mov	r4,r21
   2a088:	00295680 	call	29568 <_fflush_r>
   2a08c:	10002026 	beq	r2,zero,2a110 <__sfvwrite_r+0x300>
   2a090:	8080030b 	ldhu	r2,12(r16)
   2a094:	10801014 	ori	r2,r2,64
   2a098:	8080030d 	sth	r2,12(r16)
   2a09c:	00bfffc4 	movi	r2,-1
   2a0a0:	003feb06 	br	2a050 <__sfvwrite_r+0x240>
   2a0a4:	0005883a 	mov	r2,zero
   2a0a8:	f800283a 	ret
   2a0ac:	002d883a 	mov	r22,zero
   2a0b0:	0027883a 	mov	r19,zero
   2a0b4:	0005883a 	mov	r2,zero
   2a0b8:	0039883a 	mov	fp,zero
   2a0bc:	b0001d26 	beq	r22,zero,2a134 <__sfvwrite_r+0x324>
   2a0c0:	10002026 	beq	r2,zero,2a144 <__sfvwrite_r+0x334>
   2a0c4:	9829883a 	mov	r20,r19
   2a0c8:	b500012e 	bgeu	r22,r20,2a0d0 <__sfvwrite_r+0x2c0>
   2a0cc:	b029883a 	mov	r20,r22
   2a0d0:	80800417 	ldw	r2,16(r16)
   2a0d4:	81c00517 	ldw	r7,20(r16)
   2a0d8:	1200022e 	bgeu	r2,r8,2a0e4 <__sfvwrite_r+0x2d4>
   2a0dc:	3ca5883a 	add	r18,r7,r18
   2a0e0:	95002216 	blt	r18,r20,2a16c <__sfvwrite_r+0x35c>
   2a0e4:	a1c05916 	blt	r20,r7,2a24c <__sfvwrite_r+0x43c>
   2a0e8:	80800917 	ldw	r2,36(r16)
   2a0ec:	81400717 	ldw	r5,28(r16)
   2a0f0:	e00d883a 	mov	r6,fp
   2a0f4:	a809883a 	mov	r4,r21
   2a0f8:	103ee83a 	callr	r2
   2a0fc:	1025883a 	mov	r18,r2
   2a100:	00bfe30e 	bge	zero,r2,2a090 <__sfvwrite_r+0x280>
   2a104:	9ca7c83a 	sub	r19,r19,r18
   2a108:	983fdd26 	beq	r19,zero,2a080 <__sfvwrite_r+0x270>
   2a10c:	00800044 	movi	r2,1
   2a110:	b9800217 	ldw	r6,8(r23)
   2a114:	e4b9883a 	add	fp,fp,r18
   2a118:	b4adc83a 	sub	r22,r22,r18
   2a11c:	34a5c83a 	sub	r18,r6,r18
   2a120:	bc800215 	stw	r18,8(r23)
   2a124:	903fc926 	beq	r18,zero,2a04c <__sfvwrite_r+0x23c>
   2a128:	84800217 	ldw	r18,8(r16)
   2a12c:	82000017 	ldw	r8,0(r16)
   2a130:	b03fe31e 	bne	r22,zero,2a0c0 <__sfvwrite_r+0x2b0>
   2a134:	8d800117 	ldw	r22,4(r17)
   2a138:	8f000017 	ldw	fp,0(r17)
   2a13c:	8c400204 	addi	r17,r17,8
   2a140:	b03ffc26 	beq	r22,zero,2a134 <__sfvwrite_r+0x324>
   2a144:	b00d883a 	mov	r6,r22
   2a148:	01400284 	movi	r5,10
   2a14c:	e009883a 	mov	r4,fp
   2a150:	da000015 	stw	r8,0(sp)
   2a154:	002ae600 	call	2ae60 <memchr>
   2a158:	da000017 	ldw	r8,0(sp)
   2a15c:	10004926 	beq	r2,zero,2a284 <__sfvwrite_r+0x474>
   2a160:	10800044 	addi	r2,r2,1
   2a164:	1727c83a 	sub	r19,r2,fp
   2a168:	003fd606 	br	2a0c4 <__sfvwrite_r+0x2b4>
   2a16c:	e00b883a 	mov	r5,fp
   2a170:	4009883a 	mov	r4,r8
   2a174:	900d883a 	mov	r6,r18
   2a178:	002b0300 	call	2b030 <memmove>
   2a17c:	80800017 	ldw	r2,0(r16)
   2a180:	800b883a 	mov	r5,r16
   2a184:	a809883a 	mov	r4,r21
   2a188:	1485883a 	add	r2,r2,r18
   2a18c:	80800015 	stw	r2,0(r16)
   2a190:	00295680 	call	29568 <_fflush_r>
   2a194:	103fdb26 	beq	r2,zero,2a104 <__sfvwrite_r+0x2f4>
   2a198:	003fbd06 	br	2a090 <__sfvwrite_r+0x280>
   2a19c:	80800417 	ldw	r2,16(r16)
   2a1a0:	12001436 	bltu	r2,r8,2a1f4 <__sfvwrite_r+0x3e4>
   2a1a4:	85000517 	ldw	r20,20(r16)
   2a1a8:	9d001236 	bltu	r19,r20,2a1f4 <__sfvwrite_r+0x3e4>
   2a1ac:	d8800017 	ldw	r2,0(sp)
   2a1b0:	14c0322e 	bgeu	r2,r19,2a27c <__sfvwrite_r+0x46c>
   2a1b4:	d9000117 	ldw	r4,4(sp)
   2a1b8:	a00b883a 	mov	r5,r20
   2a1bc:	0022ac80 	call	22ac8 <__divsi3>
   2a1c0:	a00b883a 	mov	r5,r20
   2a1c4:	1009883a 	mov	r4,r2
   2a1c8:	0022c7c0 	call	22c7c <__mulsi3>
   2a1cc:	82000917 	ldw	r8,36(r16)
   2a1d0:	81400717 	ldw	r5,28(r16)
   2a1d4:	100f883a 	mov	r7,r2
   2a1d8:	e00d883a 	mov	r6,fp
   2a1dc:	a809883a 	mov	r4,r21
   2a1e0:	403ee83a 	callr	r8
   2a1e4:	1029883a 	mov	r20,r2
   2a1e8:	00bfa90e 	bge	zero,r2,2a090 <__sfvwrite_r+0x280>
   2a1ec:	9d27c83a 	sub	r19,r19,r20
   2a1f0:	003f8906 	br	2a018 <__sfvwrite_r+0x208>
   2a1f4:	9029883a 	mov	r20,r18
   2a1f8:	9c80012e 	bgeu	r19,r18,2a200 <__sfvwrite_r+0x3f0>
   2a1fc:	9829883a 	mov	r20,r19
   2a200:	4009883a 	mov	r4,r8
   2a204:	a00d883a 	mov	r6,r20
   2a208:	e00b883a 	mov	r5,fp
   2a20c:	002b0300 	call	2b030 <memmove>
   2a210:	80800217 	ldw	r2,8(r16)
   2a214:	81000017 	ldw	r4,0(r16)
   2a218:	1505c83a 	sub	r2,r2,r20
   2a21c:	2509883a 	add	r4,r4,r20
   2a220:	80800215 	stw	r2,8(r16)
   2a224:	81000015 	stw	r4,0(r16)
   2a228:	103ff01e 	bne	r2,zero,2a1ec <__sfvwrite_r+0x3dc>
   2a22c:	800b883a 	mov	r5,r16
   2a230:	a809883a 	mov	r4,r21
   2a234:	00295680 	call	29568 <_fflush_r>
   2a238:	103fec26 	beq	r2,zero,2a1ec <__sfvwrite_r+0x3dc>
   2a23c:	003f9406 	br	2a090 <__sfvwrite_r+0x280>
   2a240:	9825883a 	mov	r18,r19
   2a244:	982d883a 	mov	r22,r19
   2a248:	003f6706 	br	29fe8 <__sfvwrite_r+0x1d8>
   2a24c:	4009883a 	mov	r4,r8
   2a250:	a00d883a 	mov	r6,r20
   2a254:	e00b883a 	mov	r5,fp
   2a258:	002b0300 	call	2b030 <memmove>
   2a25c:	81000217 	ldw	r4,8(r16)
   2a260:	80800017 	ldw	r2,0(r16)
   2a264:	a025883a 	mov	r18,r20
   2a268:	2509c83a 	sub	r4,r4,r20
   2a26c:	1505883a 	add	r2,r2,r20
   2a270:	81000215 	stw	r4,8(r16)
   2a274:	80800015 	stw	r2,0(r16)
   2a278:	003fa206 	br	2a104 <__sfvwrite_r+0x2f4>
   2a27c:	9809883a 	mov	r4,r19
   2a280:	003fcd06 	br	2a1b8 <__sfvwrite_r+0x3a8>
   2a284:	b5000044 	addi	r20,r22,1
   2a288:	a027883a 	mov	r19,r20
   2a28c:	003f8e06 	br	2a0c8 <__sfvwrite_r+0x2b8>
   2a290:	a809883a 	mov	r4,r21
   2a294:	002c4f80 	call	2c4f8 <_realloc_r>
   2a298:	1009883a 	mov	r4,r2
   2a29c:	103f4a1e 	bne	r2,zero,29fc8 <__sfvwrite_r+0x1b8>
   2a2a0:	81400417 	ldw	r5,16(r16)
   2a2a4:	a809883a 	mov	r4,r21
   2a2a8:	0029b140 	call	29b14 <_free_r>
   2a2ac:	8080030b 	ldhu	r2,12(r16)
   2a2b0:	00c00304 	movi	r3,12
   2a2b4:	a8c00015 	stw	r3,0(r21)
   2a2b8:	10bfdfcc 	andi	r2,r2,65407
   2a2bc:	003f7506 	br	2a094 <__sfvwrite_r+0x284>
   2a2c0:	00c00304 	movi	r3,12
   2a2c4:	8080030b 	ldhu	r2,12(r16)
   2a2c8:	a8c00015 	stw	r3,0(r21)
   2a2cc:	003f7106 	br	2a094 <__sfvwrite_r+0x284>
   2a2d0:	00bfffc4 	movi	r2,-1
   2a2d4:	003f5e06 	br	2a050 <__sfvwrite_r+0x240>

0002a2d8 <_fwalk>:
   2a2d8:	defffa04 	addi	sp,sp,-24
   2a2dc:	dd000415 	stw	r20,16(sp)
   2a2e0:	dcc00315 	stw	r19,12(sp)
   2a2e4:	dc800215 	stw	r18,8(sp)
   2a2e8:	dfc00515 	stw	ra,20(sp)
   2a2ec:	dc400115 	stw	r17,4(sp)
   2a2f0:	dc000015 	stw	r16,0(sp)
   2a2f4:	2827883a 	mov	r19,r5
   2a2f8:	2480b804 	addi	r18,r4,736
   2a2fc:	0029883a 	mov	r20,zero
   2a300:	94400117 	ldw	r17,4(r18)
   2a304:	94000217 	ldw	r16,8(r18)
   2a308:	8c7fffc4 	addi	r17,r17,-1
   2a30c:	88000d16 	blt	r17,zero,2a344 <_fwalk+0x6c>
   2a310:	8080030b 	ldhu	r2,12(r16)
   2a314:	8c7fffc4 	addi	r17,r17,-1
   2a318:	108000b0 	cmpltui	r2,r2,2
   2a31c:	1000061e 	bne	r2,zero,2a338 <_fwalk+0x60>
   2a320:	8080038f 	ldh	r2,14(r16)
   2a324:	8009883a 	mov	r4,r16
   2a328:	10bfffe0 	cmpeqi	r2,r2,-1
   2a32c:	1000021e 	bne	r2,zero,2a338 <_fwalk+0x60>
   2a330:	983ee83a 	callr	r19
   2a334:	a0a8b03a 	or	r20,r20,r2
   2a338:	88bfffd8 	cmpnei	r2,r17,-1
   2a33c:	84001a04 	addi	r16,r16,104
   2a340:	103ff31e 	bne	r2,zero,2a310 <_fwalk+0x38>
   2a344:	94800017 	ldw	r18,0(r18)
   2a348:	903fed1e 	bne	r18,zero,2a300 <_fwalk+0x28>
   2a34c:	a005883a 	mov	r2,r20
   2a350:	dfc00517 	ldw	ra,20(sp)
   2a354:	dd000417 	ldw	r20,16(sp)
   2a358:	dcc00317 	ldw	r19,12(sp)
   2a35c:	dc800217 	ldw	r18,8(sp)
   2a360:	dc400117 	ldw	r17,4(sp)
   2a364:	dc000017 	ldw	r16,0(sp)
   2a368:	dec00604 	addi	sp,sp,24
   2a36c:	f800283a 	ret

0002a370 <_fwalk_reent>:
   2a370:	defff904 	addi	sp,sp,-28
   2a374:	dd400515 	stw	r21,20(sp)
   2a378:	dd000415 	stw	r20,16(sp)
   2a37c:	dcc00315 	stw	r19,12(sp)
   2a380:	dc800215 	stw	r18,8(sp)
   2a384:	dfc00615 	stw	ra,24(sp)
   2a388:	dc400115 	stw	r17,4(sp)
   2a38c:	dc000015 	stw	r16,0(sp)
   2a390:	202b883a 	mov	r21,r4
   2a394:	2827883a 	mov	r19,r5
   2a398:	2480b804 	addi	r18,r4,736
   2a39c:	0029883a 	mov	r20,zero
   2a3a0:	94400117 	ldw	r17,4(r18)
   2a3a4:	94000217 	ldw	r16,8(r18)
   2a3a8:	8c7fffc4 	addi	r17,r17,-1
   2a3ac:	88000e16 	blt	r17,zero,2a3e8 <_fwalk_reent+0x78>
   2a3b0:	8080030b 	ldhu	r2,12(r16)
   2a3b4:	8c7fffc4 	addi	r17,r17,-1
   2a3b8:	108000b0 	cmpltui	r2,r2,2
   2a3bc:	1000071e 	bne	r2,zero,2a3dc <_fwalk_reent+0x6c>
   2a3c0:	8080038f 	ldh	r2,14(r16)
   2a3c4:	800b883a 	mov	r5,r16
   2a3c8:	a809883a 	mov	r4,r21
   2a3cc:	10bfffe0 	cmpeqi	r2,r2,-1
   2a3d0:	1000021e 	bne	r2,zero,2a3dc <_fwalk_reent+0x6c>
   2a3d4:	983ee83a 	callr	r19
   2a3d8:	a0a8b03a 	or	r20,r20,r2
   2a3dc:	88bfffd8 	cmpnei	r2,r17,-1
   2a3e0:	84001a04 	addi	r16,r16,104
   2a3e4:	103ff21e 	bne	r2,zero,2a3b0 <_fwalk_reent+0x40>
   2a3e8:	94800017 	ldw	r18,0(r18)
   2a3ec:	903fec1e 	bne	r18,zero,2a3a0 <_fwalk_reent+0x30>
   2a3f0:	a005883a 	mov	r2,r20
   2a3f4:	dfc00617 	ldw	ra,24(sp)
   2a3f8:	dd400517 	ldw	r21,20(sp)
   2a3fc:	dd000417 	ldw	r20,16(sp)
   2a400:	dcc00317 	ldw	r19,12(sp)
   2a404:	dc800217 	ldw	r18,8(sp)
   2a408:	dc400117 	ldw	r17,4(sp)
   2a40c:	dc000017 	ldw	r16,0(sp)
   2a410:	dec00704 	addi	sp,sp,28
   2a414:	f800283a 	ret

0002a418 <__localeconv_l>:
   2a418:	20803c04 	addi	r2,r4,240
   2a41c:	f800283a 	ret

0002a420 <_localeconv_r>:
   2a420:	008000f4 	movhi	r2,3
   2a424:	10900a04 	addi	r2,r2,16424
   2a428:	f800283a 	ret

0002a42c <localeconv>:
   2a42c:	008000f4 	movhi	r2,3
   2a430:	10900a04 	addi	r2,r2,16424
   2a434:	f800283a 	ret

0002a438 <__smakebuf_r>:
   2a438:	2880030b 	ldhu	r2,12(r5)
   2a43c:	deffe804 	addi	sp,sp,-96
   2a440:	dc001215 	stw	r16,72(sp)
   2a444:	dfc01715 	stw	ra,92(sp)
   2a448:	dd001615 	stw	r20,88(sp)
   2a44c:	dcc01515 	stw	r19,84(sp)
   2a450:	dc801415 	stw	r18,80(sp)
   2a454:	dc401315 	stw	r17,76(sp)
   2a458:	10c0008c 	andi	r3,r2,2
   2a45c:	2821883a 	mov	r16,r5
   2a460:	18000d26 	beq	r3,zero,2a498 <__smakebuf_r+0x60>
   2a464:	288010c4 	addi	r2,r5,67
   2a468:	28800015 	stw	r2,0(r5)
   2a46c:	28800415 	stw	r2,16(r5)
   2a470:	00800044 	movi	r2,1
   2a474:	28800515 	stw	r2,20(r5)
   2a478:	dfc01717 	ldw	ra,92(sp)
   2a47c:	dd001617 	ldw	r20,88(sp)
   2a480:	dcc01517 	ldw	r19,84(sp)
   2a484:	dc801417 	ldw	r18,80(sp)
   2a488:	dc401317 	ldw	r17,76(sp)
   2a48c:	dc001217 	ldw	r16,72(sp)
   2a490:	dec01804 	addi	sp,sp,96
   2a494:	f800283a 	ret
   2a498:	2940038f 	ldh	r5,14(r5)
   2a49c:	2023883a 	mov	r17,r4
   2a4a0:	28002816 	blt	r5,zero,2a544 <__smakebuf_r+0x10c>
   2a4a4:	d80d883a 	mov	r6,sp
   2a4a8:	002e8700 	call	2e870 <_fstat_r>
   2a4ac:	10002416 	blt	r2,zero,2a540 <__smakebuf_r+0x108>
   2a4b0:	d8800117 	ldw	r2,4(sp)
   2a4b4:	10bc000c 	andi	r2,r2,61440
   2a4b8:	10880018 	cmpnei	r2,r2,8192
   2a4bc:	1000461e 	bne	r2,zero,2a5d8 <__smakebuf_r+0x1a0>
   2a4c0:	8140038f 	ldh	r5,14(r16)
   2a4c4:	8809883a 	mov	r4,r17
   2a4c8:	002e8d00 	call	2e8d0 <_isatty_r>
   2a4cc:	10003e26 	beq	r2,zero,2a5c8 <__smakebuf_r+0x190>
   2a4d0:	8080030b 	ldhu	r2,12(r16)
   2a4d4:	80c010c4 	addi	r3,r16,67
   2a4d8:	80c00015 	stw	r3,0(r16)
   2a4dc:	10800054 	ori	r2,r2,1
   2a4e0:	8080030d 	sth	r2,12(r16)
   2a4e4:	00800044 	movi	r2,1
   2a4e8:	80c00415 	stw	r3,16(r16)
   2a4ec:	80800515 	stw	r2,20(r16)
   2a4f0:	04c00044 	movi	r19,1
   2a4f4:	05010004 	movi	r20,1024
   2a4f8:	04820004 	movi	r18,2048
   2a4fc:	a00b883a 	mov	r5,r20
   2a500:	8809883a 	mov	r4,r17
   2a504:	002a6800 	call	2a680 <_malloc_r>
   2a508:	10001726 	beq	r2,zero,2a568 <__smakebuf_r+0x130>
   2a50c:	80c0030b 	ldhu	r3,12(r16)
   2a510:	010000f4 	movhi	r4,3
   2a514:	21259504 	addi	r4,r4,-27052
   2a518:	89000f15 	stw	r4,60(r17)
   2a51c:	18c02014 	ori	r3,r3,128
   2a520:	80c0030d 	sth	r3,12(r16)
   2a524:	80800015 	stw	r2,0(r16)
   2a528:	80800415 	stw	r2,16(r16)
   2a52c:	85000515 	stw	r20,20(r16)
   2a530:	98001d1e 	bne	r19,zero,2a5a8 <__smakebuf_r+0x170>
   2a534:	90c6b03a 	or	r3,r18,r3
   2a538:	80c0030d 	sth	r3,12(r16)
   2a53c:	003fce06 	br	2a478 <__smakebuf_r+0x40>
   2a540:	8080030b 	ldhu	r2,12(r16)
   2a544:	1080200c 	andi	r2,r2,128
   2a548:	0027883a 	mov	r19,zero
   2a54c:	10001326 	beq	r2,zero,2a59c <__smakebuf_r+0x164>
   2a550:	05001004 	movi	r20,64
   2a554:	a00b883a 	mov	r5,r20
   2a558:	8809883a 	mov	r4,r17
   2a55c:	0025883a 	mov	r18,zero
   2a560:	002a6800 	call	2a680 <_malloc_r>
   2a564:	103fe91e 	bne	r2,zero,2a50c <__smakebuf_r+0xd4>
   2a568:	8080030b 	ldhu	r2,12(r16)
   2a56c:	10c0800c 	andi	r3,r2,512
   2a570:	183fc11e 	bne	r3,zero,2a478 <__smakebuf_r+0x40>
   2a574:	00ffff04 	movi	r3,-4
   2a578:	10c4703a 	and	r2,r2,r3
   2a57c:	10800094 	ori	r2,r2,2
   2a580:	80c010c4 	addi	r3,r16,67
   2a584:	8080030d 	sth	r2,12(r16)
   2a588:	00800044 	movi	r2,1
   2a58c:	80c00015 	stw	r3,0(r16)
   2a590:	80c00415 	stw	r3,16(r16)
   2a594:	80800515 	stw	r2,20(r16)
   2a598:	003fb706 	br	2a478 <__smakebuf_r+0x40>
   2a59c:	05010004 	movi	r20,1024
   2a5a0:	0025883a 	mov	r18,zero
   2a5a4:	003fd506 	br	2a4fc <__smakebuf_r+0xc4>
   2a5a8:	8140038f 	ldh	r5,14(r16)
   2a5ac:	8809883a 	mov	r4,r17
   2a5b0:	002e8d00 	call	2e8d0 <_isatty_r>
   2a5b4:	80c0030b 	ldhu	r3,12(r16)
   2a5b8:	103fde26 	beq	r2,zero,2a534 <__smakebuf_r+0xfc>
   2a5bc:	18ffff0c 	andi	r3,r3,65532
   2a5c0:	18c00054 	ori	r3,r3,1
   2a5c4:	003fdb06 	br	2a534 <__smakebuf_r+0xfc>
   2a5c8:	04c00044 	movi	r19,1
   2a5cc:	05010004 	movi	r20,1024
   2a5d0:	04820004 	movi	r18,2048
   2a5d4:	003fc906 	br	2a4fc <__smakebuf_r+0xc4>
   2a5d8:	0027883a 	mov	r19,zero
   2a5dc:	05010004 	movi	r20,1024
   2a5e0:	04820004 	movi	r18,2048
   2a5e4:	003fc506 	br	2a4fc <__smakebuf_r+0xc4>

0002a5e8 <__swhatbuf_r>:
   2a5e8:	deffea04 	addi	sp,sp,-88
   2a5ec:	dc001215 	stw	r16,72(sp)
   2a5f0:	2821883a 	mov	r16,r5
   2a5f4:	2940038f 	ldh	r5,14(r5)
   2a5f8:	dc801415 	stw	r18,80(sp)
   2a5fc:	dc401315 	stw	r17,76(sp)
   2a600:	dfc01515 	stw	ra,84(sp)
   2a604:	3023883a 	mov	r17,r6
   2a608:	3825883a 	mov	r18,r7
   2a60c:	28001016 	blt	r5,zero,2a650 <__swhatbuf_r+0x68>
   2a610:	d80d883a 	mov	r6,sp
   2a614:	002e8700 	call	2e870 <_fstat_r>
   2a618:	10000d16 	blt	r2,zero,2a650 <__swhatbuf_r+0x68>
   2a61c:	d8c00117 	ldw	r3,4(sp)
   2a620:	00820004 	movi	r2,2048
   2a624:	18fc000c 	andi	r3,r3,61440
   2a628:	18c80020 	cmpeqi	r3,r3,8192
   2a62c:	90c00015 	stw	r3,0(r18)
   2a630:	00c10004 	movi	r3,1024
   2a634:	88c00015 	stw	r3,0(r17)
   2a638:	dfc01517 	ldw	ra,84(sp)
   2a63c:	dc801417 	ldw	r18,80(sp)
   2a640:	dc401317 	ldw	r17,76(sp)
   2a644:	dc001217 	ldw	r16,72(sp)
   2a648:	dec01604 	addi	sp,sp,88
   2a64c:	f800283a 	ret
   2a650:	8080030b 	ldhu	r2,12(r16)
   2a654:	90000015 	stw	zero,0(r18)
   2a658:	1080200c 	andi	r2,r2,128
   2a65c:	10000426 	beq	r2,zero,2a670 <__swhatbuf_r+0x88>
   2a660:	00801004 	movi	r2,64
   2a664:	88800015 	stw	r2,0(r17)
   2a668:	0005883a 	mov	r2,zero
   2a66c:	003ff206 	br	2a638 <__swhatbuf_r+0x50>
   2a670:	00810004 	movi	r2,1024
   2a674:	88800015 	stw	r2,0(r17)
   2a678:	0005883a 	mov	r2,zero
   2a67c:	003fee06 	br	2a638 <__swhatbuf_r+0x50>

0002a680 <_malloc_r>:
   2a680:	defff604 	addi	sp,sp,-40
   2a684:	dc400115 	stw	r17,4(sp)
   2a688:	2c4002c4 	addi	r17,r5,11
   2a68c:	dc800215 	stw	r18,8(sp)
   2a690:	dfc00915 	stw	ra,36(sp)
   2a694:	df000815 	stw	fp,32(sp)
   2a698:	ddc00715 	stw	r23,28(sp)
   2a69c:	dd800615 	stw	r22,24(sp)
   2a6a0:	dd400515 	stw	r21,20(sp)
   2a6a4:	dd000415 	stw	r20,16(sp)
   2a6a8:	dcc00315 	stw	r19,12(sp)
   2a6ac:	dc000015 	stw	r16,0(sp)
   2a6b0:	888005e8 	cmpgeui	r2,r17,23
   2a6b4:	2025883a 	mov	r18,r4
   2a6b8:	10001b1e 	bne	r2,zero,2a728 <_malloc_r+0xa8>
   2a6bc:	29400468 	cmpgeui	r5,r5,17
   2a6c0:	2800821e 	bne	r5,zero,2a8cc <_malloc_r+0x24c>
   2a6c4:	00308b80 	call	308b8 <__malloc_lock>
   2a6c8:	04400404 	movi	r17,16
   2a6cc:	00800604 	movi	r2,24
   2a6d0:	01c00084 	movi	r7,2
   2a6d4:	04c000f4 	movhi	r19,3
   2a6d8:	9ccecc04 	addi	r19,r19,15152
   2a6dc:	9885883a 	add	r2,r19,r2
   2a6e0:	14000117 	ldw	r16,4(r2)
   2a6e4:	10fffe04 	addi	r3,r2,-8
   2a6e8:	80c08b26 	beq	r16,r3,2a918 <_malloc_r+0x298>
   2a6ec:	80800117 	ldw	r2,4(r16)
   2a6f0:	81000317 	ldw	r4,12(r16)
   2a6f4:	00ffff04 	movi	r3,-4
   2a6f8:	10c4703a 	and	r2,r2,r3
   2a6fc:	81400217 	ldw	r5,8(r16)
   2a700:	8085883a 	add	r2,r16,r2
   2a704:	10c00117 	ldw	r3,4(r2)
   2a708:	29000315 	stw	r4,12(r5)
   2a70c:	21400215 	stw	r5,8(r4)
   2a710:	18c00054 	ori	r3,r3,1
   2a714:	10c00115 	stw	r3,4(r2)
   2a718:	9009883a 	mov	r4,r18
   2a71c:	00308dc0 	call	308dc <__malloc_unlock>
   2a720:	80800204 	addi	r2,r16,8
   2a724:	00006c06 	br	2a8d8 <_malloc_r+0x258>
   2a728:	00bffe04 	movi	r2,-8
   2a72c:	88a2703a 	and	r17,r17,r2
   2a730:	88006616 	blt	r17,zero,2a8cc <_malloc_r+0x24c>
   2a734:	89406536 	bltu	r17,r5,2a8cc <_malloc_r+0x24c>
   2a738:	00308b80 	call	308b8 <__malloc_lock>
   2a73c:	88807e28 	cmpgeui	r2,r17,504
   2a740:	10012226 	beq	r2,zero,2abcc <_malloc_r+0x54c>
   2a744:	8804d27a 	srli	r2,r17,9
   2a748:	10006f26 	beq	r2,zero,2a908 <_malloc_r+0x288>
   2a74c:	10c00168 	cmpgeui	r3,r2,5
   2a750:	1800fe1e 	bne	r3,zero,2ab4c <_malloc_r+0x4cc>
   2a754:	8804d1ba 	srli	r2,r17,6
   2a758:	11c00e44 	addi	r7,r2,57
   2a75c:	380890fa 	slli	r4,r7,3
   2a760:	12000e04 	addi	r8,r2,56
   2a764:	04c000f4 	movhi	r19,3
   2a768:	9ccecc04 	addi	r19,r19,15152
   2a76c:	9909883a 	add	r4,r19,r4
   2a770:	24000117 	ldw	r16,4(r4)
   2a774:	213ffe04 	addi	r4,r4,-8
   2a778:	24000b26 	beq	r4,r16,2a7a8 <_malloc_r+0x128>
   2a77c:	01bfff04 	movi	r6,-4
   2a780:	00000306 	br	2a790 <_malloc_r+0x110>
   2a784:	1800d60e 	bge	r3,zero,2aae0 <_malloc_r+0x460>
   2a788:	84000317 	ldw	r16,12(r16)
   2a78c:	24000626 	beq	r4,r16,2a7a8 <_malloc_r+0x128>
   2a790:	80800117 	ldw	r2,4(r16)
   2a794:	1184703a 	and	r2,r2,r6
   2a798:	1447c83a 	sub	r3,r2,r17
   2a79c:	19400408 	cmpgei	r5,r3,16
   2a7a0:	283ff826 	beq	r5,zero,2a784 <_malloc_r+0x104>
   2a7a4:	400f883a 	mov	r7,r8
   2a7a8:	9c000417 	ldw	r16,16(r19)
   2a7ac:	024000f4 	movhi	r9,3
   2a7b0:	4a4ece04 	addi	r9,r9,15160
   2a7b4:	82405f26 	beq	r16,r9,2a934 <_malloc_r+0x2b4>
   2a7b8:	80c00117 	ldw	r3,4(r16)
   2a7bc:	00bfff04 	movi	r2,-4
   2a7c0:	1884703a 	and	r2,r3,r2
   2a7c4:	1447c83a 	sub	r3,r2,r17
   2a7c8:	19000410 	cmplti	r4,r3,16
   2a7cc:	20010a26 	beq	r4,zero,2abf8 <_malloc_r+0x578>
   2a7d0:	9a400515 	stw	r9,20(r19)
   2a7d4:	9a400415 	stw	r9,16(r19)
   2a7d8:	1800ff0e 	bge	r3,zero,2abd8 <_malloc_r+0x558>
   2a7dc:	10c08028 	cmpgeui	r3,r2,512
   2a7e0:	1800c11e 	bne	r3,zero,2aae8 <_malloc_r+0x468>
   2a7e4:	1006d0fa 	srli	r3,r2,3
   2a7e8:	1008d17a 	srli	r4,r2,5
   2a7ec:	00800044 	movi	r2,1
   2a7f0:	18c00044 	addi	r3,r3,1
   2a7f4:	180690fa 	slli	r3,r3,3
   2a7f8:	99400117 	ldw	r5,4(r19)
   2a7fc:	1104983a 	sll	r2,r2,r4
   2a800:	98c7883a 	add	r3,r19,r3
   2a804:	19000017 	ldw	r4,0(r3)
   2a808:	1144b03a 	or	r2,r2,r5
   2a80c:	197ffe04 	addi	r5,r3,-8
   2a810:	81400315 	stw	r5,12(r16)
   2a814:	81000215 	stw	r4,8(r16)
   2a818:	98800115 	stw	r2,4(r19)
   2a81c:	1c000015 	stw	r16,0(r3)
   2a820:	24000315 	stw	r16,12(r4)
   2a824:	3807d0ba 	srai	r3,r7,2
   2a828:	01000044 	movi	r4,1
   2a82c:	20c8983a 	sll	r4,r4,r3
   2a830:	11004536 	bltu	r2,r4,2a948 <_malloc_r+0x2c8>
   2a834:	2086703a 	and	r3,r4,r2
   2a838:	18000a1e 	bne	r3,zero,2a864 <_malloc_r+0x1e4>
   2a83c:	00ffff04 	movi	r3,-4
   2a840:	2109883a 	add	r4,r4,r4
   2a844:	38ce703a 	and	r7,r7,r3
   2a848:	2086703a 	and	r3,r4,r2
   2a84c:	39c00104 	addi	r7,r7,4
   2a850:	1800041e 	bne	r3,zero,2a864 <_malloc_r+0x1e4>
   2a854:	2109883a 	add	r4,r4,r4
   2a858:	2086703a 	and	r3,r4,r2
   2a85c:	39c00104 	addi	r7,r7,4
   2a860:	183ffc26 	beq	r3,zero,2a854 <_malloc_r+0x1d4>
   2a864:	02bfff04 	movi	r10,-4
   2a868:	381690fa 	slli	r11,r7,3
   2a86c:	3819883a 	mov	r12,r7
   2a870:	9ad7883a 	add	r11,r19,r11
   2a874:	5811883a 	mov	r8,r11
   2a878:	40800317 	ldw	r2,12(r8)
   2a87c:	4080bc26 	beq	r8,r2,2ab70 <_malloc_r+0x4f0>
   2a880:	10c00117 	ldw	r3,4(r2)
   2a884:	1021883a 	mov	r16,r2
   2a888:	10800317 	ldw	r2,12(r2)
   2a88c:	1a86703a 	and	r3,r3,r10
   2a890:	1c4bc83a 	sub	r5,r3,r17
   2a894:	29800410 	cmplti	r6,r5,16
   2a898:	3000ba26 	beq	r6,zero,2ab84 <_malloc_r+0x504>
   2a89c:	283ff716 	blt	r5,zero,2a87c <_malloc_r+0x1fc>
   2a8a0:	80c7883a 	add	r3,r16,r3
   2a8a4:	19400117 	ldw	r5,4(r3)
   2a8a8:	81800217 	ldw	r6,8(r16)
   2a8ac:	9009883a 	mov	r4,r18
   2a8b0:	29400054 	ori	r5,r5,1
   2a8b4:	19400115 	stw	r5,4(r3)
   2a8b8:	30800315 	stw	r2,12(r6)
   2a8bc:	11800215 	stw	r6,8(r2)
   2a8c0:	00308dc0 	call	308dc <__malloc_unlock>
   2a8c4:	80800204 	addi	r2,r16,8
   2a8c8:	00000306 	br	2a8d8 <_malloc_r+0x258>
   2a8cc:	00800304 	movi	r2,12
   2a8d0:	90800015 	stw	r2,0(r18)
   2a8d4:	0005883a 	mov	r2,zero
   2a8d8:	dfc00917 	ldw	ra,36(sp)
   2a8dc:	df000817 	ldw	fp,32(sp)
   2a8e0:	ddc00717 	ldw	r23,28(sp)
   2a8e4:	dd800617 	ldw	r22,24(sp)
   2a8e8:	dd400517 	ldw	r21,20(sp)
   2a8ec:	dd000417 	ldw	r20,16(sp)
   2a8f0:	dcc00317 	ldw	r19,12(sp)
   2a8f4:	dc800217 	ldw	r18,8(sp)
   2a8f8:	dc400117 	ldw	r17,4(sp)
   2a8fc:	dc000017 	ldw	r16,0(sp)
   2a900:	dec00a04 	addi	sp,sp,40
   2a904:	f800283a 	ret
   2a908:	01008004 	movi	r4,512
   2a90c:	01c01004 	movi	r7,64
   2a910:	02000fc4 	movi	r8,63
   2a914:	003f9306 	br	2a764 <_malloc_r+0xe4>
   2a918:	14000317 	ldw	r16,12(r2)
   2a91c:	39c00084 	addi	r7,r7,2
   2a920:	143f721e 	bne	r2,r16,2a6ec <_malloc_r+0x6c>
   2a924:	9c000417 	ldw	r16,16(r19)
   2a928:	024000f4 	movhi	r9,3
   2a92c:	4a4ece04 	addi	r9,r9,15160
   2a930:	827fa11e 	bne	r16,r9,2a7b8 <_malloc_r+0x138>
   2a934:	3807d0ba 	srai	r3,r7,2
   2a938:	01000044 	movi	r4,1
   2a93c:	98800117 	ldw	r2,4(r19)
   2a940:	20c8983a 	sll	r4,r4,r3
   2a944:	113fbb2e 	bgeu	r2,r4,2a834 <_malloc_r+0x1b4>
   2a948:	9c000217 	ldw	r16,8(r19)
   2a94c:	00bfff04 	movi	r2,-4
   2a950:	85400117 	ldw	r21,4(r16)
   2a954:	a8ac703a 	and	r22,r21,r2
   2a958:	b4400336 	bltu	r22,r17,2a968 <_malloc_r+0x2e8>
   2a95c:	b445c83a 	sub	r2,r22,r17
   2a960:	10c00408 	cmpgei	r3,r2,16
   2a964:	1800541e 	bne	r3,zero,2aab8 <_malloc_r+0x438>
   2a968:	008000f4 	movhi	r2,3
   2a96c:	1090d117 	ldw	r2,17220(r2)
   2a970:	00c000f4 	movhi	r3,3
   2a974:	1d541617 	ldw	r21,20568(r3)
   2a978:	10bfffd8 	cmpnei	r2,r2,-1
   2a97c:	85b9883a 	add	fp,r16,r22
   2a980:	8d6b883a 	add	r21,r17,r21
   2a984:	1000d626 	beq	r2,zero,2ace0 <_malloc_r+0x660>
   2a988:	ad4403c4 	addi	r21,r21,4111
   2a98c:	00bc0004 	movi	r2,-4096
   2a990:	a8aa703a 	and	r21,r21,r2
   2a994:	a80b883a 	mov	r5,r21
   2a998:	9009883a 	mov	r4,r18
   2a99c:	002ca5c0 	call	2ca5c <_sbrk_r>
   2a9a0:	102f883a 	mov	r23,r2
   2a9a4:	10bfffd8 	cmpnei	r2,r2,-1
   2a9a8:	1000a826 	beq	r2,zero,2ac4c <_malloc_r+0x5cc>
   2a9ac:	bf00a636 	bltu	r23,fp,2ac48 <_malloc_r+0x5c8>
   2a9b0:	008000f4 	movhi	r2,3
   2a9b4:	15143717 	ldw	r20,20700(r2)
   2a9b8:	ad29883a 	add	r20,r21,r20
   2a9bc:	15143715 	stw	r20,20700(r2)
   2a9c0:	a007883a 	mov	r3,r20
   2a9c4:	e5c0ec26 	beq	fp,r23,2ad78 <_malloc_r+0x6f8>
   2a9c8:	008000f4 	movhi	r2,3
   2a9cc:	1090d117 	ldw	r2,17220(r2)
   2a9d0:	10bfffd8 	cmpnei	r2,r2,-1
   2a9d4:	1000ef26 	beq	r2,zero,2ad94 <_malloc_r+0x714>
   2a9d8:	bf39c83a 	sub	fp,r23,fp
   2a9dc:	e0c7883a 	add	r3,fp,r3
   2a9e0:	008000f4 	movhi	r2,3
   2a9e4:	10d43715 	stw	r3,20700(r2)
   2a9e8:	bf0001cc 	andi	fp,r23,7
   2a9ec:	e000c526 	beq	fp,zero,2ad04 <_malloc_r+0x684>
   2a9f0:	bf2fc83a 	sub	r23,r23,fp
   2a9f4:	bdc00204 	addi	r23,r23,8
   2a9f8:	05040204 	movi	r20,4104
   2a9fc:	a729c83a 	sub	r20,r20,fp
   2aa00:	bd6b883a 	add	r21,r23,r21
   2aa04:	a569c83a 	sub	r20,r20,r21
   2aa08:	a503ffcc 	andi	r20,r20,4095
   2aa0c:	a00b883a 	mov	r5,r20
   2aa10:	9009883a 	mov	r4,r18
   2aa14:	002ca5c0 	call	2ca5c <_sbrk_r>
   2aa18:	10ffffe0 	cmpeqi	r3,r2,-1
   2aa1c:	1800f31e 	bne	r3,zero,2adec <_malloc_r+0x76c>
   2aa20:	15c5c83a 	sub	r2,r2,r23
   2aa24:	152b883a 	add	r21,r2,r20
   2aa28:	008000f4 	movhi	r2,3
   2aa2c:	11543717 	ldw	r5,20700(r2)
   2aa30:	9dc00215 	stw	r23,8(r19)
   2aa34:	ad400054 	ori	r21,r21,1
   2aa38:	a169883a 	add	r20,r20,r5
   2aa3c:	15143715 	stw	r20,20700(r2)
   2aa40:	bd400115 	stw	r21,4(r23)
   2aa44:	84c0d626 	beq	r16,r19,2ada0 <_malloc_r+0x720>
   2aa48:	b0800428 	cmpgeui	r2,r22,16
   2aa4c:	1000d626 	beq	r2,zero,2ada8 <_malloc_r+0x728>
   2aa50:	80c00117 	ldw	r3,4(r16)
   2aa54:	013ffe04 	movi	r4,-8
   2aa58:	b0bffd04 	addi	r2,r22,-12
   2aa5c:	1104703a 	and	r2,r2,r4
   2aa60:	18c0004c 	andi	r3,r3,1
   2aa64:	1886b03a 	or	r3,r3,r2
   2aa68:	80c00115 	stw	r3,4(r16)
   2aa6c:	01000144 	movi	r4,5
   2aa70:	8087883a 	add	r3,r16,r2
   2aa74:	19000115 	stw	r4,4(r3)
   2aa78:	19000215 	stw	r4,8(r3)
   2aa7c:	10800428 	cmpgeui	r2,r2,16
   2aa80:	1000df1e 	bne	r2,zero,2ae00 <_malloc_r+0x780>
   2aa84:	bd400117 	ldw	r21,4(r23)
   2aa88:	b821883a 	mov	r16,r23
   2aa8c:	008000f4 	movhi	r2,3
   2aa90:	10941517 	ldw	r2,20564(r2)
   2aa94:	1500022e 	bgeu	r2,r20,2aaa0 <_malloc_r+0x420>
   2aa98:	008000f4 	movhi	r2,3
   2aa9c:	15141515 	stw	r20,20564(r2)
   2aaa0:	008000f4 	movhi	r2,3
   2aaa4:	10941417 	ldw	r2,20560(r2)
   2aaa8:	15006a2e 	bgeu	r2,r20,2ac54 <_malloc_r+0x5d4>
   2aaac:	008000f4 	movhi	r2,3
   2aab0:	15141415 	stw	r20,20560(r2)
   2aab4:	00006706 	br	2ac54 <_malloc_r+0x5d4>
   2aab8:	88c00054 	ori	r3,r17,1
   2aabc:	80c00115 	stw	r3,4(r16)
   2aac0:	8463883a 	add	r17,r16,r17
   2aac4:	10800054 	ori	r2,r2,1
   2aac8:	9c400215 	stw	r17,8(r19)
   2aacc:	88800115 	stw	r2,4(r17)
   2aad0:	9009883a 	mov	r4,r18
   2aad4:	00308dc0 	call	308dc <__malloc_unlock>
   2aad8:	80800204 	addi	r2,r16,8
   2aadc:	003f7e06 	br	2a8d8 <_malloc_r+0x258>
   2aae0:	81000317 	ldw	r4,12(r16)
   2aae4:	003f0506 	br	2a6fc <_malloc_r+0x7c>
   2aae8:	1006d27a 	srli	r3,r2,9
   2aaec:	19000168 	cmpgeui	r4,r3,5
   2aaf0:	20005026 	beq	r4,zero,2ac34 <_malloc_r+0x5b4>
   2aaf4:	19000568 	cmpgeui	r4,r3,21
   2aaf8:	20008c1e 	bne	r4,zero,2ad2c <_malloc_r+0x6ac>
   2aafc:	19401704 	addi	r5,r3,92
   2ab00:	280a90fa 	slli	r5,r5,3
   2ab04:	190016c4 	addi	r4,r3,91
   2ab08:	994b883a 	add	r5,r19,r5
   2ab0c:	28c00017 	ldw	r3,0(r5)
   2ab10:	297ffe04 	addi	r5,r5,-8
   2ab14:	28c07426 	beq	r5,r3,2ace8 <_malloc_r+0x668>
   2ab18:	01bfff04 	movi	r6,-4
   2ab1c:	19000117 	ldw	r4,4(r3)
   2ab20:	2188703a 	and	r4,r4,r6
   2ab24:	1100022e 	bgeu	r2,r4,2ab30 <_malloc_r+0x4b0>
   2ab28:	18c00217 	ldw	r3,8(r3)
   2ab2c:	28fffb1e 	bne	r5,r3,2ab1c <_malloc_r+0x49c>
   2ab30:	19400317 	ldw	r5,12(r3)
   2ab34:	98800117 	ldw	r2,4(r19)
   2ab38:	81400315 	stw	r5,12(r16)
   2ab3c:	80c00215 	stw	r3,8(r16)
   2ab40:	2c000215 	stw	r16,8(r5)
   2ab44:	1c000315 	stw	r16,12(r3)
   2ab48:	003f3606 	br	2a824 <_malloc_r+0x1a4>
   2ab4c:	10c00568 	cmpgeui	r3,r2,21
   2ab50:	18004a26 	beq	r3,zero,2ac7c <_malloc_r+0x5fc>
   2ab54:	10c01568 	cmpgeui	r3,r2,85
   2ab58:	18007b1e 	bne	r3,zero,2ad48 <_malloc_r+0x6c8>
   2ab5c:	8804d33a 	srli	r2,r17,12
   2ab60:	11c01bc4 	addi	r7,r2,111
   2ab64:	380890fa 	slli	r4,r7,3
   2ab68:	12001b84 	addi	r8,r2,110
   2ab6c:	003efd06 	br	2a764 <_malloc_r+0xe4>
   2ab70:	63000044 	addi	r12,r12,1
   2ab74:	608000cc 	andi	r2,r12,3
   2ab78:	42000204 	addi	r8,r8,8
   2ab7c:	103f3e1e 	bne	r2,zero,2a878 <_malloc_r+0x1f8>
   2ab80:	00004506 	br	2ac98 <_malloc_r+0x618>
   2ab84:	81000217 	ldw	r4,8(r16)
   2ab88:	89800054 	ori	r6,r17,1
   2ab8c:	81800115 	stw	r6,4(r16)
   2ab90:	20800315 	stw	r2,12(r4)
   2ab94:	11000215 	stw	r4,8(r2)
   2ab98:	8463883a 	add	r17,r16,r17
   2ab9c:	9c400515 	stw	r17,20(r19)
   2aba0:	9c400415 	stw	r17,16(r19)
   2aba4:	28800054 	ori	r2,r5,1
   2aba8:	88800115 	stw	r2,4(r17)
   2abac:	8a400315 	stw	r9,12(r17)
   2abb0:	8a400215 	stw	r9,8(r17)
   2abb4:	80c7883a 	add	r3,r16,r3
   2abb8:	19400015 	stw	r5,0(r3)
   2abbc:	9009883a 	mov	r4,r18
   2abc0:	00308dc0 	call	308dc <__malloc_unlock>
   2abc4:	80800204 	addi	r2,r16,8
   2abc8:	003f4306 	br	2a8d8 <_malloc_r+0x258>
   2abcc:	880ed0fa 	srli	r7,r17,3
   2abd0:	88800204 	addi	r2,r17,8
   2abd4:	003ebf06 	br	2a6d4 <_malloc_r+0x54>
   2abd8:	8085883a 	add	r2,r16,r2
   2abdc:	10c00117 	ldw	r3,4(r2)
   2abe0:	9009883a 	mov	r4,r18
   2abe4:	18c00054 	ori	r3,r3,1
   2abe8:	10c00115 	stw	r3,4(r2)
   2abec:	00308dc0 	call	308dc <__malloc_unlock>
   2abf0:	80800204 	addi	r2,r16,8
   2abf4:	003f3806 	br	2a8d8 <_malloc_r+0x258>
   2abf8:	89000054 	ori	r4,r17,1
   2abfc:	81000115 	stw	r4,4(r16)
   2ac00:	8463883a 	add	r17,r16,r17
   2ac04:	9c400515 	stw	r17,20(r19)
   2ac08:	9c400415 	stw	r17,16(r19)
   2ac0c:	19000054 	ori	r4,r3,1
   2ac10:	89000115 	stw	r4,4(r17)
   2ac14:	8085883a 	add	r2,r16,r2
   2ac18:	8a400315 	stw	r9,12(r17)
   2ac1c:	8a400215 	stw	r9,8(r17)
   2ac20:	10c00015 	stw	r3,0(r2)
   2ac24:	9009883a 	mov	r4,r18
   2ac28:	00308dc0 	call	308dc <__malloc_unlock>
   2ac2c:	80800204 	addi	r2,r16,8
   2ac30:	003f2906 	br	2a8d8 <_malloc_r+0x258>
   2ac34:	1006d1ba 	srli	r3,r2,6
   2ac38:	19400e44 	addi	r5,r3,57
   2ac3c:	280a90fa 	slli	r5,r5,3
   2ac40:	19000e04 	addi	r4,r3,56
   2ac44:	003fb006 	br	2ab08 <_malloc_r+0x488>
   2ac48:	84c04626 	beq	r16,r19,2ad64 <_malloc_r+0x6e4>
   2ac4c:	9c000217 	ldw	r16,8(r19)
   2ac50:	85400117 	ldw	r21,4(r16)
   2ac54:	00bfff04 	movi	r2,-4
   2ac58:	a8aa703a 	and	r21,r21,r2
   2ac5c:	ac45c83a 	sub	r2,r21,r17
   2ac60:	ac400236 	bltu	r21,r17,2ac6c <_malloc_r+0x5ec>
   2ac64:	10c00408 	cmpgei	r3,r2,16
   2ac68:	183f931e 	bne	r3,zero,2aab8 <_malloc_r+0x438>
   2ac6c:	9009883a 	mov	r4,r18
   2ac70:	00308dc0 	call	308dc <__malloc_unlock>
   2ac74:	0005883a 	mov	r2,zero
   2ac78:	003f1706 	br	2a8d8 <_malloc_r+0x258>
   2ac7c:	11c01704 	addi	r7,r2,92
   2ac80:	380890fa 	slli	r4,r7,3
   2ac84:	120016c4 	addi	r8,r2,91
   2ac88:	003eb606 	br	2a764 <_malloc_r+0xe4>
   2ac8c:	58800217 	ldw	r2,8(r11)
   2ac90:	39ffffc4 	addi	r7,r7,-1
   2ac94:	12c0701e 	bne	r2,r11,2ae58 <_malloc_r+0x7d8>
   2ac98:	388000cc 	andi	r2,r7,3
   2ac9c:	5afffe04 	addi	r11,r11,-8
   2aca0:	103ffa1e 	bne	r2,zero,2ac8c <_malloc_r+0x60c>
   2aca4:	98c00117 	ldw	r3,4(r19)
   2aca8:	0104303a 	nor	r2,zero,r4
   2acac:	10c4703a 	and	r2,r2,r3
   2acb0:	98800115 	stw	r2,4(r19)
   2acb4:	2109883a 	add	r4,r4,r4
   2acb8:	113f2336 	bltu	r2,r4,2a948 <_malloc_r+0x2c8>
   2acbc:	203f2226 	beq	r4,zero,2a948 <_malloc_r+0x2c8>
   2acc0:	2086703a 	and	r3,r4,r2
   2acc4:	1800041e 	bne	r3,zero,2acd8 <_malloc_r+0x658>
   2acc8:	2109883a 	add	r4,r4,r4
   2accc:	2086703a 	and	r3,r4,r2
   2acd0:	63000104 	addi	r12,r12,4
   2acd4:	183ffc26 	beq	r3,zero,2acc8 <_malloc_r+0x648>
   2acd8:	600f883a 	mov	r7,r12
   2acdc:	003ee206 	br	2a868 <_malloc_r+0x1e8>
   2ace0:	ad400404 	addi	r21,r21,16
   2ace4:	003f2b06 	br	2a994 <_malloc_r+0x314>
   2ace8:	2009d0ba 	srai	r4,r4,2
   2acec:	00800044 	movi	r2,1
   2acf0:	99800117 	ldw	r6,4(r19)
   2acf4:	1104983a 	sll	r2,r2,r4
   2acf8:	1184b03a 	or	r2,r2,r6
   2acfc:	98800115 	stw	r2,4(r19)
   2ad00:	003f8d06 	br	2ab38 <_malloc_r+0x4b8>
   2ad04:	bd69883a 	add	r20,r23,r21
   2ad08:	0529c83a 	sub	r20,zero,r20
   2ad0c:	a503ffcc 	andi	r20,r20,4095
   2ad10:	a00b883a 	mov	r5,r20
   2ad14:	9009883a 	mov	r4,r18
   2ad18:	002ca5c0 	call	2ca5c <_sbrk_r>
   2ad1c:	10ffffe0 	cmpeqi	r3,r2,-1
   2ad20:	183f3f26 	beq	r3,zero,2aa20 <_malloc_r+0x3a0>
   2ad24:	0029883a 	mov	r20,zero
   2ad28:	003f3f06 	br	2aa28 <_malloc_r+0x3a8>
   2ad2c:	19001568 	cmpgeui	r4,r3,85
   2ad30:	2000201e 	bne	r4,zero,2adb4 <_malloc_r+0x734>
   2ad34:	1006d33a 	srli	r3,r2,12
   2ad38:	19401bc4 	addi	r5,r3,111
   2ad3c:	280a90fa 	slli	r5,r5,3
   2ad40:	19001b84 	addi	r4,r3,110
   2ad44:	003f7006 	br	2ab08 <_malloc_r+0x488>
   2ad48:	10c05568 	cmpgeui	r3,r2,341
   2ad4c:	1800201e 	bne	r3,zero,2add0 <_malloc_r+0x750>
   2ad50:	8804d3fa 	srli	r2,r17,15
   2ad54:	11c01e04 	addi	r7,r2,120
   2ad58:	380890fa 	slli	r4,r7,3
   2ad5c:	12001dc4 	addi	r8,r2,119
   2ad60:	003e8006 	br	2a764 <_malloc_r+0xe4>
   2ad64:	008000f4 	movhi	r2,3
   2ad68:	10d43717 	ldw	r3,20700(r2)
   2ad6c:	a8c7883a 	add	r3,r21,r3
   2ad70:	10d43715 	stw	r3,20700(r2)
   2ad74:	003f1406 	br	2a9c8 <_malloc_r+0x348>
   2ad78:	e083ffcc 	andi	r2,fp,4095
   2ad7c:	103f121e 	bne	r2,zero,2a9c8 <_malloc_r+0x348>
   2ad80:	9c000217 	ldw	r16,8(r19)
   2ad84:	b56b883a 	add	r21,r22,r21
   2ad88:	ad400054 	ori	r21,r21,1
   2ad8c:	85400115 	stw	r21,4(r16)
   2ad90:	003f3e06 	br	2aa8c <_malloc_r+0x40c>
   2ad94:	008000f4 	movhi	r2,3
   2ad98:	15d0d115 	stw	r23,17220(r2)
   2ad9c:	003f1206 	br	2a9e8 <_malloc_r+0x368>
   2ada0:	b821883a 	mov	r16,r23
   2ada4:	003f3906 	br	2aa8c <_malloc_r+0x40c>
   2ada8:	00800044 	movi	r2,1
   2adac:	b8800115 	stw	r2,4(r23)
   2adb0:	003fae06 	br	2ac6c <_malloc_r+0x5ec>
   2adb4:	19005568 	cmpgeui	r4,r3,341
   2adb8:	2000191e 	bne	r4,zero,2ae20 <_malloc_r+0x7a0>
   2adbc:	1006d3fa 	srli	r3,r2,15
   2adc0:	19401e04 	addi	r5,r3,120
   2adc4:	280a90fa 	slli	r5,r5,3
   2adc8:	19001dc4 	addi	r4,r3,119
   2adcc:	003f4e06 	br	2ab08 <_malloc_r+0x488>
   2add0:	10815568 	cmpgeui	r2,r2,1365
   2add4:	1000191e 	bne	r2,zero,2ae3c <_malloc_r+0x7bc>
   2add8:	8804d4ba 	srli	r2,r17,18
   2addc:	11c01f44 	addi	r7,r2,125
   2ade0:	380890fa 	slli	r4,r7,3
   2ade4:	12001f04 	addi	r8,r2,124
   2ade8:	003e5e06 	br	2a764 <_malloc_r+0xe4>
   2adec:	e73ffe04 	addi	fp,fp,-8
   2adf0:	af2b883a 	add	r21,r21,fp
   2adf4:	adebc83a 	sub	r21,r21,r23
   2adf8:	0029883a 	mov	r20,zero
   2adfc:	003f0a06 	br	2aa28 <_malloc_r+0x3a8>
   2ae00:	81400204 	addi	r5,r16,8
   2ae04:	9009883a 	mov	r4,r18
   2ae08:	0029b140 	call	29b14 <_free_r>
   2ae0c:	9c000217 	ldw	r16,8(r19)
   2ae10:	008000f4 	movhi	r2,3
   2ae14:	15143717 	ldw	r20,20700(r2)
   2ae18:	85400117 	ldw	r21,4(r16)
   2ae1c:	003f1b06 	br	2aa8c <_malloc_r+0x40c>
   2ae20:	18c15568 	cmpgeui	r3,r3,1365
   2ae24:	1800091e 	bne	r3,zero,2ae4c <_malloc_r+0x7cc>
   2ae28:	1006d4ba 	srli	r3,r2,18
   2ae2c:	19401f44 	addi	r5,r3,125
   2ae30:	280a90fa 	slli	r5,r5,3
   2ae34:	19001f04 	addi	r4,r3,124
   2ae38:	003f3306 	br	2ab08 <_malloc_r+0x488>
   2ae3c:	0100fe04 	movi	r4,1016
   2ae40:	01c01fc4 	movi	r7,127
   2ae44:	02001f84 	movi	r8,126
   2ae48:	003e4606 	br	2a764 <_malloc_r+0xe4>
   2ae4c:	0140fe04 	movi	r5,1016
   2ae50:	01001f84 	movi	r4,126
   2ae54:	003f2c06 	br	2ab08 <_malloc_r+0x488>
   2ae58:	98800117 	ldw	r2,4(r19)
   2ae5c:	003f9506 	br	2acb4 <_malloc_r+0x634>

0002ae60 <memchr>:
   2ae60:	208000cc 	andi	r2,r4,3
   2ae64:	280f883a 	mov	r7,r5
   2ae68:	10000e26 	beq	r2,zero,2aea4 <memchr+0x44>
   2ae6c:	30bfffc4 	addi	r2,r6,-1
   2ae70:	30001726 	beq	r6,zero,2aed0 <memchr+0x70>
   2ae74:	29803fcc 	andi	r6,r5,255
   2ae78:	00000606 	br	2ae94 <memchr+0x34>
   2ae7c:	21000044 	addi	r4,r4,1
   2ae80:	20c000cc 	andi	r3,r4,3
   2ae84:	18000826 	beq	r3,zero,2aea8 <memchr+0x48>
   2ae88:	10bfffc4 	addi	r2,r2,-1
   2ae8c:	10ffffe0 	cmpeqi	r3,r2,-1
   2ae90:	18000f1e 	bne	r3,zero,2aed0 <memchr+0x70>
   2ae94:	20c00003 	ldbu	r3,0(r4)
   2ae98:	19bff81e 	bne	r3,r6,2ae7c <memchr+0x1c>
   2ae9c:	2005883a 	mov	r2,r4
   2aea0:	f800283a 	ret
   2aea4:	3005883a 	mov	r2,r6
   2aea8:	10c00128 	cmpgeui	r3,r2,4
   2aeac:	18000a1e 	bne	r3,zero,2aed8 <memchr+0x78>
   2aeb0:	10001e26 	beq	r2,zero,2af2c <memchr+0xcc>
   2aeb4:	2087883a 	add	r3,r4,r2
   2aeb8:	39803fcc 	andi	r6,r7,255
   2aebc:	2005883a 	mov	r2,r4
   2aec0:	11000003 	ldbu	r4,0(r2)
   2aec4:	21bff626 	beq	r4,r6,2aea0 <memchr+0x40>
   2aec8:	10800044 	addi	r2,r2,1
   2aecc:	18bffc1e 	bne	r3,r2,2aec0 <memchr+0x60>
   2aed0:	0005883a 	mov	r2,zero
   2aed4:	f800283a 	ret
   2aed8:	29403fcc 	andi	r5,r5,255
   2aedc:	280c923a 	slli	r6,r5,8
   2aee0:	027fbff4 	movhi	r9,65279
   2aee4:	02202074 	movhi	r8,32897
   2aee8:	314ab03a 	or	r5,r6,r5
   2aeec:	280c943a 	slli	r6,r5,16
   2aef0:	4a7fbfc4 	addi	r9,r9,-257
   2aef4:	42202004 	addi	r8,r8,-32640
   2aef8:	314cb03a 	or	r6,r6,r5
   2aefc:	20c00017 	ldw	r3,0(r4)
   2af00:	30c6f03a 	xor	r3,r6,r3
   2af04:	1a4b883a 	add	r5,r3,r9
   2af08:	00c6303a 	nor	r3,zero,r3
   2af0c:	28c6703a 	and	r3,r5,r3
   2af10:	1a06703a 	and	r3,r3,r8
   2af14:	183fe71e 	bne	r3,zero,2aeb4 <memchr+0x54>
   2af18:	10bfff04 	addi	r2,r2,-4
   2af1c:	10c00128 	cmpgeui	r3,r2,4
   2af20:	21000104 	addi	r4,r4,4
   2af24:	183ff51e 	bne	r3,zero,2aefc <memchr+0x9c>
   2af28:	003fe106 	br	2aeb0 <memchr+0x50>
   2af2c:	f800283a 	ret

0002af30 <memcpy>:
   2af30:	30c00430 	cmpltui	r3,r6,16
   2af34:	2005883a 	mov	r2,r4
   2af38:	18002d1e 	bne	r3,zero,2aff0 <memcpy+0xc0>
   2af3c:	2906b03a 	or	r3,r5,r4
   2af40:	18c000cc 	andi	r3,r3,3
   2af44:	1800351e 	bne	r3,zero,2b01c <memcpy+0xec>
   2af48:	32fffc04 	addi	r11,r6,-16
   2af4c:	5816d13a 	srli	r11,r11,4
   2af50:	280f883a 	mov	r7,r5
   2af54:	2007883a 	mov	r3,r4
   2af58:	5ac00044 	addi	r11,r11,1
   2af5c:	5816913a 	slli	r11,r11,4
   2af60:	22d5883a 	add	r10,r4,r11
   2af64:	39000117 	ldw	r4,4(r7)
   2af68:	3a400017 	ldw	r9,0(r7)
   2af6c:	3a000217 	ldw	r8,8(r7)
   2af70:	19000115 	stw	r4,4(r3)
   2af74:	39000317 	ldw	r4,12(r7)
   2af78:	1a400015 	stw	r9,0(r3)
   2af7c:	1a000215 	stw	r8,8(r3)
   2af80:	19000315 	stw	r4,12(r3)
   2af84:	18c00404 	addi	r3,r3,16
   2af88:	39c00404 	addi	r7,r7,16
   2af8c:	50fff51e 	bne	r10,r3,2af64 <memcpy+0x34>
   2af90:	3100030c 	andi	r4,r6,12
   2af94:	2acb883a 	add	r5,r5,r11
   2af98:	320003cc 	andi	r8,r6,15
   2af9c:	20002226 	beq	r4,zero,2b028 <memcpy+0xf8>
   2afa0:	280f883a 	mov	r7,r5
   2afa4:	1813883a 	mov	r9,r3
   2afa8:	39c00104 	addi	r7,r7,4
   2afac:	3abfff17 	ldw	r10,-4(r7)
   2afb0:	41c9c83a 	sub	r4,r8,r7
   2afb4:	2909883a 	add	r4,r5,r4
   2afb8:	4a800015 	stw	r10,0(r9)
   2afbc:	21000128 	cmpgeui	r4,r4,4
   2afc0:	4a400104 	addi	r9,r9,4
   2afc4:	203ff81e 	bne	r4,zero,2afa8 <memcpy+0x78>
   2afc8:	413fff04 	addi	r4,r8,-4
   2afcc:	2008d0ba 	srli	r4,r4,2
   2afd0:	318000cc 	andi	r6,r6,3
   2afd4:	31ffffc4 	addi	r7,r6,-1
   2afd8:	21000044 	addi	r4,r4,1
   2afdc:	200890ba 	slli	r4,r4,2
   2afe0:	1907883a 	add	r3,r3,r4
   2afe4:	290b883a 	add	r5,r5,r4
   2afe8:	3000041e 	bne	r6,zero,2affc <memcpy+0xcc>
   2afec:	f800283a 	ret
   2aff0:	2007883a 	mov	r3,r4
   2aff4:	31ffffc4 	addi	r7,r6,-1
   2aff8:	303ffc26 	beq	r6,zero,2afec <memcpy+0xbc>
   2affc:	39c00044 	addi	r7,r7,1
   2b000:	19cf883a 	add	r7,r3,r7
   2b004:	29800003 	ldbu	r6,0(r5)
   2b008:	18c00044 	addi	r3,r3,1
   2b00c:	29400044 	addi	r5,r5,1
   2b010:	19bfffc5 	stb	r6,-1(r3)
   2b014:	38fffb1e 	bne	r7,r3,2b004 <memcpy+0xd4>
   2b018:	f800283a 	ret
   2b01c:	31ffffc4 	addi	r7,r6,-1
   2b020:	2007883a 	mov	r3,r4
   2b024:	003ff506 	br	2affc <memcpy+0xcc>
   2b028:	400d883a 	mov	r6,r8
   2b02c:	003ff106 	br	2aff4 <memcpy+0xc4>

0002b030 <memmove>:
   2b030:	2005883a 	mov	r2,r4
   2b034:	29000a2e 	bgeu	r5,r4,2b060 <memmove+0x30>
   2b038:	2989883a 	add	r4,r5,r6
   2b03c:	1100082e 	bgeu	r2,r4,2b060 <memmove+0x30>
   2b040:	1187883a 	add	r3,r2,r6
   2b044:	30003e26 	beq	r6,zero,2b140 <memmove+0x110>
   2b048:	217fffc3 	ldbu	r5,-1(r4)
   2b04c:	18ffffc4 	addi	r3,r3,-1
   2b050:	213fffc4 	addi	r4,r4,-1
   2b054:	19400005 	stb	r5,0(r3)
   2b058:	10fffb1e 	bne	r2,r3,2b048 <memmove+0x18>
   2b05c:	f800283a 	ret
   2b060:	30c00430 	cmpltui	r3,r6,16
   2b064:	18000b26 	beq	r3,zero,2b094 <memmove+0x64>
   2b068:	1007883a 	mov	r3,r2
   2b06c:	31ffffc4 	addi	r7,r6,-1
   2b070:	30003726 	beq	r6,zero,2b150 <memmove+0x120>
   2b074:	39c00044 	addi	r7,r7,1
   2b078:	29cf883a 	add	r7,r5,r7
   2b07c:	29800003 	ldbu	r6,0(r5)
   2b080:	29400044 	addi	r5,r5,1
   2b084:	18c00044 	addi	r3,r3,1
   2b088:	19bfffc5 	stb	r6,-1(r3)
   2b08c:	29fffb1e 	bne	r5,r7,2b07c <memmove+0x4c>
   2b090:	f800283a 	ret
   2b094:	2886b03a 	or	r3,r5,r2
   2b098:	18c000cc 	andi	r3,r3,3
   2b09c:	1800291e 	bne	r3,zero,2b144 <memmove+0x114>
   2b0a0:	327ffc04 	addi	r9,r6,-16
   2b0a4:	4812d13a 	srli	r9,r9,4
   2b0a8:	280f883a 	mov	r7,r5
   2b0ac:	1007883a 	mov	r3,r2
   2b0b0:	4a400044 	addi	r9,r9,1
   2b0b4:	4812913a 	slli	r9,r9,4
   2b0b8:	1251883a 	add	r8,r2,r9
   2b0bc:	39000017 	ldw	r4,0(r7)
   2b0c0:	39c00404 	addi	r7,r7,16
   2b0c4:	18c00404 	addi	r3,r3,16
   2b0c8:	193ffc15 	stw	r4,-16(r3)
   2b0cc:	393ffd17 	ldw	r4,-12(r7)
   2b0d0:	193ffd15 	stw	r4,-12(r3)
   2b0d4:	393ffe17 	ldw	r4,-8(r7)
   2b0d8:	193ffe15 	stw	r4,-8(r3)
   2b0dc:	393fff17 	ldw	r4,-4(r7)
   2b0e0:	193fff15 	stw	r4,-4(r3)
   2b0e4:	40fff51e 	bne	r8,r3,2b0bc <memmove+0x8c>
   2b0e8:	3100030c 	andi	r4,r6,12
   2b0ec:	2a4b883a 	add	r5,r5,r9
   2b0f0:	320003cc 	andi	r8,r6,15
   2b0f4:	20001726 	beq	r4,zero,2b154 <memmove+0x124>
   2b0f8:	2813883a 	mov	r9,r5
   2b0fc:	180f883a 	mov	r7,r3
   2b100:	4a800017 	ldw	r10,0(r9)
   2b104:	39c00104 	addi	r7,r7,4
   2b108:	41c9c83a 	sub	r4,r8,r7
   2b10c:	1909883a 	add	r4,r3,r4
   2b110:	21000128 	cmpgeui	r4,r4,4
   2b114:	3abfff15 	stw	r10,-4(r7)
   2b118:	4a400104 	addi	r9,r9,4
   2b11c:	203ff81e 	bne	r4,zero,2b100 <memmove+0xd0>
   2b120:	413fff04 	addi	r4,r8,-4
   2b124:	2008d0ba 	srli	r4,r4,2
   2b128:	318000cc 	andi	r6,r6,3
   2b12c:	21000044 	addi	r4,r4,1
   2b130:	200890ba 	slli	r4,r4,2
   2b134:	1907883a 	add	r3,r3,r4
   2b138:	290b883a 	add	r5,r5,r4
   2b13c:	003fcb06 	br	2b06c <memmove+0x3c>
   2b140:	f800283a 	ret
   2b144:	31ffffc4 	addi	r7,r6,-1
   2b148:	1007883a 	mov	r3,r2
   2b14c:	003fc906 	br	2b074 <memmove+0x44>
   2b150:	f800283a 	ret
   2b154:	400d883a 	mov	r6,r8
   2b158:	003fc406 	br	2b06c <memmove+0x3c>

0002b15c <_Balloc>:
   2b15c:	20801317 	ldw	r2,76(r4)
   2b160:	defffc04 	addi	sp,sp,-16
   2b164:	dc400115 	stw	r17,4(sp)
   2b168:	dc000015 	stw	r16,0(sp)
   2b16c:	dfc00315 	stw	ra,12(sp)
   2b170:	dc800215 	stw	r18,8(sp)
   2b174:	2021883a 	mov	r16,r4
   2b178:	2823883a 	mov	r17,r5
   2b17c:	10000e26 	beq	r2,zero,2b1b8 <_Balloc+0x5c>
   2b180:	880690ba 	slli	r3,r17,2
   2b184:	10c7883a 	add	r3,r2,r3
   2b188:	18800017 	ldw	r2,0(r3)
   2b18c:	10001126 	beq	r2,zero,2b1d4 <_Balloc+0x78>
   2b190:	11000017 	ldw	r4,0(r2)
   2b194:	19000015 	stw	r4,0(r3)
   2b198:	10000415 	stw	zero,16(r2)
   2b19c:	10000315 	stw	zero,12(r2)
   2b1a0:	dfc00317 	ldw	ra,12(sp)
   2b1a4:	dc800217 	ldw	r18,8(sp)
   2b1a8:	dc400117 	ldw	r17,4(sp)
   2b1ac:	dc000017 	ldw	r16,0(sp)
   2b1b0:	dec00404 	addi	sp,sp,16
   2b1b4:	f800283a 	ret
   2b1b8:	01800844 	movi	r6,33
   2b1bc:	01400104 	movi	r5,4
   2b1c0:	002e3b40 	call	2e3b4 <_calloc_r>
   2b1c4:	80801315 	stw	r2,76(r16)
   2b1c8:	103fed1e 	bne	r2,zero,2b180 <_Balloc+0x24>
   2b1cc:	0005883a 	mov	r2,zero
   2b1d0:	003ff306 	br	2b1a0 <_Balloc+0x44>
   2b1d4:	04800044 	movi	r18,1
   2b1d8:	9464983a 	sll	r18,r18,r17
   2b1dc:	01400044 	movi	r5,1
   2b1e0:	8009883a 	mov	r4,r16
   2b1e4:	91800144 	addi	r6,r18,5
   2b1e8:	300c90ba 	slli	r6,r6,2
   2b1ec:	002e3b40 	call	2e3b4 <_calloc_r>
   2b1f0:	103ff626 	beq	r2,zero,2b1cc <_Balloc+0x70>
   2b1f4:	14400115 	stw	r17,4(r2)
   2b1f8:	14800215 	stw	r18,8(r2)
   2b1fc:	003fe606 	br	2b198 <_Balloc+0x3c>

0002b200 <_Bfree>:
   2b200:	28000726 	beq	r5,zero,2b220 <_Bfree+0x20>
   2b204:	28c00117 	ldw	r3,4(r5)
   2b208:	20801317 	ldw	r2,76(r4)
   2b20c:	180690ba 	slli	r3,r3,2
   2b210:	10c5883a 	add	r2,r2,r3
   2b214:	10c00017 	ldw	r3,0(r2)
   2b218:	28c00015 	stw	r3,0(r5)
   2b21c:	11400015 	stw	r5,0(r2)
   2b220:	f800283a 	ret

0002b224 <__multadd>:
   2b224:	defff704 	addi	sp,sp,-36
   2b228:	dc800215 	stw	r18,8(sp)
   2b22c:	2c800417 	ldw	r18,16(r5)
   2b230:	ddc00715 	stw	r23,28(sp)
   2b234:	dd800615 	stw	r22,24(sp)
   2b238:	dd400515 	stw	r21,20(sp)
   2b23c:	dd000415 	stw	r20,16(sp)
   2b240:	dcc00315 	stw	r19,12(sp)
   2b244:	dc400115 	stw	r17,4(sp)
   2b248:	dfc00815 	stw	ra,32(sp)
   2b24c:	dc000015 	stw	r16,0(sp)
   2b250:	2827883a 	mov	r19,r5
   2b254:	2029883a 	mov	r20,r4
   2b258:	302b883a 	mov	r21,r6
   2b25c:	3823883a 	mov	r17,r7
   2b260:	2d800504 	addi	r22,r5,20
   2b264:	002f883a 	mov	r23,zero
   2b268:	b4000017 	ldw	r16,0(r22)
   2b26c:	a80b883a 	mov	r5,r21
   2b270:	b5800104 	addi	r22,r22,4
   2b274:	813fffcc 	andi	r4,r16,65535
   2b278:	0022c7c0 	call	22c7c <__mulsi3>
   2b27c:	8008d43a 	srli	r4,r16,16
   2b280:	a80b883a 	mov	r5,r21
   2b284:	1461883a 	add	r16,r2,r17
   2b288:	0022c7c0 	call	22c7c <__mulsi3>
   2b28c:	800ed43a 	srli	r7,r16,16
   2b290:	843fffcc 	andi	r16,r16,65535
   2b294:	bdc00044 	addi	r23,r23,1
   2b298:	11c5883a 	add	r2,r2,r7
   2b29c:	1006943a 	slli	r3,r2,16
   2b2a0:	1022d43a 	srli	r17,r2,16
   2b2a4:	1c21883a 	add	r16,r3,r16
   2b2a8:	b43fff15 	stw	r16,-4(r22)
   2b2ac:	bcbfee16 	blt	r23,r18,2b268 <__multadd+0x44>
   2b2b0:	88000826 	beq	r17,zero,2b2d4 <__multadd+0xb0>
   2b2b4:	98800217 	ldw	r2,8(r19)
   2b2b8:	9080120e 	bge	r18,r2,2b304 <__multadd+0xe0>
   2b2bc:	90800144 	addi	r2,r18,5
   2b2c0:	100490ba 	slli	r2,r2,2
   2b2c4:	94800044 	addi	r18,r18,1
   2b2c8:	9885883a 	add	r2,r19,r2
   2b2cc:	14400015 	stw	r17,0(r2)
   2b2d0:	9c800415 	stw	r18,16(r19)
   2b2d4:	9805883a 	mov	r2,r19
   2b2d8:	dfc00817 	ldw	ra,32(sp)
   2b2dc:	ddc00717 	ldw	r23,28(sp)
   2b2e0:	dd800617 	ldw	r22,24(sp)
   2b2e4:	dd400517 	ldw	r21,20(sp)
   2b2e8:	dd000417 	ldw	r20,16(sp)
   2b2ec:	dcc00317 	ldw	r19,12(sp)
   2b2f0:	dc800217 	ldw	r18,8(sp)
   2b2f4:	dc400117 	ldw	r17,4(sp)
   2b2f8:	dc000017 	ldw	r16,0(sp)
   2b2fc:	dec00904 	addi	sp,sp,36
   2b300:	f800283a 	ret
   2b304:	99400117 	ldw	r5,4(r19)
   2b308:	a009883a 	mov	r4,r20
   2b30c:	29400044 	addi	r5,r5,1
   2b310:	002b15c0 	call	2b15c <_Balloc>
   2b314:	1021883a 	mov	r16,r2
   2b318:	10001226 	beq	r2,zero,2b364 <__multadd+0x140>
   2b31c:	99800417 	ldw	r6,16(r19)
   2b320:	99400304 	addi	r5,r19,12
   2b324:	11000304 	addi	r4,r2,12
   2b328:	31800084 	addi	r6,r6,2
   2b32c:	300c90ba 	slli	r6,r6,2
   2b330:	002af300 	call	2af30 <memcpy>
   2b334:	98000926 	beq	r19,zero,2b35c <__multadd+0x138>
   2b338:	98c00117 	ldw	r3,4(r19)
   2b33c:	a0801317 	ldw	r2,76(r20)
   2b340:	180690ba 	slli	r3,r3,2
   2b344:	10c5883a 	add	r2,r2,r3
   2b348:	10c00017 	ldw	r3,0(r2)
   2b34c:	98c00015 	stw	r3,0(r19)
   2b350:	14c00015 	stw	r19,0(r2)
   2b354:	8027883a 	mov	r19,r16
   2b358:	003fd806 	br	2b2bc <__multadd+0x98>
   2b35c:	8027883a 	mov	r19,r16
   2b360:	003fd606 	br	2b2bc <__multadd+0x98>
   2b364:	01c000f4 	movhi	r7,3
   2b368:	010000f4 	movhi	r4,3
   2b36c:	39cc8604 	addi	r7,r7,12824
   2b370:	000d883a 	mov	r6,zero
   2b374:	01402d44 	movi	r5,181
   2b378:	210c9b04 	addi	r4,r4,12908
   2b37c:	002e33c0 	call	2e33c <__assert_func>

0002b380 <__s2b>:
   2b380:	defff904 	addi	sp,sp,-28
   2b384:	dc800215 	stw	r18,8(sp)
   2b388:	dc000015 	stw	r16,0(sp)
   2b38c:	2025883a 	mov	r18,r4
   2b390:	2821883a 	mov	r16,r5
   2b394:	39000204 	addi	r4,r7,8
   2b398:	01400244 	movi	r5,9
   2b39c:	dcc00315 	stw	r19,12(sp)
   2b3a0:	dc400115 	stw	r17,4(sp)
   2b3a4:	dfc00615 	stw	ra,24(sp)
   2b3a8:	3823883a 	mov	r17,r7
   2b3ac:	dd400515 	stw	r21,20(sp)
   2b3b0:	dd000415 	stw	r20,16(sp)
   2b3b4:	3027883a 	mov	r19,r6
   2b3b8:	0022ac80 	call	22ac8 <__divsi3>
   2b3bc:	88c00290 	cmplti	r3,r17,10
   2b3c0:	1800341e 	bne	r3,zero,2b494 <__s2b+0x114>
   2b3c4:	00c00044 	movi	r3,1
   2b3c8:	000b883a 	mov	r5,zero
   2b3cc:	18c7883a 	add	r3,r3,r3
   2b3d0:	29400044 	addi	r5,r5,1
   2b3d4:	18bffd16 	blt	r3,r2,2b3cc <__s2b+0x4c>
   2b3d8:	9009883a 	mov	r4,r18
   2b3dc:	002b15c0 	call	2b15c <_Balloc>
   2b3e0:	100b883a 	mov	r5,r2
   2b3e4:	10002d26 	beq	r2,zero,2b49c <__s2b+0x11c>
   2b3e8:	d8800717 	ldw	r2,28(sp)
   2b3ec:	28800515 	stw	r2,20(r5)
   2b3f0:	00800044 	movi	r2,1
   2b3f4:	28800415 	stw	r2,16(r5)
   2b3f8:	98800290 	cmplti	r2,r19,10
   2b3fc:	1000221e 	bne	r2,zero,2b488 <__s2b+0x108>
   2b400:	85400244 	addi	r21,r16,9
   2b404:	a829883a 	mov	r20,r21
   2b408:	84e1883a 	add	r16,r16,r19
   2b40c:	a1c00007 	ldb	r7,0(r20)
   2b410:	01800284 	movi	r6,10
   2b414:	9009883a 	mov	r4,r18
   2b418:	39fff404 	addi	r7,r7,-48
   2b41c:	002b2240 	call	2b224 <__multadd>
   2b420:	a5000044 	addi	r20,r20,1
   2b424:	100b883a 	mov	r5,r2
   2b428:	a43ff81e 	bne	r20,r16,2b40c <__s2b+0x8c>
   2b42c:	9c3ffe04 	addi	r16,r19,-8
   2b430:	ac21883a 	add	r16,r21,r16
   2b434:	9c400a0e 	bge	r19,r17,2b460 <__s2b+0xe0>
   2b438:	8ce3c83a 	sub	r17,r17,r19
   2b43c:	8463883a 	add	r17,r16,r17
   2b440:	81c00007 	ldb	r7,0(r16)
   2b444:	01800284 	movi	r6,10
   2b448:	9009883a 	mov	r4,r18
   2b44c:	39fff404 	addi	r7,r7,-48
   2b450:	002b2240 	call	2b224 <__multadd>
   2b454:	84000044 	addi	r16,r16,1
   2b458:	100b883a 	mov	r5,r2
   2b45c:	8c3ff81e 	bne	r17,r16,2b440 <__s2b+0xc0>
   2b460:	2805883a 	mov	r2,r5
   2b464:	dfc00617 	ldw	ra,24(sp)
   2b468:	dd400517 	ldw	r21,20(sp)
   2b46c:	dd000417 	ldw	r20,16(sp)
   2b470:	dcc00317 	ldw	r19,12(sp)
   2b474:	dc800217 	ldw	r18,8(sp)
   2b478:	dc400117 	ldw	r17,4(sp)
   2b47c:	dc000017 	ldw	r16,0(sp)
   2b480:	dec00704 	addi	sp,sp,28
   2b484:	f800283a 	ret
   2b488:	84000284 	addi	r16,r16,10
   2b48c:	04c00244 	movi	r19,9
   2b490:	003fe806 	br	2b434 <__s2b+0xb4>
   2b494:	000b883a 	mov	r5,zero
   2b498:	003fcf06 	br	2b3d8 <__s2b+0x58>
   2b49c:	01c000f4 	movhi	r7,3
   2b4a0:	010000f4 	movhi	r4,3
   2b4a4:	39cc8604 	addi	r7,r7,12824
   2b4a8:	000d883a 	mov	r6,zero
   2b4ac:	01403384 	movi	r5,206
   2b4b0:	210c9b04 	addi	r4,r4,12908
   2b4b4:	002e33c0 	call	2e33c <__assert_func>

0002b4b8 <__hi0bits>:
   2b4b8:	20bfffec 	andhi	r2,r4,65535
   2b4bc:	1000131e 	bne	r2,zero,2b50c <__hi0bits+0x54>
   2b4c0:	2008943a 	slli	r4,r4,16
   2b4c4:	00800404 	movi	r2,16
   2b4c8:	20ffc02c 	andhi	r3,r4,65280
   2b4cc:	1800021e 	bne	r3,zero,2b4d8 <__hi0bits+0x20>
   2b4d0:	2008923a 	slli	r4,r4,8
   2b4d4:	10800204 	addi	r2,r2,8
   2b4d8:	20fc002c 	andhi	r3,r4,61440
   2b4dc:	1800021e 	bne	r3,zero,2b4e8 <__hi0bits+0x30>
   2b4e0:	2008913a 	slli	r4,r4,4
   2b4e4:	10800104 	addi	r2,r2,4
   2b4e8:	20f0002c 	andhi	r3,r4,49152
   2b4ec:	1800021e 	bne	r3,zero,2b4f8 <__hi0bits+0x40>
   2b4f0:	200890ba 	slli	r4,r4,2
   2b4f4:	10800084 	addi	r2,r2,2
   2b4f8:	20000316 	blt	r4,zero,2b508 <__hi0bits+0x50>
   2b4fc:	2110002c 	andhi	r4,r4,16384
   2b500:	10800044 	addi	r2,r2,1
   2b504:	20000326 	beq	r4,zero,2b514 <__hi0bits+0x5c>
   2b508:	f800283a 	ret
   2b50c:	0005883a 	mov	r2,zero
   2b510:	003fed06 	br	2b4c8 <__hi0bits+0x10>
   2b514:	00800804 	movi	r2,32
   2b518:	f800283a 	ret

0002b51c <__lo0bits>:
   2b51c:	20c00017 	ldw	r3,0(r4)
   2b520:	188001cc 	andi	r2,r3,7
   2b524:	10000826 	beq	r2,zero,2b548 <__lo0bits+0x2c>
   2b528:	1880004c 	andi	r2,r3,1
   2b52c:	10001f1e 	bne	r2,zero,2b5ac <__lo0bits+0x90>
   2b530:	1880008c 	andi	r2,r3,2
   2b534:	10002126 	beq	r2,zero,2b5bc <__lo0bits+0xa0>
   2b538:	1806d07a 	srli	r3,r3,1
   2b53c:	00800044 	movi	r2,1
   2b540:	20c00015 	stw	r3,0(r4)
   2b544:	f800283a 	ret
   2b548:	18bfffcc 	andi	r2,r3,65535
   2b54c:	10001426 	beq	r2,zero,2b5a0 <__lo0bits+0x84>
   2b550:	0005883a 	mov	r2,zero
   2b554:	19403fcc 	andi	r5,r3,255
   2b558:	2800021e 	bne	r5,zero,2b564 <__lo0bits+0x48>
   2b55c:	1806d23a 	srli	r3,r3,8
   2b560:	10800204 	addi	r2,r2,8
   2b564:	194003cc 	andi	r5,r3,15
   2b568:	2800021e 	bne	r5,zero,2b574 <__lo0bits+0x58>
   2b56c:	1806d13a 	srli	r3,r3,4
   2b570:	10800104 	addi	r2,r2,4
   2b574:	194000cc 	andi	r5,r3,3
   2b578:	2800021e 	bne	r5,zero,2b584 <__lo0bits+0x68>
   2b57c:	1806d0ba 	srli	r3,r3,2
   2b580:	10800084 	addi	r2,r2,2
   2b584:	1940004c 	andi	r5,r3,1
   2b588:	2800031e 	bne	r5,zero,2b598 <__lo0bits+0x7c>
   2b58c:	1806d07a 	srli	r3,r3,1
   2b590:	10800044 	addi	r2,r2,1
   2b594:	18000726 	beq	r3,zero,2b5b4 <__lo0bits+0x98>
   2b598:	20c00015 	stw	r3,0(r4)
   2b59c:	f800283a 	ret
   2b5a0:	1806d43a 	srli	r3,r3,16
   2b5a4:	00800404 	movi	r2,16
   2b5a8:	003fea06 	br	2b554 <__lo0bits+0x38>
   2b5ac:	0005883a 	mov	r2,zero
   2b5b0:	f800283a 	ret
   2b5b4:	00800804 	movi	r2,32
   2b5b8:	f800283a 	ret
   2b5bc:	1806d0ba 	srli	r3,r3,2
   2b5c0:	00800084 	movi	r2,2
   2b5c4:	20c00015 	stw	r3,0(r4)
   2b5c8:	f800283a 	ret

0002b5cc <__i2b>:
   2b5cc:	20c01317 	ldw	r3,76(r4)
   2b5d0:	defffd04 	addi	sp,sp,-12
   2b5d4:	dc400115 	stw	r17,4(sp)
   2b5d8:	dc000015 	stw	r16,0(sp)
   2b5dc:	dfc00215 	stw	ra,8(sp)
   2b5e0:	2021883a 	mov	r16,r4
   2b5e4:	2823883a 	mov	r17,r5
   2b5e8:	18000d26 	beq	r3,zero,2b620 <__i2b+0x54>
   2b5ec:	18800117 	ldw	r2,4(r3)
   2b5f0:	10001826 	beq	r2,zero,2b654 <__i2b+0x88>
   2b5f4:	11000017 	ldw	r4,0(r2)
   2b5f8:	19000115 	stw	r4,4(r3)
   2b5fc:	00c00044 	movi	r3,1
   2b600:	10000315 	stw	zero,12(r2)
   2b604:	14400515 	stw	r17,20(r2)
   2b608:	10c00415 	stw	r3,16(r2)
   2b60c:	dfc00217 	ldw	ra,8(sp)
   2b610:	dc400117 	ldw	r17,4(sp)
   2b614:	dc000017 	ldw	r16,0(sp)
   2b618:	dec00304 	addi	sp,sp,12
   2b61c:	f800283a 	ret
   2b620:	01800844 	movi	r6,33
   2b624:	01400104 	movi	r5,4
   2b628:	002e3b40 	call	2e3b4 <_calloc_r>
   2b62c:	80801315 	stw	r2,76(r16)
   2b630:	1007883a 	mov	r3,r2
   2b634:	103fed1e 	bne	r2,zero,2b5ec <__i2b+0x20>
   2b638:	01c000f4 	movhi	r7,3
   2b63c:	010000f4 	movhi	r4,3
   2b640:	39cc8604 	addi	r7,r7,12824
   2b644:	000d883a 	mov	r6,zero
   2b648:	01405004 	movi	r5,320
   2b64c:	210c9b04 	addi	r4,r4,12908
   2b650:	002e33c0 	call	2e33c <__assert_func>
   2b654:	01800704 	movi	r6,28
   2b658:	01400044 	movi	r5,1
   2b65c:	8009883a 	mov	r4,r16
   2b660:	002e3b40 	call	2e3b4 <_calloc_r>
   2b664:	103ff426 	beq	r2,zero,2b638 <__i2b+0x6c>
   2b668:	00c00044 	movi	r3,1
   2b66c:	10c00115 	stw	r3,4(r2)
   2b670:	00c00084 	movi	r3,2
   2b674:	10c00215 	stw	r3,8(r2)
   2b678:	003fe006 	br	2b5fc <__i2b+0x30>

0002b67c <__multiply>:
   2b67c:	defff004 	addi	sp,sp,-64
   2b680:	dd800c15 	stw	r22,48(sp)
   2b684:	dc400715 	stw	r17,28(sp)
   2b688:	2d800417 	ldw	r22,16(r5)
   2b68c:	34400417 	ldw	r17,16(r6)
   2b690:	dc800815 	stw	r18,32(sp)
   2b694:	dc000615 	stw	r16,24(sp)
   2b698:	dfc00f15 	stw	ra,60(sp)
   2b69c:	df000e15 	stw	fp,56(sp)
   2b6a0:	ddc00d15 	stw	r23,52(sp)
   2b6a4:	dd400b15 	stw	r21,44(sp)
   2b6a8:	dd000a15 	stw	r20,40(sp)
   2b6ac:	dcc00915 	stw	r19,36(sp)
   2b6b0:	2825883a 	mov	r18,r5
   2b6b4:	3021883a 	mov	r16,r6
   2b6b8:	b4400516 	blt	r22,r17,2b6d0 <__multiply+0x54>
   2b6bc:	8807883a 	mov	r3,r17
   2b6c0:	2821883a 	mov	r16,r5
   2b6c4:	b023883a 	mov	r17,r22
   2b6c8:	3025883a 	mov	r18,r6
   2b6cc:	182d883a 	mov	r22,r3
   2b6d0:	80800217 	ldw	r2,8(r16)
   2b6d4:	8d87883a 	add	r3,r17,r22
   2b6d8:	d8c00015 	stw	r3,0(sp)
   2b6dc:	81400117 	ldw	r5,4(r16)
   2b6e0:	10c0010e 	bge	r2,r3,2b6e8 <__multiply+0x6c>
   2b6e4:	29400044 	addi	r5,r5,1
   2b6e8:	002b15c0 	call	2b15c <_Balloc>
   2b6ec:	d8800515 	stw	r2,20(sp)
   2b6f0:	10008c26 	beq	r2,zero,2b924 <__multiply+0x2a8>
   2b6f4:	d8800017 	ldw	r2,0(sp)
   2b6f8:	102690ba 	slli	r19,r2,2
   2b6fc:	d8800517 	ldw	r2,20(sp)
   2b700:	15000504 	addi	r20,r2,20
   2b704:	a4c5883a 	add	r2,r20,r19
   2b708:	d8800115 	stw	r2,4(sp)
   2b70c:	a0800a2e 	bgeu	r20,r2,2b738 <__multiply+0xbc>
   2b710:	d8800117 	ldw	r2,4(sp)
   2b714:	d8c00517 	ldw	r3,20(sp)
   2b718:	000b883a 	mov	r5,zero
   2b71c:	a009883a 	mov	r4,r20
   2b720:	10cdc83a 	sub	r6,r2,r3
   2b724:	31bffac4 	addi	r6,r6,-21
   2b728:	300cd0ba 	srli	r6,r6,2
   2b72c:	31800044 	addi	r6,r6,1
   2b730:	300c90ba 	slli	r6,r6,2
   2b734:	00252f00 	call	252f0 <memset>
   2b738:	b02c90ba 	slli	r22,r22,2
   2b73c:	882290ba 	slli	r17,r17,2
   2b740:	94800504 	addi	r18,r18,20
   2b744:	80800504 	addi	r2,r16,20
   2b748:	9587883a 	add	r3,r18,r22
   2b74c:	d8800315 	stw	r2,12(sp)
   2b750:	d8c00215 	stw	r3,8(sp)
   2b754:	1463883a 	add	r17,r2,r17
   2b758:	90c0542e 	bgeu	r18,r3,2b8ac <__multiply+0x230>
   2b75c:	80800544 	addi	r2,r16,21
   2b760:	88806d36 	bltu	r17,r2,2b918 <__multiply+0x29c>
   2b764:	8c05c83a 	sub	r2,r17,r16
   2b768:	10bffac4 	addi	r2,r2,-21
   2b76c:	1004d0ba 	srli	r2,r2,2
   2b770:	10800044 	addi	r2,r2,1
   2b774:	100490ba 	slli	r2,r2,2
   2b778:	d8800415 	stw	r2,16(sp)
   2b77c:	00000606 	br	2b798 <__multiply+0x11c>
   2b780:	102ad43a 	srli	r21,r2,16
   2b784:	a800271e 	bne	r21,zero,2b824 <__multiply+0x1a8>
   2b788:	d8800217 	ldw	r2,8(sp)
   2b78c:	94800104 	addi	r18,r18,4
   2b790:	a5000104 	addi	r20,r20,4
   2b794:	9080452e 	bgeu	r18,r2,2b8ac <__multiply+0x230>
   2b798:	90800017 	ldw	r2,0(r18)
   2b79c:	15ffffcc 	andi	r23,r2,65535
   2b7a0:	b83ff726 	beq	r23,zero,2b780 <__multiply+0x104>
   2b7a4:	dd400317 	ldw	r21,12(sp)
   2b7a8:	a02d883a 	mov	r22,r20
   2b7ac:	0027883a 	mov	r19,zero
   2b7b0:	af000017 	ldw	fp,0(r21)
   2b7b4:	b4000017 	ldw	r16,0(r22)
   2b7b8:	b80b883a 	mov	r5,r23
   2b7bc:	e13fffcc 	andi	r4,fp,65535
   2b7c0:	0022c7c0 	call	22c7c <__mulsi3>
   2b7c4:	e008d43a 	srli	r4,fp,16
   2b7c8:	823fffcc 	andi	r8,r16,65535
   2b7cc:	1205883a 	add	r2,r2,r8
   2b7d0:	b80b883a 	mov	r5,r23
   2b7d4:	14e7883a 	add	r19,r2,r19
   2b7d8:	8020d43a 	srli	r16,r16,16
   2b7dc:	0022c7c0 	call	22c7c <__mulsi3>
   2b7e0:	9808d43a 	srli	r4,r19,16
   2b7e4:	1405883a 	add	r2,r2,r16
   2b7e8:	98ffffcc 	andi	r3,r19,65535
   2b7ec:	1105883a 	add	r2,r2,r4
   2b7f0:	1008943a 	slli	r4,r2,16
   2b7f4:	b5800104 	addi	r22,r22,4
   2b7f8:	ad400104 	addi	r21,r21,4
   2b7fc:	20c6b03a 	or	r3,r4,r3
   2b800:	b0ffff15 	stw	r3,-4(r22)
   2b804:	1026d43a 	srli	r19,r2,16
   2b808:	ac7fe936 	bltu	r21,r17,2b7b0 <__multiply+0x134>
   2b80c:	d8800417 	ldw	r2,16(sp)
   2b810:	a085883a 	add	r2,r20,r2
   2b814:	14c00015 	stw	r19,0(r2)
   2b818:	90800017 	ldw	r2,0(r18)
   2b81c:	102ad43a 	srli	r21,r2,16
   2b820:	a83fd926 	beq	r21,zero,2b788 <__multiply+0x10c>
   2b824:	a5c00017 	ldw	r23,0(r20)
   2b828:	dd800317 	ldw	r22,12(sp)
   2b82c:	a027883a 	mov	r19,r20
   2b830:	b821883a 	mov	r16,r23
   2b834:	0039883a 	mov	fp,zero
   2b838:	b100000b 	ldhu	r4,0(r22)
   2b83c:	a80b883a 	mov	r5,r21
   2b840:	9cc00104 	addi	r19,r19,4
   2b844:	0022c7c0 	call	22c7c <__mulsi3>
   2b848:	800cd43a 	srli	r6,r16,16
   2b84c:	b8ffffcc 	andi	r3,r23,65535
   2b850:	b5800104 	addi	r22,r22,4
   2b854:	118d883a 	add	r6,r2,r6
   2b858:	3739883a 	add	fp,r6,fp
   2b85c:	e004943a 	slli	r2,fp,16
   2b860:	9c000017 	ldw	r16,0(r19)
   2b864:	a80b883a 	mov	r5,r21
   2b868:	10c6b03a 	or	r3,r2,r3
   2b86c:	98ffff15 	stw	r3,-4(r19)
   2b870:	b13fff8b 	ldhu	r4,-2(r22)
   2b874:	0022c7c0 	call	22c7c <__mulsi3>
   2b878:	e00cd43a 	srli	r6,fp,16
   2b87c:	80ffffcc 	andi	r3,r16,65535
   2b880:	10c7883a 	add	r3,r2,r3
   2b884:	19af883a 	add	r23,r3,r6
   2b888:	b838d43a 	srli	fp,r23,16
   2b88c:	b47fea36 	bltu	r22,r17,2b838 <__multiply+0x1bc>
   2b890:	d8800417 	ldw	r2,16(sp)
   2b894:	94800104 	addi	r18,r18,4
   2b898:	a085883a 	add	r2,r20,r2
   2b89c:	15c00015 	stw	r23,0(r2)
   2b8a0:	d8800217 	ldw	r2,8(sp)
   2b8a4:	a5000104 	addi	r20,r20,4
   2b8a8:	90bfbb36 	bltu	r18,r2,2b798 <__multiply+0x11c>
   2b8ac:	d8800017 	ldw	r2,0(sp)
   2b8b0:	00800516 	blt	zero,r2,2b8c8 <__multiply+0x24c>
   2b8b4:	00000906 	br	2b8dc <__multiply+0x260>
   2b8b8:	d8800017 	ldw	r2,0(sp)
   2b8bc:	10bfffc4 	addi	r2,r2,-1
   2b8c0:	d8800015 	stw	r2,0(sp)
   2b8c4:	10000526 	beq	r2,zero,2b8dc <__multiply+0x260>
   2b8c8:	d8c00117 	ldw	r3,4(sp)
   2b8cc:	18bfff17 	ldw	r2,-4(r3)
   2b8d0:	18ffff04 	addi	r3,r3,-4
   2b8d4:	d8c00115 	stw	r3,4(sp)
   2b8d8:	103ff726 	beq	r2,zero,2b8b8 <__multiply+0x23c>
   2b8dc:	d8800517 	ldw	r2,20(sp)
   2b8e0:	d8c00017 	ldw	r3,0(sp)
   2b8e4:	10c00415 	stw	r3,16(r2)
   2b8e8:	dfc00f17 	ldw	ra,60(sp)
   2b8ec:	df000e17 	ldw	fp,56(sp)
   2b8f0:	ddc00d17 	ldw	r23,52(sp)
   2b8f4:	dd800c17 	ldw	r22,48(sp)
   2b8f8:	dd400b17 	ldw	r21,44(sp)
   2b8fc:	dd000a17 	ldw	r20,40(sp)
   2b900:	dcc00917 	ldw	r19,36(sp)
   2b904:	dc800817 	ldw	r18,32(sp)
   2b908:	dc400717 	ldw	r17,28(sp)
   2b90c:	dc000617 	ldw	r16,24(sp)
   2b910:	dec01004 	addi	sp,sp,64
   2b914:	f800283a 	ret
   2b918:	00800104 	movi	r2,4
   2b91c:	d8800415 	stw	r2,16(sp)
   2b920:	003f9d06 	br	2b798 <__multiply+0x11c>
   2b924:	01c000f4 	movhi	r7,3
   2b928:	010000f4 	movhi	r4,3
   2b92c:	39cc8604 	addi	r7,r7,12824
   2b930:	000d883a 	mov	r6,zero
   2b934:	01405744 	movi	r5,349
   2b938:	210c9b04 	addi	r4,r4,12908
   2b93c:	002e33c0 	call	2e33c <__assert_func>

0002b940 <__pow5mult>:
   2b940:	defffb04 	addi	sp,sp,-20
   2b944:	dcc00315 	stw	r19,12(sp)
   2b948:	dc000015 	stw	r16,0(sp)
   2b94c:	dfc00415 	stw	ra,16(sp)
   2b950:	dc800215 	stw	r18,8(sp)
   2b954:	dc400115 	stw	r17,4(sp)
   2b958:	308000cc 	andi	r2,r6,3
   2b95c:	3021883a 	mov	r16,r6
   2b960:	2027883a 	mov	r19,r4
   2b964:	10002d1e 	bne	r2,zero,2ba1c <__pow5mult+0xdc>
   2b968:	2825883a 	mov	r18,r5
   2b96c:	8021d0ba 	srai	r16,r16,2
   2b970:	80001926 	beq	r16,zero,2b9d8 <__pow5mult+0x98>
   2b974:	9c401217 	ldw	r17,72(r19)
   2b978:	8800061e 	bne	r17,zero,2b994 <__pow5mult+0x54>
   2b97c:	00002f06 	br	2ba3c <__pow5mult+0xfc>
   2b980:	8021d07a 	srai	r16,r16,1
   2b984:	80001426 	beq	r16,zero,2b9d8 <__pow5mult+0x98>
   2b988:	88800017 	ldw	r2,0(r17)
   2b98c:	10001a26 	beq	r2,zero,2b9f8 <__pow5mult+0xb8>
   2b990:	1023883a 	mov	r17,r2
   2b994:	8080004c 	andi	r2,r16,1
   2b998:	103ff926 	beq	r2,zero,2b980 <__pow5mult+0x40>
   2b99c:	880d883a 	mov	r6,r17
   2b9a0:	900b883a 	mov	r5,r18
   2b9a4:	9809883a 	mov	r4,r19
   2b9a8:	002b67c0 	call	2b67c <__multiply>
   2b9ac:	90001926 	beq	r18,zero,2ba14 <__pow5mult+0xd4>
   2b9b0:	91000117 	ldw	r4,4(r18)
   2b9b4:	98c01317 	ldw	r3,76(r19)
   2b9b8:	8021d07a 	srai	r16,r16,1
   2b9bc:	200890ba 	slli	r4,r4,2
   2b9c0:	1907883a 	add	r3,r3,r4
   2b9c4:	19000017 	ldw	r4,0(r3)
   2b9c8:	91000015 	stw	r4,0(r18)
   2b9cc:	1c800015 	stw	r18,0(r3)
   2b9d0:	1025883a 	mov	r18,r2
   2b9d4:	803fec1e 	bne	r16,zero,2b988 <__pow5mult+0x48>
   2b9d8:	9005883a 	mov	r2,r18
   2b9dc:	dfc00417 	ldw	ra,16(sp)
   2b9e0:	dcc00317 	ldw	r19,12(sp)
   2b9e4:	dc800217 	ldw	r18,8(sp)
   2b9e8:	dc400117 	ldw	r17,4(sp)
   2b9ec:	dc000017 	ldw	r16,0(sp)
   2b9f0:	dec00504 	addi	sp,sp,20
   2b9f4:	f800283a 	ret
   2b9f8:	880d883a 	mov	r6,r17
   2b9fc:	880b883a 	mov	r5,r17
   2ba00:	9809883a 	mov	r4,r19
   2ba04:	002b67c0 	call	2b67c <__multiply>
   2ba08:	88800015 	stw	r2,0(r17)
   2ba0c:	10000015 	stw	zero,0(r2)
   2ba10:	003fdf06 	br	2b990 <__pow5mult+0x50>
   2ba14:	1025883a 	mov	r18,r2
   2ba18:	003fd906 	br	2b980 <__pow5mult+0x40>
   2ba1c:	100490ba 	slli	r2,r2,2
   2ba20:	00c000f4 	movhi	r3,3
   2ba24:	000f883a 	mov	r7,zero
   2ba28:	10c7883a 	add	r3,r2,r3
   2ba2c:	198caa17 	ldw	r6,12968(r3)
   2ba30:	002b2240 	call	2b224 <__multadd>
   2ba34:	1025883a 	mov	r18,r2
   2ba38:	003fcc06 	br	2b96c <__pow5mult+0x2c>
   2ba3c:	01400044 	movi	r5,1
   2ba40:	9809883a 	mov	r4,r19
   2ba44:	002b15c0 	call	2b15c <_Balloc>
   2ba48:	1023883a 	mov	r17,r2
   2ba4c:	10000726 	beq	r2,zero,2ba6c <__pow5mult+0x12c>
   2ba50:	00809c44 	movi	r2,625
   2ba54:	88800515 	stw	r2,20(r17)
   2ba58:	00800044 	movi	r2,1
   2ba5c:	88800415 	stw	r2,16(r17)
   2ba60:	9c401215 	stw	r17,72(r19)
   2ba64:	88000015 	stw	zero,0(r17)
   2ba68:	003fca06 	br	2b994 <__pow5mult+0x54>
   2ba6c:	01c000f4 	movhi	r7,3
   2ba70:	010000f4 	movhi	r4,3
   2ba74:	39cc8604 	addi	r7,r7,12824
   2ba78:	000d883a 	mov	r6,zero
   2ba7c:	01405004 	movi	r5,320
   2ba80:	210c9b04 	addi	r4,r4,12908
   2ba84:	002e33c0 	call	2e33c <__assert_func>

0002ba88 <__lshift>:
   2ba88:	defff804 	addi	sp,sp,-32
   2ba8c:	dd800615 	stw	r22,24(sp)
   2ba90:	dc000015 	stw	r16,0(sp)
   2ba94:	302dd17a 	srai	r22,r6,5
   2ba98:	2c000417 	ldw	r16,16(r5)
   2ba9c:	28800217 	ldw	r2,8(r5)
   2baa0:	dd000415 	stw	r20,16(sp)
   2baa4:	b421883a 	add	r16,r22,r16
   2baa8:	dcc00315 	stw	r19,12(sp)
   2baac:	dc800215 	stw	r18,8(sp)
   2bab0:	dc400115 	stw	r17,4(sp)
   2bab4:	dfc00715 	stw	ra,28(sp)
   2bab8:	dd400515 	stw	r21,20(sp)
   2babc:	85000044 	addi	r20,r16,1
   2bac0:	2827883a 	mov	r19,r5
   2bac4:	3025883a 	mov	r18,r6
   2bac8:	29400117 	ldw	r5,4(r5)
   2bacc:	2023883a 	mov	r17,r4
   2bad0:	1500030e 	bge	r2,r20,2bae0 <__lshift+0x58>
   2bad4:	1085883a 	add	r2,r2,r2
   2bad8:	29400044 	addi	r5,r5,1
   2badc:	153ffd16 	blt	r2,r20,2bad4 <__lshift+0x4c>
   2bae0:	8809883a 	mov	r4,r17
   2bae4:	002b15c0 	call	2b15c <_Balloc>
   2bae8:	102b883a 	mov	r21,r2
   2baec:	10004126 	beq	r2,zero,2bbf4 <__lshift+0x16c>
   2baf0:	11000504 	addi	r4,r2,20
   2baf4:	0580050e 	bge	zero,r22,2bb0c <__lshift+0x84>
   2baf8:	b02c90ba 	slli	r22,r22,2
   2bafc:	000b883a 	mov	r5,zero
   2bb00:	b00d883a 	mov	r6,r22
   2bb04:	00252f00 	call	252f0 <memset>
   2bb08:	1589883a 	add	r4,r2,r22
   2bb0c:	9a000417 	ldw	r8,16(r19)
   2bb10:	98c00504 	addi	r3,r19,20
   2bb14:	948007cc 	andi	r18,r18,31
   2bb18:	401090ba 	slli	r8,r8,2
   2bb1c:	1a11883a 	add	r8,r3,r8
   2bb20:	90002c26 	beq	r18,zero,2bbd4 <__lshift+0x14c>
   2bb24:	01400804 	movi	r5,32
   2bb28:	2c8bc83a 	sub	r5,r5,r18
   2bb2c:	2005883a 	mov	r2,r4
   2bb30:	000f883a 	mov	r7,zero
   2bb34:	19800017 	ldw	r6,0(r3)
   2bb38:	10800104 	addi	r2,r2,4
   2bb3c:	18c00104 	addi	r3,r3,4
   2bb40:	348c983a 	sll	r6,r6,r18
   2bb44:	31ccb03a 	or	r6,r6,r7
   2bb48:	11bfff15 	stw	r6,-4(r2)
   2bb4c:	19bfff17 	ldw	r6,-4(r3)
   2bb50:	314ed83a 	srl	r7,r6,r5
   2bb54:	1a3ff736 	bltu	r3,r8,2bb34 <__lshift+0xac>
   2bb58:	98800544 	addi	r2,r19,21
   2bb5c:	40802336 	bltu	r8,r2,2bbec <__lshift+0x164>
   2bb60:	44c7c83a 	sub	r3,r8,r19
   2bb64:	18fffac4 	addi	r3,r3,-21
   2bb68:	1806d0ba 	srli	r3,r3,2
   2bb6c:	18c00044 	addi	r3,r3,1
   2bb70:	180690ba 	slli	r3,r3,2
   2bb74:	20c9883a 	add	r4,r4,r3
   2bb78:	21c00015 	stw	r7,0(r4)
   2bb7c:	38000126 	beq	r7,zero,2bb84 <__lshift+0xfc>
   2bb80:	a021883a 	mov	r16,r20
   2bb84:	ac000415 	stw	r16,16(r21)
   2bb88:	98000726 	beq	r19,zero,2bba8 <__lshift+0x120>
   2bb8c:	98c00117 	ldw	r3,4(r19)
   2bb90:	88801317 	ldw	r2,76(r17)
   2bb94:	180690ba 	slli	r3,r3,2
   2bb98:	10c5883a 	add	r2,r2,r3
   2bb9c:	10c00017 	ldw	r3,0(r2)
   2bba0:	98c00015 	stw	r3,0(r19)
   2bba4:	14c00015 	stw	r19,0(r2)
   2bba8:	a805883a 	mov	r2,r21
   2bbac:	dfc00717 	ldw	ra,28(sp)
   2bbb0:	dd800617 	ldw	r22,24(sp)
   2bbb4:	dd400517 	ldw	r21,20(sp)
   2bbb8:	dd000417 	ldw	r20,16(sp)
   2bbbc:	dcc00317 	ldw	r19,12(sp)
   2bbc0:	dc800217 	ldw	r18,8(sp)
   2bbc4:	dc400117 	ldw	r17,4(sp)
   2bbc8:	dc000017 	ldw	r16,0(sp)
   2bbcc:	dec00804 	addi	sp,sp,32
   2bbd0:	f800283a 	ret
   2bbd4:	18800017 	ldw	r2,0(r3)
   2bbd8:	18c00104 	addi	r3,r3,4
   2bbdc:	21000104 	addi	r4,r4,4
   2bbe0:	20bfff15 	stw	r2,-4(r4)
   2bbe4:	1a3ffb36 	bltu	r3,r8,2bbd4 <__lshift+0x14c>
   2bbe8:	003fe606 	br	2bb84 <__lshift+0xfc>
   2bbec:	00c00104 	movi	r3,4
   2bbf0:	003fe006 	br	2bb74 <__lshift+0xec>
   2bbf4:	01c000f4 	movhi	r7,3
   2bbf8:	010000f4 	movhi	r4,3
   2bbfc:	39cc8604 	addi	r7,r7,12824
   2bc00:	000d883a 	mov	r6,zero
   2bc04:	01407644 	movi	r5,473
   2bc08:	210c9b04 	addi	r4,r4,12908
   2bc0c:	002e33c0 	call	2e33c <__assert_func>

0002bc10 <__mcmp>:
   2bc10:	21800417 	ldw	r6,16(r4)
   2bc14:	28c00417 	ldw	r3,16(r5)
   2bc18:	30c5c83a 	sub	r2,r6,r3
   2bc1c:	30c00e1e 	bne	r6,r3,2bc58 <__mcmp+0x48>
   2bc20:	180690ba 	slli	r3,r3,2
   2bc24:	21c00504 	addi	r7,r4,20
   2bc28:	29400504 	addi	r5,r5,20
   2bc2c:	38c9883a 	add	r4,r7,r3
   2bc30:	28c7883a 	add	r3,r5,r3
   2bc34:	00000106 	br	2bc3c <__mcmp+0x2c>
   2bc38:	3900082e 	bgeu	r7,r4,2bc5c <__mcmp+0x4c>
   2bc3c:	21bfff17 	ldw	r6,-4(r4)
   2bc40:	197fff17 	ldw	r5,-4(r3)
   2bc44:	213fff04 	addi	r4,r4,-4
   2bc48:	18ffff04 	addi	r3,r3,-4
   2bc4c:	317ffa26 	beq	r6,r5,2bc38 <__mcmp+0x28>
   2bc50:	3140032e 	bgeu	r6,r5,2bc60 <__mcmp+0x50>
   2bc54:	00bfffc4 	movi	r2,-1
   2bc58:	f800283a 	ret
   2bc5c:	f800283a 	ret
   2bc60:	00800044 	movi	r2,1
   2bc64:	f800283a 	ret

0002bc68 <__mdiff>:
   2bc68:	28800417 	ldw	r2,16(r5)
   2bc6c:	30c00417 	ldw	r3,16(r6)
   2bc70:	defffc04 	addi	sp,sp,-16
   2bc74:	dc800215 	stw	r18,8(sp)
   2bc78:	dc400115 	stw	r17,4(sp)
   2bc7c:	dc000015 	stw	r16,0(sp)
   2bc80:	dfc00315 	stw	ra,12(sp)
   2bc84:	2823883a 	mov	r17,r5
   2bc88:	3021883a 	mov	r16,r6
   2bc8c:	10e5c83a 	sub	r18,r2,r3
   2bc90:	10c0641e 	bne	r2,r3,2be24 <__mdiff+0x1bc>
   2bc94:	180c90ba 	slli	r6,r3,2
   2bc98:	29400504 	addi	r5,r5,20
   2bc9c:	80c00504 	addi	r3,r16,20
   2bca0:	2985883a 	add	r2,r5,r6
   2bca4:	1987883a 	add	r3,r3,r6
   2bca8:	00000106 	br	2bcb0 <__mdiff+0x48>
   2bcac:	2880642e 	bgeu	r5,r2,2be40 <__mdiff+0x1d8>
   2bcb0:	11bfff17 	ldw	r6,-4(r2)
   2bcb4:	19ffff17 	ldw	r7,-4(r3)
   2bcb8:	10bfff04 	addi	r2,r2,-4
   2bcbc:	18ffff04 	addi	r3,r3,-4
   2bcc0:	31fffa26 	beq	r6,r7,2bcac <__mdiff+0x44>
   2bcc4:	31c05236 	bltu	r6,r7,2be10 <__mdiff+0x1a8>
   2bcc8:	89400117 	ldw	r5,4(r17)
   2bccc:	002b15c0 	call	2b15c <_Balloc>
   2bcd0:	10006226 	beq	r2,zero,2be5c <__mdiff+0x1f4>
   2bcd4:	8a400417 	ldw	r9,16(r17)
   2bcd8:	83000417 	ldw	r12,16(r16)
   2bcdc:	8ac00504 	addi	r11,r17,20
   2bce0:	481090ba 	slli	r8,r9,2
   2bce4:	601890ba 	slli	r12,r12,2
   2bce8:	81800504 	addi	r6,r16,20
   2bcec:	13400504 	addi	r13,r2,20
   2bcf0:	14800315 	stw	r18,12(r2)
   2bcf4:	5a11883a 	add	r8,r11,r8
   2bcf8:	3319883a 	add	r12,r6,r12
   2bcfc:	681d883a 	mov	r14,r13
   2bd00:	5815883a 	mov	r10,r11
   2bd04:	0007883a 	mov	r3,zero
   2bd08:	51000017 	ldw	r4,0(r10)
   2bd0c:	31c00017 	ldw	r7,0(r6)
   2bd10:	73800104 	addi	r14,r14,4
   2bd14:	217fffcc 	andi	r5,r4,65535
   2bd18:	28cb883a 	add	r5,r5,r3
   2bd1c:	38ffffcc 	andi	r3,r7,65535
   2bd20:	28cbc83a 	sub	r5,r5,r3
   2bd24:	380ed43a 	srli	r7,r7,16
   2bd28:	2006d43a 	srli	r3,r4,16
   2bd2c:	2809d43a 	srai	r4,r5,16
   2bd30:	297fffcc 	andi	r5,r5,65535
   2bd34:	19c7c83a 	sub	r3,r3,r7
   2bd38:	1907883a 	add	r3,r3,r4
   2bd3c:	1808943a 	slli	r4,r3,16
   2bd40:	31800104 	addi	r6,r6,4
   2bd44:	1807d43a 	srai	r3,r3,16
   2bd48:	214ab03a 	or	r5,r4,r5
   2bd4c:	717fff15 	stw	r5,-4(r14)
   2bd50:	52800104 	addi	r10,r10,4
   2bd54:	333fec36 	bltu	r6,r12,2bd08 <__mdiff+0xa0>
   2bd58:	640fc83a 	sub	r7,r12,r16
   2bd5c:	39fffac4 	addi	r7,r7,-21
   2bd60:	84000544 	addi	r16,r16,21
   2bd64:	380ed0ba 	srli	r7,r7,2
   2bd68:	64003336 	bltu	r12,r16,2be38 <__mdiff+0x1d0>
   2bd6c:	380890ba 	slli	r4,r7,2
   2bd70:	6909883a 	add	r4,r13,r4
   2bd74:	64002e36 	bltu	r12,r16,2be30 <__mdiff+0x1c8>
   2bd78:	39800044 	addi	r6,r7,1
   2bd7c:	300c90ba 	slli	r6,r6,2
   2bd80:	5997883a 	add	r11,r11,r6
   2bd84:	699b883a 	add	r13,r13,r6
   2bd88:	5a00152e 	bgeu	r11,r8,2bde0 <__mdiff+0x178>
   2bd8c:	680f883a 	mov	r7,r13
   2bd90:	580d883a 	mov	r6,r11
   2bd94:	31000017 	ldw	r4,0(r6)
   2bd98:	39c00104 	addi	r7,r7,4
   2bd9c:	31800104 	addi	r6,r6,4
   2bda0:	217fffcc 	andi	r5,r4,65535
   2bda4:	28cb883a 	add	r5,r5,r3
   2bda8:	2815d43a 	srai	r10,r5,16
   2bdac:	2006d43a 	srli	r3,r4,16
   2bdb0:	297fffcc 	andi	r5,r5,65535
   2bdb4:	1a87883a 	add	r3,r3,r10
   2bdb8:	1814943a 	slli	r10,r3,16
   2bdbc:	1807d43a 	srai	r3,r3,16
   2bdc0:	514ab03a 	or	r5,r10,r5
   2bdc4:	397fff15 	stw	r5,-4(r7)
   2bdc8:	323ff236 	bltu	r6,r8,2bd94 <__mdiff+0x12c>
   2bdcc:	413fffc4 	addi	r4,r8,-1
   2bdd0:	22c9c83a 	sub	r4,r4,r11
   2bdd4:	2008d0ba 	srli	r4,r4,2
   2bdd8:	200890ba 	slli	r4,r4,2
   2bddc:	6909883a 	add	r4,r13,r4
   2bde0:	2800041e 	bne	r5,zero,2bdf4 <__mdiff+0x18c>
   2bde4:	20ffff17 	ldw	r3,-4(r4)
   2bde8:	4a7fffc4 	addi	r9,r9,-1
   2bdec:	213fff04 	addi	r4,r4,-4
   2bdf0:	183ffc26 	beq	r3,zero,2bde4 <__mdiff+0x17c>
   2bdf4:	12400415 	stw	r9,16(r2)
   2bdf8:	dfc00317 	ldw	ra,12(sp)
   2bdfc:	dc800217 	ldw	r18,8(sp)
   2be00:	dc400117 	ldw	r17,4(sp)
   2be04:	dc000017 	ldw	r16,0(sp)
   2be08:	dec00404 	addi	sp,sp,16
   2be0c:	f800283a 	ret
   2be10:	8805883a 	mov	r2,r17
   2be14:	04800044 	movi	r18,1
   2be18:	8023883a 	mov	r17,r16
   2be1c:	1021883a 	mov	r16,r2
   2be20:	003fa906 	br	2bcc8 <__mdiff+0x60>
   2be24:	903ffa16 	blt	r18,zero,2be10 <__mdiff+0x1a8>
   2be28:	0025883a 	mov	r18,zero
   2be2c:	003fa606 	br	2bcc8 <__mdiff+0x60>
   2be30:	01800104 	movi	r6,4
   2be34:	003fd206 	br	2bd80 <__mdiff+0x118>
   2be38:	0009883a 	mov	r4,zero
   2be3c:	003fcc06 	br	2bd70 <__mdiff+0x108>
   2be40:	000b883a 	mov	r5,zero
   2be44:	002b15c0 	call	2b15c <_Balloc>
   2be48:	10000b26 	beq	r2,zero,2be78 <__mdiff+0x210>
   2be4c:	00c00044 	movi	r3,1
   2be50:	10c00415 	stw	r3,16(r2)
   2be54:	10000515 	stw	zero,20(r2)
   2be58:	003fe706 	br	2bdf8 <__mdiff+0x190>
   2be5c:	01c000f4 	movhi	r7,3
   2be60:	010000f4 	movhi	r4,3
   2be64:	39cc8604 	addi	r7,r7,12824
   2be68:	000d883a 	mov	r6,zero
   2be6c:	01409004 	movi	r5,576
   2be70:	210c9b04 	addi	r4,r4,12908
   2be74:	002e33c0 	call	2e33c <__assert_func>
   2be78:	01c000f4 	movhi	r7,3
   2be7c:	010000f4 	movhi	r4,3
   2be80:	39cc8604 	addi	r7,r7,12824
   2be84:	000d883a 	mov	r6,zero
   2be88:	01408c84 	movi	r5,562
   2be8c:	210c9b04 	addi	r4,r4,12908
   2be90:	002e33c0 	call	2e33c <__assert_func>

0002be94 <__ulp>:
   2be94:	28dffc2c 	andhi	r3,r5,32752
   2be98:	017f3034 	movhi	r5,64704
   2be9c:	1947883a 	add	r3,r3,r5
   2bea0:	00c0020e 	bge	zero,r3,2beac <__ulp+0x18>
   2bea4:	0005883a 	mov	r2,zero
   2bea8:	f800283a 	ret
   2beac:	00c7c83a 	sub	r3,zero,r3
   2beb0:	1807d53a 	srai	r3,r3,20
   2beb4:	18800508 	cmpgei	r2,r3,20
   2beb8:	1000041e 	bne	r2,zero,2becc <__ulp+0x38>
   2bebc:	00800234 	movhi	r2,8
   2bec0:	10c7d83a 	sra	r3,r2,r3
   2bec4:	0005883a 	mov	r2,zero
   2bec8:	f800283a 	ret
   2becc:	193ffb04 	addi	r4,r3,-20
   2bed0:	208007c8 	cmpgei	r2,r4,31
   2bed4:	0007883a 	mov	r3,zero
   2bed8:	1000031e 	bne	r2,zero,2bee8 <__ulp+0x54>
   2bedc:	00a00034 	movhi	r2,32768
   2bee0:	1104d83a 	srl	r2,r2,r4
   2bee4:	f800283a 	ret
   2bee8:	00800044 	movi	r2,1
   2beec:	f800283a 	ret

0002bef0 <__b2d>:
   2bef0:	defffa04 	addi	sp,sp,-24
   2bef4:	dc400115 	stw	r17,4(sp)
   2bef8:	24400417 	ldw	r17,16(r4)
   2befc:	dc000015 	stw	r16,0(sp)
   2bf00:	24000504 	addi	r16,r4,20
   2bf04:	882290ba 	slli	r17,r17,2
   2bf08:	dc800215 	stw	r18,8(sp)
   2bf0c:	dd000415 	stw	r20,16(sp)
   2bf10:	8463883a 	add	r17,r16,r17
   2bf14:	8cbfff17 	ldw	r18,-4(r17)
   2bf18:	dcc00315 	stw	r19,12(sp)
   2bf1c:	dfc00515 	stw	ra,20(sp)
   2bf20:	9009883a 	mov	r4,r18
   2bf24:	2827883a 	mov	r19,r5
   2bf28:	002b4b80 	call	2b4b8 <__hi0bits>
   2bf2c:	00c00804 	movi	r3,32
   2bf30:	1889c83a 	sub	r4,r3,r2
   2bf34:	99000015 	stw	r4,0(r19)
   2bf38:	110002c8 	cmpgei	r4,r2,11
   2bf3c:	8d3fff04 	addi	r20,r17,-4
   2bf40:	20002026 	beq	r4,zero,2bfc4 <__b2d+0xd4>
   2bf44:	10bffd44 	addi	r2,r2,-11
   2bf48:	85000e2e 	bgeu	r16,r20,2bf84 <__b2d+0x94>
   2bf4c:	897ffe17 	ldw	r5,-8(r17)
   2bf50:	10001226 	beq	r2,zero,2bf9c <__b2d+0xac>
   2bf54:	1889c83a 	sub	r4,r3,r2
   2bf58:	90a4983a 	sll	r18,r18,r2
   2bf5c:	2906d83a 	srl	r3,r5,r4
   2bf60:	89bffe04 	addi	r6,r17,-8
   2bf64:	2884983a 	sll	r2,r5,r2
   2bf68:	90e4b03a 	or	r18,r18,r3
   2bf6c:	90cffc34 	orhi	r3,r18,16368
   2bf70:	81800c2e 	bgeu	r16,r6,2bfa4 <__b2d+0xb4>
   2bf74:	897ffd17 	ldw	r5,-12(r17)
   2bf78:	2908d83a 	srl	r4,r5,r4
   2bf7c:	1104b03a 	or	r2,r2,r4
   2bf80:	00000806 	br	2bfa4 <__b2d+0xb4>
   2bf84:	10000426 	beq	r2,zero,2bf98 <__b2d+0xa8>
   2bf88:	90a4983a 	sll	r18,r18,r2
   2bf8c:	0005883a 	mov	r2,zero
   2bf90:	90cffc34 	orhi	r3,r18,16368
   2bf94:	00000306 	br	2bfa4 <__b2d+0xb4>
   2bf98:	000b883a 	mov	r5,zero
   2bf9c:	90cffc34 	orhi	r3,r18,16368
   2bfa0:	2805883a 	mov	r2,r5
   2bfa4:	dfc00517 	ldw	ra,20(sp)
   2bfa8:	dd000417 	ldw	r20,16(sp)
   2bfac:	dcc00317 	ldw	r19,12(sp)
   2bfb0:	dc800217 	ldw	r18,8(sp)
   2bfb4:	dc400117 	ldw	r17,4(sp)
   2bfb8:	dc000017 	ldw	r16,0(sp)
   2bfbc:	dec00604 	addi	sp,sp,24
   2bfc0:	f800283a 	ret
   2bfc4:	014002c4 	movi	r5,11
   2bfc8:	2889c83a 	sub	r4,r5,r2
   2bfcc:	9106d83a 	srl	r3,r18,r4
   2bfd0:	18cffc34 	orhi	r3,r3,16368
   2bfd4:	85000536 	bltu	r16,r20,2bfec <__b2d+0xfc>
   2bfd8:	000b883a 	mov	r5,zero
   2bfdc:	10800544 	addi	r2,r2,21
   2bfe0:	9084983a 	sll	r2,r18,r2
   2bfe4:	1144b03a 	or	r2,r2,r5
   2bfe8:	003fee06 	br	2bfa4 <__b2d+0xb4>
   2bfec:	897ffe17 	ldw	r5,-8(r17)
   2bff0:	290ad83a 	srl	r5,r5,r4
   2bff4:	003ff906 	br	2bfdc <__b2d+0xec>

0002bff8 <__d2b>:
   2bff8:	defff804 	addi	sp,sp,-32
   2bffc:	dd000615 	stw	r20,24(sp)
   2c000:	2829883a 	mov	r20,r5
   2c004:	01400044 	movi	r5,1
   2c008:	dcc00515 	stw	r19,20(sp)
   2c00c:	dc000215 	stw	r16,8(sp)
   2c010:	dfc00715 	stw	ra,28(sp)
   2c014:	dc800415 	stw	r18,16(sp)
   2c018:	dc400315 	stw	r17,12(sp)
   2c01c:	3021883a 	mov	r16,r6
   2c020:	3827883a 	mov	r19,r7
   2c024:	002b15c0 	call	2b15c <_Balloc>
   2c028:	10004526 	beq	r2,zero,2c140 <__d2b+0x148>
   2c02c:	8024d53a 	srli	r18,r16,20
   2c030:	01800434 	movhi	r6,16
   2c034:	31bfffc4 	addi	r6,r6,-1
   2c038:	9481ffcc 	andi	r18,r18,2047
   2c03c:	1023883a 	mov	r17,r2
   2c040:	81a0703a 	and	r16,r16,r6
   2c044:	90000126 	beq	r18,zero,2c04c <__d2b+0x54>
   2c048:	84000434 	orhi	r16,r16,16
   2c04c:	dc000115 	stw	r16,4(sp)
   2c050:	a0002226 	beq	r20,zero,2c0dc <__d2b+0xe4>
   2c054:	d809883a 	mov	r4,sp
   2c058:	dd000015 	stw	r20,0(sp)
   2c05c:	002b51c0 	call	2b51c <__lo0bits>
   2c060:	d8c00117 	ldw	r3,4(sp)
   2c064:	10003326 	beq	r2,zero,2c134 <__d2b+0x13c>
   2c068:	01000804 	movi	r4,32
   2c06c:	2089c83a 	sub	r4,r4,r2
   2c070:	1908983a 	sll	r4,r3,r4
   2c074:	d9400017 	ldw	r5,0(sp)
   2c078:	1886d83a 	srl	r3,r3,r2
   2c07c:	2148b03a 	or	r4,r4,r5
   2c080:	89000515 	stw	r4,20(r17)
   2c084:	d8c00115 	stw	r3,4(sp)
   2c088:	88c00615 	stw	r3,24(r17)
   2c08c:	1800271e 	bne	r3,zero,2c12c <__d2b+0x134>
   2c090:	04000044 	movi	r16,1
   2c094:	8c000415 	stw	r16,16(r17)
   2c098:	90001926 	beq	r18,zero,2c100 <__d2b+0x108>
   2c09c:	00c00d44 	movi	r3,53
   2c0a0:	94bef344 	addi	r18,r18,-1075
   2c0a4:	90a5883a 	add	r18,r18,r2
   2c0a8:	1885c83a 	sub	r2,r3,r2
   2c0ac:	d8c00817 	ldw	r3,32(sp)
   2c0b0:	9c800015 	stw	r18,0(r19)
   2c0b4:	18800015 	stw	r2,0(r3)
   2c0b8:	8805883a 	mov	r2,r17
   2c0bc:	dfc00717 	ldw	ra,28(sp)
   2c0c0:	dd000617 	ldw	r20,24(sp)
   2c0c4:	dcc00517 	ldw	r19,20(sp)
   2c0c8:	dc800417 	ldw	r18,16(sp)
   2c0cc:	dc400317 	ldw	r17,12(sp)
   2c0d0:	dc000217 	ldw	r16,8(sp)
   2c0d4:	dec00804 	addi	sp,sp,32
   2c0d8:	f800283a 	ret
   2c0dc:	d9000104 	addi	r4,sp,4
   2c0e0:	002b51c0 	call	2b51c <__lo0bits>
   2c0e4:	00c00044 	movi	r3,1
   2c0e8:	88c00415 	stw	r3,16(r17)
   2c0ec:	d8c00117 	ldw	r3,4(sp)
   2c0f0:	10800804 	addi	r2,r2,32
   2c0f4:	04000044 	movi	r16,1
   2c0f8:	88c00515 	stw	r3,20(r17)
   2c0fc:	903fe71e 	bne	r18,zero,2c09c <__d2b+0xa4>
   2c100:	800690ba 	slli	r3,r16,2
   2c104:	10bef384 	addi	r2,r2,-1074
   2c108:	98800015 	stw	r2,0(r19)
   2c10c:	88c5883a 	add	r2,r17,r3
   2c110:	11000417 	ldw	r4,16(r2)
   2c114:	8020917a 	slli	r16,r16,5
   2c118:	002b4b80 	call	2b4b8 <__hi0bits>
   2c11c:	80a1c83a 	sub	r16,r16,r2
   2c120:	d8800817 	ldw	r2,32(sp)
   2c124:	14000015 	stw	r16,0(r2)
   2c128:	003fe306 	br	2c0b8 <__d2b+0xc0>
   2c12c:	04000084 	movi	r16,2
   2c130:	003fd806 	br	2c094 <__d2b+0x9c>
   2c134:	d9000017 	ldw	r4,0(sp)
   2c138:	89000515 	stw	r4,20(r17)
   2c13c:	003fd206 	br	2c088 <__d2b+0x90>
   2c140:	01c000f4 	movhi	r7,3
   2c144:	010000f4 	movhi	r4,3
   2c148:	39cc8604 	addi	r7,r7,12824
   2c14c:	000d883a 	mov	r6,zero
   2c150:	0140c284 	movi	r5,778
   2c154:	210c9b04 	addi	r4,r4,12908
   2c158:	002e33c0 	call	2e33c <__assert_func>

0002c15c <__ratio>:
   2c15c:	defff904 	addi	sp,sp,-28
   2c160:	dc400315 	stw	r17,12(sp)
   2c164:	2823883a 	mov	r17,r5
   2c168:	d80b883a 	mov	r5,sp
   2c16c:	dfc00615 	stw	ra,24(sp)
   2c170:	dcc00515 	stw	r19,20(sp)
   2c174:	dc800415 	stw	r18,16(sp)
   2c178:	2027883a 	mov	r19,r4
   2c17c:	dc000215 	stw	r16,8(sp)
   2c180:	002bef00 	call	2bef0 <__b2d>
   2c184:	d9400104 	addi	r5,sp,4
   2c188:	8809883a 	mov	r4,r17
   2c18c:	1025883a 	mov	r18,r2
   2c190:	1821883a 	mov	r16,r3
   2c194:	002bef00 	call	2bef0 <__b2d>
   2c198:	89000417 	ldw	r4,16(r17)
   2c19c:	9a000417 	ldw	r8,16(r19)
   2c1a0:	d9400117 	ldw	r5,4(sp)
   2c1a4:	100d883a 	mov	r6,r2
   2c1a8:	4111c83a 	sub	r8,r8,r4
   2c1ac:	d9000017 	ldw	r4,0(sp)
   2c1b0:	4010917a 	slli	r8,r8,5
   2c1b4:	180f883a 	mov	r7,r3
   2c1b8:	2149c83a 	sub	r4,r4,r5
   2c1bc:	4111883a 	add	r8,r8,r4
   2c1c0:	02000c0e 	bge	zero,r8,2c1f4 <__ratio+0x98>
   2c1c4:	4010953a 	slli	r8,r8,20
   2c1c8:	4421883a 	add	r16,r8,r16
   2c1cc:	9009883a 	mov	r4,r18
   2c1d0:	800b883a 	mov	r5,r16
   2c1d4:	00235940 	call	23594 <__divdf3>
   2c1d8:	dfc00617 	ldw	ra,24(sp)
   2c1dc:	dcc00517 	ldw	r19,20(sp)
   2c1e0:	dc800417 	ldw	r18,16(sp)
   2c1e4:	dc400317 	ldw	r17,12(sp)
   2c1e8:	dc000217 	ldw	r16,8(sp)
   2c1ec:	dec00704 	addi	sp,sp,28
   2c1f0:	f800283a 	ret
   2c1f4:	4010953a 	slli	r8,r8,20
   2c1f8:	1a0fc83a 	sub	r7,r3,r8
   2c1fc:	003ff306 	br	2c1cc <__ratio+0x70>

0002c200 <_mprec_log10>:
   2c200:	defffe04 	addi	sp,sp,-8
   2c204:	dc000015 	stw	r16,0(sp)
   2c208:	dfc00115 	stw	ra,4(sp)
   2c20c:	20800608 	cmpgei	r2,r4,24
   2c210:	2021883a 	mov	r16,r4
   2c214:	10000f26 	beq	r2,zero,2c254 <_mprec_log10+0x54>
   2c218:	0009883a 	mov	r4,zero
   2c21c:	014ffc34 	movhi	r5,16368
   2c220:	000d883a 	mov	r6,zero
   2c224:	01d00934 	movhi	r7,16420
   2c228:	00240940 	call	24094 <__muldf3>
   2c22c:	843fffc4 	addi	r16,r16,-1
   2c230:	1009883a 	mov	r4,r2
   2c234:	180b883a 	mov	r5,r3
   2c238:	803ff91e 	bne	r16,zero,2c220 <_mprec_log10+0x20>
   2c23c:	2005883a 	mov	r2,r4
   2c240:	2807883a 	mov	r3,r5
   2c244:	dfc00117 	ldw	ra,4(sp)
   2c248:	dc000017 	ldw	r16,0(sp)
   2c24c:	dec00204 	addi	sp,sp,8
   2c250:	f800283a 	ret
   2c254:	202090fa 	slli	r16,r4,3
   2c258:	008000f4 	movhi	r2,3
   2c25c:	108cc204 	addi	r2,r2,13064
   2c260:	1421883a 	add	r16,r2,r16
   2c264:	81000017 	ldw	r4,0(r16)
   2c268:	81400117 	ldw	r5,4(r16)
   2c26c:	003ff306 	br	2c23c <_mprec_log10+0x3c>

0002c270 <__copybits>:
   2c270:	297fffc4 	addi	r5,r5,-1
   2c274:	280fd17a 	srai	r7,r5,5
   2c278:	31400417 	ldw	r5,16(r6)
   2c27c:	30800504 	addi	r2,r6,20
   2c280:	39c00044 	addi	r7,r7,1
   2c284:	280a90ba 	slli	r5,r5,2
   2c288:	380e90ba 	slli	r7,r7,2
   2c28c:	114b883a 	add	r5,r2,r5
   2c290:	21cf883a 	add	r7,r4,r7
   2c294:	11400c2e 	bgeu	r2,r5,2c2c8 <__copybits+0x58>
   2c298:	2007883a 	mov	r3,r4
   2c29c:	12000017 	ldw	r8,0(r2)
   2c2a0:	10800104 	addi	r2,r2,4
   2c2a4:	18c00104 	addi	r3,r3,4
   2c2a8:	1a3fff15 	stw	r8,-4(r3)
   2c2ac:	117ffb36 	bltu	r2,r5,2c29c <__copybits+0x2c>
   2c2b0:	2985c83a 	sub	r2,r5,r6
   2c2b4:	10bffac4 	addi	r2,r2,-21
   2c2b8:	1004d0ba 	srli	r2,r2,2
   2c2bc:	10800044 	addi	r2,r2,1
   2c2c0:	100490ba 	slli	r2,r2,2
   2c2c4:	2089883a 	add	r4,r4,r2
   2c2c8:	21c0072e 	bgeu	r4,r7,2c2e8 <__copybits+0x78>
   2c2cc:	39bfffc4 	addi	r6,r7,-1
   2c2d0:	310dc83a 	sub	r6,r6,r4
   2c2d4:	300cd0ba 	srli	r6,r6,2
   2c2d8:	000b883a 	mov	r5,zero
   2c2dc:	31800044 	addi	r6,r6,1
   2c2e0:	300c90ba 	slli	r6,r6,2
   2c2e4:	00252f01 	jmpi	252f0 <memset>
   2c2e8:	f800283a 	ret

0002c2ec <__any_on>:
   2c2ec:	20c00417 	ldw	r3,16(r4)
   2c2f0:	280dd17a 	srai	r6,r5,5
   2c2f4:	21000504 	addi	r4,r4,20
   2c2f8:	1980080e 	bge	r3,r6,2c31c <__any_on+0x30>
   2c2fc:	180490ba 	slli	r2,r3,2
   2c300:	2085883a 	add	r2,r4,r2
   2c304:	20800f2e 	bgeu	r4,r2,2c344 <__any_on+0x58>
   2c308:	10ffff17 	ldw	r3,-4(r2)
   2c30c:	10bfff04 	addi	r2,r2,-4
   2c310:	183ffc26 	beq	r3,zero,2c304 <__any_on+0x18>
   2c314:	00800044 	movi	r2,1
   2c318:	f800283a 	ret
   2c31c:	300490ba 	slli	r2,r6,2
   2c320:	2085883a 	add	r2,r4,r2
   2c324:	30fff70e 	bge	r6,r3,2c304 <__any_on+0x18>
   2c328:	294007cc 	andi	r5,r5,31
   2c32c:	283ff526 	beq	r5,zero,2c304 <__any_on+0x18>
   2c330:	11800017 	ldw	r6,0(r2)
   2c334:	3146d83a 	srl	r3,r6,r5
   2c338:	194a983a 	sll	r5,r3,r5
   2c33c:	317ff51e 	bne	r6,r5,2c314 <__any_on+0x28>
   2c340:	003ff006 	br	2c304 <__any_on+0x18>
   2c344:	0005883a 	mov	r2,zero
   2c348:	f800283a 	ret

0002c34c <_putc_r>:
   2c34c:	defffc04 	addi	sp,sp,-16
   2c350:	dc400215 	stw	r17,8(sp)
   2c354:	dfc00315 	stw	ra,12(sp)
   2c358:	2023883a 	mov	r17,r4
   2c35c:	20000226 	beq	r4,zero,2c368 <_putc_r+0x1c>
   2c360:	20800e17 	ldw	r2,56(r4)
   2c364:	10000e26 	beq	r2,zero,2c3a0 <_putc_r+0x54>
   2c368:	30800217 	ldw	r2,8(r6)
   2c36c:	10bfffc4 	addi	r2,r2,-1
   2c370:	30800215 	stw	r2,8(r6)
   2c374:	10001316 	blt	r2,zero,2c3c4 <_putc_r+0x78>
   2c378:	30800017 	ldw	r2,0(r6)
   2c37c:	11400005 	stb	r5,0(r2)
   2c380:	30800017 	ldw	r2,0(r6)
   2c384:	10c00044 	addi	r3,r2,1
   2c388:	30c00015 	stw	r3,0(r6)
   2c38c:	10800003 	ldbu	r2,0(r2)
   2c390:	dfc00317 	ldw	ra,12(sp)
   2c394:	dc400217 	ldw	r17,8(sp)
   2c398:	dec00404 	addi	sp,sp,16
   2c39c:	f800283a 	ret
   2c3a0:	d9800115 	stw	r6,4(sp)
   2c3a4:	d9400015 	stw	r5,0(sp)
   2c3a8:	00299b00 	call	299b0 <__sinit>
   2c3ac:	d9800117 	ldw	r6,4(sp)
   2c3b0:	d9400017 	ldw	r5,0(sp)
   2c3b4:	30800217 	ldw	r2,8(r6)
   2c3b8:	10bfffc4 	addi	r2,r2,-1
   2c3bc:	30800215 	stw	r2,8(r6)
   2c3c0:	103fed0e 	bge	r2,zero,2c378 <_putc_r+0x2c>
   2c3c4:	30c00617 	ldw	r3,24(r6)
   2c3c8:	10c00e16 	blt	r2,r3,2c404 <_putc_r+0xb8>
   2c3cc:	30800017 	ldw	r2,0(r6)
   2c3d0:	11400005 	stb	r5,0(r2)
   2c3d4:	30c00017 	ldw	r3,0(r6)
   2c3d8:	18800003 	ldbu	r2,0(r3)
   2c3dc:	108002a0 	cmpeqi	r2,r2,10
   2c3e0:	1000071e 	bne	r2,zero,2c400 <_putc_r+0xb4>
   2c3e4:	18800044 	addi	r2,r3,1
   2c3e8:	30800015 	stw	r2,0(r6)
   2c3ec:	18800003 	ldbu	r2,0(r3)
   2c3f0:	dfc00317 	ldw	ra,12(sp)
   2c3f4:	dc400217 	ldw	r17,8(sp)
   2c3f8:	dec00404 	addi	sp,sp,16
   2c3fc:	f800283a 	ret
   2c400:	01400284 	movi	r5,10
   2c404:	8809883a 	mov	r4,r17
   2c408:	dfc00317 	ldw	ra,12(sp)
   2c40c:	dc400217 	ldw	r17,8(sp)
   2c410:	dec00404 	addi	sp,sp,16
   2c414:	002e1201 	jmpi	2e120 <__swbuf_r>

0002c418 <putc>:
   2c418:	defffc04 	addi	sp,sp,-16
   2c41c:	008000f4 	movhi	r2,3
   2c420:	dc800215 	stw	r18,8(sp)
   2c424:	1490d017 	ldw	r18,17216(r2)
   2c428:	dc400115 	stw	r17,4(sp)
   2c42c:	dfc00315 	stw	ra,12(sp)
   2c430:	2023883a 	mov	r17,r4
   2c434:	90000226 	beq	r18,zero,2c440 <putc+0x28>
   2c438:	90800e17 	ldw	r2,56(r18)
   2c43c:	10000f26 	beq	r2,zero,2c47c <putc+0x64>
   2c440:	28800217 	ldw	r2,8(r5)
   2c444:	10bfffc4 	addi	r2,r2,-1
   2c448:	28800215 	stw	r2,8(r5)
   2c44c:	10001316 	blt	r2,zero,2c49c <putc+0x84>
   2c450:	28800017 	ldw	r2,0(r5)
   2c454:	14400005 	stb	r17,0(r2)
   2c458:	28800017 	ldw	r2,0(r5)
   2c45c:	10c00044 	addi	r3,r2,1
   2c460:	28c00015 	stw	r3,0(r5)
   2c464:	10800003 	ldbu	r2,0(r2)
   2c468:	dfc00317 	ldw	ra,12(sp)
   2c46c:	dc800217 	ldw	r18,8(sp)
   2c470:	dc400117 	ldw	r17,4(sp)
   2c474:	dec00404 	addi	sp,sp,16
   2c478:	f800283a 	ret
   2c47c:	9009883a 	mov	r4,r18
   2c480:	d9400015 	stw	r5,0(sp)
   2c484:	00299b00 	call	299b0 <__sinit>
   2c488:	d9400017 	ldw	r5,0(sp)
   2c48c:	28800217 	ldw	r2,8(r5)
   2c490:	10bfffc4 	addi	r2,r2,-1
   2c494:	28800215 	stw	r2,8(r5)
   2c498:	103fed0e 	bge	r2,zero,2c450 <putc+0x38>
   2c49c:	28c00617 	ldw	r3,24(r5)
   2c4a0:	10c00a16 	blt	r2,r3,2c4cc <putc+0xb4>
   2c4a4:	28800017 	ldw	r2,0(r5)
   2c4a8:	14400005 	stb	r17,0(r2)
   2c4ac:	28c00017 	ldw	r3,0(r5)
   2c4b0:	18800003 	ldbu	r2,0(r3)
   2c4b4:	108002a0 	cmpeqi	r2,r2,10
   2c4b8:	10000c1e 	bne	r2,zero,2c4ec <putc+0xd4>
   2c4bc:	18800044 	addi	r2,r3,1
   2c4c0:	28800015 	stw	r2,0(r5)
   2c4c4:	18800003 	ldbu	r2,0(r3)
   2c4c8:	003fe706 	br	2c468 <putc+0x50>
   2c4cc:	280d883a 	mov	r6,r5
   2c4d0:	880b883a 	mov	r5,r17
   2c4d4:	9009883a 	mov	r4,r18
   2c4d8:	dfc00317 	ldw	ra,12(sp)
   2c4dc:	dc800217 	ldw	r18,8(sp)
   2c4e0:	dc400117 	ldw	r17,4(sp)
   2c4e4:	dec00404 	addi	sp,sp,16
   2c4e8:	002e1201 	jmpi	2e120 <__swbuf_r>
   2c4ec:	280d883a 	mov	r6,r5
   2c4f0:	01400284 	movi	r5,10
   2c4f4:	003ff706 	br	2c4d4 <putc+0xbc>

0002c4f8 <_realloc_r>:
   2c4f8:	defff504 	addi	sp,sp,-44
   2c4fc:	dc800315 	stw	r18,12(sp)
   2c500:	dfc00a15 	stw	ra,40(sp)
   2c504:	df000915 	stw	fp,36(sp)
   2c508:	ddc00815 	stw	r23,32(sp)
   2c50c:	dd800715 	stw	r22,28(sp)
   2c510:	dd400615 	stw	r21,24(sp)
   2c514:	dd000515 	stw	r20,20(sp)
   2c518:	dcc00415 	stw	r19,16(sp)
   2c51c:	dc400215 	stw	r17,8(sp)
   2c520:	dc000115 	stw	r16,4(sp)
   2c524:	3025883a 	mov	r18,r6
   2c528:	28008b26 	beq	r5,zero,2c758 <_realloc_r+0x260>
   2c52c:	2821883a 	mov	r16,r5
   2c530:	2027883a 	mov	r19,r4
   2c534:	944002c4 	addi	r17,r18,11
   2c538:	00308b80 	call	308b8 <__malloc_lock>
   2c53c:	888005f0 	cmpltui	r2,r17,23
   2c540:	1000521e 	bne	r2,zero,2c68c <_realloc_r+0x194>
   2c544:	017ffe04 	movi	r5,-8
   2c548:	8962703a 	and	r17,r17,r5
   2c54c:	8807883a 	mov	r3,r17
   2c550:	88005116 	blt	r17,zero,2c698 <_realloc_r+0x1a0>
   2c554:	8c805036 	bltu	r17,r18,2c698 <_realloc_r+0x1a0>
   2c558:	80bfff17 	ldw	r2,-4(r16)
   2c55c:	017fff04 	movi	r5,-4
   2c560:	857ffe04 	addi	r21,r16,-8
   2c564:	1168703a 	and	r20,r2,r5
   2c568:	ad2d883a 	add	r22,r21,r20
   2c56c:	a0c0390e 	bge	r20,r3,2c654 <_realloc_r+0x15c>
   2c570:	070000f4 	movhi	fp,3
   2c574:	e70ecc04 	addi	fp,fp,15152
   2c578:	e2000217 	ldw	r8,8(fp)
   2c57c:	b1000117 	ldw	r4,4(r22)
   2c580:	45808e26 	beq	r8,r22,2c7bc <_realloc_r+0x2c4>
   2c584:	01bfff84 	movi	r6,-2
   2c588:	218c703a 	and	r6,r4,r6
   2c58c:	b18d883a 	add	r6,r22,r6
   2c590:	31800117 	ldw	r6,4(r6)
   2c594:	3180004c 	andi	r6,r6,1
   2c598:	30004f1e 	bne	r6,zero,2c6d8 <_realloc_r+0x1e0>
   2c59c:	2148703a 	and	r4,r4,r5
   2c5a0:	a10b883a 	add	r5,r20,r4
   2c5a4:	28c0bf0e 	bge	r5,r3,2c8a4 <_realloc_r+0x3ac>
   2c5a8:	1080004c 	andi	r2,r2,1
   2c5ac:	10004c1e 	bne	r2,zero,2c6e0 <_realloc_r+0x1e8>
   2c5b0:	81fffe17 	ldw	r7,-8(r16)
   2c5b4:	00bfff04 	movi	r2,-4
   2c5b8:	a9cfc83a 	sub	r7,r21,r7
   2c5bc:	39400117 	ldw	r5,4(r7)
   2c5c0:	288a703a 	and	r5,r5,r2
   2c5c4:	b0000426 	beq	r22,zero,2c5d8 <_realloc_r+0xe0>
   2c5c8:	a16f883a 	add	r23,r20,r5
   2c5cc:	b92f883a 	add	r23,r23,r4
   2c5d0:	4580bf26 	beq	r8,r22,2c8d0 <_realloc_r+0x3d8>
   2c5d4:	b8c0930e 	bge	r23,r3,2c824 <_realloc_r+0x32c>
   2c5d8:	38004126 	beq	r7,zero,2c6e0 <_realloc_r+0x1e8>
   2c5dc:	a16f883a 	add	r23,r20,r5
   2c5e0:	b8c03f16 	blt	r23,r3,2c6e0 <_realloc_r+0x1e8>
   2c5e4:	38800317 	ldw	r2,12(r7)
   2c5e8:	38c00217 	ldw	r3,8(r7)
   2c5ec:	a1bfff04 	addi	r6,r20,-4
   2c5f0:	31400968 	cmpgeui	r5,r6,37
   2c5f4:	18800315 	stw	r2,12(r3)
   2c5f8:	10c00215 	stw	r3,8(r2)
   2c5fc:	39000204 	addi	r4,r7,8
   2c600:	3ded883a 	add	r22,r7,r23
   2c604:	2800941e 	bne	r5,zero,2c858 <_realloc_r+0x360>
   2c608:	30800530 	cmpltui	r2,r6,20
   2c60c:	80c00017 	ldw	r3,0(r16)
   2c610:	1000df1e 	bne	r2,zero,2c990 <_realloc_r+0x498>
   2c614:	38c00215 	stw	r3,8(r7)
   2c618:	80c00117 	ldw	r3,4(r16)
   2c61c:	30800728 	cmpgeui	r2,r6,28
   2c620:	38c00315 	stw	r3,12(r7)
   2c624:	1000dc1e 	bne	r2,zero,2c998 <_realloc_r+0x4a0>
   2c628:	80c00217 	ldw	r3,8(r16)
   2c62c:	38800404 	addi	r2,r7,16
   2c630:	84000204 	addi	r16,r16,8
   2c634:	10c00015 	stw	r3,0(r2)
   2c638:	80c00117 	ldw	r3,4(r16)
   2c63c:	b829883a 	mov	r20,r23
   2c640:	382b883a 	mov	r21,r7
   2c644:	10c00115 	stw	r3,4(r2)
   2c648:	80c00217 	ldw	r3,8(r16)
   2c64c:	2021883a 	mov	r16,r4
   2c650:	10c00215 	stw	r3,8(r2)
   2c654:	a9800117 	ldw	r6,4(r21)
   2c658:	a445c83a 	sub	r2,r20,r17
   2c65c:	10c00430 	cmpltui	r3,r2,16
   2c660:	3180004c 	andi	r6,r6,1
   2c664:	18004926 	beq	r3,zero,2c78c <_realloc_r+0x294>
   2c668:	a18cb03a 	or	r6,r20,r6
   2c66c:	a9800115 	stw	r6,4(r21)
   2c670:	b0800117 	ldw	r2,4(r22)
   2c674:	10800054 	ori	r2,r2,1
   2c678:	b0800115 	stw	r2,4(r22)
   2c67c:	9809883a 	mov	r4,r19
   2c680:	00308dc0 	call	308dc <__malloc_unlock>
   2c684:	8025883a 	mov	r18,r16
   2c688:	00000606 	br	2c6a4 <_realloc_r+0x1ac>
   2c68c:	04400404 	movi	r17,16
   2c690:	00c00404 	movi	r3,16
   2c694:	8cbfb02e 	bgeu	r17,r18,2c558 <_realloc_r+0x60>
   2c698:	00800304 	movi	r2,12
   2c69c:	98800015 	stw	r2,0(r19)
   2c6a0:	0025883a 	mov	r18,zero
   2c6a4:	9005883a 	mov	r2,r18
   2c6a8:	dfc00a17 	ldw	ra,40(sp)
   2c6ac:	df000917 	ldw	fp,36(sp)
   2c6b0:	ddc00817 	ldw	r23,32(sp)
   2c6b4:	dd800717 	ldw	r22,28(sp)
   2c6b8:	dd400617 	ldw	r21,24(sp)
   2c6bc:	dd000517 	ldw	r20,20(sp)
   2c6c0:	dcc00417 	ldw	r19,16(sp)
   2c6c4:	dc800317 	ldw	r18,12(sp)
   2c6c8:	dc400217 	ldw	r17,8(sp)
   2c6cc:	dc000117 	ldw	r16,4(sp)
   2c6d0:	dec00b04 	addi	sp,sp,44
   2c6d4:	f800283a 	ret
   2c6d8:	1080004c 	andi	r2,r2,1
   2c6dc:	10006c26 	beq	r2,zero,2c890 <_realloc_r+0x398>
   2c6e0:	900b883a 	mov	r5,r18
   2c6e4:	9809883a 	mov	r4,r19
   2c6e8:	002a6800 	call	2a680 <_malloc_r>
   2c6ec:	1025883a 	mov	r18,r2
   2c6f0:	10001626 	beq	r2,zero,2c74c <_realloc_r+0x254>
   2c6f4:	80bfff17 	ldw	r2,-4(r16)
   2c6f8:	013fff84 	movi	r4,-2
   2c6fc:	90fffe04 	addi	r3,r18,-8
   2c700:	1104703a 	and	r2,r2,r4
   2c704:	a885883a 	add	r2,r21,r2
   2c708:	10c05b26 	beq	r2,r3,2c878 <_realloc_r+0x380>
   2c70c:	a1bfff04 	addi	r6,r20,-4
   2c710:	30800968 	cmpgeui	r2,r6,37
   2c714:	10006a1e 	bne	r2,zero,2c8c0 <_realloc_r+0x3c8>
   2c718:	30800530 	cmpltui	r2,r6,20
   2c71c:	81000017 	ldw	r4,0(r16)
   2c720:	10003726 	beq	r2,zero,2c800 <_realloc_r+0x308>
   2c724:	9005883a 	mov	r2,r18
   2c728:	8007883a 	mov	r3,r16
   2c72c:	11000015 	stw	r4,0(r2)
   2c730:	19000117 	ldw	r4,4(r3)
   2c734:	11000115 	stw	r4,4(r2)
   2c738:	18c00217 	ldw	r3,8(r3)
   2c73c:	10c00215 	stw	r3,8(r2)
   2c740:	800b883a 	mov	r5,r16
   2c744:	9809883a 	mov	r4,r19
   2c748:	0029b140 	call	29b14 <_free_r>
   2c74c:	9809883a 	mov	r4,r19
   2c750:	00308dc0 	call	308dc <__malloc_unlock>
   2c754:	003fd306 	br	2c6a4 <_realloc_r+0x1ac>
   2c758:	300b883a 	mov	r5,r6
   2c75c:	dfc00a17 	ldw	ra,40(sp)
   2c760:	df000917 	ldw	fp,36(sp)
   2c764:	ddc00817 	ldw	r23,32(sp)
   2c768:	dd800717 	ldw	r22,28(sp)
   2c76c:	dd400617 	ldw	r21,24(sp)
   2c770:	dd000517 	ldw	r20,20(sp)
   2c774:	dcc00417 	ldw	r19,16(sp)
   2c778:	dc800317 	ldw	r18,12(sp)
   2c77c:	dc400217 	ldw	r17,8(sp)
   2c780:	dc000117 	ldw	r16,4(sp)
   2c784:	dec00b04 	addi	sp,sp,44
   2c788:	002a6801 	jmpi	2a680 <_malloc_r>
   2c78c:	344cb03a 	or	r6,r6,r17
   2c790:	a9800115 	stw	r6,4(r21)
   2c794:	ac4b883a 	add	r5,r21,r17
   2c798:	10800054 	ori	r2,r2,1
   2c79c:	28800115 	stw	r2,4(r5)
   2c7a0:	b0800117 	ldw	r2,4(r22)
   2c7a4:	29400204 	addi	r5,r5,8
   2c7a8:	9809883a 	mov	r4,r19
   2c7ac:	10800054 	ori	r2,r2,1
   2c7b0:	b0800115 	stw	r2,4(r22)
   2c7b4:	0029b140 	call	29b14 <_free_r>
   2c7b8:	003fb006 	br	2c67c <_realloc_r+0x184>
   2c7bc:	2148703a 	and	r4,r4,r5
   2c7c0:	a10b883a 	add	r5,r20,r4
   2c7c4:	89800404 	addi	r6,r17,16
   2c7c8:	29bf7716 	blt	r5,r6,2c5a8 <_realloc_r+0xb0>
   2c7cc:	ac6b883a 	add	r21,r21,r17
   2c7d0:	2c45c83a 	sub	r2,r5,r17
   2c7d4:	e5400215 	stw	r21,8(fp)
   2c7d8:	10800054 	ori	r2,r2,1
   2c7dc:	a8800115 	stw	r2,4(r21)
   2c7e0:	80bfff17 	ldw	r2,-4(r16)
   2c7e4:	9809883a 	mov	r4,r19
   2c7e8:	8025883a 	mov	r18,r16
   2c7ec:	1080004c 	andi	r2,r2,1
   2c7f0:	1462b03a 	or	r17,r2,r17
   2c7f4:	847fff15 	stw	r17,-4(r16)
   2c7f8:	00308dc0 	call	308dc <__malloc_unlock>
   2c7fc:	003fa906 	br	2c6a4 <_realloc_r+0x1ac>
   2c800:	91000015 	stw	r4,0(r18)
   2c804:	80c00117 	ldw	r3,4(r16)
   2c808:	30800728 	cmpgeui	r2,r6,28
   2c80c:	90c00115 	stw	r3,4(r18)
   2c810:	1000551e 	bne	r2,zero,2c968 <_realloc_r+0x470>
   2c814:	81000217 	ldw	r4,8(r16)
   2c818:	80c00204 	addi	r3,r16,8
   2c81c:	90800204 	addi	r2,r18,8
   2c820:	003fc206 	br	2c72c <_realloc_r+0x234>
   2c824:	b0800317 	ldw	r2,12(r22)
   2c828:	b0c00217 	ldw	r3,8(r22)
   2c82c:	a1bfff04 	addi	r6,r20,-4
   2c830:	31400968 	cmpgeui	r5,r6,37
   2c834:	18800315 	stw	r2,12(r3)
   2c838:	10c00215 	stw	r3,8(r2)
   2c83c:	38c00217 	ldw	r3,8(r7)
   2c840:	38800317 	ldw	r2,12(r7)
   2c844:	39000204 	addi	r4,r7,8
   2c848:	3ded883a 	add	r22,r7,r23
   2c84c:	18800315 	stw	r2,12(r3)
   2c850:	10c00215 	stw	r3,8(r2)
   2c854:	283f6c26 	beq	r5,zero,2c608 <_realloc_r+0x110>
   2c858:	800b883a 	mov	r5,r16
   2c85c:	d9c00015 	stw	r7,0(sp)
   2c860:	002b0300 	call	2b030 <memmove>
   2c864:	d9c00017 	ldw	r7,0(sp)
   2c868:	1021883a 	mov	r16,r2
   2c86c:	b829883a 	mov	r20,r23
   2c870:	382b883a 	mov	r21,r7
   2c874:	003f7706 	br	2c654 <_realloc_r+0x15c>
   2c878:	90bfff17 	ldw	r2,-4(r18)
   2c87c:	00ffff04 	movi	r3,-4
   2c880:	10c4703a 	and	r2,r2,r3
   2c884:	a0a9883a 	add	r20,r20,r2
   2c888:	ad2d883a 	add	r22,r21,r20
   2c88c:	003f7106 	br	2c654 <_realloc_r+0x15c>
   2c890:	81fffe17 	ldw	r7,-8(r16)
   2c894:	a9cfc83a 	sub	r7,r21,r7
   2c898:	38800117 	ldw	r2,4(r7)
   2c89c:	114a703a 	and	r5,r2,r5
   2c8a0:	003f4d06 	br	2c5d8 <_realloc_r+0xe0>
   2c8a4:	b0800317 	ldw	r2,12(r22)
   2c8a8:	b0c00217 	ldw	r3,8(r22)
   2c8ac:	2829883a 	mov	r20,r5
   2c8b0:	a96d883a 	add	r22,r21,r5
   2c8b4:	18800315 	stw	r2,12(r3)
   2c8b8:	10c00215 	stw	r3,8(r2)
   2c8bc:	003f6506 	br	2c654 <_realloc_r+0x15c>
   2c8c0:	800b883a 	mov	r5,r16
   2c8c4:	9009883a 	mov	r4,r18
   2c8c8:	002b0300 	call	2b030 <memmove>
   2c8cc:	003f9c06 	br	2c740 <_realloc_r+0x248>
   2c8d0:	88800404 	addi	r2,r17,16
   2c8d4:	b8bf4016 	blt	r23,r2,2c5d8 <_realloc_r+0xe0>
   2c8d8:	38800317 	ldw	r2,12(r7)
   2c8dc:	38c00217 	ldw	r3,8(r7)
   2c8e0:	a1bfff04 	addi	r6,r20,-4
   2c8e4:	31000968 	cmpgeui	r4,r6,37
   2c8e8:	18800315 	stw	r2,12(r3)
   2c8ec:	10c00215 	stw	r3,8(r2)
   2c8f0:	3c800204 	addi	r18,r7,8
   2c8f4:	20003b1e 	bne	r4,zero,2c9e4 <_realloc_r+0x4ec>
   2c8f8:	30800530 	cmpltui	r2,r6,20
   2c8fc:	80c00017 	ldw	r3,0(r16)
   2c900:	1000361e 	bne	r2,zero,2c9dc <_realloc_r+0x4e4>
   2c904:	38c00215 	stw	r3,8(r7)
   2c908:	80c00117 	ldw	r3,4(r16)
   2c90c:	30800728 	cmpgeui	r2,r6,28
   2c910:	38c00315 	stw	r3,12(r7)
   2c914:	1000401e 	bne	r2,zero,2ca18 <_realloc_r+0x520>
   2c918:	80c00217 	ldw	r3,8(r16)
   2c91c:	38800404 	addi	r2,r7,16
   2c920:	84000204 	addi	r16,r16,8
   2c924:	10c00015 	stw	r3,0(r2)
   2c928:	80c00117 	ldw	r3,4(r16)
   2c92c:	10c00115 	stw	r3,4(r2)
   2c930:	80c00217 	ldw	r3,8(r16)
   2c934:	10c00215 	stw	r3,8(r2)
   2c938:	3c47883a 	add	r3,r7,r17
   2c93c:	bc45c83a 	sub	r2,r23,r17
   2c940:	e0c00215 	stw	r3,8(fp)
   2c944:	10800054 	ori	r2,r2,1
   2c948:	18800115 	stw	r2,4(r3)
   2c94c:	38800117 	ldw	r2,4(r7)
   2c950:	9809883a 	mov	r4,r19
   2c954:	1080004c 	andi	r2,r2,1
   2c958:	1462b03a 	or	r17,r2,r17
   2c95c:	3c400115 	stw	r17,4(r7)
   2c960:	00308dc0 	call	308dc <__malloc_unlock>
   2c964:	003f4f06 	br	2c6a4 <_realloc_r+0x1ac>
   2c968:	80800217 	ldw	r2,8(r16)
   2c96c:	31800920 	cmpeqi	r6,r6,36
   2c970:	90800215 	stw	r2,8(r18)
   2c974:	80800317 	ldw	r2,12(r16)
   2c978:	90800315 	stw	r2,12(r18)
   2c97c:	81000417 	ldw	r4,16(r16)
   2c980:	30000f1e 	bne	r6,zero,2c9c0 <_realloc_r+0x4c8>
   2c984:	80c00404 	addi	r3,r16,16
   2c988:	90800404 	addi	r2,r18,16
   2c98c:	003f6706 	br	2c72c <_realloc_r+0x234>
   2c990:	2005883a 	mov	r2,r4
   2c994:	003f2706 	br	2c634 <_realloc_r+0x13c>
   2c998:	80800217 	ldw	r2,8(r16)
   2c99c:	31800920 	cmpeqi	r6,r6,36
   2c9a0:	38800415 	stw	r2,16(r7)
   2c9a4:	80800317 	ldw	r2,12(r16)
   2c9a8:	38800515 	stw	r2,20(r7)
   2c9ac:	80c00417 	ldw	r3,16(r16)
   2c9b0:	3000121e 	bne	r6,zero,2c9fc <_realloc_r+0x504>
   2c9b4:	38800604 	addi	r2,r7,24
   2c9b8:	84000404 	addi	r16,r16,16
   2c9bc:	003f1d06 	br	2c634 <_realloc_r+0x13c>
   2c9c0:	91000415 	stw	r4,16(r18)
   2c9c4:	81000517 	ldw	r4,20(r16)
   2c9c8:	80c00604 	addi	r3,r16,24
   2c9cc:	90800604 	addi	r2,r18,24
   2c9d0:	91000515 	stw	r4,20(r18)
   2c9d4:	81000617 	ldw	r4,24(r16)
   2c9d8:	003f5406 	br	2c72c <_realloc_r+0x234>
   2c9dc:	9005883a 	mov	r2,r18
   2c9e0:	003fd006 	br	2c924 <_realloc_r+0x42c>
   2c9e4:	800b883a 	mov	r5,r16
   2c9e8:	9009883a 	mov	r4,r18
   2c9ec:	d9c00015 	stw	r7,0(sp)
   2c9f0:	002b0300 	call	2b030 <memmove>
   2c9f4:	d9c00017 	ldw	r7,0(sp)
   2c9f8:	003fcf06 	br	2c938 <_realloc_r+0x440>
   2c9fc:	84000604 	addi	r16,r16,24
   2ca00:	38c00615 	stw	r3,24(r7)
   2ca04:	80ffff17 	ldw	r3,-4(r16)
   2ca08:	38800804 	addi	r2,r7,32
   2ca0c:	38c00715 	stw	r3,28(r7)
   2ca10:	80c00017 	ldw	r3,0(r16)
   2ca14:	003f0706 	br	2c634 <_realloc_r+0x13c>
   2ca18:	80800217 	ldw	r2,8(r16)
   2ca1c:	31800920 	cmpeqi	r6,r6,36
   2ca20:	38800415 	stw	r2,16(r7)
   2ca24:	80800317 	ldw	r2,12(r16)
   2ca28:	38800515 	stw	r2,20(r7)
   2ca2c:	80c00417 	ldw	r3,16(r16)
   2ca30:	3000031e 	bne	r6,zero,2ca40 <_realloc_r+0x548>
   2ca34:	38800604 	addi	r2,r7,24
   2ca38:	84000404 	addi	r16,r16,16
   2ca3c:	003fb906 	br	2c924 <_realloc_r+0x42c>
   2ca40:	84000604 	addi	r16,r16,24
   2ca44:	38c00615 	stw	r3,24(r7)
   2ca48:	80ffff17 	ldw	r3,-4(r16)
   2ca4c:	38800804 	addi	r2,r7,32
   2ca50:	38c00715 	stw	r3,28(r7)
   2ca54:	80c00017 	ldw	r3,0(r16)
   2ca58:	003fb206 	br	2c924 <_realloc_r+0x42c>

0002ca5c <_sbrk_r>:
   2ca5c:	defffe04 	addi	sp,sp,-8
   2ca60:	dc000015 	stw	r16,0(sp)
   2ca64:	008000f4 	movhi	r2,3
   2ca68:	2021883a 	mov	r16,r4
   2ca6c:	2809883a 	mov	r4,r5
   2ca70:	dfc00115 	stw	ra,4(sp)
   2ca74:	10141715 	stw	zero,20572(r2)
   2ca78:	0030ab40 	call	30ab4 <sbrk>
   2ca7c:	10ffffd8 	cmpnei	r3,r2,-1
   2ca80:	18000426 	beq	r3,zero,2ca94 <_sbrk_r+0x38>
   2ca84:	dfc00117 	ldw	ra,4(sp)
   2ca88:	dc000017 	ldw	r16,0(sp)
   2ca8c:	dec00204 	addi	sp,sp,8
   2ca90:	f800283a 	ret
   2ca94:	00c000f4 	movhi	r3,3
   2ca98:	18d41717 	ldw	r3,20572(r3)
   2ca9c:	183ff926 	beq	r3,zero,2ca84 <_sbrk_r+0x28>
   2caa0:	80c00015 	stw	r3,0(r16)
   2caa4:	dfc00117 	ldw	ra,4(sp)
   2caa8:	dc000017 	ldw	r16,0(sp)
   2caac:	dec00204 	addi	sp,sp,8
   2cab0:	f800283a 	ret

0002cab4 <__sread>:
   2cab4:	defffe04 	addi	sp,sp,-8
   2cab8:	dc000015 	stw	r16,0(sp)
   2cabc:	2821883a 	mov	r16,r5
   2cac0:	2940038f 	ldh	r5,14(r5)
   2cac4:	dfc00115 	stw	ra,4(sp)
   2cac8:	002ead00 	call	2ead0 <_read_r>
   2cacc:	10000716 	blt	r2,zero,2caec <__sread+0x38>
   2cad0:	80c01417 	ldw	r3,80(r16)
   2cad4:	1887883a 	add	r3,r3,r2
   2cad8:	80c01415 	stw	r3,80(r16)
   2cadc:	dfc00117 	ldw	ra,4(sp)
   2cae0:	dc000017 	ldw	r16,0(sp)
   2cae4:	dec00204 	addi	sp,sp,8
   2cae8:	f800283a 	ret
   2caec:	80c0030b 	ldhu	r3,12(r16)
   2caf0:	18fbffcc 	andi	r3,r3,61439
   2caf4:	80c0030d 	sth	r3,12(r16)
   2caf8:	dfc00117 	ldw	ra,4(sp)
   2cafc:	dc000017 	ldw	r16,0(sp)
   2cb00:	dec00204 	addi	sp,sp,8
   2cb04:	f800283a 	ret

0002cb08 <__seofread>:
   2cb08:	0005883a 	mov	r2,zero
   2cb0c:	f800283a 	ret

0002cb10 <__swrite>:
   2cb10:	2880030b 	ldhu	r2,12(r5)
   2cb14:	defffb04 	addi	sp,sp,-20
   2cb18:	dcc00315 	stw	r19,12(sp)
   2cb1c:	dc800215 	stw	r18,8(sp)
   2cb20:	dc400115 	stw	r17,4(sp)
   2cb24:	dc000015 	stw	r16,0(sp)
   2cb28:	dfc00415 	stw	ra,16(sp)
   2cb2c:	10c0400c 	andi	r3,r2,256
   2cb30:	2821883a 	mov	r16,r5
   2cb34:	2023883a 	mov	r17,r4
   2cb38:	2940038f 	ldh	r5,14(r5)
   2cb3c:	3025883a 	mov	r18,r6
   2cb40:	3827883a 	mov	r19,r7
   2cb44:	18000c1e 	bne	r3,zero,2cb78 <__swrite+0x68>
   2cb48:	10bbffcc 	andi	r2,r2,61439
   2cb4c:	980f883a 	mov	r7,r19
   2cb50:	900d883a 	mov	r6,r18
   2cb54:	8809883a 	mov	r4,r17
   2cb58:	8080030d 	sth	r2,12(r16)
   2cb5c:	dfc00417 	ldw	ra,16(sp)
   2cb60:	dcc00317 	ldw	r19,12(sp)
   2cb64:	dc800217 	ldw	r18,8(sp)
   2cb68:	dc400117 	ldw	r17,4(sp)
   2cb6c:	dc000017 	ldw	r16,0(sp)
   2cb70:	dec00504 	addi	sp,sp,20
   2cb74:	002e2801 	jmpi	2e280 <_write_r>
   2cb78:	01c00084 	movi	r7,2
   2cb7c:	000d883a 	mov	r6,zero
   2cb80:	002ea1c0 	call	2ea1c <_lseek_r>
   2cb84:	8080030b 	ldhu	r2,12(r16)
   2cb88:	8140038f 	ldh	r5,14(r16)
   2cb8c:	003fee06 	br	2cb48 <__swrite+0x38>

0002cb90 <__sseek>:
   2cb90:	defffe04 	addi	sp,sp,-8
   2cb94:	dc000015 	stw	r16,0(sp)
   2cb98:	2821883a 	mov	r16,r5
   2cb9c:	2940038f 	ldh	r5,14(r5)
   2cba0:	dfc00115 	stw	ra,4(sp)
   2cba4:	002ea1c0 	call	2ea1c <_lseek_r>
   2cba8:	10ffffd8 	cmpnei	r3,r2,-1
   2cbac:	18000826 	beq	r3,zero,2cbd0 <__sseek+0x40>
   2cbb0:	80c0030b 	ldhu	r3,12(r16)
   2cbb4:	80801415 	stw	r2,80(r16)
   2cbb8:	18c40014 	ori	r3,r3,4096
   2cbbc:	80c0030d 	sth	r3,12(r16)
   2cbc0:	dfc00117 	ldw	ra,4(sp)
   2cbc4:	dc000017 	ldw	r16,0(sp)
   2cbc8:	dec00204 	addi	sp,sp,8
   2cbcc:	f800283a 	ret
   2cbd0:	80c0030b 	ldhu	r3,12(r16)
   2cbd4:	18fbffcc 	andi	r3,r3,61439
   2cbd8:	80c0030d 	sth	r3,12(r16)
   2cbdc:	dfc00117 	ldw	ra,4(sp)
   2cbe0:	dc000017 	ldw	r16,0(sp)
   2cbe4:	dec00204 	addi	sp,sp,8
   2cbe8:	f800283a 	ret

0002cbec <__sclose>:
   2cbec:	2940038f 	ldh	r5,14(r5)
   2cbf0:	002e2e41 	jmpi	2e2e4 <_close_r>

0002cbf4 <__sprint_r.part.0>:
   2cbf4:	28801917 	ldw	r2,100(r5)
   2cbf8:	defff604 	addi	sp,sp,-40
   2cbfc:	dcc00315 	stw	r19,12(sp)
   2cc00:	dfc00915 	stw	ra,36(sp)
   2cc04:	df000815 	stw	fp,32(sp)
   2cc08:	ddc00715 	stw	r23,28(sp)
   2cc0c:	dd800615 	stw	r22,24(sp)
   2cc10:	dd400515 	stw	r21,20(sp)
   2cc14:	dd000415 	stw	r20,16(sp)
   2cc18:	dc800215 	stw	r18,8(sp)
   2cc1c:	dc400115 	stw	r17,4(sp)
   2cc20:	dc000015 	stw	r16,0(sp)
   2cc24:	1088000c 	andi	r2,r2,8192
   2cc28:	3027883a 	mov	r19,r6
   2cc2c:	10002c26 	beq	r2,zero,2cce0 <__sprint_r.part.0+0xec>
   2cc30:	30800217 	ldw	r2,8(r6)
   2cc34:	35000017 	ldw	r20,0(r6)
   2cc38:	2821883a 	mov	r16,r5
   2cc3c:	2023883a 	mov	r17,r4
   2cc40:	05bfff04 	movi	r22,-4
   2cc44:	10002426 	beq	r2,zero,2ccd8 <__sprint_r.part.0+0xe4>
   2cc48:	a5400117 	ldw	r21,4(r20)
   2cc4c:	a5c00017 	ldw	r23,0(r20)
   2cc50:	a824d0ba 	srli	r18,r21,2
   2cc54:	90001b26 	beq	r18,zero,2ccc4 <__sprint_r.part.0+0xd0>
   2cc58:	0039883a 	mov	fp,zero
   2cc5c:	00000206 	br	2cc68 <__sprint_r.part.0+0x74>
   2cc60:	bdc00104 	addi	r23,r23,4
   2cc64:	97001626 	beq	r18,fp,2ccc0 <__sprint_r.part.0+0xcc>
   2cc68:	b9400017 	ldw	r5,0(r23)
   2cc6c:	800d883a 	mov	r6,r16
   2cc70:	8809883a 	mov	r4,r17
   2cc74:	002e7d40 	call	2e7d4 <_fputwc_r>
   2cc78:	10bfffe0 	cmpeqi	r2,r2,-1
   2cc7c:	e7000044 	addi	fp,fp,1
   2cc80:	103ff726 	beq	r2,zero,2cc60 <__sprint_r.part.0+0x6c>
   2cc84:	00bfffc4 	movi	r2,-1
   2cc88:	98000215 	stw	zero,8(r19)
   2cc8c:	98000115 	stw	zero,4(r19)
   2cc90:	dfc00917 	ldw	ra,36(sp)
   2cc94:	df000817 	ldw	fp,32(sp)
   2cc98:	ddc00717 	ldw	r23,28(sp)
   2cc9c:	dd800617 	ldw	r22,24(sp)
   2cca0:	dd400517 	ldw	r21,20(sp)
   2cca4:	dd000417 	ldw	r20,16(sp)
   2cca8:	dcc00317 	ldw	r19,12(sp)
   2ccac:	dc800217 	ldw	r18,8(sp)
   2ccb0:	dc400117 	ldw	r17,4(sp)
   2ccb4:	dc000017 	ldw	r16,0(sp)
   2ccb8:	dec00a04 	addi	sp,sp,40
   2ccbc:	f800283a 	ret
   2ccc0:	98800217 	ldw	r2,8(r19)
   2ccc4:	adaa703a 	and	r21,r21,r22
   2ccc8:	1545c83a 	sub	r2,r2,r21
   2cccc:	98800215 	stw	r2,8(r19)
   2ccd0:	a5000204 	addi	r20,r20,8
   2ccd4:	103fdc1e 	bne	r2,zero,2cc48 <__sprint_r.part.0+0x54>
   2ccd8:	0005883a 	mov	r2,zero
   2ccdc:	003fea06 	br	2cc88 <__sprint_r.part.0+0x94>
   2cce0:	0029e100 	call	29e10 <__sfvwrite_r>
   2cce4:	003fe806 	br	2cc88 <__sprint_r.part.0+0x94>

0002cce8 <__sprint_r>:
   2cce8:	30c00217 	ldw	r3,8(r6)
   2ccec:	18000126 	beq	r3,zero,2ccf4 <__sprint_r+0xc>
   2ccf0:	002cbf41 	jmpi	2cbf4 <__sprint_r.part.0>
   2ccf4:	30000115 	stw	zero,4(r6)
   2ccf8:	0005883a 	mov	r2,zero
   2ccfc:	f800283a 	ret

0002cd00 <___vfiprintf_internal_r>:
   2cd00:	deffcf04 	addi	sp,sp,-196
   2cd04:	dd802d15 	stw	r22,180(sp)
   2cd08:	dd402c15 	stw	r21,176(sp)
   2cd0c:	dd002b15 	stw	r20,172(sp)
   2cd10:	dfc03015 	stw	ra,192(sp)
   2cd14:	df002f15 	stw	fp,188(sp)
   2cd18:	ddc02e15 	stw	r23,184(sp)
   2cd1c:	dcc02a15 	stw	r19,168(sp)
   2cd20:	dc802915 	stw	r18,164(sp)
   2cd24:	dc402815 	stw	r17,160(sp)
   2cd28:	dc002715 	stw	r16,156(sp)
   2cd2c:	d9c00415 	stw	r7,16(sp)
   2cd30:	202d883a 	mov	r22,r4
   2cd34:	282b883a 	mov	r21,r5
   2cd38:	3029883a 	mov	r20,r6
   2cd3c:	20000226 	beq	r4,zero,2cd48 <___vfiprintf_internal_r+0x48>
   2cd40:	20800e17 	ldw	r2,56(r4)
   2cd44:	1001bd26 	beq	r2,zero,2d43c <___vfiprintf_internal_r+0x73c>
   2cd48:	a880030b 	ldhu	r2,12(r21)
   2cd4c:	10c8000c 	andi	r3,r2,8192
   2cd50:	1800061e 	bne	r3,zero,2cd6c <___vfiprintf_internal_r+0x6c>
   2cd54:	a8c01917 	ldw	r3,100(r21)
   2cd58:	0137ffc4 	movi	r4,-8193
   2cd5c:	10880014 	ori	r2,r2,8192
   2cd60:	1906703a 	and	r3,r3,r4
   2cd64:	a880030d 	sth	r2,12(r21)
   2cd68:	a8c01915 	stw	r3,100(r21)
   2cd6c:	10c0020c 	andi	r3,r2,8
   2cd70:	18010826 	beq	r3,zero,2d194 <___vfiprintf_internal_r+0x494>
   2cd74:	a8c00417 	ldw	r3,16(r21)
   2cd78:	18010626 	beq	r3,zero,2d194 <___vfiprintf_internal_r+0x494>
   2cd7c:	1080068c 	andi	r2,r2,26
   2cd80:	10800298 	cmpnei	r2,r2,10
   2cd84:	10010b26 	beq	r2,zero,2d1b4 <___vfiprintf_internal_r+0x4b4>
   2cd88:	dc801704 	addi	r18,sp,92
   2cd8c:	dc800a15 	stw	r18,40(sp)
   2cd90:	d8000c15 	stw	zero,48(sp)
   2cd94:	d8000b15 	stw	zero,44(sp)
   2cd98:	9021883a 	mov	r16,r18
   2cd9c:	d8000515 	stw	zero,20(sp)
   2cda0:	d8000115 	stw	zero,4(sp)
   2cda4:	a0800007 	ldb	r2,0(r20)
   2cda8:	1000e826 	beq	r2,zero,2d14c <___vfiprintf_internal_r+0x44c>
   2cdac:	a023883a 	mov	r17,r20
   2cdb0:	00000306 	br	2cdc0 <___vfiprintf_internal_r+0xc0>
   2cdb4:	88800047 	ldb	r2,1(r17)
   2cdb8:	8c400044 	addi	r17,r17,1
   2cdbc:	10013326 	beq	r2,zero,2d28c <___vfiprintf_internal_r+0x58c>
   2cdc0:	10800958 	cmpnei	r2,r2,37
   2cdc4:	103ffb1e 	bne	r2,zero,2cdb4 <___vfiprintf_internal_r+0xb4>
   2cdc8:	8d27c83a 	sub	r19,r17,r20
   2cdcc:	8d01311e 	bne	r17,r20,2d294 <___vfiprintf_internal_r+0x594>
   2cdd0:	88800003 	ldbu	r2,0(r17)
   2cdd4:	10803fcc 	andi	r2,r2,255
   2cdd8:	1080201c 	xori	r2,r2,128
   2cddc:	10bfe004 	addi	r2,r2,-128
   2cde0:	1000da26 	beq	r2,zero,2d14c <___vfiprintf_internal_r+0x44c>
   2cde4:	88800047 	ldb	r2,1(r17)
   2cde8:	8d000044 	addi	r20,r17,1
   2cdec:	d8000945 	stb	zero,37(sp)
   2cdf0:	000b883a 	mov	r5,zero
   2cdf4:	000d883a 	mov	r6,zero
   2cdf8:	023fffc4 	movi	r8,-1
   2cdfc:	0023883a 	mov	r17,zero
   2ce00:	001b883a 	mov	r13,zero
   2ce04:	a5000044 	addi	r20,r20,1
   2ce08:	10fff804 	addi	r3,r2,-32
   2ce0c:	19001668 	cmpgeui	r4,r3,89
   2ce10:	20006c1e 	bne	r4,zero,2cfc4 <___vfiprintf_internal_r+0x2c4>
   2ce14:	180690ba 	slli	r3,r3,2
   2ce18:	010000f4 	movhi	r4,3
   2ce1c:	1909883a 	add	r4,r3,r4
   2ce20:	20f38a17 	ldw	r3,-12760(r4)
   2ce24:	1800683a 	jmp	r3
   2ce28:	0002d764 	muli	zero,zero,2909
   2ce2c:	0002cfc4 	movi	zero,2879
   2ce30:	0002cfc4 	movi	zero,2879
   2ce34:	0002d758 	cmpnei	zero,zero,2909
   2ce38:	0002cfc4 	movi	zero,2879
   2ce3c:	0002cfc4 	movi	zero,2879
   2ce40:	0002cfc4 	movi	zero,2879
   2ce44:	0002cfc4 	movi	zero,2879
   2ce48:	0002cfc4 	movi	zero,2879
   2ce4c:	0002cfc4 	movi	zero,2879
   2ce50:	0002d730 	cmpltui	zero,zero,2908
   2ce54:	0002d720 	cmpeqi	zero,zero,2908
   2ce58:	0002cfc4 	movi	zero,2879
   2ce5c:	0002d708 	cmpgei	zero,zero,2908
   2ce60:	0002d6bc 	xorhi	zero,zero,2906
   2ce64:	0002cfc4 	movi	zero,2879
   2ce68:	0002d6b0 	cmpltui	zero,zero,2906
   2ce6c:	0002cf8c 	andi	zero,zero,2878
   2ce70:	0002cf8c 	andi	zero,zero,2878
   2ce74:	0002cf8c 	andi	zero,zero,2878
   2ce78:	0002cf8c 	andi	zero,zero,2878
   2ce7c:	0002cf8c 	andi	zero,zero,2878
   2ce80:	0002cf8c 	andi	zero,zero,2878
   2ce84:	0002cf8c 	andi	zero,zero,2878
   2ce88:	0002cf8c 	andi	zero,zero,2878
   2ce8c:	0002cf8c 	andi	zero,zero,2878
   2ce90:	0002cfc4 	movi	zero,2879
   2ce94:	0002cfc4 	movi	zero,2879
   2ce98:	0002cfc4 	movi	zero,2879
   2ce9c:	0002cfc4 	movi	zero,2879
   2cea0:	0002cfc4 	movi	zero,2879
   2cea4:	0002cfc4 	movi	zero,2879
   2cea8:	0002cfc4 	movi	zero,2879
   2ceac:	0002cfc4 	movi	zero,2879
   2ceb0:	0002cfc4 	movi	zero,2879
   2ceb4:	0002cfc4 	movi	zero,2879
   2ceb8:	0002d5ac 	andhi	zero,zero,2902
   2cebc:	0002cfc4 	movi	zero,2879
   2cec0:	0002cfc4 	movi	zero,2879
   2cec4:	0002cfc4 	movi	zero,2879
   2cec8:	0002cfc4 	movi	zero,2879
   2cecc:	0002cfc4 	movi	zero,2879
   2ced0:	0002cfc4 	movi	zero,2879
   2ced4:	0002cfc4 	movi	zero,2879
   2ced8:	0002cfc4 	movi	zero,2879
   2cedc:	0002cfc4 	movi	zero,2879
   2cee0:	0002cfc4 	movi	zero,2879
   2cee4:	0002d224 	muli	zero,zero,2888
   2cee8:	0002cfc4 	movi	zero,2879
   2ceec:	0002cfc4 	movi	zero,2879
   2cef0:	0002cfc4 	movi	zero,2879
   2cef4:	0002cfc4 	movi	zero,2879
   2cef8:	0002cfc4 	movi	zero,2879
   2cefc:	0002d1fc 	xorhi	zero,zero,2887
   2cf00:	0002cfc4 	movi	zero,2879
   2cf04:	0002cfc4 	movi	zero,2879
   2cf08:	0002d7b8 	rdprs	zero,zero,2910
   2cf0c:	0002cfc4 	movi	zero,2879
   2cf10:	0002cfc4 	movi	zero,2879
   2cf14:	0002cfc4 	movi	zero,2879
   2cf18:	0002cfc4 	movi	zero,2879
   2cf1c:	0002cfc4 	movi	zero,2879
   2cf20:	0002cfc4 	movi	zero,2879
   2cf24:	0002cfc4 	movi	zero,2879
   2cf28:	0002cfc4 	movi	zero,2879
   2cf2c:	0002cfc4 	movi	zero,2879
   2cf30:	0002cfc4 	movi	zero,2879
   2cf34:	0002d790 	cmplti	zero,zero,2910
   2cf38:	0002d444 	movi	zero,2897
   2cf3c:	0002cfc4 	movi	zero,2879
   2cf40:	0002cfc4 	movi	zero,2879
   2cf44:	0002cfc4 	movi	zero,2879
   2cf48:	0002d4b8 	rdprs	zero,zero,2898
   2cf4c:	0002d444 	movi	zero,2897
   2cf50:	0002cfc4 	movi	zero,2879
   2cf54:	0002cfc4 	movi	zero,2879
   2cf58:	0002d83c 	xorhi	zero,zero,2912
   2cf5c:	0002cfc4 	movi	zero,2879
   2cf60:	0002d800 	call	2d80 <__alt_mem_onchip_memory2_0-0x1d280>
   2cf64:	0002d228 	cmpgeui	zero,zero,2888
   2cf68:	0002d570 	cmpltui	zero,zero,2901
   2cf6c:	0002d564 	muli	zero,zero,2901
   2cf70:	0002cfc4 	movi	zero,2879
   2cf74:	0002d50c 	andi	zero,zero,2900
   2cf78:	0002cfc4 	movi	zero,2879
   2cf7c:	0002d200 	call	2d20 <__alt_mem_onchip_memory2_0-0x1d2e0>
   2cf80:	0002cfc4 	movi	zero,2879
   2cf84:	0002cfc4 	movi	zero,2879
   2cf88:	0002d4c4 	movi	zero,2899
   2cf8c:	0023883a 	mov	r17,zero
   2cf90:	113ff404 	addi	r4,r2,-48
   2cf94:	880690ba 	slli	r3,r17,2
   2cf98:	a0800007 	ldb	r2,0(r20)
   2cf9c:	a5000044 	addi	r20,r20,1
   2cfa0:	1c63883a 	add	r17,r3,r17
   2cfa4:	8c63883a 	add	r17,r17,r17
   2cfa8:	2463883a 	add	r17,r4,r17
   2cfac:	113ff404 	addi	r4,r2,-48
   2cfb0:	20c002b0 	cmpltui	r3,r4,10
   2cfb4:	183ff71e 	bne	r3,zero,2cf94 <___vfiprintf_internal_r+0x294>
   2cfb8:	10fff804 	addi	r3,r2,-32
   2cfbc:	19001668 	cmpgeui	r4,r3,89
   2cfc0:	203f9426 	beq	r4,zero,2ce14 <___vfiprintf_internal_r+0x114>
   2cfc4:	29403fcc 	andi	r5,r5,255
   2cfc8:	2803ed1e 	bne	r5,zero,2df80 <___vfiprintf_internal_r+0x1280>
   2cfcc:	10005f26 	beq	r2,zero,2d14c <___vfiprintf_internal_r+0x44c>
   2cfd0:	d8800d05 	stb	r2,52(sp)
   2cfd4:	d8000945 	stb	zero,37(sp)
   2cfd8:	05c00044 	movi	r23,1
   2cfdc:	07000044 	movi	fp,1
   2cfe0:	dcc00d04 	addi	r19,sp,52
   2cfe4:	db400015 	stw	r13,0(sp)
   2cfe8:	0011883a 	mov	r8,zero
   2cfec:	d8800017 	ldw	r2,0(sp)
   2cff0:	1380008c 	andi	r14,r2,2
   2cff4:	70000126 	beq	r14,zero,2cffc <___vfiprintf_internal_r+0x2fc>
   2cff8:	bdc00084 	addi	r23,r23,2
   2cffc:	d8800017 	ldw	r2,0(sp)
   2d000:	d9000b17 	ldw	r4,44(sp)
   2d004:	1340210c 	andi	r13,r2,132
   2d008:	21800044 	addi	r6,r4,1
   2d00c:	d8800c17 	ldw	r2,48(sp)
   2d010:	300b883a 	mov	r5,r6
   2d014:	6800021e 	bne	r13,zero,2d020 <___vfiprintf_internal_r+0x320>
   2d018:	8dc7c83a 	sub	r3,r17,r23
   2d01c:	00c2e216 	blt	zero,r3,2dba8 <___vfiprintf_internal_r+0xea8>
   2d020:	d8c00947 	ldb	r3,37(sp)
   2d024:	81800204 	addi	r6,r16,8
   2d028:	18000d26 	beq	r3,zero,2d060 <___vfiprintf_internal_r+0x360>
   2d02c:	d8c00944 	addi	r3,sp,37
   2d030:	10800044 	addi	r2,r2,1
   2d034:	80c00015 	stw	r3,0(r16)
   2d038:	00c00044 	movi	r3,1
   2d03c:	80c00115 	stw	r3,4(r16)
   2d040:	d8800c15 	stw	r2,48(sp)
   2d044:	d9400b15 	stw	r5,44(sp)
   2d048:	28c00208 	cmpgei	r3,r5,8
   2d04c:	18029a1e 	bne	r3,zero,2dab8 <___vfiprintf_internal_r+0xdb8>
   2d050:	2809883a 	mov	r4,r5
   2d054:	3021883a 	mov	r16,r6
   2d058:	29400044 	addi	r5,r5,1
   2d05c:	31800204 	addi	r6,r6,8
   2d060:	70001826 	beq	r14,zero,2d0c4 <___vfiprintf_internal_r+0x3c4>
   2d064:	d8c00984 	addi	r3,sp,38
   2d068:	10800084 	addi	r2,r2,2
   2d06c:	80c00015 	stw	r3,0(r16)
   2d070:	00c00084 	movi	r3,2
   2d074:	80c00115 	stw	r3,4(r16)
   2d078:	d8800c15 	stw	r2,48(sp)
   2d07c:	d9400b15 	stw	r5,44(sp)
   2d080:	28c00208 	cmpgei	r3,r5,8
   2d084:	1802a426 	beq	r3,zero,2db18 <___vfiprintf_internal_r+0xe18>
   2d088:	10032226 	beq	r2,zero,2dd14 <___vfiprintf_internal_r+0x1014>
   2d08c:	d9800a04 	addi	r6,sp,40
   2d090:	a80b883a 	mov	r5,r21
   2d094:	b009883a 	mov	r4,r22
   2d098:	da000315 	stw	r8,12(sp)
   2d09c:	db400215 	stw	r13,8(sp)
   2d0a0:	002cbf40 	call	2cbf4 <__sprint_r.part.0>
   2d0a4:	10002b1e 	bne	r2,zero,2d154 <___vfiprintf_internal_r+0x454>
   2d0a8:	d9000b17 	ldw	r4,44(sp)
   2d0ac:	d8800c17 	ldw	r2,48(sp)
   2d0b0:	da000317 	ldw	r8,12(sp)
   2d0b4:	db400217 	ldw	r13,8(sp)
   2d0b8:	d9801904 	addi	r6,sp,100
   2d0bc:	21400044 	addi	r5,r4,1
   2d0c0:	9021883a 	mov	r16,r18
   2d0c4:	6b402018 	cmpnei	r13,r13,128
   2d0c8:	6801e526 	beq	r13,zero,2d860 <___vfiprintf_internal_r+0xb60>
   2d0cc:	4711c83a 	sub	r8,r8,fp
   2d0d0:	02022416 	blt	zero,r8,2d964 <___vfiprintf_internal_r+0xc64>
   2d0d4:	e085883a 	add	r2,fp,r2
   2d0d8:	d9400b15 	stw	r5,44(sp)
   2d0dc:	84c00015 	stw	r19,0(r16)
   2d0e0:	87000115 	stw	fp,4(r16)
   2d0e4:	d8800c15 	stw	r2,48(sp)
   2d0e8:	29400210 	cmplti	r5,r5,8
   2d0ec:	2800081e 	bne	r5,zero,2d110 <___vfiprintf_internal_r+0x410>
   2d0f0:	10009826 	beq	r2,zero,2d354 <___vfiprintf_internal_r+0x654>
   2d0f4:	d9800a04 	addi	r6,sp,40
   2d0f8:	a80b883a 	mov	r5,r21
   2d0fc:	b009883a 	mov	r4,r22
   2d100:	002cbf40 	call	2cbf4 <__sprint_r.part.0>
   2d104:	1000131e 	bne	r2,zero,2d154 <___vfiprintf_internal_r+0x454>
   2d108:	d8800c17 	ldw	r2,48(sp)
   2d10c:	900d883a 	mov	r6,r18
   2d110:	d8c00017 	ldw	r3,0(sp)
   2d114:	1cc0010c 	andi	r19,r3,4
   2d118:	98000226 	beq	r19,zero,2d124 <___vfiprintf_internal_r+0x424>
   2d11c:	8de1c83a 	sub	r16,r17,r23
   2d120:	04009316 	blt	zero,r16,2d370 <___vfiprintf_internal_r+0x670>
   2d124:	8dc0010e 	bge	r17,r23,2d12c <___vfiprintf_internal_r+0x42c>
   2d128:	b823883a 	mov	r17,r23
   2d12c:	d8c00117 	ldw	r3,4(sp)
   2d130:	1c47883a 	add	r3,r3,r17
   2d134:	d8c00115 	stw	r3,4(sp)
   2d138:	1002551e 	bne	r2,zero,2da90 <___vfiprintf_internal_r+0xd90>
   2d13c:	a0800007 	ldb	r2,0(r20)
   2d140:	d8000b15 	stw	zero,44(sp)
   2d144:	9021883a 	mov	r16,r18
   2d148:	103f181e 	bne	r2,zero,2cdac <___vfiprintf_internal_r+0xac>
   2d14c:	d8800c17 	ldw	r2,48(sp)
   2d150:	10038d1e 	bne	r2,zero,2df88 <___vfiprintf_internal_r+0x1288>
   2d154:	a880030b 	ldhu	r2,12(r21)
   2d158:	1080100c 	andi	r2,r2,64
   2d15c:	1003a51e 	bne	r2,zero,2dff4 <___vfiprintf_internal_r+0x12f4>
   2d160:	d8800117 	ldw	r2,4(sp)
   2d164:	dfc03017 	ldw	ra,192(sp)
   2d168:	df002f17 	ldw	fp,188(sp)
   2d16c:	ddc02e17 	ldw	r23,184(sp)
   2d170:	dd802d17 	ldw	r22,180(sp)
   2d174:	dd402c17 	ldw	r21,176(sp)
   2d178:	dd002b17 	ldw	r20,172(sp)
   2d17c:	dcc02a17 	ldw	r19,168(sp)
   2d180:	dc802917 	ldw	r18,164(sp)
   2d184:	dc402817 	ldw	r17,160(sp)
   2d188:	dc002717 	ldw	r16,156(sp)
   2d18c:	dec03104 	addi	sp,sp,196
   2d190:	f800283a 	ret
   2d194:	a80b883a 	mov	r5,r21
   2d198:	b009883a 	mov	r4,r22
   2d19c:	00278740 	call	27874 <__swsetup_r>
   2d1a0:	1003941e 	bne	r2,zero,2dff4 <___vfiprintf_internal_r+0x12f4>
   2d1a4:	a880030b 	ldhu	r2,12(r21)
   2d1a8:	1080068c 	andi	r2,r2,26
   2d1ac:	10800298 	cmpnei	r2,r2,10
   2d1b0:	103ef51e 	bne	r2,zero,2cd88 <___vfiprintf_internal_r+0x88>
   2d1b4:	a880038f 	ldh	r2,14(r21)
   2d1b8:	103ef316 	blt	r2,zero,2cd88 <___vfiprintf_internal_r+0x88>
   2d1bc:	d9c00417 	ldw	r7,16(sp)
   2d1c0:	a00d883a 	mov	r6,r20
   2d1c4:	a80b883a 	mov	r5,r21
   2d1c8:	b009883a 	mov	r4,r22
   2d1cc:	dfc03017 	ldw	ra,192(sp)
   2d1d0:	df002f17 	ldw	fp,188(sp)
   2d1d4:	ddc02e17 	ldw	r23,184(sp)
   2d1d8:	dd802d17 	ldw	r22,180(sp)
   2d1dc:	dd402c17 	ldw	r21,176(sp)
   2d1e0:	dd002b17 	ldw	r20,172(sp)
   2d1e4:	dcc02a17 	ldw	r19,168(sp)
   2d1e8:	dc802917 	ldw	r18,164(sp)
   2d1ec:	dc402817 	ldw	r17,160(sp)
   2d1f0:	dc002717 	ldw	r16,156(sp)
   2d1f4:	dec03104 	addi	sp,sp,196
   2d1f8:	002e0601 	jmpi	2e060 <__sbprintf>
   2d1fc:	6b400414 	ori	r13,r13,16
   2d200:	6880080c 	andi	r2,r13,32
   2d204:	10004726 	beq	r2,zero,2d324 <___vfiprintf_internal_r+0x624>
   2d208:	d8c00417 	ldw	r3,16(sp)
   2d20c:	00800044 	movi	r2,1
   2d210:	1dc00017 	ldw	r23,0(r3)
   2d214:	1f000117 	ldw	fp,4(r3)
   2d218:	18c00204 	addi	r3,r3,8
   2d21c:	d8c00415 	stw	r3,16(sp)
   2d220:	00000906 	br	2d248 <___vfiprintf_internal_r+0x548>
   2d224:	6b400414 	ori	r13,r13,16
   2d228:	6880080c 	andi	r2,r13,32
   2d22c:	10003126 	beq	r2,zero,2d2f4 <___vfiprintf_internal_r+0x5f4>
   2d230:	d8c00417 	ldw	r3,16(sp)
   2d234:	0005883a 	mov	r2,zero
   2d238:	1dc00017 	ldw	r23,0(r3)
   2d23c:	1f000117 	ldw	fp,4(r3)
   2d240:	18c00204 	addi	r3,r3,8
   2d244:	d8c00415 	stw	r3,16(sp)
   2d248:	d8000945 	stb	zero,37(sp)
   2d24c:	40ffffe0 	cmpeqi	r3,r8,-1
   2d250:	001d883a 	mov	r14,zero
   2d254:	1800f01e 	bne	r3,zero,2d618 <___vfiprintf_internal_r+0x918>
   2d258:	04ffdfc4 	movi	r19,-129
   2d25c:	6cc8703a 	and	r4,r13,r19
   2d260:	bf06b03a 	or	r3,r23,fp
   2d264:	d9000015 	stw	r4,0(sp)
   2d268:	1802301e 	bne	r3,zero,2db2c <___vfiprintf_internal_r+0xe2c>
   2d26c:	4001f31e 	bne	r8,zero,2da3c <___vfiprintf_internal_r+0xd3c>
   2d270:	10029e1e 	bne	r2,zero,2dcec <___vfiprintf_internal_r+0xfec>
   2d274:	6f00004c 	andi	fp,r13,1
   2d278:	e002bc26 	beq	fp,zero,2dd6c <___vfiprintf_internal_r+0x106c>
   2d27c:	00800c04 	movi	r2,48
   2d280:	d88016c5 	stb	r2,91(sp)
   2d284:	dcc016c4 	addi	r19,sp,91
   2d288:	00010006 	br	2d68c <___vfiprintf_internal_r+0x98c>
   2d28c:	8d27c83a 	sub	r19,r17,r20
   2d290:	8d3fae26 	beq	r17,r20,2d14c <___vfiprintf_internal_r+0x44c>
   2d294:	d8c00c17 	ldw	r3,48(sp)
   2d298:	d8800b17 	ldw	r2,44(sp)
   2d29c:	85000015 	stw	r20,0(r16)
   2d2a0:	98c7883a 	add	r3,r19,r3
   2d2a4:	10800044 	addi	r2,r2,1
   2d2a8:	d8800b15 	stw	r2,44(sp)
   2d2ac:	84c00115 	stw	r19,4(r16)
   2d2b0:	d8c00c15 	stw	r3,48(sp)
   2d2b4:	10800208 	cmpgei	r2,r2,8
   2d2b8:	1000061e 	bne	r2,zero,2d2d4 <___vfiprintf_internal_r+0x5d4>
   2d2bc:	84000204 	addi	r16,r16,8
   2d2c0:	d8c00117 	ldw	r3,4(sp)
   2d2c4:	88800003 	ldbu	r2,0(r17)
   2d2c8:	1cc7883a 	add	r3,r3,r19
   2d2cc:	d8c00115 	stw	r3,4(sp)
   2d2d0:	003ec006 	br	2cdd4 <___vfiprintf_internal_r+0xd4>
   2d2d4:	18028126 	beq	r3,zero,2dcdc <___vfiprintf_internal_r+0xfdc>
   2d2d8:	d9800a04 	addi	r6,sp,40
   2d2dc:	a80b883a 	mov	r5,r21
   2d2e0:	b009883a 	mov	r4,r22
   2d2e4:	002cbf40 	call	2cbf4 <__sprint_r.part.0>
   2d2e8:	103f9a1e 	bne	r2,zero,2d154 <___vfiprintf_internal_r+0x454>
   2d2ec:	9021883a 	mov	r16,r18
   2d2f0:	003ff306 	br	2d2c0 <___vfiprintf_internal_r+0x5c0>
   2d2f4:	d9000417 	ldw	r4,16(sp)
   2d2f8:	6880040c 	andi	r2,r13,16
   2d2fc:	20c00104 	addi	r3,r4,4
   2d300:	1002ac1e 	bne	r2,zero,2ddb4 <___vfiprintf_internal_r+0x10b4>
   2d304:	6880100c 	andi	r2,r13,64
   2d308:	1002fb26 	beq	r2,zero,2def8 <___vfiprintf_internal_r+0x11f8>
   2d30c:	d8800417 	ldw	r2,16(sp)
   2d310:	0039883a 	mov	fp,zero
   2d314:	d8c00415 	stw	r3,16(sp)
   2d318:	15c0000b 	ldhu	r23,0(r2)
   2d31c:	0005883a 	mov	r2,zero
   2d320:	003fc906 	br	2d248 <___vfiprintf_internal_r+0x548>
   2d324:	d9000417 	ldw	r4,16(sp)
   2d328:	6880040c 	andi	r2,r13,16
   2d32c:	20c00104 	addi	r3,r4,4
   2d330:	1002af1e 	bne	r2,zero,2ddf0 <___vfiprintf_internal_r+0x10f0>
   2d334:	6880100c 	andi	r2,r13,64
   2d338:	1002fb26 	beq	r2,zero,2df28 <___vfiprintf_internal_r+0x1228>
   2d33c:	d8800417 	ldw	r2,16(sp)
   2d340:	0039883a 	mov	fp,zero
   2d344:	d8c00415 	stw	r3,16(sp)
   2d348:	15c0000b 	ldhu	r23,0(r2)
   2d34c:	00800044 	movi	r2,1
   2d350:	003fbd06 	br	2d248 <___vfiprintf_internal_r+0x548>
   2d354:	d8c00017 	ldw	r3,0(sp)
   2d358:	d8000b15 	stw	zero,44(sp)
   2d35c:	1cc0010c 	andi	r19,r3,4
   2d360:	98024c26 	beq	r19,zero,2dc94 <___vfiprintf_internal_r+0xf94>
   2d364:	8de1c83a 	sub	r16,r17,r23
   2d368:	04024a0e 	bge	zero,r16,2dc94 <___vfiprintf_internal_r+0xf94>
   2d36c:	900d883a 	mov	r6,r18
   2d370:	80c00450 	cmplti	r3,r16,17
   2d374:	d9000b17 	ldw	r4,44(sp)
   2d378:	01c000f4 	movhi	r7,3
   2d37c:	18031a1e 	bne	r3,zero,2dfe8 <___vfiprintf_internal_r+0x12e8>
   2d380:	39ccf804 	addi	r7,r7,13280
   2d384:	04c00404 	movi	r19,16
   2d388:	00000606 	br	2d3a4 <___vfiprintf_internal_r+0x6a4>
   2d38c:	21400084 	addi	r5,r4,2
   2d390:	31800204 	addi	r6,r6,8
   2d394:	1809883a 	mov	r4,r3
   2d398:	843ffc04 	addi	r16,r16,-16
   2d39c:	80c00448 	cmpgei	r3,r16,17
   2d3a0:	18001726 	beq	r3,zero,2d400 <___vfiprintf_internal_r+0x700>
   2d3a4:	20c00044 	addi	r3,r4,1
   2d3a8:	10800404 	addi	r2,r2,16
   2d3ac:	31c00015 	stw	r7,0(r6)
   2d3b0:	34c00115 	stw	r19,4(r6)
   2d3b4:	d8800c15 	stw	r2,48(sp)
   2d3b8:	d8c00b15 	stw	r3,44(sp)
   2d3bc:	19400208 	cmpgei	r5,r3,8
   2d3c0:	283ff226 	beq	r5,zero,2d38c <___vfiprintf_internal_r+0x68c>
   2d3c4:	d9800a04 	addi	r6,sp,40
   2d3c8:	a80b883a 	mov	r5,r21
   2d3cc:	b009883a 	mov	r4,r22
   2d3d0:	10011f26 	beq	r2,zero,2d850 <___vfiprintf_internal_r+0xb50>
   2d3d4:	d9c00015 	stw	r7,0(sp)
   2d3d8:	002cbf40 	call	2cbf4 <__sprint_r.part.0>
   2d3dc:	103f5d1e 	bne	r2,zero,2d154 <___vfiprintf_internal_r+0x454>
   2d3e0:	d9000b17 	ldw	r4,44(sp)
   2d3e4:	843ffc04 	addi	r16,r16,-16
   2d3e8:	80c00448 	cmpgei	r3,r16,17
   2d3ec:	d8800c17 	ldw	r2,48(sp)
   2d3f0:	d9c00017 	ldw	r7,0(sp)
   2d3f4:	900d883a 	mov	r6,r18
   2d3f8:	21400044 	addi	r5,r4,1
   2d3fc:	183fe91e 	bne	r3,zero,2d3a4 <___vfiprintf_internal_r+0x6a4>
   2d400:	1405883a 	add	r2,r2,r16
   2d404:	d9400b15 	stw	r5,44(sp)
   2d408:	31c00015 	stw	r7,0(r6)
   2d40c:	34000115 	stw	r16,4(r6)
   2d410:	d8800c15 	stw	r2,48(sp)
   2d414:	29400210 	cmplti	r5,r5,8
   2d418:	283f421e 	bne	r5,zero,2d124 <___vfiprintf_internal_r+0x424>
   2d41c:	10021d26 	beq	r2,zero,2dc94 <___vfiprintf_internal_r+0xf94>
   2d420:	d9800a04 	addi	r6,sp,40
   2d424:	a80b883a 	mov	r5,r21
   2d428:	b009883a 	mov	r4,r22
   2d42c:	002cbf40 	call	2cbf4 <__sprint_r.part.0>
   2d430:	103f481e 	bne	r2,zero,2d154 <___vfiprintf_internal_r+0x454>
   2d434:	d8800c17 	ldw	r2,48(sp)
   2d438:	003f3a06 	br	2d124 <___vfiprintf_internal_r+0x424>
   2d43c:	00299b00 	call	299b0 <__sinit>
   2d440:	003e4106 	br	2cd48 <___vfiprintf_internal_r+0x48>
   2d444:	29403fcc 	andi	r5,r5,255
   2d448:	2802da1e 	bne	r5,zero,2dfb4 <___vfiprintf_internal_r+0x12b4>
   2d44c:	6880080c 	andi	r2,r13,32
   2d450:	10005b26 	beq	r2,zero,2d5c0 <___vfiprintf_internal_r+0x8c0>
   2d454:	d8c00417 	ldw	r3,16(sp)
   2d458:	18800117 	ldw	r2,4(r3)
   2d45c:	1dc00017 	ldw	r23,0(r3)
   2d460:	18c00204 	addi	r3,r3,8
   2d464:	d8c00415 	stw	r3,16(sp)
   2d468:	1039883a 	mov	fp,r2
   2d46c:	10006016 	blt	r2,zero,2d5f0 <___vfiprintf_internal_r+0x8f0>
   2d470:	40bfffd8 	cmpnei	r2,r8,-1
   2d474:	db800943 	ldbu	r14,37(sp)
   2d478:	10000626 	beq	r2,zero,2d494 <___vfiprintf_internal_r+0x794>
   2d47c:	04ffdfc4 	movi	r19,-129
   2d480:	6cc6703a 	and	r3,r13,r19
   2d484:	bf04b03a 	or	r2,r23,fp
   2d488:	d8c00015 	stw	r3,0(sp)
   2d48c:	10021626 	beq	r2,zero,2dce8 <___vfiprintf_internal_r+0xfe8>
   2d490:	db400017 	ldw	r13,0(sp)
   2d494:	e001a71e 	bne	fp,zero,2db34 <___vfiprintf_internal_r+0xe34>
   2d498:	b88002a8 	cmpgeui	r2,r23,10
   2d49c:	1001a51e 	bne	r2,zero,2db34 <___vfiprintf_internal_r+0xe34>
   2d4a0:	bdc00c04 	addi	r23,r23,48
   2d4a4:	ddc016c5 	stb	r23,91(sp)
   2d4a8:	db400015 	stw	r13,0(sp)
   2d4ac:	07000044 	movi	fp,1
   2d4b0:	dcc016c4 	addi	r19,sp,91
   2d4b4:	00007506 	br	2d68c <___vfiprintf_internal_r+0x98c>
   2d4b8:	a0800007 	ldb	r2,0(r20)
   2d4bc:	6b401014 	ori	r13,r13,64
   2d4c0:	003e5006 	br	2ce04 <___vfiprintf_internal_r+0x104>
   2d4c4:	29403fcc 	andi	r5,r5,255
   2d4c8:	2802bc1e 	bne	r5,zero,2dfbc <___vfiprintf_internal_r+0x12bc>
   2d4cc:	00c000f4 	movhi	r3,3
   2d4d0:	18cc6d04 	addi	r3,r3,12724
   2d4d4:	d8c00515 	stw	r3,20(sp)
   2d4d8:	68c0080c 	andi	r3,r13,32
   2d4dc:	1800bd26 	beq	r3,zero,2d7d4 <___vfiprintf_internal_r+0xad4>
   2d4e0:	d8c00417 	ldw	r3,16(sp)
   2d4e4:	1dc00017 	ldw	r23,0(r3)
   2d4e8:	1f000117 	ldw	fp,4(r3)
   2d4ec:	18c00204 	addi	r3,r3,8
   2d4f0:	d8c00415 	stw	r3,16(sp)
   2d4f4:	68c0004c 	andi	r3,r13,1
   2d4f8:	18000226 	beq	r3,zero,2d504 <___vfiprintf_internal_r+0x804>
   2d4fc:	bf06b03a 	or	r3,r23,fp
   2d500:	1802261e 	bne	r3,zero,2dd9c <___vfiprintf_internal_r+0x109c>
   2d504:	00800084 	movi	r2,2
   2d508:	003f4f06 	br	2d248 <___vfiprintf_internal_r+0x548>
   2d50c:	d8800417 	ldw	r2,16(sp)
   2d510:	d8000945 	stb	zero,37(sp)
   2d514:	14c00017 	ldw	r19,0(r2)
   2d518:	10c00104 	addi	r3,r2,4
   2d51c:	98026926 	beq	r19,zero,2dec4 <___vfiprintf_internal_r+0x11c4>
   2d520:	40bfffe0 	cmpeqi	r2,r8,-1
   2d524:	1002411e 	bne	r2,zero,2de2c <___vfiprintf_internal_r+0x112c>
   2d528:	400d883a 	mov	r6,r8
   2d52c:	000b883a 	mov	r5,zero
   2d530:	9809883a 	mov	r4,r19
   2d534:	d8c00315 	stw	r3,12(sp)
   2d538:	db400215 	stw	r13,8(sp)
   2d53c:	da000015 	stw	r8,0(sp)
   2d540:	002ae600 	call	2ae60 <memchr>
   2d544:	da000017 	ldw	r8,0(sp)
   2d548:	db400217 	ldw	r13,8(sp)
   2d54c:	d8c00317 	ldw	r3,12(sp)
   2d550:	10029426 	beq	r2,zero,2dfa4 <___vfiprintf_internal_r+0x12a4>
   2d554:	14f9c83a 	sub	fp,r2,r19
   2d558:	e02f883a 	mov	r23,fp
   2d55c:	d8c00415 	stw	r3,16(sp)
   2d560:	003ea006 	br	2cfe4 <___vfiprintf_internal_r+0x2e4>
   2d564:	a0800007 	ldb	r2,0(r20)
   2d568:	6b400814 	ori	r13,r13,32
   2d56c:	003e2506 	br	2ce04 <___vfiprintf_internal_r+0x104>
   2d570:	d8c00417 	ldw	r3,16(sp)
   2d574:	00800c04 	movi	r2,48
   2d578:	d8800985 	stb	r2,38(sp)
   2d57c:	00801e04 	movi	r2,120
   2d580:	010000f4 	movhi	r4,3
   2d584:	d88009c5 	stb	r2,39(sp)
   2d588:	18800104 	addi	r2,r3,4
   2d58c:	d8800415 	stw	r2,16(sp)
   2d590:	208c6d04 	addi	r2,r4,12724
   2d594:	d8800515 	stw	r2,20(sp)
   2d598:	1dc00017 	ldw	r23,0(r3)
   2d59c:	0039883a 	mov	fp,zero
   2d5a0:	6b400094 	ori	r13,r13,2
   2d5a4:	00800084 	movi	r2,2
   2d5a8:	003f2706 	br	2d248 <___vfiprintf_internal_r+0x548>
   2d5ac:	29403fcc 	andi	r5,r5,255
   2d5b0:	2802841e 	bne	r5,zero,2dfc4 <___vfiprintf_internal_r+0x12c4>
   2d5b4:	6b400414 	ori	r13,r13,16
   2d5b8:	6880080c 	andi	r2,r13,32
   2d5bc:	103fa51e 	bne	r2,zero,2d454 <___vfiprintf_internal_r+0x754>
   2d5c0:	d9000417 	ldw	r4,16(sp)
   2d5c4:	6880040c 	andi	r2,r13,16
   2d5c8:	20c00104 	addi	r3,r4,4
   2d5cc:	1001ee1e 	bne	r2,zero,2dd88 <___vfiprintf_internal_r+0x1088>
   2d5d0:	6880100c 	andi	r2,r13,64
   2d5d4:	10024e26 	beq	r2,zero,2df10 <___vfiprintf_internal_r+0x1210>
   2d5d8:	d8800417 	ldw	r2,16(sp)
   2d5dc:	d8c00415 	stw	r3,16(sp)
   2d5e0:	15c0000f 	ldh	r23,0(r2)
   2d5e4:	b839d7fa 	srai	fp,r23,31
   2d5e8:	e005883a 	mov	r2,fp
   2d5ec:	103fa00e 	bge	r2,zero,2d470 <___vfiprintf_internal_r+0x770>
   2d5f0:	b804c03a 	cmpne	r2,r23,zero
   2d5f4:	0739c83a 	sub	fp,zero,fp
   2d5f8:	e0b9c83a 	sub	fp,fp,r2
   2d5fc:	00800b44 	movi	r2,45
   2d600:	d8800945 	stb	r2,37(sp)
   2d604:	40ffffe0 	cmpeqi	r3,r8,-1
   2d608:	05efc83a 	sub	r23,zero,r23
   2d60c:	03800b44 	movi	r14,45
   2d610:	00800044 	movi	r2,1
   2d614:	183f1026 	beq	r3,zero,2d258 <___vfiprintf_internal_r+0x558>
   2d618:	10c00060 	cmpeqi	r3,r2,1
   2d61c:	183f9d1e 	bne	r3,zero,2d494 <___vfiprintf_internal_r+0x794>
   2d620:	108000a0 	cmpeqi	r2,r2,2
   2d624:	10010a1e 	bne	r2,zero,2da50 <___vfiprintf_internal_r+0xd50>
   2d628:	9027883a 	mov	r19,r18
   2d62c:	e008977a 	slli	r4,fp,29
   2d630:	b806d0fa 	srli	r3,r23,3
   2d634:	e038d0fa 	srli	fp,fp,3
   2d638:	b88001cc 	andi	r2,r23,7
   2d63c:	10800c04 	addi	r2,r2,48
   2d640:	20eeb03a 	or	r23,r4,r3
   2d644:	98bfffc5 	stb	r2,-1(r19)
   2d648:	bf06b03a 	or	r3,r23,fp
   2d64c:	980b883a 	mov	r5,r19
   2d650:	9cffffc4 	addi	r19,r19,-1
   2d654:	183ff51e 	bne	r3,zero,2d62c <___vfiprintf_internal_r+0x92c>
   2d658:	68c0004c 	andi	r3,r13,1
   2d65c:	18010926 	beq	r3,zero,2da84 <___vfiprintf_internal_r+0xd84>
   2d660:	10803fcc 	andi	r2,r2,255
   2d664:	1080201c 	xori	r2,r2,128
   2d668:	10bfe004 	addi	r2,r2,-128
   2d66c:	10800c18 	cmpnei	r2,r2,48
   2d670:	10010426 	beq	r2,zero,2da84 <___vfiprintf_internal_r+0xd84>
   2d674:	297fff84 	addi	r5,r5,-2
   2d678:	00800c04 	movi	r2,48
   2d67c:	98bfffc5 	stb	r2,-1(r19)
   2d680:	9179c83a 	sub	fp,r18,r5
   2d684:	db400015 	stw	r13,0(sp)
   2d688:	2827883a 	mov	r19,r5
   2d68c:	402f883a 	mov	r23,r8
   2d690:	4700010e 	bge	r8,fp,2d698 <___vfiprintf_internal_r+0x998>
   2d694:	e02f883a 	mov	r23,fp
   2d698:	73803fcc 	andi	r14,r14,255
   2d69c:	7380201c 	xori	r14,r14,128
   2d6a0:	73bfe004 	addi	r14,r14,-128
   2d6a4:	703e5126 	beq	r14,zero,2cfec <___vfiprintf_internal_r+0x2ec>
   2d6a8:	bdc00044 	addi	r23,r23,1
   2d6ac:	003e4f06 	br	2cfec <___vfiprintf_internal_r+0x2ec>
   2d6b0:	a0800007 	ldb	r2,0(r20)
   2d6b4:	6b402014 	ori	r13,r13,128
   2d6b8:	003dd206 	br	2ce04 <___vfiprintf_internal_r+0x104>
   2d6bc:	a0800007 	ldb	r2,0(r20)
   2d6c0:	a0c00044 	addi	r3,r20,1
   2d6c4:	11000aa0 	cmpeqi	r4,r2,42
   2d6c8:	2002521e 	bne	r4,zero,2e014 <___vfiprintf_internal_r+0x1314>
   2d6cc:	113ff404 	addi	r4,r2,-48
   2d6d0:	21c002b0 	cmpltui	r7,r4,10
   2d6d4:	1829883a 	mov	r20,r3
   2d6d8:	0011883a 	mov	r8,zero
   2d6dc:	383dca26 	beq	r7,zero,2ce08 <___vfiprintf_internal_r+0x108>
   2d6e0:	400690ba 	slli	r3,r8,2
   2d6e4:	a0800007 	ldb	r2,0(r20)
   2d6e8:	a5000044 	addi	r20,r20,1
   2d6ec:	1a11883a 	add	r8,r3,r8
   2d6f0:	4211883a 	add	r8,r8,r8
   2d6f4:	4111883a 	add	r8,r8,r4
   2d6f8:	113ff404 	addi	r4,r2,-48
   2d6fc:	20c002b0 	cmpltui	r3,r4,10
   2d700:	183ff71e 	bne	r3,zero,2d6e0 <___vfiprintf_internal_r+0x9e0>
   2d704:	003dc006 	br	2ce08 <___vfiprintf_internal_r+0x108>
   2d708:	a0800003 	ldbu	r2,0(r20)
   2d70c:	10803fcc 	andi	r2,r2,255
   2d710:	1080201c 	xori	r2,r2,128
   2d714:	6b400114 	ori	r13,r13,4
   2d718:	10bfe004 	addi	r2,r2,-128
   2d71c:	003db906 	br	2ce04 <___vfiprintf_internal_r+0x104>
   2d720:	a0800007 	ldb	r2,0(r20)
   2d724:	01400044 	movi	r5,1
   2d728:	01800ac4 	movi	r6,43
   2d72c:	003db506 	br	2ce04 <___vfiprintf_internal_r+0x104>
   2d730:	d8c00417 	ldw	r3,16(sp)
   2d734:	a0800003 	ldbu	r2,0(r20)
   2d738:	1c400017 	ldw	r17,0(r3)
   2d73c:	18c00104 	addi	r3,r3,4
   2d740:	8801b716 	blt	r17,zero,2de20 <___vfiprintf_internal_r+0x1120>
   2d744:	d8c00415 	stw	r3,16(sp)
   2d748:	10803fcc 	andi	r2,r2,255
   2d74c:	1080201c 	xori	r2,r2,128
   2d750:	10bfe004 	addi	r2,r2,-128
   2d754:	003dab06 	br	2ce04 <___vfiprintf_internal_r+0x104>
   2d758:	a0800007 	ldb	r2,0(r20)
   2d75c:	6b400054 	ori	r13,r13,1
   2d760:	003da806 	br	2ce04 <___vfiprintf_internal_r+0x104>
   2d764:	30c03fcc 	andi	r3,r6,255
   2d768:	18c0201c 	xori	r3,r3,128
   2d76c:	18ffe004 	addi	r3,r3,-128
   2d770:	a0800003 	ldbu	r2,0(r20)
   2d774:	183ff41e 	bne	r3,zero,2d748 <___vfiprintf_internal_r+0xa48>
   2d778:	10803fcc 	andi	r2,r2,255
   2d77c:	1080201c 	xori	r2,r2,128
   2d780:	01400044 	movi	r5,1
   2d784:	01800804 	movi	r6,32
   2d788:	10bfe004 	addi	r2,r2,-128
   2d78c:	003d9d06 	br	2ce04 <___vfiprintf_internal_r+0x104>
   2d790:	d8c00417 	ldw	r3,16(sp)
   2d794:	d8000945 	stb	zero,37(sp)
   2d798:	05c00044 	movi	r23,1
   2d79c:	18800017 	ldw	r2,0(r3)
   2d7a0:	18c00104 	addi	r3,r3,4
   2d7a4:	d8c00415 	stw	r3,16(sp)
   2d7a8:	d8800d05 	stb	r2,52(sp)
   2d7ac:	07000044 	movi	fp,1
   2d7b0:	dcc00d04 	addi	r19,sp,52
   2d7b4:	003e0b06 	br	2cfe4 <___vfiprintf_internal_r+0x2e4>
   2d7b8:	29403fcc 	andi	r5,r5,255
   2d7bc:	2802061e 	bne	r5,zero,2dfd8 <___vfiprintf_internal_r+0x12d8>
   2d7c0:	00c000f4 	movhi	r3,3
   2d7c4:	18cc7204 	addi	r3,r3,12744
   2d7c8:	d8c00515 	stw	r3,20(sp)
   2d7cc:	68c0080c 	andi	r3,r13,32
   2d7d0:	183f431e 	bne	r3,zero,2d4e0 <___vfiprintf_internal_r+0x7e0>
   2d7d4:	d9400417 	ldw	r5,16(sp)
   2d7d8:	68c0040c 	andi	r3,r13,16
   2d7dc:	29000104 	addi	r4,r5,4
   2d7e0:	18017f1e 	bne	r3,zero,2dde0 <___vfiprintf_internal_r+0x10e0>
   2d7e4:	68c0100c 	andi	r3,r13,64
   2d7e8:	1801be26 	beq	r3,zero,2dee4 <___vfiprintf_internal_r+0x11e4>
   2d7ec:	d8c00417 	ldw	r3,16(sp)
   2d7f0:	0039883a 	mov	fp,zero
   2d7f4:	d9000415 	stw	r4,16(sp)
   2d7f8:	1dc0000b 	ldhu	r23,0(r3)
   2d7fc:	003f3d06 	br	2d4f4 <___vfiprintf_internal_r+0x7f4>
   2d800:	29403fcc 	andi	r5,r5,255
   2d804:	2801f61e 	bne	r5,zero,2dfe0 <___vfiprintf_internal_r+0x12e0>
   2d808:	d9000417 	ldw	r4,16(sp)
   2d80c:	6880080c 	andi	r2,r13,32
   2d810:	20c00017 	ldw	r3,0(r4)
   2d814:	21000104 	addi	r4,r4,4
   2d818:	10016b1e 	bne	r2,zero,2ddc8 <___vfiprintf_internal_r+0x10c8>
   2d81c:	6880040c 	andi	r2,r13,16
   2d820:	1001951e 	bne	r2,zero,2de78 <___vfiprintf_internal_r+0x1178>
   2d824:	6b40100c 	andi	r13,r13,64
   2d828:	68019326 	beq	r13,zero,2de78 <___vfiprintf_internal_r+0x1178>
   2d82c:	d8800117 	ldw	r2,4(sp)
   2d830:	d9000415 	stw	r4,16(sp)
   2d834:	1880000d 	sth	r2,0(r3)
   2d838:	003d5a06 	br	2cda4 <___vfiprintf_internal_r+0xa4>
   2d83c:	a0800007 	ldb	r2,0(r20)
   2d840:	10c01b18 	cmpnei	r3,r2,108
   2d844:	18019826 	beq	r3,zero,2dea8 <___vfiprintf_internal_r+0x11a8>
   2d848:	6b400414 	ori	r13,r13,16
   2d84c:	003d6d06 	br	2ce04 <___vfiprintf_internal_r+0x104>
   2d850:	01400044 	movi	r5,1
   2d854:	0009883a 	mov	r4,zero
   2d858:	900d883a 	mov	r6,r18
   2d85c:	003ece06 	br	2d398 <___vfiprintf_internal_r+0x698>
   2d860:	8dc7c83a 	sub	r3,r17,r23
   2d864:	00fe190e 	bge	zero,r3,2d0cc <___vfiprintf_internal_r+0x3cc>
   2d868:	19c00450 	cmplti	r7,r3,17
   2d86c:	3801e41e 	bne	r7,zero,2e000 <___vfiprintf_internal_r+0x1300>
   2d870:	01c000f4 	movhi	r7,3
   2d874:	39ccf404 	addi	r7,r7,13264
   2d878:	03400404 	movi	r13,16
   2d87c:	00000606 	br	2d898 <___vfiprintf_internal_r+0xb98>
   2d880:	23800084 	addi	r14,r4,2
   2d884:	84000204 	addi	r16,r16,8
   2d888:	2809883a 	mov	r4,r5
   2d88c:	18fffc04 	addi	r3,r3,-16
   2d890:	19400448 	cmpgei	r5,r3,17
   2d894:	28001c26 	beq	r5,zero,2d908 <___vfiprintf_internal_r+0xc08>
   2d898:	21400044 	addi	r5,r4,1
   2d89c:	10800404 	addi	r2,r2,16
   2d8a0:	81c00015 	stw	r7,0(r16)
   2d8a4:	83400115 	stw	r13,4(r16)
   2d8a8:	d8800c15 	stw	r2,48(sp)
   2d8ac:	d9400b15 	stw	r5,44(sp)
   2d8b0:	29800208 	cmpgei	r6,r5,8
   2d8b4:	303ff226 	beq	r6,zero,2d880 <___vfiprintf_internal_r+0xb80>
   2d8b8:	d9800a04 	addi	r6,sp,40
   2d8bc:	a80b883a 	mov	r5,r21
   2d8c0:	b009883a 	mov	r4,r22
   2d8c4:	10007826 	beq	r2,zero,2daa8 <___vfiprintf_internal_r+0xda8>
   2d8c8:	d9c00615 	stw	r7,24(sp)
   2d8cc:	d8c00315 	stw	r3,12(sp)
   2d8d0:	da000215 	stw	r8,8(sp)
   2d8d4:	002cbf40 	call	2cbf4 <__sprint_r.part.0>
   2d8d8:	103e1e1e 	bne	r2,zero,2d154 <___vfiprintf_internal_r+0x454>
   2d8dc:	d8c00317 	ldw	r3,12(sp)
   2d8e0:	d9000b17 	ldw	r4,44(sp)
   2d8e4:	d8800c17 	ldw	r2,48(sp)
   2d8e8:	18fffc04 	addi	r3,r3,-16
   2d8ec:	19400448 	cmpgei	r5,r3,17
   2d8f0:	d9c00617 	ldw	r7,24(sp)
   2d8f4:	da000217 	ldw	r8,8(sp)
   2d8f8:	9021883a 	mov	r16,r18
   2d8fc:	23800044 	addi	r14,r4,1
   2d900:	03400404 	movi	r13,16
   2d904:	283fe41e 	bne	r5,zero,2d898 <___vfiprintf_internal_r+0xb98>
   2d908:	83400204 	addi	r13,r16,8
   2d90c:	10c5883a 	add	r2,r2,r3
   2d910:	80c00115 	stw	r3,4(r16)
   2d914:	81c00015 	stw	r7,0(r16)
   2d918:	d8800c15 	stw	r2,48(sp)
   2d91c:	db800b15 	stw	r14,44(sp)
   2d920:	70c00208 	cmpgei	r3,r14,8
   2d924:	18011326 	beq	r3,zero,2dd74 <___vfiprintf_internal_r+0x1074>
   2d928:	10018826 	beq	r2,zero,2df4c <___vfiprintf_internal_r+0x124c>
   2d92c:	d9800a04 	addi	r6,sp,40
   2d930:	a80b883a 	mov	r5,r21
   2d934:	b009883a 	mov	r4,r22
   2d938:	da000215 	stw	r8,8(sp)
   2d93c:	002cbf40 	call	2cbf4 <__sprint_r.part.0>
   2d940:	103e041e 	bne	r2,zero,2d154 <___vfiprintf_internal_r+0x454>
   2d944:	da000217 	ldw	r8,8(sp)
   2d948:	d9000b17 	ldw	r4,44(sp)
   2d94c:	d8800c17 	ldw	r2,48(sp)
   2d950:	4711c83a 	sub	r8,r8,fp
   2d954:	d9801904 	addi	r6,sp,100
   2d958:	21400044 	addi	r5,r4,1
   2d95c:	9021883a 	mov	r16,r18
   2d960:	023ddc0e 	bge	zero,r8,2d0d4 <___vfiprintf_internal_r+0x3d4>
   2d964:	40c00450 	cmplti	r3,r8,17
   2d968:	01c000f4 	movhi	r7,3
   2d96c:	1801741e 	bne	r3,zero,2df40 <___vfiprintf_internal_r+0x1240>
   2d970:	39ccf404 	addi	r7,r7,13264
   2d974:	03400404 	movi	r13,16
   2d978:	00000606 	br	2d994 <___vfiprintf_internal_r+0xc94>
   2d97c:	21400084 	addi	r5,r4,2
   2d980:	84000204 	addi	r16,r16,8
   2d984:	1809883a 	mov	r4,r3
   2d988:	423ffc04 	addi	r8,r8,-16
   2d98c:	40c00448 	cmpgei	r3,r8,17
   2d990:	18001a26 	beq	r3,zero,2d9fc <___vfiprintf_internal_r+0xcfc>
   2d994:	20c00044 	addi	r3,r4,1
   2d998:	10800404 	addi	r2,r2,16
   2d99c:	81c00015 	stw	r7,0(r16)
   2d9a0:	83400115 	stw	r13,4(r16)
   2d9a4:	d8800c15 	stw	r2,48(sp)
   2d9a8:	d8c00b15 	stw	r3,44(sp)
   2d9ac:	19400208 	cmpgei	r5,r3,8
   2d9b0:	283ff226 	beq	r5,zero,2d97c <___vfiprintf_internal_r+0xc7c>
   2d9b4:	d9800a04 	addi	r6,sp,40
   2d9b8:	a80b883a 	mov	r5,r21
   2d9bc:	b009883a 	mov	r4,r22
   2d9c0:	10001a26 	beq	r2,zero,2da2c <___vfiprintf_internal_r+0xd2c>
   2d9c4:	d9c00315 	stw	r7,12(sp)
   2d9c8:	da000215 	stw	r8,8(sp)
   2d9cc:	002cbf40 	call	2cbf4 <__sprint_r.part.0>
   2d9d0:	103de01e 	bne	r2,zero,2d154 <___vfiprintf_internal_r+0x454>
   2d9d4:	da000217 	ldw	r8,8(sp)
   2d9d8:	d9000b17 	ldw	r4,44(sp)
   2d9dc:	d8800c17 	ldw	r2,48(sp)
   2d9e0:	423ffc04 	addi	r8,r8,-16
   2d9e4:	40c00448 	cmpgei	r3,r8,17
   2d9e8:	d9c00317 	ldw	r7,12(sp)
   2d9ec:	9021883a 	mov	r16,r18
   2d9f0:	21400044 	addi	r5,r4,1
   2d9f4:	03400404 	movi	r13,16
   2d9f8:	183fe61e 	bne	r3,zero,2d994 <___vfiprintf_internal_r+0xc94>
   2d9fc:	81000204 	addi	r4,r16,8
   2da00:	1205883a 	add	r2,r2,r8
   2da04:	81c00015 	stw	r7,0(r16)
   2da08:	82000115 	stw	r8,4(r16)
   2da0c:	d8800c15 	stw	r2,48(sp)
   2da10:	d9400b15 	stw	r5,44(sp)
   2da14:	28c00208 	cmpgei	r3,r5,8
   2da18:	1800a41e 	bne	r3,zero,2dcac <___vfiprintf_internal_r+0xfac>
   2da1c:	29400044 	addi	r5,r5,1
   2da20:	21800204 	addi	r6,r4,8
   2da24:	2021883a 	mov	r16,r4
   2da28:	003daa06 	br	2d0d4 <___vfiprintf_internal_r+0x3d4>
   2da2c:	01400044 	movi	r5,1
   2da30:	0009883a 	mov	r4,zero
   2da34:	9021883a 	mov	r16,r18
   2da38:	003fd306 	br	2d988 <___vfiprintf_internal_r+0xc88>
   2da3c:	10c00060 	cmpeqi	r3,r2,1
   2da40:	1801561e 	bne	r3,zero,2df9c <___vfiprintf_internal_r+0x129c>
   2da44:	108000a0 	cmpeqi	r2,r2,2
   2da48:	db400017 	ldw	r13,0(sp)
   2da4c:	103ef626 	beq	r2,zero,2d628 <___vfiprintf_internal_r+0x928>
   2da50:	9027883a 	mov	r19,r18
   2da54:	d9000517 	ldw	r4,20(sp)
   2da58:	b88003cc 	andi	r2,r23,15
   2da5c:	e006973a 	slli	r3,fp,28
   2da60:	b82ed13a 	srli	r23,r23,4
   2da64:	2085883a 	add	r2,r4,r2
   2da68:	10800003 	ldbu	r2,0(r2)
   2da6c:	e038d13a 	srli	fp,fp,4
   2da70:	1deeb03a 	or	r23,r3,r23
   2da74:	98bfffc5 	stb	r2,-1(r19)
   2da78:	bf04b03a 	or	r2,r23,fp
   2da7c:	9cffffc4 	addi	r19,r19,-1
   2da80:	103ff41e 	bne	r2,zero,2da54 <___vfiprintf_internal_r+0xd54>
   2da84:	94f9c83a 	sub	fp,r18,r19
   2da88:	db400015 	stw	r13,0(sp)
   2da8c:	003eff06 	br	2d68c <___vfiprintf_internal_r+0x98c>
   2da90:	d9800a04 	addi	r6,sp,40
   2da94:	a80b883a 	mov	r5,r21
   2da98:	b009883a 	mov	r4,r22
   2da9c:	002cbf40 	call	2cbf4 <__sprint_r.part.0>
   2daa0:	103da626 	beq	r2,zero,2d13c <___vfiprintf_internal_r+0x43c>
   2daa4:	003dab06 	br	2d154 <___vfiprintf_internal_r+0x454>
   2daa8:	03800044 	movi	r14,1
   2daac:	0009883a 	mov	r4,zero
   2dab0:	9021883a 	mov	r16,r18
   2dab4:	003f7506 	br	2d88c <___vfiprintf_internal_r+0xb8c>
   2dab8:	10009026 	beq	r2,zero,2dcfc <___vfiprintf_internal_r+0xffc>
   2dabc:	d9800a04 	addi	r6,sp,40
   2dac0:	a80b883a 	mov	r5,r21
   2dac4:	b009883a 	mov	r4,r22
   2dac8:	da000615 	stw	r8,24(sp)
   2dacc:	db400315 	stw	r13,12(sp)
   2dad0:	db800215 	stw	r14,8(sp)
   2dad4:	002cbf40 	call	2cbf4 <__sprint_r.part.0>
   2dad8:	103d9e1e 	bne	r2,zero,2d154 <___vfiprintf_internal_r+0x454>
   2dadc:	d9000b17 	ldw	r4,44(sp)
   2dae0:	d8800c17 	ldw	r2,48(sp)
   2dae4:	da000617 	ldw	r8,24(sp)
   2dae8:	db400317 	ldw	r13,12(sp)
   2daec:	db800217 	ldw	r14,8(sp)
   2daf0:	d9801904 	addi	r6,sp,100
   2daf4:	21400044 	addi	r5,r4,1
   2daf8:	9021883a 	mov	r16,r18
   2dafc:	003d5806 	br	2d060 <___vfiprintf_internal_r+0x360>
   2db00:	d8800984 	addi	r2,sp,38
   2db04:	d8801715 	stw	r2,92(sp)
   2db08:	00800084 	movi	r2,2
   2db0c:	d8801815 	stw	r2,96(sp)
   2db10:	d9801904 	addi	r6,sp,100
   2db14:	01400044 	movi	r5,1
   2db18:	3021883a 	mov	r16,r6
   2db1c:	2809883a 	mov	r4,r5
   2db20:	21400044 	addi	r5,r4,1
   2db24:	81800204 	addi	r6,r16,8
   2db28:	003d6606 	br	2d0c4 <___vfiprintf_internal_r+0x3c4>
   2db2c:	db400017 	ldw	r13,0(sp)
   2db30:	003eb906 	br	2d618 <___vfiprintf_internal_r+0x918>
   2db34:	9027883a 	mov	r19,r18
   2db38:	b809883a 	mov	r4,r23
   2db3c:	e00b883a 	mov	r5,fp
   2db40:	01800284 	movi	r6,10
   2db44:	000f883a 	mov	r7,zero
   2db48:	db800315 	stw	r14,12(sp)
   2db4c:	da000215 	stw	r8,8(sp)
   2db50:	db400015 	stw	r13,0(sp)
   2db54:	002f7f00 	call	2f7f0 <__umoddi3>
   2db58:	10800c04 	addi	r2,r2,48
   2db5c:	b809883a 	mov	r4,r23
   2db60:	e00b883a 	mov	r5,fp
   2db64:	98bfffc5 	stb	r2,-1(r19)
   2db68:	01800284 	movi	r6,10
   2db6c:	000f883a 	mov	r7,zero
   2db70:	002f1d00 	call	2f1d0 <__udivdi3>
   2db74:	e009883a 	mov	r4,fp
   2db78:	b80b883a 	mov	r5,r23
   2db7c:	db400017 	ldw	r13,0(sp)
   2db80:	da000217 	ldw	r8,8(sp)
   2db84:	db800317 	ldw	r14,12(sp)
   2db88:	9cffffc4 	addi	r19,r19,-1
   2db8c:	102f883a 	mov	r23,r2
   2db90:	1839883a 	mov	fp,r3
   2db94:	203fe81e 	bne	r4,zero,2db38 <___vfiprintf_internal_r+0xe38>
   2db98:	294002a8 	cmpgeui	r5,r5,10
   2db9c:	283fe61e 	bne	r5,zero,2db38 <___vfiprintf_internal_r+0xe38>
   2dba0:	94f9c83a 	sub	fp,r18,r19
   2dba4:	003eb906 	br	2d68c <___vfiprintf_internal_r+0x98c>
   2dba8:	19400450 	cmplti	r5,r3,17
   2dbac:	01c000f4 	movhi	r7,3
   2dbb0:	2801061e 	bne	r5,zero,2dfcc <___vfiprintf_internal_r+0x12cc>
   2dbb4:	39ccf804 	addi	r7,r7,13280
   2dbb8:	03c00404 	movi	r15,16
   2dbbc:	00000706 	br	2dbdc <___vfiprintf_internal_r+0xedc>
   2dbc0:	27c00084 	addi	ra,r4,2
   2dbc4:	84000204 	addi	r16,r16,8
   2dbc8:	3009883a 	mov	r4,r6
   2dbcc:	18fffc04 	addi	r3,r3,-16
   2dbd0:	19400448 	cmpgei	r5,r3,17
   2dbd4:	28002026 	beq	r5,zero,2dc58 <___vfiprintf_internal_r+0xf58>
   2dbd8:	21800044 	addi	r6,r4,1
   2dbdc:	10800404 	addi	r2,r2,16
   2dbe0:	81c00015 	stw	r7,0(r16)
   2dbe4:	83c00115 	stw	r15,4(r16)
   2dbe8:	d8800c15 	stw	r2,48(sp)
   2dbec:	d9800b15 	stw	r6,44(sp)
   2dbf0:	31400208 	cmpgei	r5,r6,8
   2dbf4:	283ff226 	beq	r5,zero,2dbc0 <___vfiprintf_internal_r+0xec0>
   2dbf8:	d9800a04 	addi	r6,sp,40
   2dbfc:	a80b883a 	mov	r5,r21
   2dc00:	b009883a 	mov	r4,r22
   2dc04:	10001f26 	beq	r2,zero,2dc84 <___vfiprintf_internal_r+0xf84>
   2dc08:	d9c00815 	stw	r7,32(sp)
   2dc0c:	d8c00715 	stw	r3,28(sp)
   2dc10:	da000615 	stw	r8,24(sp)
   2dc14:	db400315 	stw	r13,12(sp)
   2dc18:	db800215 	stw	r14,8(sp)
   2dc1c:	002cbf40 	call	2cbf4 <__sprint_r.part.0>
   2dc20:	103d4c1e 	bne	r2,zero,2d154 <___vfiprintf_internal_r+0x454>
   2dc24:	d8c00717 	ldw	r3,28(sp)
   2dc28:	d9000b17 	ldw	r4,44(sp)
   2dc2c:	d8800c17 	ldw	r2,48(sp)
   2dc30:	18fffc04 	addi	r3,r3,-16
   2dc34:	19400448 	cmpgei	r5,r3,17
   2dc38:	d9c00817 	ldw	r7,32(sp)
   2dc3c:	da000617 	ldw	r8,24(sp)
   2dc40:	db400317 	ldw	r13,12(sp)
   2dc44:	db800217 	ldw	r14,8(sp)
   2dc48:	9021883a 	mov	r16,r18
   2dc4c:	27c00044 	addi	ra,r4,1
   2dc50:	03c00404 	movi	r15,16
   2dc54:	283fe01e 	bne	r5,zero,2dbd8 <___vfiprintf_internal_r+0xed8>
   2dc58:	10c5883a 	add	r2,r2,r3
   2dc5c:	80c00115 	stw	r3,4(r16)
   2dc60:	81c00015 	stw	r7,0(r16)
   2dc64:	d8800c15 	stw	r2,48(sp)
   2dc68:	dfc00b15 	stw	ra,44(sp)
   2dc6c:	f8c00208 	cmpgei	r3,ra,8
   2dc70:	18002d1e 	bne	r3,zero,2dd28 <___vfiprintf_internal_r+0x1028>
   2dc74:	84000204 	addi	r16,r16,8
   2dc78:	f9400044 	addi	r5,ra,1
   2dc7c:	f809883a 	mov	r4,ra
   2dc80:	003ce706 	br	2d020 <___vfiprintf_internal_r+0x320>
   2dc84:	0009883a 	mov	r4,zero
   2dc88:	07c00044 	movi	ra,1
   2dc8c:	9021883a 	mov	r16,r18
   2dc90:	003fce06 	br	2dbcc <___vfiprintf_internal_r+0xecc>
   2dc94:	8dc0010e 	bge	r17,r23,2dc9c <___vfiprintf_internal_r+0xf9c>
   2dc98:	b823883a 	mov	r17,r23
   2dc9c:	d8800117 	ldw	r2,4(sp)
   2dca0:	1445883a 	add	r2,r2,r17
   2dca4:	d8800115 	stw	r2,4(sp)
   2dca8:	003d2406 	br	2d13c <___vfiprintf_internal_r+0x43c>
   2dcac:	10007626 	beq	r2,zero,2de88 <___vfiprintf_internal_r+0x1188>
   2dcb0:	d9800a04 	addi	r6,sp,40
   2dcb4:	a80b883a 	mov	r5,r21
   2dcb8:	b009883a 	mov	r4,r22
   2dcbc:	002cbf40 	call	2cbf4 <__sprint_r.part.0>
   2dcc0:	103d241e 	bne	r2,zero,2d154 <___vfiprintf_internal_r+0x454>
   2dcc4:	d9400b17 	ldw	r5,44(sp)
   2dcc8:	d8800c17 	ldw	r2,48(sp)
   2dccc:	d9801904 	addi	r6,sp,100
   2dcd0:	29400044 	addi	r5,r5,1
   2dcd4:	9021883a 	mov	r16,r18
   2dcd8:	003cfe06 	br	2d0d4 <___vfiprintf_internal_r+0x3d4>
   2dcdc:	d8000b15 	stw	zero,44(sp)
   2dce0:	9021883a 	mov	r16,r18
   2dce4:	003d7606 	br	2d2c0 <___vfiprintf_internal_r+0x5c0>
   2dce8:	4000ac1e 	bne	r8,zero,2df9c <___vfiprintf_internal_r+0x129c>
   2dcec:	0011883a 	mov	r8,zero
   2dcf0:	0039883a 	mov	fp,zero
   2dcf4:	9027883a 	mov	r19,r18
   2dcf8:	003e6406 	br	2d68c <___vfiprintf_internal_r+0x98c>
   2dcfc:	7000411e 	bne	r14,zero,2de04 <___vfiprintf_internal_r+0x1104>
   2dd00:	0009883a 	mov	r4,zero
   2dd04:	d9801904 	addi	r6,sp,100
   2dd08:	01400044 	movi	r5,1
   2dd0c:	9021883a 	mov	r16,r18
   2dd10:	003cec06 	br	2d0c4 <___vfiprintf_internal_r+0x3c4>
   2dd14:	d9801904 	addi	r6,sp,100
   2dd18:	01400044 	movi	r5,1
   2dd1c:	0009883a 	mov	r4,zero
   2dd20:	9021883a 	mov	r16,r18
   2dd24:	003ce706 	br	2d0c4 <___vfiprintf_internal_r+0x3c4>
   2dd28:	10004a26 	beq	r2,zero,2de54 <___vfiprintf_internal_r+0x1154>
   2dd2c:	d9800a04 	addi	r6,sp,40
   2dd30:	a80b883a 	mov	r5,r21
   2dd34:	b009883a 	mov	r4,r22
   2dd38:	da000615 	stw	r8,24(sp)
   2dd3c:	db400315 	stw	r13,12(sp)
   2dd40:	db800215 	stw	r14,8(sp)
   2dd44:	002cbf40 	call	2cbf4 <__sprint_r.part.0>
   2dd48:	103d021e 	bne	r2,zero,2d154 <___vfiprintf_internal_r+0x454>
   2dd4c:	d9000b17 	ldw	r4,44(sp)
   2dd50:	d8800c17 	ldw	r2,48(sp)
   2dd54:	da000617 	ldw	r8,24(sp)
   2dd58:	db400317 	ldw	r13,12(sp)
   2dd5c:	db800217 	ldw	r14,8(sp)
   2dd60:	9021883a 	mov	r16,r18
   2dd64:	21400044 	addi	r5,r4,1
   2dd68:	003cad06 	br	2d020 <___vfiprintf_internal_r+0x320>
   2dd6c:	9027883a 	mov	r19,r18
   2dd70:	003e4606 	br	2d68c <___vfiprintf_internal_r+0x98c>
   2dd74:	71400044 	addi	r5,r14,1
   2dd78:	69800204 	addi	r6,r13,8
   2dd7c:	7009883a 	mov	r4,r14
   2dd80:	6821883a 	mov	r16,r13
   2dd84:	003cd106 	br	2d0cc <___vfiprintf_internal_r+0x3cc>
   2dd88:	25c00017 	ldw	r23,0(r4)
   2dd8c:	d8c00415 	stw	r3,16(sp)
   2dd90:	b839d7fa 	srai	fp,r23,31
   2dd94:	e005883a 	mov	r2,fp
   2dd98:	003db406 	br	2d46c <___vfiprintf_internal_r+0x76c>
   2dd9c:	00c00c04 	movi	r3,48
   2dda0:	d88009c5 	stb	r2,39(sp)
   2dda4:	d8c00985 	stb	r3,38(sp)
   2dda8:	6b400094 	ori	r13,r13,2
   2ddac:	00800084 	movi	r2,2
   2ddb0:	003d2506 	br	2d248 <___vfiprintf_internal_r+0x548>
   2ddb4:	25c00017 	ldw	r23,0(r4)
   2ddb8:	0039883a 	mov	fp,zero
   2ddbc:	d8c00415 	stw	r3,16(sp)
   2ddc0:	0005883a 	mov	r2,zero
   2ddc4:	003d2006 	br	2d248 <___vfiprintf_internal_r+0x548>
   2ddc8:	d9400117 	ldw	r5,4(sp)
   2ddcc:	d9000415 	stw	r4,16(sp)
   2ddd0:	2805d7fa 	srai	r2,r5,31
   2ddd4:	19400015 	stw	r5,0(r3)
   2ddd8:	18800115 	stw	r2,4(r3)
   2dddc:	003bf106 	br	2cda4 <___vfiprintf_internal_r+0xa4>
   2dde0:	2dc00017 	ldw	r23,0(r5)
   2dde4:	0039883a 	mov	fp,zero
   2dde8:	d9000415 	stw	r4,16(sp)
   2ddec:	003dc106 	br	2d4f4 <___vfiprintf_internal_r+0x7f4>
   2ddf0:	25c00017 	ldw	r23,0(r4)
   2ddf4:	0039883a 	mov	fp,zero
   2ddf8:	d8c00415 	stw	r3,16(sp)
   2ddfc:	00800044 	movi	r2,1
   2de00:	003d1106 	br	2d248 <___vfiprintf_internal_r+0x548>
   2de04:	d8800984 	addi	r2,sp,38
   2de08:	d8801715 	stw	r2,92(sp)
   2de0c:	00800084 	movi	r2,2
   2de10:	d8801815 	stw	r2,96(sp)
   2de14:	dc001904 	addi	r16,sp,100
   2de18:	01000044 	movi	r4,1
   2de1c:	003f4006 	br	2db20 <___vfiprintf_internal_r+0xe20>
   2de20:	0463c83a 	sub	r17,zero,r17
   2de24:	d8c00415 	stw	r3,16(sp)
   2de28:	003e3806 	br	2d70c <___vfiprintf_internal_r+0xa0c>
   2de2c:	9809883a 	mov	r4,r19
   2de30:	d8c00215 	stw	r3,8(sp)
   2de34:	db400015 	stw	r13,0(sp)
   2de38:	00255fc0 	call	255fc <strlen>
   2de3c:	d8c00217 	ldw	r3,8(sp)
   2de40:	db400017 	ldw	r13,0(sp)
   2de44:	1039883a 	mov	fp,r2
   2de48:	102f883a 	mov	r23,r2
   2de4c:	d8c00415 	stw	r3,16(sp)
   2de50:	003c6406 	br	2cfe4 <___vfiprintf_internal_r+0x2e4>
   2de54:	d8c00947 	ldb	r3,37(sp)
   2de58:	18004326 	beq	r3,zero,2df68 <___vfiprintf_internal_r+0x1268>
   2de5c:	d8800944 	addi	r2,sp,37
   2de60:	d8801715 	stw	r2,92(sp)
   2de64:	00800044 	movi	r2,1
   2de68:	d8801815 	stw	r2,96(sp)
   2de6c:	d9801904 	addi	r6,sp,100
   2de70:	01400044 	movi	r5,1
   2de74:	003c7606 	br	2d050 <___vfiprintf_internal_r+0x350>
   2de78:	d8800117 	ldw	r2,4(sp)
   2de7c:	18800015 	stw	r2,0(r3)
   2de80:	d9000415 	stw	r4,16(sp)
   2de84:	003bc706 	br	2cda4 <___vfiprintf_internal_r+0xa4>
   2de88:	00c00044 	movi	r3,1
   2de8c:	e005883a 	mov	r2,fp
   2de90:	dcc01715 	stw	r19,92(sp)
   2de94:	df001815 	stw	fp,96(sp)
   2de98:	df000c15 	stw	fp,48(sp)
   2de9c:	d8c00b15 	stw	r3,44(sp)
   2dea0:	d9801904 	addi	r6,sp,100
   2dea4:	003c9a06 	br	2d110 <___vfiprintf_internal_r+0x410>
   2dea8:	a0800043 	ldbu	r2,1(r20)
   2deac:	6b400814 	ori	r13,r13,32
   2deb0:	a5000044 	addi	r20,r20,1
   2deb4:	10803fcc 	andi	r2,r2,255
   2deb8:	1080201c 	xori	r2,r2,128
   2debc:	10bfe004 	addi	r2,r2,-128
   2dec0:	003bd006 	br	2ce04 <___vfiprintf_internal_r+0x104>
   2dec4:	408001f0 	cmpltui	r2,r8,7
   2dec8:	4039883a 	mov	fp,r8
   2decc:	10002426 	beq	r2,zero,2df60 <___vfiprintf_internal_r+0x1260>
   2ded0:	04c000f4 	movhi	r19,3
   2ded4:	e02f883a 	mov	r23,fp
   2ded8:	d8c00415 	stw	r3,16(sp)
   2dedc:	9ccc7704 	addi	r19,r19,12764
   2dee0:	003c4006 	br	2cfe4 <___vfiprintf_internal_r+0x2e4>
   2dee4:	d8c00417 	ldw	r3,16(sp)
   2dee8:	0039883a 	mov	fp,zero
   2deec:	d9000415 	stw	r4,16(sp)
   2def0:	1dc00017 	ldw	r23,0(r3)
   2def4:	003d7f06 	br	2d4f4 <___vfiprintf_internal_r+0x7f4>
   2def8:	d8800417 	ldw	r2,16(sp)
   2defc:	0039883a 	mov	fp,zero
   2df00:	d8c00415 	stw	r3,16(sp)
   2df04:	15c00017 	ldw	r23,0(r2)
   2df08:	0005883a 	mov	r2,zero
   2df0c:	003cce06 	br	2d248 <___vfiprintf_internal_r+0x548>
   2df10:	d8800417 	ldw	r2,16(sp)
   2df14:	d8c00415 	stw	r3,16(sp)
   2df18:	15c00017 	ldw	r23,0(r2)
   2df1c:	b839d7fa 	srai	fp,r23,31
   2df20:	e005883a 	mov	r2,fp
   2df24:	003d5106 	br	2d46c <___vfiprintf_internal_r+0x76c>
   2df28:	d8800417 	ldw	r2,16(sp)
   2df2c:	0039883a 	mov	fp,zero
   2df30:	d8c00415 	stw	r3,16(sp)
   2df34:	15c00017 	ldw	r23,0(r2)
   2df38:	00800044 	movi	r2,1
   2df3c:	003cc206 	br	2d248 <___vfiprintf_internal_r+0x548>
   2df40:	3009883a 	mov	r4,r6
   2df44:	39ccf404 	addi	r7,r7,13264
   2df48:	003ead06 	br	2da00 <___vfiprintf_internal_r+0xd00>
   2df4c:	d9801904 	addi	r6,sp,100
   2df50:	01400044 	movi	r5,1
   2df54:	0009883a 	mov	r4,zero
   2df58:	9021883a 	mov	r16,r18
   2df5c:	003c5b06 	br	2d0cc <___vfiprintf_internal_r+0x3cc>
   2df60:	07000184 	movi	fp,6
   2df64:	003fda06 	br	2ded0 <___vfiprintf_internal_r+0x11d0>
   2df68:	703ee51e 	bne	r14,zero,2db00 <___vfiprintf_internal_r+0xe00>
   2df6c:	0009883a 	mov	r4,zero
   2df70:	d9801904 	addi	r6,sp,100
   2df74:	01400044 	movi	r5,1
   2df78:	9021883a 	mov	r16,r18
   2df7c:	003c5306 	br	2d0cc <___vfiprintf_internal_r+0x3cc>
   2df80:	d9800945 	stb	r6,37(sp)
   2df84:	003c1106 	br	2cfcc <___vfiprintf_internal_r+0x2cc>
   2df88:	d9800a04 	addi	r6,sp,40
   2df8c:	a80b883a 	mov	r5,r21
   2df90:	b009883a 	mov	r4,r22
   2df94:	002cbf40 	call	2cbf4 <__sprint_r.part.0>
   2df98:	003c6e06 	br	2d154 <___vfiprintf_internal_r+0x454>
   2df9c:	db400017 	ldw	r13,0(sp)
   2dfa0:	003d3f06 	br	2d4a0 <___vfiprintf_internal_r+0x7a0>
   2dfa4:	402f883a 	mov	r23,r8
   2dfa8:	d8c00415 	stw	r3,16(sp)
   2dfac:	4039883a 	mov	fp,r8
   2dfb0:	003c0c06 	br	2cfe4 <___vfiprintf_internal_r+0x2e4>
   2dfb4:	d9800945 	stb	r6,37(sp)
   2dfb8:	003d2406 	br	2d44c <___vfiprintf_internal_r+0x74c>
   2dfbc:	d9800945 	stb	r6,37(sp)
   2dfc0:	003d4206 	br	2d4cc <___vfiprintf_internal_r+0x7cc>
   2dfc4:	d9800945 	stb	r6,37(sp)
   2dfc8:	003d7a06 	br	2d5b4 <___vfiprintf_internal_r+0x8b4>
   2dfcc:	303f883a 	mov	ra,r6
   2dfd0:	39ccf804 	addi	r7,r7,13280
   2dfd4:	003f2006 	br	2dc58 <___vfiprintf_internal_r+0xf58>
   2dfd8:	d9800945 	stb	r6,37(sp)
   2dfdc:	003df806 	br	2d7c0 <___vfiprintf_internal_r+0xac0>
   2dfe0:	d9800945 	stb	r6,37(sp)
   2dfe4:	003e0806 	br	2d808 <___vfiprintf_internal_r+0xb08>
   2dfe8:	21400044 	addi	r5,r4,1
   2dfec:	39ccf804 	addi	r7,r7,13280
   2dff0:	003d0306 	br	2d400 <___vfiprintf_internal_r+0x700>
   2dff4:	00bfffc4 	movi	r2,-1
   2dff8:	d8800115 	stw	r2,4(sp)
   2dffc:	003c5806 	br	2d160 <___vfiprintf_internal_r+0x460>
   2e000:	01c000f4 	movhi	r7,3
   2e004:	301b883a 	mov	r13,r6
   2e008:	281d883a 	mov	r14,r5
   2e00c:	39ccf404 	addi	r7,r7,13264
   2e010:	003e3e06 	br	2d90c <___vfiprintf_internal_r+0xc0c>
   2e014:	d8800417 	ldw	r2,16(sp)
   2e018:	12000017 	ldw	r8,0(r2)
   2e01c:	11000104 	addi	r4,r2,4
   2e020:	4000010e 	bge	r8,zero,2e028 <___vfiprintf_internal_r+0x1328>
   2e024:	023fffc4 	movi	r8,-1
   2e028:	a0800043 	ldbu	r2,1(r20)
   2e02c:	d9000415 	stw	r4,16(sp)
   2e030:	1829883a 	mov	r20,r3
   2e034:	10803fcc 	andi	r2,r2,255
   2e038:	1080201c 	xori	r2,r2,128
   2e03c:	10bfe004 	addi	r2,r2,-128
   2e040:	003b7006 	br	2ce04 <___vfiprintf_internal_r+0x104>

0002e044 <__vfiprintf_internal>:
   2e044:	00c000f4 	movhi	r3,3
   2e048:	2005883a 	mov	r2,r4
   2e04c:	1910d017 	ldw	r4,17216(r3)
   2e050:	300f883a 	mov	r7,r6
   2e054:	280d883a 	mov	r6,r5
   2e058:	100b883a 	mov	r5,r2
   2e05c:	002cd001 	jmpi	2cd00 <___vfiprintf_internal_r>

0002e060 <__sbprintf>:
   2e060:	2880030b 	ldhu	r2,12(r5)
   2e064:	2b001917 	ldw	r12,100(r5)
   2e068:	2ac0038b 	ldhu	r11,14(r5)
   2e06c:	2a800717 	ldw	r10,28(r5)
   2e070:	2a400917 	ldw	r9,36(r5)
   2e074:	defee204 	addi	sp,sp,-1144
   2e078:	da001a04 	addi	r8,sp,104
   2e07c:	00c10004 	movi	r3,1024
   2e080:	dc011a15 	stw	r16,1128(sp)
   2e084:	10bfff4c 	andi	r2,r2,65533
   2e088:	2821883a 	mov	r16,r5
   2e08c:	d80b883a 	mov	r5,sp
   2e090:	dc811c15 	stw	r18,1136(sp)
   2e094:	dc411b15 	stw	r17,1132(sp)
   2e098:	dfc11d15 	stw	ra,1140(sp)
   2e09c:	2025883a 	mov	r18,r4
   2e0a0:	d880030d 	sth	r2,12(sp)
   2e0a4:	db001915 	stw	r12,100(sp)
   2e0a8:	dac0038d 	sth	r11,14(sp)
   2e0ac:	da800715 	stw	r10,28(sp)
   2e0b0:	da400915 	stw	r9,36(sp)
   2e0b4:	da000015 	stw	r8,0(sp)
   2e0b8:	da000415 	stw	r8,16(sp)
   2e0bc:	d8c00215 	stw	r3,8(sp)
   2e0c0:	d8c00515 	stw	r3,20(sp)
   2e0c4:	d8000615 	stw	zero,24(sp)
   2e0c8:	002cd000 	call	2cd00 <___vfiprintf_internal_r>
   2e0cc:	1023883a 	mov	r17,r2
   2e0d0:	10000d0e 	bge	r2,zero,2e108 <__sbprintf+0xa8>
   2e0d4:	d880030b 	ldhu	r2,12(sp)
   2e0d8:	1080100c 	andi	r2,r2,64
   2e0dc:	10000326 	beq	r2,zero,2e0ec <__sbprintf+0x8c>
   2e0e0:	8080030b 	ldhu	r2,12(r16)
   2e0e4:	10801014 	ori	r2,r2,64
   2e0e8:	8080030d 	sth	r2,12(r16)
   2e0ec:	8805883a 	mov	r2,r17
   2e0f0:	dfc11d17 	ldw	ra,1140(sp)
   2e0f4:	dc811c17 	ldw	r18,1136(sp)
   2e0f8:	dc411b17 	ldw	r17,1132(sp)
   2e0fc:	dc011a17 	ldw	r16,1128(sp)
   2e100:	dec11e04 	addi	sp,sp,1144
   2e104:	f800283a 	ret
   2e108:	d80b883a 	mov	r5,sp
   2e10c:	9009883a 	mov	r4,r18
   2e110:	00295680 	call	29568 <_fflush_r>
   2e114:	103fef26 	beq	r2,zero,2e0d4 <__sbprintf+0x74>
   2e118:	047fffc4 	movi	r17,-1
   2e11c:	003fed06 	br	2e0d4 <__sbprintf+0x74>

0002e120 <__swbuf_r>:
   2e120:	defffb04 	addi	sp,sp,-20
   2e124:	dcc00315 	stw	r19,12(sp)
   2e128:	dc400115 	stw	r17,4(sp)
   2e12c:	dc000015 	stw	r16,0(sp)
   2e130:	dfc00415 	stw	ra,16(sp)
   2e134:	dc800215 	stw	r18,8(sp)
   2e138:	2027883a 	mov	r19,r4
   2e13c:	2823883a 	mov	r17,r5
   2e140:	3021883a 	mov	r16,r6
   2e144:	20000226 	beq	r4,zero,2e150 <__swbuf_r+0x30>
   2e148:	20800e17 	ldw	r2,56(r4)
   2e14c:	10003e26 	beq	r2,zero,2e248 <__swbuf_r+0x128>
   2e150:	80800617 	ldw	r2,24(r16)
   2e154:	80c0030b 	ldhu	r3,12(r16)
   2e158:	80800215 	stw	r2,8(r16)
   2e15c:	1880020c 	andi	r2,r3,8
   2e160:	10001f26 	beq	r2,zero,2e1e0 <__swbuf_r+0xc0>
   2e164:	80800417 	ldw	r2,16(r16)
   2e168:	10001d26 	beq	r2,zero,2e1e0 <__swbuf_r+0xc0>
   2e16c:	1948000c 	andi	r5,r3,8192
   2e170:	8c803fcc 	andi	r18,r17,255
   2e174:	28002326 	beq	r5,zero,2e204 <__swbuf_r+0xe4>
   2e178:	80c00017 	ldw	r3,0(r16)
   2e17c:	81000517 	ldw	r4,20(r16)
   2e180:	1885c83a 	sub	r2,r3,r2
   2e184:	1100290e 	bge	r2,r4,2e22c <__swbuf_r+0x10c>
   2e188:	10800044 	addi	r2,r2,1
   2e18c:	81400217 	ldw	r5,8(r16)
   2e190:	19000044 	addi	r4,r3,1
   2e194:	81000015 	stw	r4,0(r16)
   2e198:	297fffc4 	addi	r5,r5,-1
   2e19c:	81400215 	stw	r5,8(r16)
   2e1a0:	1c400005 	stb	r17,0(r3)
   2e1a4:	80c00517 	ldw	r3,20(r16)
   2e1a8:	18802926 	beq	r3,r2,2e250 <__swbuf_r+0x130>
   2e1ac:	8080030b 	ldhu	r2,12(r16)
   2e1b0:	1080004c 	andi	r2,r2,1
   2e1b4:	10000226 	beq	r2,zero,2e1c0 <__swbuf_r+0xa0>
   2e1b8:	90800298 	cmpnei	r2,r18,10
   2e1bc:	10002426 	beq	r2,zero,2e250 <__swbuf_r+0x130>
   2e1c0:	9005883a 	mov	r2,r18
   2e1c4:	dfc00417 	ldw	ra,16(sp)
   2e1c8:	dcc00317 	ldw	r19,12(sp)
   2e1cc:	dc800217 	ldw	r18,8(sp)
   2e1d0:	dc400117 	ldw	r17,4(sp)
   2e1d4:	dc000017 	ldw	r16,0(sp)
   2e1d8:	dec00504 	addi	sp,sp,20
   2e1dc:	f800283a 	ret
   2e1e0:	800b883a 	mov	r5,r16
   2e1e4:	9809883a 	mov	r4,r19
   2e1e8:	00278740 	call	27874 <__swsetup_r>
   2e1ec:	10001c1e 	bne	r2,zero,2e260 <__swbuf_r+0x140>
   2e1f0:	80c0030b 	ldhu	r3,12(r16)
   2e1f4:	80800417 	ldw	r2,16(r16)
   2e1f8:	8c803fcc 	andi	r18,r17,255
   2e1fc:	1948000c 	andi	r5,r3,8192
   2e200:	283fdd1e 	bne	r5,zero,2e178 <__swbuf_r+0x58>
   2e204:	81001917 	ldw	r4,100(r16)
   2e208:	18c80014 	ori	r3,r3,8192
   2e20c:	0177ffc4 	movi	r5,-8193
   2e210:	2148703a 	and	r4,r4,r5
   2e214:	80c0030d 	sth	r3,12(r16)
   2e218:	80c00017 	ldw	r3,0(r16)
   2e21c:	81001915 	stw	r4,100(r16)
   2e220:	81000517 	ldw	r4,20(r16)
   2e224:	1885c83a 	sub	r2,r3,r2
   2e228:	113fd716 	blt	r2,r4,2e188 <__swbuf_r+0x68>
   2e22c:	800b883a 	mov	r5,r16
   2e230:	9809883a 	mov	r4,r19
   2e234:	00295680 	call	29568 <_fflush_r>
   2e238:	1000091e 	bne	r2,zero,2e260 <__swbuf_r+0x140>
   2e23c:	80c00017 	ldw	r3,0(r16)
   2e240:	00800044 	movi	r2,1
   2e244:	003fd106 	br	2e18c <__swbuf_r+0x6c>
   2e248:	00299b00 	call	299b0 <__sinit>
   2e24c:	003fc006 	br	2e150 <__swbuf_r+0x30>
   2e250:	800b883a 	mov	r5,r16
   2e254:	9809883a 	mov	r4,r19
   2e258:	00295680 	call	29568 <_fflush_r>
   2e25c:	103fd826 	beq	r2,zero,2e1c0 <__swbuf_r+0xa0>
   2e260:	04bfffc4 	movi	r18,-1
   2e264:	003fd606 	br	2e1c0 <__swbuf_r+0xa0>

0002e268 <__swbuf>:
   2e268:	00c000f4 	movhi	r3,3
   2e26c:	2005883a 	mov	r2,r4
   2e270:	1910d017 	ldw	r4,17216(r3)
   2e274:	280d883a 	mov	r6,r5
   2e278:	100b883a 	mov	r5,r2
   2e27c:	002e1201 	jmpi	2e120 <__swbuf_r>

0002e280 <_write_r>:
   2e280:	2807883a 	mov	r3,r5
   2e284:	defffe04 	addi	sp,sp,-8
   2e288:	dc000015 	stw	r16,0(sp)
   2e28c:	300b883a 	mov	r5,r6
   2e290:	008000f4 	movhi	r2,3
   2e294:	380d883a 	mov	r6,r7
   2e298:	2021883a 	mov	r16,r4
   2e29c:	1809883a 	mov	r4,r3
   2e2a0:	dfc00115 	stw	ra,4(sp)
   2e2a4:	10141715 	stw	zero,20572(r2)
   2e2a8:	0030bd80 	call	30bd8 <write>
   2e2ac:	10ffffd8 	cmpnei	r3,r2,-1
   2e2b0:	18000426 	beq	r3,zero,2e2c4 <_write_r+0x44>
   2e2b4:	dfc00117 	ldw	ra,4(sp)
   2e2b8:	dc000017 	ldw	r16,0(sp)
   2e2bc:	dec00204 	addi	sp,sp,8
   2e2c0:	f800283a 	ret
   2e2c4:	00c000f4 	movhi	r3,3
   2e2c8:	18d41717 	ldw	r3,20572(r3)
   2e2cc:	183ff926 	beq	r3,zero,2e2b4 <_write_r+0x34>
   2e2d0:	80c00015 	stw	r3,0(r16)
   2e2d4:	dfc00117 	ldw	ra,4(sp)
   2e2d8:	dc000017 	ldw	r16,0(sp)
   2e2dc:	dec00204 	addi	sp,sp,8
   2e2e0:	f800283a 	ret

0002e2e4 <_close_r>:
   2e2e4:	defffe04 	addi	sp,sp,-8
   2e2e8:	dc000015 	stw	r16,0(sp)
   2e2ec:	008000f4 	movhi	r2,3
   2e2f0:	2021883a 	mov	r16,r4
   2e2f4:	2809883a 	mov	r4,r5
   2e2f8:	dfc00115 	stw	ra,4(sp)
   2e2fc:	10141715 	stw	zero,20572(r2)
   2e300:	002fef00 	call	2fef0 <close>
   2e304:	10ffffd8 	cmpnei	r3,r2,-1
   2e308:	18000426 	beq	r3,zero,2e31c <_close_r+0x38>
   2e30c:	dfc00117 	ldw	ra,4(sp)
   2e310:	dc000017 	ldw	r16,0(sp)
   2e314:	dec00204 	addi	sp,sp,8
   2e318:	f800283a 	ret
   2e31c:	00c000f4 	movhi	r3,3
   2e320:	18d41717 	ldw	r3,20572(r3)
   2e324:	183ff926 	beq	r3,zero,2e30c <_close_r+0x28>
   2e328:	80c00015 	stw	r3,0(r16)
   2e32c:	dfc00117 	ldw	ra,4(sp)
   2e330:	dc000017 	ldw	r16,0(sp)
   2e334:	dec00204 	addi	sp,sp,8
   2e338:	f800283a 	ret

0002e33c <__assert_func>:
   2e33c:	008000f4 	movhi	r2,3
   2e340:	1210d017 	ldw	r8,17216(r2)
   2e344:	defffc04 	addi	sp,sp,-16
   2e348:	3807883a 	mov	r3,r7
   2e34c:	3005883a 	mov	r2,r6
   2e350:	dfc00315 	stw	ra,12(sp)
   2e354:	42400317 	ldw	r9,12(r8)
   2e358:	200f883a 	mov	r7,r4
   2e35c:	2811883a 	mov	r8,r5
   2e360:	180d883a 	mov	r6,r3
   2e364:	10000a26 	beq	r2,zero,2e390 <__assert_func+0x54>
   2e368:	00c000f4 	movhi	r3,3
   2e36c:	18ccfc04 	addi	r3,r3,13296
   2e370:	014000f4 	movhi	r5,3
   2e374:	294d0004 	addi	r5,r5,13312
   2e378:	4809883a 	mov	r4,r9
   2e37c:	d8c00115 	stw	r3,4(sp)
   2e380:	da000015 	stw	r8,0(sp)
   2e384:	d8800215 	stw	r2,8(sp)
   2e388:	002e6380 	call	2e638 <fiprintf>
   2e38c:	002ec680 	call	2ec68 <abort>
   2e390:	00c000f4 	movhi	r3,3
   2e394:	18ccff04 	addi	r3,r3,13308
   2e398:	1805883a 	mov	r2,r3
   2e39c:	003ff406 	br	2e370 <__assert_func+0x34>

0002e3a0 <__assert>:
   2e3a0:	deffff04 	addi	sp,sp,-4
   2e3a4:	300f883a 	mov	r7,r6
   2e3a8:	000d883a 	mov	r6,zero
   2e3ac:	dfc00015 	stw	ra,0(sp)
   2e3b0:	002e33c0 	call	2e33c <__assert_func>

0002e3b4 <_calloc_r>:
   2e3b4:	defffe04 	addi	sp,sp,-8
   2e3b8:	dc000015 	stw	r16,0(sp)
   2e3bc:	2021883a 	mov	r16,r4
   2e3c0:	2809883a 	mov	r4,r5
   2e3c4:	300b883a 	mov	r5,r6
   2e3c8:	dfc00115 	stw	ra,4(sp)
   2e3cc:	0022c7c0 	call	22c7c <__mulsi3>
   2e3d0:	8009883a 	mov	r4,r16
   2e3d4:	100b883a 	mov	r5,r2
   2e3d8:	002a6800 	call	2a680 <_malloc_r>
   2e3dc:	1009883a 	mov	r4,r2
   2e3e0:	10000c26 	beq	r2,zero,2e414 <_calloc_r+0x60>
   2e3e4:	11bfff17 	ldw	r6,-4(r2)
   2e3e8:	00bfff04 	movi	r2,-4
   2e3ec:	308c703a 	and	r6,r6,r2
   2e3f0:	31bfff04 	addi	r6,r6,-4
   2e3f4:	30800968 	cmpgeui	r2,r6,37
   2e3f8:	1000151e 	bne	r2,zero,2e450 <_calloc_r+0x9c>
   2e3fc:	30800530 	cmpltui	r2,r6,20
   2e400:	10000926 	beq	r2,zero,2e428 <_calloc_r+0x74>
   2e404:	2005883a 	mov	r2,r4
   2e408:	10000015 	stw	zero,0(r2)
   2e40c:	10000115 	stw	zero,4(r2)
   2e410:	10000215 	stw	zero,8(r2)
   2e414:	2005883a 	mov	r2,r4
   2e418:	dfc00117 	ldw	ra,4(sp)
   2e41c:	dc000017 	ldw	r16,0(sp)
   2e420:	dec00204 	addi	sp,sp,8
   2e424:	f800283a 	ret
   2e428:	20000015 	stw	zero,0(r4)
   2e42c:	20000115 	stw	zero,4(r4)
   2e430:	30800728 	cmpgeui	r2,r6,28
   2e434:	10000a26 	beq	r2,zero,2e460 <_calloc_r+0xac>
   2e438:	20000215 	stw	zero,8(r4)
   2e43c:	20000315 	stw	zero,12(r4)
   2e440:	31800920 	cmpeqi	r6,r6,36
   2e444:	3000081e 	bne	r6,zero,2e468 <_calloc_r+0xb4>
   2e448:	20800404 	addi	r2,r4,16
   2e44c:	003fee06 	br	2e408 <_calloc_r+0x54>
   2e450:	000b883a 	mov	r5,zero
   2e454:	00252f00 	call	252f0 <memset>
   2e458:	1009883a 	mov	r4,r2
   2e45c:	003fed06 	br	2e414 <_calloc_r+0x60>
   2e460:	20800204 	addi	r2,r4,8
   2e464:	003fe806 	br	2e408 <_calloc_r+0x54>
   2e468:	20000415 	stw	zero,16(r4)
   2e46c:	20800604 	addi	r2,r4,24
   2e470:	20000515 	stw	zero,20(r4)
   2e474:	003fe406 	br	2e408 <_calloc_r+0x54>

0002e478 <_fclose_r.part.0>:
   2e478:	defffc04 	addi	sp,sp,-16
   2e47c:	dc800215 	stw	r18,8(sp)
   2e480:	dc400115 	stw	r17,4(sp)
   2e484:	dc000015 	stw	r16,0(sp)
   2e488:	dfc00315 	stw	ra,12(sp)
   2e48c:	2821883a 	mov	r16,r5
   2e490:	2023883a 	mov	r17,r4
   2e494:	00293400 	call	29340 <__sflush_r>
   2e498:	80c00b17 	ldw	r3,44(r16)
   2e49c:	1025883a 	mov	r18,r2
   2e4a0:	18000426 	beq	r3,zero,2e4b4 <_fclose_r.part.0+0x3c>
   2e4a4:	81400717 	ldw	r5,28(r16)
   2e4a8:	8809883a 	mov	r4,r17
   2e4ac:	183ee83a 	callr	r3
   2e4b0:	10001916 	blt	r2,zero,2e518 <_fclose_r.part.0+0xa0>
   2e4b4:	8080030b 	ldhu	r2,12(r16)
   2e4b8:	1080200c 	andi	r2,r2,128
   2e4bc:	10001a1e 	bne	r2,zero,2e528 <_fclose_r.part.0+0xb0>
   2e4c0:	81400c17 	ldw	r5,48(r16)
   2e4c4:	28000526 	beq	r5,zero,2e4dc <_fclose_r.part.0+0x64>
   2e4c8:	80801004 	addi	r2,r16,64
   2e4cc:	28800226 	beq	r5,r2,2e4d8 <_fclose_r.part.0+0x60>
   2e4d0:	8809883a 	mov	r4,r17
   2e4d4:	0029b140 	call	29b14 <_free_r>
   2e4d8:	80000c15 	stw	zero,48(r16)
   2e4dc:	81401117 	ldw	r5,68(r16)
   2e4e0:	28000326 	beq	r5,zero,2e4f0 <_fclose_r.part.0+0x78>
   2e4e4:	8809883a 	mov	r4,r17
   2e4e8:	0029b140 	call	29b14 <_free_r>
   2e4ec:	80001115 	stw	zero,68(r16)
   2e4f0:	00299c00 	call	299c0 <__sfp_lock_acquire>
   2e4f4:	8000030d 	sth	zero,12(r16)
   2e4f8:	00299c40 	call	299c4 <__sfp_lock_release>
   2e4fc:	9005883a 	mov	r2,r18
   2e500:	dfc00317 	ldw	ra,12(sp)
   2e504:	dc800217 	ldw	r18,8(sp)
   2e508:	dc400117 	ldw	r17,4(sp)
   2e50c:	dc000017 	ldw	r16,0(sp)
   2e510:	dec00404 	addi	sp,sp,16
   2e514:	f800283a 	ret
   2e518:	8080030b 	ldhu	r2,12(r16)
   2e51c:	04bfffc4 	movi	r18,-1
   2e520:	1080200c 	andi	r2,r2,128
   2e524:	103fe626 	beq	r2,zero,2e4c0 <_fclose_r.part.0+0x48>
   2e528:	81400417 	ldw	r5,16(r16)
   2e52c:	8809883a 	mov	r4,r17
   2e530:	0029b140 	call	29b14 <_free_r>
   2e534:	003fe206 	br	2e4c0 <_fclose_r.part.0+0x48>

0002e538 <_fclose_r>:
   2e538:	28001926 	beq	r5,zero,2e5a0 <_fclose_r+0x68>
   2e53c:	defffd04 	addi	sp,sp,-12
   2e540:	dc000115 	stw	r16,4(sp)
   2e544:	dfc00215 	stw	ra,8(sp)
   2e548:	2021883a 	mov	r16,r4
   2e54c:	20000226 	beq	r4,zero,2e558 <_fclose_r+0x20>
   2e550:	20800e17 	ldw	r2,56(r4)
   2e554:	10000c26 	beq	r2,zero,2e588 <_fclose_r+0x50>
   2e558:	2880030f 	ldh	r2,12(r5)
   2e55c:	1000051e 	bne	r2,zero,2e574 <_fclose_r+0x3c>
   2e560:	0005883a 	mov	r2,zero
   2e564:	dfc00217 	ldw	ra,8(sp)
   2e568:	dc000117 	ldw	r16,4(sp)
   2e56c:	dec00304 	addi	sp,sp,12
   2e570:	f800283a 	ret
   2e574:	8009883a 	mov	r4,r16
   2e578:	dfc00217 	ldw	ra,8(sp)
   2e57c:	dc000117 	ldw	r16,4(sp)
   2e580:	dec00304 	addi	sp,sp,12
   2e584:	002e4781 	jmpi	2e478 <_fclose_r.part.0>
   2e588:	d9400015 	stw	r5,0(sp)
   2e58c:	00299b00 	call	299b0 <__sinit>
   2e590:	d9400017 	ldw	r5,0(sp)
   2e594:	2880030f 	ldh	r2,12(r5)
   2e598:	103ff126 	beq	r2,zero,2e560 <_fclose_r+0x28>
   2e59c:	003ff506 	br	2e574 <_fclose_r+0x3c>
   2e5a0:	0005883a 	mov	r2,zero
   2e5a4:	f800283a 	ret

0002e5a8 <fclose>:
   2e5a8:	20000826 	beq	r4,zero,2e5cc <fclose+0x24>
   2e5ac:	008000f4 	movhi	r2,3
   2e5b0:	200b883a 	mov	r5,r4
   2e5b4:	1110d017 	ldw	r4,17216(r2)
   2e5b8:	20000226 	beq	r4,zero,2e5c4 <fclose+0x1c>
   2e5bc:	20800e17 	ldw	r2,56(r4)
   2e5c0:	10000526 	beq	r2,zero,2e5d8 <fclose+0x30>
   2e5c4:	2880030f 	ldh	r2,12(r5)
   2e5c8:	1000021e 	bne	r2,zero,2e5d4 <fclose+0x2c>
   2e5cc:	0005883a 	mov	r2,zero
   2e5d0:	f800283a 	ret
   2e5d4:	002e4781 	jmpi	2e478 <_fclose_r.part.0>
   2e5d8:	defffd04 	addi	sp,sp,-12
   2e5dc:	d9400115 	stw	r5,4(sp)
   2e5e0:	d9000015 	stw	r4,0(sp)
   2e5e4:	dfc00215 	stw	ra,8(sp)
   2e5e8:	00299b00 	call	299b0 <__sinit>
   2e5ec:	d9400117 	ldw	r5,4(sp)
   2e5f0:	d9000017 	ldw	r4,0(sp)
   2e5f4:	2880030f 	ldh	r2,12(r5)
   2e5f8:	10000326 	beq	r2,zero,2e608 <fclose+0x60>
   2e5fc:	dfc00217 	ldw	ra,8(sp)
   2e600:	dec00304 	addi	sp,sp,12
   2e604:	002e4781 	jmpi	2e478 <_fclose_r.part.0>
   2e608:	0005883a 	mov	r2,zero
   2e60c:	dfc00217 	ldw	ra,8(sp)
   2e610:	dec00304 	addi	sp,sp,12
   2e614:	f800283a 	ret

0002e618 <_fiprintf_r>:
   2e618:	defffe04 	addi	sp,sp,-8
   2e61c:	dfc00015 	stw	ra,0(sp)
   2e620:	d9c00115 	stw	r7,4(sp)
   2e624:	d9c00104 	addi	r7,sp,4
   2e628:	002eb340 	call	2eb34 <_vfiprintf_r>
   2e62c:	dfc00017 	ldw	ra,0(sp)
   2e630:	dec00204 	addi	sp,sp,8
   2e634:	f800283a 	ret

0002e638 <fiprintf>:
   2e638:	defffd04 	addi	sp,sp,-12
   2e63c:	2005883a 	mov	r2,r4
   2e640:	dfc00015 	stw	ra,0(sp)
   2e644:	d9800115 	stw	r6,4(sp)
   2e648:	d9c00215 	stw	r7,8(sp)
   2e64c:	00c000f4 	movhi	r3,3
   2e650:	1910d017 	ldw	r4,17216(r3)
   2e654:	280d883a 	mov	r6,r5
   2e658:	d9c00104 	addi	r7,sp,4
   2e65c:	100b883a 	mov	r5,r2
   2e660:	002eb340 	call	2eb34 <_vfiprintf_r>
   2e664:	dfc00017 	ldw	ra,0(sp)
   2e668:	dec00304 	addi	sp,sp,12
   2e66c:	f800283a 	ret

0002e670 <__fputwc>:
   2e670:	defff904 	addi	sp,sp,-28
   2e674:	dcc00415 	stw	r19,16(sp)
   2e678:	dc800315 	stw	r18,12(sp)
   2e67c:	dc000115 	stw	r16,4(sp)
   2e680:	dfc00615 	stw	ra,24(sp)
   2e684:	dd000515 	stw	r20,20(sp)
   2e688:	dc400215 	stw	r17,8(sp)
   2e68c:	2025883a 	mov	r18,r4
   2e690:	2827883a 	mov	r19,r5
   2e694:	3021883a 	mov	r16,r6
   2e698:	002e99c0 	call	2e99c <__locale_mb_cur_max>
   2e69c:	10800058 	cmpnei	r2,r2,1
   2e6a0:	1000071e 	bne	r2,zero,2e6c0 <__fputwc+0x50>
   2e6a4:	98bfffc4 	addi	r2,r19,-1
   2e6a8:	10803fe8 	cmpgeui	r2,r2,255
   2e6ac:	1000041e 	bne	r2,zero,2e6c0 <__fputwc+0x50>
   2e6b0:	980b883a 	mov	r5,r19
   2e6b4:	dcc000c5 	stb	r19,3(sp)
   2e6b8:	05000044 	movi	r20,1
   2e6bc:	00000a06 	br	2e6e8 <__fputwc+0x78>
   2e6c0:	81c01704 	addi	r7,r16,92
   2e6c4:	980d883a 	mov	r6,r19
   2e6c8:	d94000c4 	addi	r5,sp,3
   2e6cc:	9009883a 	mov	r4,r18
   2e6d0:	002eb380 	call	2eb38 <_wcrtomb_r>
   2e6d4:	1029883a 	mov	r20,r2
   2e6d8:	10bfffd8 	cmpnei	r2,r2,-1
   2e6dc:	10003926 	beq	r2,zero,2e7c4 <__fputwc+0x154>
   2e6e0:	a0001f26 	beq	r20,zero,2e760 <__fputwc+0xf0>
   2e6e4:	d94000c3 	ldbu	r5,3(sp)
   2e6e8:	0023883a 	mov	r17,zero
   2e6ec:	00000a06 	br	2e718 <__fputwc+0xa8>
   2e6f0:	80800017 	ldw	r2,0(r16)
   2e6f4:	11400005 	stb	r5,0(r2)
   2e6f8:	80c00017 	ldw	r3,0(r16)
   2e6fc:	18c00044 	addi	r3,r3,1
   2e700:	80c00015 	stw	r3,0(r16)
   2e704:	8c400044 	addi	r17,r17,1
   2e708:	d88000c4 	addi	r2,sp,3
   2e70c:	1447883a 	add	r3,r2,r17
   2e710:	8d00132e 	bgeu	r17,r20,2e760 <__fputwc+0xf0>
   2e714:	19400003 	ldbu	r5,0(r3)
   2e718:	80c00217 	ldw	r3,8(r16)
   2e71c:	18ffffc4 	addi	r3,r3,-1
   2e720:	80c00215 	stw	r3,8(r16)
   2e724:	183ff20e 	bge	r3,zero,2e6f0 <__fputwc+0x80>
   2e728:	80800617 	ldw	r2,24(r16)
   2e72c:	18801616 	blt	r3,r2,2e788 <__fputwc+0x118>
   2e730:	80800017 	ldw	r2,0(r16)
   2e734:	11400005 	stb	r5,0(r2)
   2e738:	80800017 	ldw	r2,0(r16)
   2e73c:	10c00003 	ldbu	r3,0(r2)
   2e740:	10800044 	addi	r2,r2,1
   2e744:	18c002a0 	cmpeqi	r3,r3,10
   2e748:	1800171e 	bne	r3,zero,2e7a8 <__fputwc+0x138>
   2e74c:	80800015 	stw	r2,0(r16)
   2e750:	8c400044 	addi	r17,r17,1
   2e754:	d88000c4 	addi	r2,sp,3
   2e758:	1447883a 	add	r3,r2,r17
   2e75c:	8d3fed36 	bltu	r17,r20,2e714 <__fputwc+0xa4>
   2e760:	9829883a 	mov	r20,r19
   2e764:	a005883a 	mov	r2,r20
   2e768:	dfc00617 	ldw	ra,24(sp)
   2e76c:	dd000517 	ldw	r20,20(sp)
   2e770:	dcc00417 	ldw	r19,16(sp)
   2e774:	dc800317 	ldw	r18,12(sp)
   2e778:	dc400217 	ldw	r17,8(sp)
   2e77c:	dc000117 	ldw	r16,4(sp)
   2e780:	dec00704 	addi	sp,sp,28
   2e784:	f800283a 	ret
   2e788:	29403fcc 	andi	r5,r5,255
   2e78c:	800d883a 	mov	r6,r16
   2e790:	9009883a 	mov	r4,r18
   2e794:	002e1200 	call	2e120 <__swbuf_r>
   2e798:	10bfffe0 	cmpeqi	r2,r2,-1
   2e79c:	103fd926 	beq	r2,zero,2e704 <__fputwc+0x94>
   2e7a0:	053fffc4 	movi	r20,-1
   2e7a4:	003fef06 	br	2e764 <__fputwc+0xf4>
   2e7a8:	800d883a 	mov	r6,r16
   2e7ac:	01400284 	movi	r5,10
   2e7b0:	9009883a 	mov	r4,r18
   2e7b4:	002e1200 	call	2e120 <__swbuf_r>
   2e7b8:	10bfffe0 	cmpeqi	r2,r2,-1
   2e7bc:	103fd126 	beq	r2,zero,2e704 <__fputwc+0x94>
   2e7c0:	003ff706 	br	2e7a0 <__fputwc+0x130>
   2e7c4:	8080030b 	ldhu	r2,12(r16)
   2e7c8:	10801014 	ori	r2,r2,64
   2e7cc:	8080030d 	sth	r2,12(r16)
   2e7d0:	003fe406 	br	2e764 <__fputwc+0xf4>

0002e7d4 <_fputwc_r>:
   2e7d4:	3080030b 	ldhu	r2,12(r6)
   2e7d8:	10c8000c 	andi	r3,r2,8192
   2e7dc:	1800051e 	bne	r3,zero,2e7f4 <_fputwc_r+0x20>
   2e7e0:	30c01917 	ldw	r3,100(r6)
   2e7e4:	10880014 	ori	r2,r2,8192
   2e7e8:	3080030d 	sth	r2,12(r6)
   2e7ec:	18880014 	ori	r2,r3,8192
   2e7f0:	30801915 	stw	r2,100(r6)
   2e7f4:	002e6701 	jmpi	2e670 <__fputwc>

0002e7f8 <fputwc>:
   2e7f8:	defffc04 	addi	sp,sp,-16
   2e7fc:	008000f4 	movhi	r2,3
   2e800:	dc000215 	stw	r16,8(sp)
   2e804:	1410d017 	ldw	r16,17216(r2)
   2e808:	dfc00315 	stw	ra,12(sp)
   2e80c:	280d883a 	mov	r6,r5
   2e810:	200b883a 	mov	r5,r4
   2e814:	80000226 	beq	r16,zero,2e820 <fputwc+0x28>
   2e818:	80800e17 	ldw	r2,56(r16)
   2e81c:	10000d26 	beq	r2,zero,2e854 <fputwc+0x5c>
   2e820:	3080030b 	ldhu	r2,12(r6)
   2e824:	10c8000c 	andi	r3,r2,8192
   2e828:	1800051e 	bne	r3,zero,2e840 <fputwc+0x48>
   2e82c:	30c01917 	ldw	r3,100(r6)
   2e830:	10880014 	ori	r2,r2,8192
   2e834:	3080030d 	sth	r2,12(r6)
   2e838:	18880014 	ori	r2,r3,8192
   2e83c:	30801915 	stw	r2,100(r6)
   2e840:	8009883a 	mov	r4,r16
   2e844:	dfc00317 	ldw	ra,12(sp)
   2e848:	dc000217 	ldw	r16,8(sp)
   2e84c:	dec00404 	addi	sp,sp,16
   2e850:	002e6701 	jmpi	2e670 <__fputwc>
   2e854:	d9000015 	stw	r4,0(sp)
   2e858:	8009883a 	mov	r4,r16
   2e85c:	d9800115 	stw	r6,4(sp)
   2e860:	00299b00 	call	299b0 <__sinit>
   2e864:	d9800117 	ldw	r6,4(sp)
   2e868:	d9400017 	ldw	r5,0(sp)
   2e86c:	003fec06 	br	2e820 <fputwc+0x28>

0002e870 <_fstat_r>:
   2e870:	2807883a 	mov	r3,r5
   2e874:	defffe04 	addi	sp,sp,-8
   2e878:	dc000015 	stw	r16,0(sp)
   2e87c:	008000f4 	movhi	r2,3
   2e880:	300b883a 	mov	r5,r6
   2e884:	2021883a 	mov	r16,r4
   2e888:	1809883a 	mov	r4,r3
   2e88c:	dfc00115 	stw	ra,4(sp)
   2e890:	10141715 	stw	zero,20572(r2)
   2e894:	003006c0 	call	3006c <fstat>
   2e898:	10ffffd8 	cmpnei	r3,r2,-1
   2e89c:	18000426 	beq	r3,zero,2e8b0 <_fstat_r+0x40>
   2e8a0:	dfc00117 	ldw	ra,4(sp)
   2e8a4:	dc000017 	ldw	r16,0(sp)
   2e8a8:	dec00204 	addi	sp,sp,8
   2e8ac:	f800283a 	ret
   2e8b0:	00c000f4 	movhi	r3,3
   2e8b4:	18d41717 	ldw	r3,20572(r3)
   2e8b8:	183ff926 	beq	r3,zero,2e8a0 <_fstat_r+0x30>
   2e8bc:	80c00015 	stw	r3,0(r16)
   2e8c0:	dfc00117 	ldw	ra,4(sp)
   2e8c4:	dc000017 	ldw	r16,0(sp)
   2e8c8:	dec00204 	addi	sp,sp,8
   2e8cc:	f800283a 	ret

0002e8d0 <_isatty_r>:
   2e8d0:	defffe04 	addi	sp,sp,-8
   2e8d4:	dc000015 	stw	r16,0(sp)
   2e8d8:	008000f4 	movhi	r2,3
   2e8dc:	2021883a 	mov	r16,r4
   2e8e0:	2809883a 	mov	r4,r5
   2e8e4:	dfc00115 	stw	ra,4(sp)
   2e8e8:	10141715 	stw	zero,20572(r2)
   2e8ec:	003041c0 	call	3041c <isatty>
   2e8f0:	10ffffd8 	cmpnei	r3,r2,-1
   2e8f4:	18000426 	beq	r3,zero,2e908 <_isatty_r+0x38>
   2e8f8:	dfc00117 	ldw	ra,4(sp)
   2e8fc:	dc000017 	ldw	r16,0(sp)
   2e900:	dec00204 	addi	sp,sp,8
   2e904:	f800283a 	ret
   2e908:	00c000f4 	movhi	r3,3
   2e90c:	18d41717 	ldw	r3,20572(r3)
   2e910:	183ff926 	beq	r3,zero,2e8f8 <_isatty_r+0x28>
   2e914:	80c00015 	stw	r3,0(r16)
   2e918:	dfc00117 	ldw	ra,4(sp)
   2e91c:	dc000017 	ldw	r16,0(sp)
   2e920:	dec00204 	addi	sp,sp,8
   2e924:	f800283a 	ret

0002e928 <_setlocale_r>:
   2e928:	30001626 	beq	r6,zero,2e984 <_setlocale_r+0x5c>
   2e92c:	014000f4 	movhi	r5,3
   2e930:	defffe04 	addi	sp,sp,-8
   2e934:	294d0d04 	addi	r5,r5,13364
   2e938:	3009883a 	mov	r4,r6
   2e93c:	dc000015 	stw	r16,0(sp)
   2e940:	dfc00115 	stw	ra,4(sp)
   2e944:	3021883a 	mov	r16,r6
   2e948:	00255440 	call	25544 <strcmp>
   2e94c:	1000061e 	bne	r2,zero,2e968 <_setlocale_r+0x40>
   2e950:	008000f4 	movhi	r2,3
   2e954:	108d0c04 	addi	r2,r2,13360
   2e958:	dfc00117 	ldw	ra,4(sp)
   2e95c:	dc000017 	ldw	r16,0(sp)
   2e960:	dec00204 	addi	sp,sp,8
   2e964:	f800283a 	ret
   2e968:	80800003 	ldbu	r2,0(r16)
   2e96c:	10bfef44 	addi	r2,r2,-67
   2e970:	10000726 	beq	r2,zero,2e990 <_setlocale_r+0x68>
   2e974:	80800003 	ldbu	r2,0(r16)
   2e978:	103ff526 	beq	r2,zero,2e950 <_setlocale_r+0x28>
   2e97c:	0005883a 	mov	r2,zero
   2e980:	003ff506 	br	2e958 <_setlocale_r+0x30>
   2e984:	008000f4 	movhi	r2,3
   2e988:	108d0c04 	addi	r2,r2,13360
   2e98c:	f800283a 	ret
   2e990:	80800043 	ldbu	r2,1(r16)
   2e994:	103fee26 	beq	r2,zero,2e950 <_setlocale_r+0x28>
   2e998:	003ff606 	br	2e974 <_setlocale_r+0x4c>

0002e99c <__locale_mb_cur_max>:
   2e99c:	008000f4 	movhi	r2,3
   2e9a0:	10901807 	ldb	r2,16480(r2)
   2e9a4:	f800283a 	ret

0002e9a8 <setlocale>:
   2e9a8:	28001626 	beq	r5,zero,2ea04 <setlocale+0x5c>
   2e9ac:	defffe04 	addi	sp,sp,-8
   2e9b0:	dc000015 	stw	r16,0(sp)
   2e9b4:	2821883a 	mov	r16,r5
   2e9b8:	014000f4 	movhi	r5,3
   2e9bc:	294d0d04 	addi	r5,r5,13364
   2e9c0:	8009883a 	mov	r4,r16
   2e9c4:	dfc00115 	stw	ra,4(sp)
   2e9c8:	00255440 	call	25544 <strcmp>
   2e9cc:	1000061e 	bne	r2,zero,2e9e8 <setlocale+0x40>
   2e9d0:	008000f4 	movhi	r2,3
   2e9d4:	108d0c04 	addi	r2,r2,13360
   2e9d8:	dfc00117 	ldw	ra,4(sp)
   2e9dc:	dc000017 	ldw	r16,0(sp)
   2e9e0:	dec00204 	addi	sp,sp,8
   2e9e4:	f800283a 	ret
   2e9e8:	80800003 	ldbu	r2,0(r16)
   2e9ec:	10bfef44 	addi	r2,r2,-67
   2e9f0:	10000726 	beq	r2,zero,2ea10 <setlocale+0x68>
   2e9f4:	80800003 	ldbu	r2,0(r16)
   2e9f8:	103ff526 	beq	r2,zero,2e9d0 <setlocale+0x28>
   2e9fc:	0005883a 	mov	r2,zero
   2ea00:	003ff506 	br	2e9d8 <setlocale+0x30>
   2ea04:	008000f4 	movhi	r2,3
   2ea08:	108d0c04 	addi	r2,r2,13360
   2ea0c:	f800283a 	ret
   2ea10:	80800043 	ldbu	r2,1(r16)
   2ea14:	103fee26 	beq	r2,zero,2e9d0 <setlocale+0x28>
   2ea18:	003ff606 	br	2e9f4 <setlocale+0x4c>

0002ea1c <_lseek_r>:
   2ea1c:	2807883a 	mov	r3,r5
   2ea20:	defffe04 	addi	sp,sp,-8
   2ea24:	dc000015 	stw	r16,0(sp)
   2ea28:	300b883a 	mov	r5,r6
   2ea2c:	008000f4 	movhi	r2,3
   2ea30:	380d883a 	mov	r6,r7
   2ea34:	2021883a 	mov	r16,r4
   2ea38:	1809883a 	mov	r4,r3
   2ea3c:	dfc00115 	stw	ra,4(sp)
   2ea40:	10141715 	stw	zero,20572(r2)
   2ea44:	003075c0 	call	3075c <lseek>
   2ea48:	10ffffd8 	cmpnei	r3,r2,-1
   2ea4c:	18000426 	beq	r3,zero,2ea60 <_lseek_r+0x44>
   2ea50:	dfc00117 	ldw	ra,4(sp)
   2ea54:	dc000017 	ldw	r16,0(sp)
   2ea58:	dec00204 	addi	sp,sp,8
   2ea5c:	f800283a 	ret
   2ea60:	00c000f4 	movhi	r3,3
   2ea64:	18d41717 	ldw	r3,20572(r3)
   2ea68:	183ff926 	beq	r3,zero,2ea50 <_lseek_r+0x34>
   2ea6c:	80c00015 	stw	r3,0(r16)
   2ea70:	dfc00117 	ldw	ra,4(sp)
   2ea74:	dc000017 	ldw	r16,0(sp)
   2ea78:	dec00204 	addi	sp,sp,8
   2ea7c:	f800283a 	ret

0002ea80 <_mbtowc_r>:
   2ea80:	008000f4 	movhi	r2,3
   2ea84:	10900717 	ldw	r2,16412(r2)
   2ea88:	1000683a 	jmp	r2

0002ea8c <__ascii_mbtowc>:
   2ea8c:	deffff04 	addi	sp,sp,-4
   2ea90:	28000826 	beq	r5,zero,2eab4 <__ascii_mbtowc+0x28>
   2ea94:	30000926 	beq	r6,zero,2eabc <__ascii_mbtowc+0x30>
   2ea98:	38000b26 	beq	r7,zero,2eac8 <__ascii_mbtowc+0x3c>
   2ea9c:	30800003 	ldbu	r2,0(r6)
   2eaa0:	28800015 	stw	r2,0(r5)
   2eaa4:	30800003 	ldbu	r2,0(r6)
   2eaa8:	1004c03a 	cmpne	r2,r2,zero
   2eaac:	dec00104 	addi	sp,sp,4
   2eab0:	f800283a 	ret
   2eab4:	d80b883a 	mov	r5,sp
   2eab8:	303ff71e 	bne	r6,zero,2ea98 <__ascii_mbtowc+0xc>
   2eabc:	0005883a 	mov	r2,zero
   2eac0:	dec00104 	addi	sp,sp,4
   2eac4:	f800283a 	ret
   2eac8:	00bfff84 	movi	r2,-2
   2eacc:	003ff706 	br	2eaac <__ascii_mbtowc+0x20>

0002ead0 <_read_r>:
   2ead0:	2807883a 	mov	r3,r5
   2ead4:	defffe04 	addi	sp,sp,-8
   2ead8:	dc000015 	stw	r16,0(sp)
   2eadc:	300b883a 	mov	r5,r6
   2eae0:	008000f4 	movhi	r2,3
   2eae4:	380d883a 	mov	r6,r7
   2eae8:	2021883a 	mov	r16,r4
   2eaec:	1809883a 	mov	r4,r3
   2eaf0:	dfc00115 	stw	ra,4(sp)
   2eaf4:	10141715 	stw	zero,20572(r2)
   2eaf8:	003093c0 	call	3093c <read>
   2eafc:	10ffffd8 	cmpnei	r3,r2,-1
   2eb00:	18000426 	beq	r3,zero,2eb14 <_read_r+0x44>
   2eb04:	dfc00117 	ldw	ra,4(sp)
   2eb08:	dc000017 	ldw	r16,0(sp)
   2eb0c:	dec00204 	addi	sp,sp,8
   2eb10:	f800283a 	ret
   2eb14:	00c000f4 	movhi	r3,3
   2eb18:	18d41717 	ldw	r3,20572(r3)
   2eb1c:	183ff926 	beq	r3,zero,2eb04 <_read_r+0x34>
   2eb20:	80c00015 	stw	r3,0(r16)
   2eb24:	dfc00117 	ldw	ra,4(sp)
   2eb28:	dc000017 	ldw	r16,0(sp)
   2eb2c:	dec00204 	addi	sp,sp,8
   2eb30:	f800283a 	ret

0002eb34 <_vfiprintf_r>:
   2eb34:	002cd001 	jmpi	2cd00 <___vfiprintf_internal_r>

0002eb38 <_wcrtomb_r>:
   2eb38:	defffa04 	addi	sp,sp,-24
   2eb3c:	dc400415 	stw	r17,16(sp)
   2eb40:	dc000315 	stw	r16,12(sp)
   2eb44:	008000f4 	movhi	r2,3
   2eb48:	dfc00515 	stw	ra,20(sp)
   2eb4c:	10900617 	ldw	r2,16408(r2)
   2eb50:	2023883a 	mov	r17,r4
   2eb54:	3821883a 	mov	r16,r7
   2eb58:	28000826 	beq	r5,zero,2eb7c <_wcrtomb_r+0x44>
   2eb5c:	103ee83a 	callr	r2
   2eb60:	10ffffd8 	cmpnei	r3,r2,-1
   2eb64:	18000a26 	beq	r3,zero,2eb90 <_wcrtomb_r+0x58>
   2eb68:	dfc00517 	ldw	ra,20(sp)
   2eb6c:	dc400417 	ldw	r17,16(sp)
   2eb70:	dc000317 	ldw	r16,12(sp)
   2eb74:	dec00604 	addi	sp,sp,24
   2eb78:	f800283a 	ret
   2eb7c:	000d883a 	mov	r6,zero
   2eb80:	d9400084 	addi	r5,sp,2
   2eb84:	103ee83a 	callr	r2
   2eb88:	10ffffd8 	cmpnei	r3,r2,-1
   2eb8c:	183ff61e 	bne	r3,zero,2eb68 <_wcrtomb_r+0x30>
   2eb90:	00802284 	movi	r2,138
   2eb94:	80000015 	stw	zero,0(r16)
   2eb98:	88800015 	stw	r2,0(r17)
   2eb9c:	00bfffc4 	movi	r2,-1
   2eba0:	003ff106 	br	2eb68 <_wcrtomb_r+0x30>

0002eba4 <wcrtomb>:
   2eba4:	defffa04 	addi	sp,sp,-24
   2eba8:	00c000f4 	movhi	r3,3
   2ebac:	dc400415 	stw	r17,16(sp)
   2ebb0:	dc000315 	stw	r16,12(sp)
   2ebb4:	1c50d017 	ldw	r17,17216(r3)
   2ebb8:	dfc00515 	stw	ra,20(sp)
   2ebbc:	00c000f4 	movhi	r3,3
   2ebc0:	18d00617 	ldw	r3,16408(r3)
   2ebc4:	3021883a 	mov	r16,r6
   2ebc8:	20000c26 	beq	r4,zero,2ebfc <wcrtomb+0x58>
   2ebcc:	280d883a 	mov	r6,r5
   2ebd0:	800f883a 	mov	r7,r16
   2ebd4:	200b883a 	mov	r5,r4
   2ebd8:	8809883a 	mov	r4,r17
   2ebdc:	183ee83a 	callr	r3
   2ebe0:	10ffffd8 	cmpnei	r3,r2,-1
   2ebe4:	18000c26 	beq	r3,zero,2ec18 <wcrtomb+0x74>
   2ebe8:	dfc00517 	ldw	ra,20(sp)
   2ebec:	dc400417 	ldw	r17,16(sp)
   2ebf0:	dc000317 	ldw	r16,12(sp)
   2ebf4:	dec00604 	addi	sp,sp,24
   2ebf8:	f800283a 	ret
   2ebfc:	300f883a 	mov	r7,r6
   2ec00:	d9400084 	addi	r5,sp,2
   2ec04:	000d883a 	mov	r6,zero
   2ec08:	8809883a 	mov	r4,r17
   2ec0c:	183ee83a 	callr	r3
   2ec10:	10ffffd8 	cmpnei	r3,r2,-1
   2ec14:	183ff41e 	bne	r3,zero,2ebe8 <wcrtomb+0x44>
   2ec18:	00802284 	movi	r2,138
   2ec1c:	80000015 	stw	zero,0(r16)
   2ec20:	88800015 	stw	r2,0(r17)
   2ec24:	00bfffc4 	movi	r2,-1
   2ec28:	003fef06 	br	2ebe8 <wcrtomb+0x44>

0002ec2c <_wctomb_r>:
   2ec2c:	008000f4 	movhi	r2,3
   2ec30:	10900617 	ldw	r2,16408(r2)
   2ec34:	1000683a 	jmp	r2

0002ec38 <__ascii_wctomb>:
   2ec38:	28000926 	beq	r5,zero,2ec60 <__ascii_wctomb+0x28>
   2ec3c:	30804030 	cmpltui	r2,r6,256
   2ec40:	10000326 	beq	r2,zero,2ec50 <__ascii_wctomb+0x18>
   2ec44:	29800005 	stb	r6,0(r5)
   2ec48:	00800044 	movi	r2,1
   2ec4c:	f800283a 	ret
   2ec50:	00802284 	movi	r2,138
   2ec54:	20800015 	stw	r2,0(r4)
   2ec58:	00bfffc4 	movi	r2,-1
   2ec5c:	f800283a 	ret
   2ec60:	0005883a 	mov	r2,zero
   2ec64:	f800283a 	ret

0002ec68 <abort>:
   2ec68:	deffff04 	addi	sp,sp,-4
   2ec6c:	01000184 	movi	r4,6
   2ec70:	dfc00015 	stw	ra,0(sp)
   2ec74:	002eef40 	call	2eef4 <raise>
   2ec78:	01000044 	movi	r4,1
   2ec7c:	002fff80 	call	2fff8 <_exit>

0002ec80 <_init_signal_r>:
   2ec80:	2080b717 	ldw	r2,732(r4)
   2ec84:	10000226 	beq	r2,zero,2ec90 <_init_signal_r+0x10>
   2ec88:	0005883a 	mov	r2,zero
   2ec8c:	f800283a 	ret
   2ec90:	defffe04 	addi	sp,sp,-8
   2ec94:	01402004 	movi	r5,128
   2ec98:	dc000015 	stw	r16,0(sp)
   2ec9c:	dfc00115 	stw	ra,4(sp)
   2eca0:	2021883a 	mov	r16,r4
   2eca4:	002a6800 	call	2a680 <_malloc_r>
   2eca8:	8080b715 	stw	r2,732(r16)
   2ecac:	1009883a 	mov	r4,r2
   2ecb0:	10000826 	beq	r2,zero,2ecd4 <_init_signal_r+0x54>
   2ecb4:	01802004 	movi	r6,128
   2ecb8:	000b883a 	mov	r5,zero
   2ecbc:	00252f00 	call	252f0 <memset>
   2ecc0:	0005883a 	mov	r2,zero
   2ecc4:	dfc00117 	ldw	ra,4(sp)
   2ecc8:	dc000017 	ldw	r16,0(sp)
   2eccc:	dec00204 	addi	sp,sp,8
   2ecd0:	f800283a 	ret
   2ecd4:	00bfffc4 	movi	r2,-1
   2ecd8:	003ffa06 	br	2ecc4 <_init_signal_r+0x44>

0002ecdc <_signal_r>:
   2ecdc:	defffc04 	addi	sp,sp,-16
   2ece0:	dc400115 	stw	r17,4(sp)
   2ece4:	dfc00315 	stw	ra,12(sp)
   2ece8:	dc800215 	stw	r18,8(sp)
   2ecec:	dc000015 	stw	r16,0(sp)
   2ecf0:	28800830 	cmpltui	r2,r5,32
   2ecf4:	2023883a 	mov	r17,r4
   2ecf8:	10000e26 	beq	r2,zero,2ed34 <_signal_r+0x58>
   2ecfc:	20c0b717 	ldw	r3,732(r4)
   2ed00:	2821883a 	mov	r16,r5
   2ed04:	3025883a 	mov	r18,r6
   2ed08:	18000e26 	beq	r3,zero,2ed44 <_signal_r+0x68>
   2ed0c:	802090ba 	slli	r16,r16,2
   2ed10:	1c21883a 	add	r16,r3,r16
   2ed14:	80800017 	ldw	r2,0(r16)
   2ed18:	84800015 	stw	r18,0(r16)
   2ed1c:	dfc00317 	ldw	ra,12(sp)
   2ed20:	dc800217 	ldw	r18,8(sp)
   2ed24:	dc400117 	ldw	r17,4(sp)
   2ed28:	dc000017 	ldw	r16,0(sp)
   2ed2c:	dec00404 	addi	sp,sp,16
   2ed30:	f800283a 	ret
   2ed34:	00800584 	movi	r2,22
   2ed38:	20800015 	stw	r2,0(r4)
   2ed3c:	00bfffc4 	movi	r2,-1
   2ed40:	003ff606 	br	2ed1c <_signal_r+0x40>
   2ed44:	01402004 	movi	r5,128
   2ed48:	002a6800 	call	2a680 <_malloc_r>
   2ed4c:	8880b715 	stw	r2,732(r17)
   2ed50:	10000626 	beq	r2,zero,2ed6c <_signal_r+0x90>
   2ed54:	01802004 	movi	r6,128
   2ed58:	000b883a 	mov	r5,zero
   2ed5c:	1009883a 	mov	r4,r2
   2ed60:	00252f00 	call	252f0 <memset>
   2ed64:	1007883a 	mov	r3,r2
   2ed68:	003fe806 	br	2ed0c <_signal_r+0x30>
   2ed6c:	00bfffc4 	movi	r2,-1
   2ed70:	003fea06 	br	2ed1c <_signal_r+0x40>

0002ed74 <_raise_r>:
   2ed74:	28800830 	cmpltui	r2,r5,32
   2ed78:	10002b26 	beq	r2,zero,2ee28 <_raise_r+0xb4>
   2ed7c:	2080b717 	ldw	r2,732(r4)
   2ed80:	defffd04 	addi	sp,sp,-12
   2ed84:	dc000115 	stw	r16,4(sp)
   2ed88:	dfc00215 	stw	ra,8(sp)
   2ed8c:	2821883a 	mov	r16,r5
   2ed90:	10001026 	beq	r2,zero,2edd4 <_raise_r+0x60>
   2ed94:	280690ba 	slli	r3,r5,2
   2ed98:	10c5883a 	add	r2,r2,r3
   2ed9c:	10c00017 	ldw	r3,0(r2)
   2eda0:	18000c26 	beq	r3,zero,2edd4 <_raise_r+0x60>
   2eda4:	19400060 	cmpeqi	r5,r3,1
   2eda8:	28001a1e 	bne	r5,zero,2ee14 <_raise_r+0xa0>
   2edac:	197fffd8 	cmpnei	r5,r3,-1
   2edb0:	28001126 	beq	r5,zero,2edf8 <_raise_r+0x84>
   2edb4:	10000015 	stw	zero,0(r2)
   2edb8:	8009883a 	mov	r4,r16
   2edbc:	183ee83a 	callr	r3
   2edc0:	0005883a 	mov	r2,zero
   2edc4:	dfc00217 	ldw	ra,8(sp)
   2edc8:	dc000117 	ldw	r16,4(sp)
   2edcc:	dec00304 	addi	sp,sp,12
   2edd0:	f800283a 	ret
   2edd4:	d9000015 	stw	r4,0(sp)
   2edd8:	002f1cc0 	call	2f1cc <_getpid_r>
   2eddc:	d9000017 	ldw	r4,0(sp)
   2ede0:	800d883a 	mov	r6,r16
   2ede4:	100b883a 	mov	r5,r2
   2ede8:	dfc00217 	ldw	ra,8(sp)
   2edec:	dc000117 	ldw	r16,4(sp)
   2edf0:	dec00304 	addi	sp,sp,12
   2edf4:	002f16c1 	jmpi	2f16c <_kill_r>
   2edf8:	00800584 	movi	r2,22
   2edfc:	20800015 	stw	r2,0(r4)
   2ee00:	00800044 	movi	r2,1
   2ee04:	dfc00217 	ldw	ra,8(sp)
   2ee08:	dc000117 	ldw	r16,4(sp)
   2ee0c:	dec00304 	addi	sp,sp,12
   2ee10:	f800283a 	ret
   2ee14:	0005883a 	mov	r2,zero
   2ee18:	dfc00217 	ldw	ra,8(sp)
   2ee1c:	dc000117 	ldw	r16,4(sp)
   2ee20:	dec00304 	addi	sp,sp,12
   2ee24:	f800283a 	ret
   2ee28:	00800584 	movi	r2,22
   2ee2c:	20800015 	stw	r2,0(r4)
   2ee30:	00bfffc4 	movi	r2,-1
   2ee34:	f800283a 	ret

0002ee38 <__sigtramp_r>:
   2ee38:	28800830 	cmpltui	r2,r5,32
   2ee3c:	10002b26 	beq	r2,zero,2eeec <__sigtramp_r+0xb4>
   2ee40:	20c0b717 	ldw	r3,732(r4)
   2ee44:	defffd04 	addi	sp,sp,-12
   2ee48:	dc400115 	stw	r17,4(sp)
   2ee4c:	dc000015 	stw	r16,0(sp)
   2ee50:	dfc00215 	stw	ra,8(sp)
   2ee54:	2821883a 	mov	r16,r5
   2ee58:	2023883a 	mov	r17,r4
   2ee5c:	18001326 	beq	r3,zero,2eeac <__sigtramp_r+0x74>
   2ee60:	800490ba 	slli	r2,r16,2
   2ee64:	1887883a 	add	r3,r3,r2
   2ee68:	18800017 	ldw	r2,0(r3)
   2ee6c:	10000d26 	beq	r2,zero,2eea4 <__sigtramp_r+0x6c>
   2ee70:	113fffe0 	cmpeqi	r4,r2,-1
   2ee74:	2000191e 	bne	r4,zero,2eedc <__sigtramp_r+0xa4>
   2ee78:	11000060 	cmpeqi	r4,r2,1
   2ee7c:	2000151e 	bne	r4,zero,2eed4 <__sigtramp_r+0x9c>
   2ee80:	18000015 	stw	zero,0(r3)
   2ee84:	8009883a 	mov	r4,r16
   2ee88:	103ee83a 	callr	r2
   2ee8c:	0005883a 	mov	r2,zero
   2ee90:	dfc00217 	ldw	ra,8(sp)
   2ee94:	dc400117 	ldw	r17,4(sp)
   2ee98:	dc000017 	ldw	r16,0(sp)
   2ee9c:	dec00304 	addi	sp,sp,12
   2eea0:	f800283a 	ret
   2eea4:	00800044 	movi	r2,1
   2eea8:	003ff906 	br	2ee90 <__sigtramp_r+0x58>
   2eeac:	01402004 	movi	r5,128
   2eeb0:	002a6800 	call	2a680 <_malloc_r>
   2eeb4:	8880b715 	stw	r2,732(r17)
   2eeb8:	10000a26 	beq	r2,zero,2eee4 <__sigtramp_r+0xac>
   2eebc:	01802004 	movi	r6,128
   2eec0:	000b883a 	mov	r5,zero
   2eec4:	1009883a 	mov	r4,r2
   2eec8:	00252f00 	call	252f0 <memset>
   2eecc:	1007883a 	mov	r3,r2
   2eed0:	003fe306 	br	2ee60 <__sigtramp_r+0x28>
   2eed4:	008000c4 	movi	r2,3
   2eed8:	003fed06 	br	2ee90 <__sigtramp_r+0x58>
   2eedc:	00800084 	movi	r2,2
   2eee0:	003feb06 	br	2ee90 <__sigtramp_r+0x58>
   2eee4:	00bfffc4 	movi	r2,-1
   2eee8:	003fe906 	br	2ee90 <__sigtramp_r+0x58>
   2eeec:	00bfffc4 	movi	r2,-1
   2eef0:	f800283a 	ret

0002eef4 <raise>:
   2eef4:	defffd04 	addi	sp,sp,-12
   2eef8:	dc400115 	stw	r17,4(sp)
   2eefc:	00c000f4 	movhi	r3,3
   2ef00:	dfc00215 	stw	ra,8(sp)
   2ef04:	dc000015 	stw	r16,0(sp)
   2ef08:	20800830 	cmpltui	r2,r4,32
   2ef0c:	1c50d017 	ldw	r17,17216(r3)
   2ef10:	10002326 	beq	r2,zero,2efa0 <raise+0xac>
   2ef14:	8880b717 	ldw	r2,732(r17)
   2ef18:	2021883a 	mov	r16,r4
   2ef1c:	10001026 	beq	r2,zero,2ef60 <raise+0x6c>
   2ef20:	200690ba 	slli	r3,r4,2
   2ef24:	10c5883a 	add	r2,r2,r3
   2ef28:	10c00017 	ldw	r3,0(r2)
   2ef2c:	18000c26 	beq	r3,zero,2ef60 <raise+0x6c>
   2ef30:	19400060 	cmpeqi	r5,r3,1
   2ef34:	2800181e 	bne	r5,zero,2ef98 <raise+0xa4>
   2ef38:	197fffd8 	cmpnei	r5,r3,-1
   2ef3c:	28001226 	beq	r5,zero,2ef88 <raise+0x94>
   2ef40:	10000015 	stw	zero,0(r2)
   2ef44:	183ee83a 	callr	r3
   2ef48:	0005883a 	mov	r2,zero
   2ef4c:	dfc00217 	ldw	ra,8(sp)
   2ef50:	dc400117 	ldw	r17,4(sp)
   2ef54:	dc000017 	ldw	r16,0(sp)
   2ef58:	dec00304 	addi	sp,sp,12
   2ef5c:	f800283a 	ret
   2ef60:	8809883a 	mov	r4,r17
   2ef64:	002f1cc0 	call	2f1cc <_getpid_r>
   2ef68:	800d883a 	mov	r6,r16
   2ef6c:	100b883a 	mov	r5,r2
   2ef70:	8809883a 	mov	r4,r17
   2ef74:	dfc00217 	ldw	ra,8(sp)
   2ef78:	dc400117 	ldw	r17,4(sp)
   2ef7c:	dc000017 	ldw	r16,0(sp)
   2ef80:	dec00304 	addi	sp,sp,12
   2ef84:	002f16c1 	jmpi	2f16c <_kill_r>
   2ef88:	00800584 	movi	r2,22
   2ef8c:	88800015 	stw	r2,0(r17)
   2ef90:	00800044 	movi	r2,1
   2ef94:	003fed06 	br	2ef4c <raise+0x58>
   2ef98:	0005883a 	mov	r2,zero
   2ef9c:	003feb06 	br	2ef4c <raise+0x58>
   2efa0:	00800584 	movi	r2,22
   2efa4:	88800015 	stw	r2,0(r17)
   2efa8:	00bfffc4 	movi	r2,-1
   2efac:	003fe706 	br	2ef4c <raise+0x58>

0002efb0 <signal>:
   2efb0:	defffc04 	addi	sp,sp,-16
   2efb4:	dc800215 	stw	r18,8(sp)
   2efb8:	00c000f4 	movhi	r3,3
   2efbc:	dfc00315 	stw	ra,12(sp)
   2efc0:	dc400115 	stw	r17,4(sp)
   2efc4:	dc000015 	stw	r16,0(sp)
   2efc8:	20800830 	cmpltui	r2,r4,32
   2efcc:	1c90d017 	ldw	r18,17216(r3)
   2efd0:	10000e26 	beq	r2,zero,2f00c <signal+0x5c>
   2efd4:	2021883a 	mov	r16,r4
   2efd8:	9100b717 	ldw	r4,732(r18)
   2efdc:	2823883a 	mov	r17,r5
   2efe0:	20000e26 	beq	r4,zero,2f01c <signal+0x6c>
   2efe4:	802090ba 	slli	r16,r16,2
   2efe8:	2421883a 	add	r16,r4,r16
   2efec:	80800017 	ldw	r2,0(r16)
   2eff0:	84400015 	stw	r17,0(r16)
   2eff4:	dfc00317 	ldw	ra,12(sp)
   2eff8:	dc800217 	ldw	r18,8(sp)
   2effc:	dc400117 	ldw	r17,4(sp)
   2f000:	dc000017 	ldw	r16,0(sp)
   2f004:	dec00404 	addi	sp,sp,16
   2f008:	f800283a 	ret
   2f00c:	00800584 	movi	r2,22
   2f010:	90800015 	stw	r2,0(r18)
   2f014:	00bfffc4 	movi	r2,-1
   2f018:	003ff606 	br	2eff4 <signal+0x44>
   2f01c:	9009883a 	mov	r4,r18
   2f020:	01402004 	movi	r5,128
   2f024:	002a6800 	call	2a680 <_malloc_r>
   2f028:	9080b715 	stw	r2,732(r18)
   2f02c:	1009883a 	mov	r4,r2
   2f030:	10000526 	beq	r2,zero,2f048 <signal+0x98>
   2f034:	01802004 	movi	r6,128
   2f038:	000b883a 	mov	r5,zero
   2f03c:	00252f00 	call	252f0 <memset>
   2f040:	1009883a 	mov	r4,r2
   2f044:	003fe706 	br	2efe4 <signal+0x34>
   2f048:	00bfffc4 	movi	r2,-1
   2f04c:	003fe906 	br	2eff4 <signal+0x44>

0002f050 <_init_signal>:
   2f050:	defffe04 	addi	sp,sp,-8
   2f054:	008000f4 	movhi	r2,3
   2f058:	dc000015 	stw	r16,0(sp)
   2f05c:	1410d017 	ldw	r16,17216(r2)
   2f060:	dfc00115 	stw	ra,4(sp)
   2f064:	8080b717 	ldw	r2,732(r16)
   2f068:	10000526 	beq	r2,zero,2f080 <_init_signal+0x30>
   2f06c:	0005883a 	mov	r2,zero
   2f070:	dfc00117 	ldw	ra,4(sp)
   2f074:	dc000017 	ldw	r16,0(sp)
   2f078:	dec00204 	addi	sp,sp,8
   2f07c:	f800283a 	ret
   2f080:	8009883a 	mov	r4,r16
   2f084:	01402004 	movi	r5,128
   2f088:	002a6800 	call	2a680 <_malloc_r>
   2f08c:	8080b715 	stw	r2,732(r16)
   2f090:	1009883a 	mov	r4,r2
   2f094:	10000426 	beq	r2,zero,2f0a8 <_init_signal+0x58>
   2f098:	01802004 	movi	r6,128
   2f09c:	000b883a 	mov	r5,zero
   2f0a0:	00252f00 	call	252f0 <memset>
   2f0a4:	003ff106 	br	2f06c <_init_signal+0x1c>
   2f0a8:	00bfffc4 	movi	r2,-1
   2f0ac:	003ff006 	br	2f070 <_init_signal+0x20>

0002f0b0 <__sigtramp>:
   2f0b0:	defffd04 	addi	sp,sp,-12
   2f0b4:	dc400115 	stw	r17,4(sp)
   2f0b8:	00c000f4 	movhi	r3,3
   2f0bc:	dfc00215 	stw	ra,8(sp)
   2f0c0:	dc000015 	stw	r16,0(sp)
   2f0c4:	20800830 	cmpltui	r2,r4,32
   2f0c8:	1c50d017 	ldw	r17,17216(r3)
   2f0cc:	10002526 	beq	r2,zero,2f164 <__sigtramp+0xb4>
   2f0d0:	88c0b717 	ldw	r3,732(r17)
   2f0d4:	2021883a 	mov	r16,r4
   2f0d8:	18001326 	beq	r3,zero,2f128 <__sigtramp+0x78>
   2f0dc:	800890ba 	slli	r4,r16,2
   2f0e0:	1907883a 	add	r3,r3,r4
   2f0e4:	18800017 	ldw	r2,0(r3)
   2f0e8:	10000d26 	beq	r2,zero,2f120 <__sigtramp+0x70>
   2f0ec:	113fffe0 	cmpeqi	r4,r2,-1
   2f0f0:	20001a1e 	bne	r4,zero,2f15c <__sigtramp+0xac>
   2f0f4:	11000060 	cmpeqi	r4,r2,1
   2f0f8:	2000161e 	bne	r4,zero,2f154 <__sigtramp+0xa4>
   2f0fc:	18000015 	stw	zero,0(r3)
   2f100:	8009883a 	mov	r4,r16
   2f104:	103ee83a 	callr	r2
   2f108:	0005883a 	mov	r2,zero
   2f10c:	dfc00217 	ldw	ra,8(sp)
   2f110:	dc400117 	ldw	r17,4(sp)
   2f114:	dc000017 	ldw	r16,0(sp)
   2f118:	dec00304 	addi	sp,sp,12
   2f11c:	f800283a 	ret
   2f120:	00800044 	movi	r2,1
   2f124:	003ff906 	br	2f10c <__sigtramp+0x5c>
   2f128:	01402004 	movi	r5,128
   2f12c:	8809883a 	mov	r4,r17
   2f130:	002a6800 	call	2a680 <_malloc_r>
   2f134:	8880b715 	stw	r2,732(r17)
   2f138:	10000a26 	beq	r2,zero,2f164 <__sigtramp+0xb4>
   2f13c:	01802004 	movi	r6,128
   2f140:	000b883a 	mov	r5,zero
   2f144:	1009883a 	mov	r4,r2
   2f148:	00252f00 	call	252f0 <memset>
   2f14c:	1007883a 	mov	r3,r2
   2f150:	003fe206 	br	2f0dc <__sigtramp+0x2c>
   2f154:	008000c4 	movi	r2,3
   2f158:	003fec06 	br	2f10c <__sigtramp+0x5c>
   2f15c:	00800084 	movi	r2,2
   2f160:	003fea06 	br	2f10c <__sigtramp+0x5c>
   2f164:	00bfffc4 	movi	r2,-1
   2f168:	003fe806 	br	2f10c <__sigtramp+0x5c>

0002f16c <_kill_r>:
   2f16c:	2807883a 	mov	r3,r5
   2f170:	defffe04 	addi	sp,sp,-8
   2f174:	dc000015 	stw	r16,0(sp)
   2f178:	008000f4 	movhi	r2,3
   2f17c:	300b883a 	mov	r5,r6
   2f180:	2021883a 	mov	r16,r4
   2f184:	1809883a 	mov	r4,r3
   2f188:	dfc00115 	stw	ra,4(sp)
   2f18c:	10141715 	stw	zero,20572(r2)
   2f190:	00305080 	call	30508 <kill>
   2f194:	10ffffd8 	cmpnei	r3,r2,-1
   2f198:	18000426 	beq	r3,zero,2f1ac <_kill_r+0x40>
   2f19c:	dfc00117 	ldw	ra,4(sp)
   2f1a0:	dc000017 	ldw	r16,0(sp)
   2f1a4:	dec00204 	addi	sp,sp,8
   2f1a8:	f800283a 	ret
   2f1ac:	00c000f4 	movhi	r3,3
   2f1b0:	18d41717 	ldw	r3,20572(r3)
   2f1b4:	183ff926 	beq	r3,zero,2f19c <_kill_r+0x30>
   2f1b8:	80c00015 	stw	r3,0(r16)
   2f1bc:	dfc00117 	ldw	ra,4(sp)
   2f1c0:	dc000017 	ldw	r16,0(sp)
   2f1c4:	dec00204 	addi	sp,sp,8
   2f1c8:	f800283a 	ret

0002f1cc <_getpid_r>:
   2f1cc:	00301281 	jmpi	30128 <getpid>

0002f1d0 <__udivdi3>:
   2f1d0:	defff504 	addi	sp,sp,-44
   2f1d4:	dd000515 	stw	r20,20(sp)
   2f1d8:	dc800315 	stw	r18,12(sp)
   2f1dc:	dfc00a15 	stw	ra,40(sp)
   2f1e0:	df000915 	stw	fp,36(sp)
   2f1e4:	ddc00815 	stw	r23,32(sp)
   2f1e8:	dd800715 	stw	r22,28(sp)
   2f1ec:	dd400615 	stw	r21,24(sp)
   2f1f0:	dcc00415 	stw	r19,16(sp)
   2f1f4:	dc400215 	stw	r17,8(sp)
   2f1f8:	dc000115 	stw	r16,4(sp)
   2f1fc:	2029883a 	mov	r20,r4
   2f200:	2825883a 	mov	r18,r5
   2f204:	3800461e 	bne	r7,zero,2f320 <__udivdi3+0x150>
   2f208:	3823883a 	mov	r17,r7
   2f20c:	3021883a 	mov	r16,r6
   2f210:	2027883a 	mov	r19,r4
   2f214:	2980622e 	bgeu	r5,r6,2f3a0 <__udivdi3+0x1d0>
   2f218:	00bfffd4 	movui	r2,65535
   2f21c:	282b883a 	mov	r21,r5
   2f220:	1180aa2e 	bgeu	r2,r6,2f4cc <__udivdi3+0x2fc>
   2f224:	00804034 	movhi	r2,256
   2f228:	30815a36 	bltu	r6,r2,2f794 <__udivdi3+0x5c4>
   2f22c:	3006d63a 	srli	r3,r6,24
   2f230:	04400604 	movi	r17,24
   2f234:	008000f4 	movhi	r2,3
   2f238:	1885883a 	add	r2,r3,r2
   2f23c:	108c2803 	ldbu	r2,12448(r2)
   2f240:	00c00804 	movi	r3,32
   2f244:	1463883a 	add	r17,r2,r17
   2f248:	1c45c83a 	sub	r2,r3,r17
   2f24c:	1c400526 	beq	r3,r17,2f264 <__udivdi3+0x94>
   2f250:	9086983a 	sll	r3,r18,r2
   2f254:	a462d83a 	srl	r17,r20,r17
   2f258:	30a0983a 	sll	r16,r6,r2
   2f25c:	a0a6983a 	sll	r19,r20,r2
   2f260:	88eab03a 	or	r21,r17,r3
   2f264:	802cd43a 	srli	r22,r16,16
   2f268:	a809883a 	mov	r4,r21
   2f26c:	853fffcc 	andi	r20,r16,65535
   2f270:	b00b883a 	mov	r5,r22
   2f274:	0022c200 	call	22c20 <__umodsi3>
   2f278:	a809883a 	mov	r4,r21
   2f27c:	b00b883a 	mov	r5,r22
   2f280:	1025883a 	mov	r18,r2
   2f284:	0022bbc0 	call	22bbc <__udivsi3>
   2f288:	a009883a 	mov	r4,r20
   2f28c:	100b883a 	mov	r5,r2
   2f290:	102b883a 	mov	r21,r2
   2f294:	0022c7c0 	call	22c7c <__mulsi3>
   2f298:	9024943a 	slli	r18,r18,16
   2f29c:	9808d43a 	srli	r4,r19,16
   2f2a0:	9108b03a 	or	r4,r18,r4
   2f2a4:	2080052e 	bgeu	r4,r2,2f2bc <__udivdi3+0xec>
   2f2a8:	2409883a 	add	r4,r4,r16
   2f2ac:	a8ffffc4 	addi	r3,r21,-1
   2f2b0:	24000136 	bltu	r4,r16,2f2b8 <__udivdi3+0xe8>
   2f2b4:	20814836 	bltu	r4,r2,2f7d8 <__udivdi3+0x608>
   2f2b8:	182b883a 	mov	r21,r3
   2f2bc:	20a3c83a 	sub	r17,r4,r2
   2f2c0:	8809883a 	mov	r4,r17
   2f2c4:	b00b883a 	mov	r5,r22
   2f2c8:	0022c200 	call	22c20 <__umodsi3>
   2f2cc:	8809883a 	mov	r4,r17
   2f2d0:	1023883a 	mov	r17,r2
   2f2d4:	b00b883a 	mov	r5,r22
   2f2d8:	8822943a 	slli	r17,r17,16
   2f2dc:	0022bbc0 	call	22bbc <__udivsi3>
   2f2e0:	100b883a 	mov	r5,r2
   2f2e4:	a009883a 	mov	r4,r20
   2f2e8:	9cffffcc 	andi	r19,r19,65535
   2f2ec:	1025883a 	mov	r18,r2
   2f2f0:	8ce6b03a 	or	r19,r17,r19
   2f2f4:	0022c7c0 	call	22c7c <__mulsi3>
   2f2f8:	9880052e 	bgeu	r19,r2,2f310 <__udivdi3+0x140>
   2f2fc:	84e7883a 	add	r19,r16,r19
   2f300:	90ffffc4 	addi	r3,r18,-1
   2f304:	9c000136 	bltu	r19,r16,2f30c <__udivdi3+0x13c>
   2f308:	98813136 	bltu	r19,r2,2f7d0 <__udivdi3+0x600>
   2f30c:	1825883a 	mov	r18,r3
   2f310:	a80c943a 	slli	r6,r21,16
   2f314:	0007883a 	mov	r3,zero
   2f318:	3484b03a 	or	r2,r6,r18
   2f31c:	00000306 	br	2f32c <__udivdi3+0x15c>
   2f320:	29c00e2e 	bgeu	r5,r7,2f35c <__udivdi3+0x18c>
   2f324:	0007883a 	mov	r3,zero
   2f328:	0005883a 	mov	r2,zero
   2f32c:	dfc00a17 	ldw	ra,40(sp)
   2f330:	df000917 	ldw	fp,36(sp)
   2f334:	ddc00817 	ldw	r23,32(sp)
   2f338:	dd800717 	ldw	r22,28(sp)
   2f33c:	dd400617 	ldw	r21,24(sp)
   2f340:	dd000517 	ldw	r20,20(sp)
   2f344:	dcc00417 	ldw	r19,16(sp)
   2f348:	dc800317 	ldw	r18,12(sp)
   2f34c:	dc400217 	ldw	r17,8(sp)
   2f350:	dc000117 	ldw	r16,4(sp)
   2f354:	dec00b04 	addi	sp,sp,44
   2f358:	f800283a 	ret
   2f35c:	00bfffd4 	movui	r2,65535
   2f360:	11c05f2e 	bgeu	r2,r7,2f4e0 <__udivdi3+0x310>
   2f364:	00804034 	movhi	r2,256
   2f368:	3880fc36 	bltu	r7,r2,2f75c <__udivdi3+0x58c>
   2f36c:	3804d63a 	srli	r2,r7,24
   2f370:	01000604 	movi	r4,24
   2f374:	00c000f4 	movhi	r3,3
   2f378:	10c7883a 	add	r3,r2,r3
   2f37c:	188c2803 	ldbu	r2,12448(r3)
   2f380:	00c00804 	movi	r3,32
   2f384:	1105883a 	add	r2,r2,r4
   2f388:	18a3c83a 	sub	r17,r3,r2
   2f38c:	1880901e 	bne	r3,r2,2f5d0 <__udivdi3+0x400>
   2f390:	3c80f736 	bltu	r7,r18,2f770 <__udivdi3+0x5a0>
   2f394:	a185403a 	cmpgeu	r2,r20,r6
   2f398:	0007883a 	mov	r3,zero
   2f39c:	003fe306 	br	2f32c <__udivdi3+0x15c>
   2f3a0:	3000041e 	bne	r6,zero,2f3b4 <__udivdi3+0x1e4>
   2f3a4:	000b883a 	mov	r5,zero
   2f3a8:	01000044 	movi	r4,1
   2f3ac:	0022bbc0 	call	22bbc <__udivsi3>
   2f3b0:	1021883a 	mov	r16,r2
   2f3b4:	00bfffd4 	movui	r2,65535
   2f3b8:	14003f2e 	bgeu	r2,r16,2f4b8 <__udivdi3+0x2e8>
   2f3bc:	00804034 	movhi	r2,256
   2f3c0:	8080f136 	bltu	r16,r2,2f788 <__udivdi3+0x5b8>
   2f3c4:	8006d63a 	srli	r3,r16,24
   2f3c8:	04400604 	movi	r17,24
   2f3cc:	008000f4 	movhi	r2,3
   2f3d0:	1885883a 	add	r2,r3,r2
   2f3d4:	108c2803 	ldbu	r2,12448(r2)
   2f3d8:	00c00804 	movi	r3,32
   2f3dc:	1463883a 	add	r17,r2,r17
   2f3e0:	1c45c83a 	sub	r2,r3,r17
   2f3e4:	1c40431e 	bne	r3,r17,2f4f4 <__udivdi3+0x324>
   2f3e8:	802cd43a 	srli	r22,r16,16
   2f3ec:	9423c83a 	sub	r17,r18,r16
   2f3f0:	853fffcc 	andi	r20,r16,65535
   2f3f4:	00c00044 	movi	r3,1
   2f3f8:	b00b883a 	mov	r5,r22
   2f3fc:	8809883a 	mov	r4,r17
   2f400:	d8c00015 	stw	r3,0(sp)
   2f404:	0022c200 	call	22c20 <__umodsi3>
   2f408:	b00b883a 	mov	r5,r22
   2f40c:	8809883a 	mov	r4,r17
   2f410:	1025883a 	mov	r18,r2
   2f414:	0022bbc0 	call	22bbc <__udivsi3>
   2f418:	1009883a 	mov	r4,r2
   2f41c:	a00b883a 	mov	r5,r20
   2f420:	102b883a 	mov	r21,r2
   2f424:	0022c7c0 	call	22c7c <__mulsi3>
   2f428:	9024943a 	slli	r18,r18,16
   2f42c:	9808d43a 	srli	r4,r19,16
   2f430:	d8c00017 	ldw	r3,0(sp)
   2f434:	9108b03a 	or	r4,r18,r4
   2f438:	2080052e 	bgeu	r4,r2,2f450 <__udivdi3+0x280>
   2f43c:	2409883a 	add	r4,r4,r16
   2f440:	a97fffc4 	addi	r5,r21,-1
   2f444:	24000136 	bltu	r4,r16,2f44c <__udivdi3+0x27c>
   2f448:	2080e636 	bltu	r4,r2,2f7e4 <__udivdi3+0x614>
   2f44c:	282b883a 	mov	r21,r5
   2f450:	20a3c83a 	sub	r17,r4,r2
   2f454:	8809883a 	mov	r4,r17
   2f458:	b00b883a 	mov	r5,r22
   2f45c:	d8c00015 	stw	r3,0(sp)
   2f460:	0022c200 	call	22c20 <__umodsi3>
   2f464:	8809883a 	mov	r4,r17
   2f468:	1023883a 	mov	r17,r2
   2f46c:	b00b883a 	mov	r5,r22
   2f470:	8822943a 	slli	r17,r17,16
   2f474:	0022bbc0 	call	22bbc <__udivsi3>
   2f478:	a00b883a 	mov	r5,r20
   2f47c:	1009883a 	mov	r4,r2
   2f480:	9cffffcc 	andi	r19,r19,65535
   2f484:	1025883a 	mov	r18,r2
   2f488:	8ce6b03a 	or	r19,r17,r19
   2f48c:	0022c7c0 	call	22c7c <__mulsi3>
   2f490:	d8c00017 	ldw	r3,0(sp)
   2f494:	9880052e 	bgeu	r19,r2,2f4ac <__udivdi3+0x2dc>
   2f498:	84e7883a 	add	r19,r16,r19
   2f49c:	913fffc4 	addi	r4,r18,-1
   2f4a0:	9c000136 	bltu	r19,r16,2f4a8 <__udivdi3+0x2d8>
   2f4a4:	9880c836 	bltu	r19,r2,2f7c8 <__udivdi3+0x5f8>
   2f4a8:	2025883a 	mov	r18,r4
   2f4ac:	a80c943a 	slli	r6,r21,16
   2f4b0:	3484b03a 	or	r2,r6,r18
   2f4b4:	003f9d06 	br	2f32c <__udivdi3+0x15c>
   2f4b8:	80804030 	cmpltui	r2,r16,256
   2f4bc:	1000b81e 	bne	r2,zero,2f7a0 <__udivdi3+0x5d0>
   2f4c0:	8006d23a 	srli	r3,r16,8
   2f4c4:	04400204 	movi	r17,8
   2f4c8:	003fc006 	br	2f3cc <__udivdi3+0x1fc>
   2f4cc:	30804030 	cmpltui	r2,r6,256
   2f4d0:	1000a51e 	bne	r2,zero,2f768 <__udivdi3+0x598>
   2f4d4:	3006d23a 	srli	r3,r6,8
   2f4d8:	04400204 	movi	r17,8
   2f4dc:	003f5506 	br	2f234 <__udivdi3+0x64>
   2f4e0:	38804030 	cmpltui	r2,r7,256
   2f4e4:	1000a51e 	bne	r2,zero,2f77c <__udivdi3+0x5ac>
   2f4e8:	3804d23a 	srli	r2,r7,8
   2f4ec:	01000204 	movi	r4,8
   2f4f0:	003fa006 	br	2f374 <__udivdi3+0x1a4>
   2f4f4:	80a0983a 	sll	r16,r16,r2
   2f4f8:	946ed83a 	srl	r23,r18,r17
   2f4fc:	9086983a 	sll	r3,r18,r2
   2f500:	802cd43a 	srli	r22,r16,16
   2f504:	a462d83a 	srl	r17,r20,r17
   2f508:	b809883a 	mov	r4,r23
   2f50c:	b00b883a 	mov	r5,r22
   2f510:	88eab03a 	or	r21,r17,r3
   2f514:	a0a6983a 	sll	r19,r20,r2
   2f518:	0022c200 	call	22c20 <__umodsi3>
   2f51c:	b809883a 	mov	r4,r23
   2f520:	b00b883a 	mov	r5,r22
   2f524:	1025883a 	mov	r18,r2
   2f528:	853fffcc 	andi	r20,r16,65535
   2f52c:	0022bbc0 	call	22bbc <__udivsi3>
   2f530:	a009883a 	mov	r4,r20
   2f534:	100b883a 	mov	r5,r2
   2f538:	102f883a 	mov	r23,r2
   2f53c:	0022c7c0 	call	22c7c <__mulsi3>
   2f540:	9024943a 	slli	r18,r18,16
   2f544:	a808d43a 	srli	r4,r21,16
   2f548:	9108b03a 	or	r4,r18,r4
   2f54c:	2080062e 	bgeu	r4,r2,2f568 <__udivdi3+0x398>
   2f550:	2409883a 	add	r4,r4,r16
   2f554:	b8ffffc4 	addi	r3,r23,-1
   2f558:	24009936 	bltu	r4,r16,2f7c0 <__udivdi3+0x5f0>
   2f55c:	2080982e 	bgeu	r4,r2,2f7c0 <__udivdi3+0x5f0>
   2f560:	bdffff84 	addi	r23,r23,-2
   2f564:	2409883a 	add	r4,r4,r16
   2f568:	20a3c83a 	sub	r17,r4,r2
   2f56c:	8809883a 	mov	r4,r17
   2f570:	b00b883a 	mov	r5,r22
   2f574:	0022c200 	call	22c20 <__umodsi3>
   2f578:	1025883a 	mov	r18,r2
   2f57c:	8809883a 	mov	r4,r17
   2f580:	b00b883a 	mov	r5,r22
   2f584:	9024943a 	slli	r18,r18,16
   2f588:	0022bbc0 	call	22bbc <__udivsi3>
   2f58c:	100b883a 	mov	r5,r2
   2f590:	a009883a 	mov	r4,r20
   2f594:	ac7fffcc 	andi	r17,r21,65535
   2f598:	1039883a 	mov	fp,r2
   2f59c:	9462b03a 	or	r17,r18,r17
   2f5a0:	0022c7c0 	call	22c7c <__mulsi3>
   2f5a4:	8880062e 	bgeu	r17,r2,2f5c0 <__udivdi3+0x3f0>
   2f5a8:	8c23883a 	add	r17,r17,r16
   2f5ac:	e0ffffc4 	addi	r3,fp,-1
   2f5b0:	8c007f36 	bltu	r17,r16,2f7b0 <__udivdi3+0x5e0>
   2f5b4:	88807e2e 	bgeu	r17,r2,2f7b0 <__udivdi3+0x5e0>
   2f5b8:	e73fff84 	addi	fp,fp,-2
   2f5bc:	8c23883a 	add	r17,r17,r16
   2f5c0:	b806943a 	slli	r3,r23,16
   2f5c4:	88a3c83a 	sub	r17,r17,r2
   2f5c8:	1f06b03a 	or	r3,r3,fp
   2f5cc:	003f8a06 	br	2f3f8 <__udivdi3+0x228>
   2f5d0:	30a6d83a 	srl	r19,r6,r2
   2f5d4:	3c4e983a 	sll	r7,r7,r17
   2f5d8:	90a0d83a 	srl	r16,r18,r2
   2f5dc:	9446983a 	sll	r3,r18,r17
   2f5e0:	99e6b03a 	or	r19,r19,r7
   2f5e4:	a084d83a 	srl	r2,r20,r2
   2f5e8:	9838d43a 	srli	fp,r19,16
   2f5ec:	8009883a 	mov	r4,r16
   2f5f0:	10eab03a 	or	r21,r2,r3
   2f5f4:	e00b883a 	mov	r5,fp
   2f5f8:	346c983a 	sll	r22,r6,r17
   2f5fc:	dd400015 	stw	r21,0(sp)
   2f600:	0022c200 	call	22c20 <__umodsi3>
   2f604:	8009883a 	mov	r4,r16
   2f608:	e00b883a 	mov	r5,fp
   2f60c:	102f883a 	mov	r23,r2
   2f610:	9cbfffcc 	andi	r18,r19,65535
   2f614:	0022bbc0 	call	22bbc <__udivsi3>
   2f618:	9009883a 	mov	r4,r18
   2f61c:	100b883a 	mov	r5,r2
   2f620:	1021883a 	mov	r16,r2
   2f624:	0022c7c0 	call	22c7c <__mulsi3>
   2f628:	b82e943a 	slli	r23,r23,16
   2f62c:	a808d43a 	srli	r4,r21,16
   2f630:	b908b03a 	or	r4,r23,r4
   2f634:	2080062e 	bgeu	r4,r2,2f650 <__udivdi3+0x480>
   2f638:	24c9883a 	add	r4,r4,r19
   2f63c:	817fffc4 	addi	r5,r16,-1
   2f640:	24c05d36 	bltu	r4,r19,2f7b8 <__udivdi3+0x5e8>
   2f644:	20805c2e 	bgeu	r4,r2,2f7b8 <__udivdi3+0x5e8>
   2f648:	843fff84 	addi	r16,r16,-2
   2f64c:	24c9883a 	add	r4,r4,r19
   2f650:	20abc83a 	sub	r21,r4,r2
   2f654:	a809883a 	mov	r4,r21
   2f658:	e00b883a 	mov	r5,fp
   2f65c:	0022c200 	call	22c20 <__umodsi3>
   2f660:	a809883a 	mov	r4,r21
   2f664:	e00b883a 	mov	r5,fp
   2f668:	102b883a 	mov	r21,r2
   2f66c:	0022bbc0 	call	22bbc <__udivsi3>
   2f670:	9009883a 	mov	r4,r18
   2f674:	100b883a 	mov	r5,r2
   2f678:	102f883a 	mov	r23,r2
   2f67c:	0022c7c0 	call	22c7c <__mulsi3>
   2f680:	d8c00017 	ldw	r3,0(sp)
   2f684:	a82a943a 	slli	r21,r21,16
   2f688:	100d883a 	mov	r6,r2
   2f68c:	1cbfffcc 	andi	r18,r3,65535
   2f690:	aca4b03a 	or	r18,r21,r18
   2f694:	9080062e 	bgeu	r18,r2,2f6b0 <__udivdi3+0x4e0>
   2f698:	94e5883a 	add	r18,r18,r19
   2f69c:	b8bfffc4 	addi	r2,r23,-1
   2f6a0:	94c04136 	bltu	r18,r19,2f7a8 <__udivdi3+0x5d8>
   2f6a4:	9180402e 	bgeu	r18,r6,2f7a8 <__udivdi3+0x5d8>
   2f6a8:	bdffff84 	addi	r23,r23,-2
   2f6ac:	94e5883a 	add	r18,r18,r19
   2f6b0:	8004943a 	slli	r2,r16,16
   2f6b4:	bd7fffcc 	andi	r21,r23,65535
   2f6b8:	b73fffcc 	andi	fp,r22,65535
   2f6bc:	15e0b03a 	or	r16,r2,r23
   2f6c0:	8026d43a 	srli	r19,r16,16
   2f6c4:	a809883a 	mov	r4,r21
   2f6c8:	e00b883a 	mov	r5,fp
   2f6cc:	91a5c83a 	sub	r18,r18,r6
   2f6d0:	b02cd43a 	srli	r22,r22,16
   2f6d4:	0022c7c0 	call	22c7c <__mulsi3>
   2f6d8:	9809883a 	mov	r4,r19
   2f6dc:	e00b883a 	mov	r5,fp
   2f6e0:	102f883a 	mov	r23,r2
   2f6e4:	0022c7c0 	call	22c7c <__mulsi3>
   2f6e8:	9809883a 	mov	r4,r19
   2f6ec:	b00b883a 	mov	r5,r22
   2f6f0:	1027883a 	mov	r19,r2
   2f6f4:	0022c7c0 	call	22c7c <__mulsi3>
   2f6f8:	a809883a 	mov	r4,r21
   2f6fc:	b00b883a 	mov	r5,r22
   2f700:	102b883a 	mov	r21,r2
   2f704:	0022c7c0 	call	22c7c <__mulsi3>
   2f708:	b806d43a 	srli	r3,r23,16
   2f70c:	14c5883a 	add	r2,r2,r19
   2f710:	1887883a 	add	r3,r3,r2
   2f714:	1cc0022e 	bgeu	r3,r19,2f720 <__udivdi3+0x550>
   2f718:	00800074 	movhi	r2,1
   2f71c:	a8ab883a 	add	r21,r21,r2
   2f720:	1804d43a 	srli	r2,r3,16
   2f724:	156b883a 	add	r21,r2,r21
   2f728:	95400936 	bltu	r18,r21,2f750 <__udivdi3+0x580>
   2f72c:	95400326 	beq	r18,r21,2f73c <__udivdi3+0x56c>
   2f730:	8005883a 	mov	r2,r16
   2f734:	0007883a 	mov	r3,zero
   2f738:	003efc06 	br	2f32c <__udivdi3+0x15c>
   2f73c:	1806943a 	slli	r3,r3,16
   2f740:	a44c983a 	sll	r6,r20,r17
   2f744:	bdffffcc 	andi	r23,r23,65535
   2f748:	1dc7883a 	add	r3,r3,r23
   2f74c:	30fff82e 	bgeu	r6,r3,2f730 <__udivdi3+0x560>
   2f750:	80bfffc4 	addi	r2,r16,-1
   2f754:	0007883a 	mov	r3,zero
   2f758:	003ef406 	br	2f32c <__udivdi3+0x15c>
   2f75c:	3804d43a 	srli	r2,r7,16
   2f760:	01000404 	movi	r4,16
   2f764:	003f0306 	br	2f374 <__udivdi3+0x1a4>
   2f768:	3007883a 	mov	r3,r6
   2f76c:	003eb106 	br	2f234 <__udivdi3+0x64>
   2f770:	0007883a 	mov	r3,zero
   2f774:	00800044 	movi	r2,1
   2f778:	003eec06 	br	2f32c <__udivdi3+0x15c>
   2f77c:	3805883a 	mov	r2,r7
   2f780:	0009883a 	mov	r4,zero
   2f784:	003efb06 	br	2f374 <__udivdi3+0x1a4>
   2f788:	8006d43a 	srli	r3,r16,16
   2f78c:	04400404 	movi	r17,16
   2f790:	003f0e06 	br	2f3cc <__udivdi3+0x1fc>
   2f794:	3006d43a 	srli	r3,r6,16
   2f798:	04400404 	movi	r17,16
   2f79c:	003ea506 	br	2f234 <__udivdi3+0x64>
   2f7a0:	8007883a 	mov	r3,r16
   2f7a4:	003f0906 	br	2f3cc <__udivdi3+0x1fc>
   2f7a8:	102f883a 	mov	r23,r2
   2f7ac:	003fc006 	br	2f6b0 <__udivdi3+0x4e0>
   2f7b0:	1839883a 	mov	fp,r3
   2f7b4:	003f8206 	br	2f5c0 <__udivdi3+0x3f0>
   2f7b8:	2821883a 	mov	r16,r5
   2f7bc:	003fa406 	br	2f650 <__udivdi3+0x480>
   2f7c0:	182f883a 	mov	r23,r3
   2f7c4:	003f6806 	br	2f568 <__udivdi3+0x398>
   2f7c8:	94bfff84 	addi	r18,r18,-2
   2f7cc:	003f3706 	br	2f4ac <__udivdi3+0x2dc>
   2f7d0:	94bfff84 	addi	r18,r18,-2
   2f7d4:	003ece06 	br	2f310 <__udivdi3+0x140>
   2f7d8:	ad7fff84 	addi	r21,r21,-2
   2f7dc:	2409883a 	add	r4,r4,r16
   2f7e0:	003eb606 	br	2f2bc <__udivdi3+0xec>
   2f7e4:	ad7fff84 	addi	r21,r21,-2
   2f7e8:	2409883a 	add	r4,r4,r16
   2f7ec:	003f1806 	br	2f450 <__udivdi3+0x280>

0002f7f0 <__umoddi3>:
   2f7f0:	defff304 	addi	sp,sp,-52
   2f7f4:	dc400415 	stw	r17,16(sp)
   2f7f8:	dc000315 	stw	r16,12(sp)
   2f7fc:	dfc00c15 	stw	ra,48(sp)
   2f800:	df000b15 	stw	fp,44(sp)
   2f804:	ddc00a15 	stw	r23,40(sp)
   2f808:	dd800915 	stw	r22,36(sp)
   2f80c:	dd400815 	stw	r21,32(sp)
   2f810:	dd000715 	stw	r20,28(sp)
   2f814:	dcc00615 	stw	r19,24(sp)
   2f818:	dc800515 	stw	r18,20(sp)
   2f81c:	2823883a 	mov	r17,r5
   2f820:	2021883a 	mov	r16,r4
   2f824:	38003b1e 	bne	r7,zero,2f914 <__umoddi3+0x124>
   2f828:	3825883a 	mov	r18,r7
   2f82c:	3029883a 	mov	r20,r6
   2f830:	2027883a 	mov	r19,r4
   2f834:	29805b2e 	bgeu	r5,r6,2f9a4 <__umoddi3+0x1b4>
   2f838:	00bfffd4 	movui	r2,65535
   2f83c:	282d883a 	mov	r22,r5
   2f840:	11809a2e 	bgeu	r2,r6,2faac <__umoddi3+0x2bc>
   2f844:	00804034 	movhi	r2,256
   2f848:	30814436 	bltu	r6,r2,2fd5c <__umoddi3+0x56c>
   2f84c:	3006d63a 	srli	r3,r6,24
   2f850:	04800604 	movi	r18,24
   2f854:	008000f4 	movhi	r2,3
   2f858:	1885883a 	add	r2,r3,r2
   2f85c:	108c2803 	ldbu	r2,12448(r2)
   2f860:	00c00804 	movi	r3,32
   2f864:	1485883a 	add	r2,r2,r18
   2f868:	18a5c83a 	sub	r18,r3,r2
   2f86c:	18800526 	beq	r3,r2,2f884 <__umoddi3+0x94>
   2f870:	8ca2983a 	sll	r17,r17,r18
   2f874:	8084d83a 	srl	r2,r16,r2
   2f878:	34a8983a 	sll	r20,r6,r18
   2f87c:	84a6983a 	sll	r19,r16,r18
   2f880:	146cb03a 	or	r22,r2,r17
   2f884:	a02ed43a 	srli	r23,r20,16
   2f888:	b009883a 	mov	r4,r22
   2f88c:	a57fffcc 	andi	r21,r20,65535
   2f890:	b80b883a 	mov	r5,r23
   2f894:	0022c200 	call	22c20 <__umodsi3>
   2f898:	b80b883a 	mov	r5,r23
   2f89c:	b009883a 	mov	r4,r22
   2f8a0:	1023883a 	mov	r17,r2
   2f8a4:	0022bbc0 	call	22bbc <__udivsi3>
   2f8a8:	a809883a 	mov	r4,r21
   2f8ac:	100b883a 	mov	r5,r2
   2f8b0:	0022c7c0 	call	22c7c <__mulsi3>
   2f8b4:	8822943a 	slli	r17,r17,16
   2f8b8:	9808d43a 	srli	r4,r19,16
   2f8bc:	8908b03a 	or	r4,r17,r4
   2f8c0:	2080042e 	bgeu	r4,r2,2f8d4 <__umoddi3+0xe4>
   2f8c4:	2509883a 	add	r4,r4,r20
   2f8c8:	25000236 	bltu	r4,r20,2f8d4 <__umoddi3+0xe4>
   2f8cc:	2080012e 	bgeu	r4,r2,2f8d4 <__umoddi3+0xe4>
   2f8d0:	2509883a 	add	r4,r4,r20
   2f8d4:	20a1c83a 	sub	r16,r4,r2
   2f8d8:	b80b883a 	mov	r5,r23
   2f8dc:	8009883a 	mov	r4,r16
   2f8e0:	0022c200 	call	22c20 <__umodsi3>
   2f8e4:	b80b883a 	mov	r5,r23
   2f8e8:	8009883a 	mov	r4,r16
   2f8ec:	1023883a 	mov	r17,r2
   2f8f0:	0022bbc0 	call	22bbc <__udivsi3>
   2f8f4:	8822943a 	slli	r17,r17,16
   2f8f8:	100b883a 	mov	r5,r2
   2f8fc:	a809883a 	mov	r4,r21
   2f900:	0022c7c0 	call	22c7c <__mulsi3>
   2f904:	98ffffcc 	andi	r3,r19,65535
   2f908:	88c6b03a 	or	r3,r17,r3
   2f90c:	18805e2e 	bgeu	r3,r2,2fa88 <__umoddi3+0x298>
   2f910:	00005906 	br	2fa78 <__umoddi3+0x288>
   2f914:	2005883a 	mov	r2,r4
   2f918:	29c00d2e 	bgeu	r5,r7,2f950 <__umoddi3+0x160>
   2f91c:	2807883a 	mov	r3,r5
   2f920:	dfc00c17 	ldw	ra,48(sp)
   2f924:	df000b17 	ldw	fp,44(sp)
   2f928:	ddc00a17 	ldw	r23,40(sp)
   2f92c:	dd800917 	ldw	r22,36(sp)
   2f930:	dd400817 	ldw	r21,32(sp)
   2f934:	dd000717 	ldw	r20,28(sp)
   2f938:	dcc00617 	ldw	r19,24(sp)
   2f93c:	dc800517 	ldw	r18,20(sp)
   2f940:	dc400417 	ldw	r17,16(sp)
   2f944:	dc000317 	ldw	r16,12(sp)
   2f948:	dec00d04 	addi	sp,sp,52
   2f94c:	f800283a 	ret
   2f950:	013fffd4 	movui	r4,65535
   2f954:	2807883a 	mov	r3,r5
   2f958:	21c0592e 	bgeu	r4,r7,2fac0 <__umoddi3+0x2d0>
   2f95c:	01004034 	movhi	r4,256
   2f960:	39010336 	bltu	r7,r4,2fd70 <__umoddi3+0x580>
   2f964:	3808d63a 	srli	r4,r7,24
   2f968:	02000604 	movi	r8,24
   2f96c:	014000f4 	movhi	r5,3
   2f970:	214b883a 	add	r5,r4,r5
   2f974:	2d0c2803 	ldbu	r20,12448(r5)
   2f978:	01000804 	movi	r4,32
   2f97c:	a229883a 	add	r20,r20,r8
   2f980:	252bc83a 	sub	r21,r4,r20
   2f984:	2500531e 	bne	r4,r20,2fad4 <__umoddi3+0x2e4>
   2f988:	3c400136 	bltu	r7,r17,2f990 <__umoddi3+0x1a0>
   2f98c:	81bfe436 	bltu	r16,r6,2f920 <__umoddi3+0x130>
   2f990:	8185c83a 	sub	r2,r16,r6
   2f994:	89cfc83a 	sub	r7,r17,r7
   2f998:	8087803a 	cmpltu	r3,r16,r2
   2f99c:	38c7c83a 	sub	r3,r7,r3
   2f9a0:	003fdf06 	br	2f920 <__umoddi3+0x130>
   2f9a4:	3000041e 	bne	r6,zero,2f9b8 <__umoddi3+0x1c8>
   2f9a8:	000b883a 	mov	r5,zero
   2f9ac:	01000044 	movi	r4,1
   2f9b0:	0022bbc0 	call	22bbc <__udivsi3>
   2f9b4:	1029883a 	mov	r20,r2
   2f9b8:	00bfffd4 	movui	r2,65535
   2f9bc:	1500362e 	bgeu	r2,r20,2fa98 <__umoddi3+0x2a8>
   2f9c0:	00804034 	movhi	r2,256
   2f9c4:	a080ed36 	bltu	r20,r2,2fd7c <__umoddi3+0x58c>
   2f9c8:	a006d63a 	srli	r3,r20,24
   2f9cc:	04800604 	movi	r18,24
   2f9d0:	008000f4 	movhi	r2,3
   2f9d4:	1885883a 	add	r2,r3,r2
   2f9d8:	158c2803 	ldbu	r22,12448(r2)
   2f9dc:	00800804 	movi	r2,32
   2f9e0:	b4ad883a 	add	r22,r22,r18
   2f9e4:	15a5c83a 	sub	r18,r2,r22
   2f9e8:	1580a51e 	bne	r2,r22,2fc80 <__umoddi3+0x490>
   2f9ec:	a02ed43a 	srli	r23,r20,16
   2f9f0:	8d23c83a 	sub	r17,r17,r20
   2f9f4:	a57fffcc 	andi	r21,r20,65535
   2f9f8:	8809883a 	mov	r4,r17
   2f9fc:	b80b883a 	mov	r5,r23
   2fa00:	0022c200 	call	22c20 <__umodsi3>
   2fa04:	8809883a 	mov	r4,r17
   2fa08:	b80b883a 	mov	r5,r23
   2fa0c:	1023883a 	mov	r17,r2
   2fa10:	0022bbc0 	call	22bbc <__udivsi3>
   2fa14:	1009883a 	mov	r4,r2
   2fa18:	a80b883a 	mov	r5,r21
   2fa1c:	0022c7c0 	call	22c7c <__mulsi3>
   2fa20:	8822943a 	slli	r17,r17,16
   2fa24:	9808d43a 	srli	r4,r19,16
   2fa28:	8908b03a 	or	r4,r17,r4
   2fa2c:	2080032e 	bgeu	r4,r2,2fa3c <__umoddi3+0x24c>
   2fa30:	2509883a 	add	r4,r4,r20
   2fa34:	25000136 	bltu	r4,r20,2fa3c <__umoddi3+0x24c>
   2fa38:	2080dc36 	bltu	r4,r2,2fdac <__umoddi3+0x5bc>
   2fa3c:	20a1c83a 	sub	r16,r4,r2
   2fa40:	b80b883a 	mov	r5,r23
   2fa44:	8009883a 	mov	r4,r16
   2fa48:	0022c200 	call	22c20 <__umodsi3>
   2fa4c:	b80b883a 	mov	r5,r23
   2fa50:	8009883a 	mov	r4,r16
   2fa54:	1023883a 	mov	r17,r2
   2fa58:	8822943a 	slli	r17,r17,16
   2fa5c:	0022bbc0 	call	22bbc <__udivsi3>
   2fa60:	a80b883a 	mov	r5,r21
   2fa64:	1009883a 	mov	r4,r2
   2fa68:	0022c7c0 	call	22c7c <__mulsi3>
   2fa6c:	9cffffcc 	andi	r19,r19,65535
   2fa70:	8cc6b03a 	or	r3,r17,r19
   2fa74:	1880042e 	bgeu	r3,r2,2fa88 <__umoddi3+0x298>
   2fa78:	1d07883a 	add	r3,r3,r20
   2fa7c:	1d000236 	bltu	r3,r20,2fa88 <__umoddi3+0x298>
   2fa80:	1880012e 	bgeu	r3,r2,2fa88 <__umoddi3+0x298>
   2fa84:	1d07883a 	add	r3,r3,r20
   2fa88:	1885c83a 	sub	r2,r3,r2
   2fa8c:	1484d83a 	srl	r2,r2,r18
   2fa90:	0007883a 	mov	r3,zero
   2fa94:	003fa206 	br	2f920 <__umoddi3+0x130>
   2fa98:	a0804030 	cmpltui	r2,r20,256
   2fa9c:	1000ba1e 	bne	r2,zero,2fd88 <__umoddi3+0x598>
   2faa0:	a006d23a 	srli	r3,r20,8
   2faa4:	04800204 	movi	r18,8
   2faa8:	003fc906 	br	2f9d0 <__umoddi3+0x1e0>
   2faac:	30804030 	cmpltui	r2,r6,256
   2fab0:	1000ad1e 	bne	r2,zero,2fd68 <__umoddi3+0x578>
   2fab4:	3006d23a 	srli	r3,r6,8
   2fab8:	04800204 	movi	r18,8
   2fabc:	003f6506 	br	2f854 <__umoddi3+0x64>
   2fac0:	39004030 	cmpltui	r4,r7,256
   2fac4:	2000b21e 	bne	r4,zero,2fd90 <__umoddi3+0x5a0>
   2fac8:	3808d23a 	srli	r4,r7,8
   2facc:	02000204 	movi	r8,8
   2fad0:	003fa606 	br	2f96c <__umoddi3+0x17c>
   2fad4:	3d4e983a 	sll	r7,r7,r21
   2fad8:	3508d83a 	srl	r4,r6,r20
   2fadc:	8d2cd83a 	srl	r22,r17,r20
   2fae0:	8504d83a 	srl	r2,r16,r20
   2fae4:	21e4b03a 	or	r18,r4,r7
   2fae8:	8d62983a 	sll	r17,r17,r21
   2faec:	9026d43a 	srli	r19,r18,16
   2faf0:	354c983a 	sll	r6,r6,r21
   2faf4:	1444b03a 	or	r2,r2,r17
   2faf8:	b009883a 	mov	r4,r22
   2fafc:	980b883a 	mov	r5,r19
   2fb00:	d9800115 	stw	r6,4(sp)
   2fb04:	d8800015 	stw	r2,0(sp)
   2fb08:	0022c200 	call	22c20 <__umodsi3>
   2fb0c:	980b883a 	mov	r5,r19
   2fb10:	b009883a 	mov	r4,r22
   2fb14:	102f883a 	mov	r23,r2
   2fb18:	947fffcc 	andi	r17,r18,65535
   2fb1c:	0022bbc0 	call	22bbc <__udivsi3>
   2fb20:	8809883a 	mov	r4,r17
   2fb24:	100b883a 	mov	r5,r2
   2fb28:	1039883a 	mov	fp,r2
   2fb2c:	0022c7c0 	call	22c7c <__mulsi3>
   2fb30:	d8c00017 	ldw	r3,0(sp)
   2fb34:	b82e943a 	slli	r23,r23,16
   2fb38:	8560983a 	sll	r16,r16,r21
   2fb3c:	1808d43a 	srli	r4,r3,16
   2fb40:	b908b03a 	or	r4,r23,r4
   2fb44:	2080062e 	bgeu	r4,r2,2fb60 <__umoddi3+0x370>
   2fb48:	2489883a 	add	r4,r4,r18
   2fb4c:	e17fffc4 	addi	r5,fp,-1
   2fb50:	24809436 	bltu	r4,r18,2fda4 <__umoddi3+0x5b4>
   2fb54:	2080932e 	bgeu	r4,r2,2fda4 <__umoddi3+0x5b4>
   2fb58:	e73fff84 	addi	fp,fp,-2
   2fb5c:	2489883a 	add	r4,r4,r18
   2fb60:	20adc83a 	sub	r22,r4,r2
   2fb64:	980b883a 	mov	r5,r19
   2fb68:	b009883a 	mov	r4,r22
   2fb6c:	0022c200 	call	22c20 <__umodsi3>
   2fb70:	980b883a 	mov	r5,r19
   2fb74:	b009883a 	mov	r4,r22
   2fb78:	102f883a 	mov	r23,r2
   2fb7c:	0022bbc0 	call	22bbc <__udivsi3>
   2fb80:	100b883a 	mov	r5,r2
   2fb84:	8809883a 	mov	r4,r17
   2fb88:	d8800215 	stw	r2,8(sp)
   2fb8c:	0022c7c0 	call	22c7c <__mulsi3>
   2fb90:	d8c00017 	ldw	r3,0(sp)
   2fb94:	b82e943a 	slli	r23,r23,16
   2fb98:	d9400217 	ldw	r5,8(sp)
   2fb9c:	1c7fffcc 	andi	r17,r3,65535
   2fba0:	bc62b03a 	or	r17,r23,r17
   2fba4:	8880062e 	bgeu	r17,r2,2fbc0 <__umoddi3+0x3d0>
   2fba8:	8ca3883a 	add	r17,r17,r18
   2fbac:	28ffffc4 	addi	r3,r5,-1
   2fbb0:	8c807a36 	bltu	r17,r18,2fd9c <__umoddi3+0x5ac>
   2fbb4:	8880792e 	bgeu	r17,r2,2fd9c <__umoddi3+0x5ac>
   2fbb8:	297fff84 	addi	r5,r5,-2
   2fbbc:	8ca3883a 	add	r17,r17,r18
   2fbc0:	e02c943a 	slli	r22,fp,16
   2fbc4:	d9c00117 	ldw	r7,4(sp)
   2fbc8:	29bfffcc 	andi	r6,r5,65535
   2fbcc:	b16cb03a 	or	r22,r22,r5
   2fbd0:	38ffffcc 	andi	r3,r7,65535
   2fbd4:	b02cd43a 	srli	r22,r22,16
   2fbd8:	180b883a 	mov	r5,r3
   2fbdc:	3009883a 	mov	r4,r6
   2fbe0:	3838d43a 	srli	fp,r7,16
   2fbe4:	182f883a 	mov	r23,r3
   2fbe8:	d9800015 	stw	r6,0(sp)
   2fbec:	88a3c83a 	sub	r17,r17,r2
   2fbf0:	0022c7c0 	call	22c7c <__mulsi3>
   2fbf4:	b80b883a 	mov	r5,r23
   2fbf8:	b009883a 	mov	r4,r22
   2fbfc:	102f883a 	mov	r23,r2
   2fc00:	0022c7c0 	call	22c7c <__mulsi3>
   2fc04:	e00b883a 	mov	r5,fp
   2fc08:	b009883a 	mov	r4,r22
   2fc0c:	102d883a 	mov	r22,r2
   2fc10:	0022c7c0 	call	22c7c <__mulsi3>
   2fc14:	d9800017 	ldw	r6,0(sp)
   2fc18:	e00b883a 	mov	r5,fp
   2fc1c:	1039883a 	mov	fp,r2
   2fc20:	3009883a 	mov	r4,r6
   2fc24:	0022c7c0 	call	22c7c <__mulsi3>
   2fc28:	b808d43a 	srli	r4,r23,16
   2fc2c:	1585883a 	add	r2,r2,r22
   2fc30:	2089883a 	add	r4,r4,r2
   2fc34:	2580022e 	bgeu	r4,r22,2fc40 <__umoddi3+0x450>
   2fc38:	00800074 	movhi	r2,1
   2fc3c:	e0b9883a 	add	fp,fp,r2
   2fc40:	2006d43a 	srli	r3,r4,16
   2fc44:	2008943a 	slli	r4,r4,16
   2fc48:	bdffffcc 	andi	r23,r23,65535
   2fc4c:	1f07883a 	add	r3,r3,fp
   2fc50:	25c9883a 	add	r4,r4,r23
   2fc54:	88c03a36 	bltu	r17,r3,2fd40 <__umoddi3+0x550>
   2fc58:	88c03826 	beq	r17,r3,2fd3c <__umoddi3+0x54c>
   2fc5c:	8109c83a 	sub	r4,r16,r4
   2fc60:	8121803a 	cmpltu	r16,r16,r4
   2fc64:	88c7c83a 	sub	r3,r17,r3
   2fc68:	1c07c83a 	sub	r3,r3,r16
   2fc6c:	1d04983a 	sll	r2,r3,r20
   2fc70:	2548d83a 	srl	r4,r4,r21
   2fc74:	1d46d83a 	srl	r3,r3,r21
   2fc78:	1104b03a 	or	r2,r2,r4
   2fc7c:	003f2806 	br	2f920 <__umoddi3+0x130>
   2fc80:	a4a8983a 	sll	r20,r20,r18
   2fc84:	8da6d83a 	srl	r19,r17,r22
   2fc88:	8ca2983a 	sll	r17,r17,r18
   2fc8c:	a02ed43a 	srli	r23,r20,16
   2fc90:	9809883a 	mov	r4,r19
   2fc94:	85acd83a 	srl	r22,r16,r22
   2fc98:	b80b883a 	mov	r5,r23
   2fc9c:	0022c200 	call	22c20 <__umodsi3>
   2fca0:	9809883a 	mov	r4,r19
   2fca4:	b80b883a 	mov	r5,r23
   2fca8:	b46cb03a 	or	r22,r22,r17
   2fcac:	a57fffcc 	andi	r21,r20,65535
   2fcb0:	1023883a 	mov	r17,r2
   2fcb4:	0022bbc0 	call	22bbc <__udivsi3>
   2fcb8:	a809883a 	mov	r4,r21
   2fcbc:	100b883a 	mov	r5,r2
   2fcc0:	0022c7c0 	call	22c7c <__mulsi3>
   2fcc4:	8822943a 	slli	r17,r17,16
   2fcc8:	b008d43a 	srli	r4,r22,16
   2fccc:	84a6983a 	sll	r19,r16,r18
   2fcd0:	8908b03a 	or	r4,r17,r4
   2fcd4:	2080042e 	bgeu	r4,r2,2fce8 <__umoddi3+0x4f8>
   2fcd8:	2509883a 	add	r4,r4,r20
   2fcdc:	25000236 	bltu	r4,r20,2fce8 <__umoddi3+0x4f8>
   2fce0:	2080012e 	bgeu	r4,r2,2fce8 <__umoddi3+0x4f8>
   2fce4:	2509883a 	add	r4,r4,r20
   2fce8:	20a1c83a 	sub	r16,r4,r2
   2fcec:	8009883a 	mov	r4,r16
   2fcf0:	b80b883a 	mov	r5,r23
   2fcf4:	0022c200 	call	22c20 <__umodsi3>
   2fcf8:	8009883a 	mov	r4,r16
   2fcfc:	1021883a 	mov	r16,r2
   2fd00:	b80b883a 	mov	r5,r23
   2fd04:	8020943a 	slli	r16,r16,16
   2fd08:	0022bbc0 	call	22bbc <__udivsi3>
   2fd0c:	100b883a 	mov	r5,r2
   2fd10:	a809883a 	mov	r4,r21
   2fd14:	b47fffcc 	andi	r17,r22,65535
   2fd18:	0022c7c0 	call	22c7c <__mulsi3>
   2fd1c:	8462b03a 	or	r17,r16,r17
   2fd20:	8880042e 	bgeu	r17,r2,2fd34 <__umoddi3+0x544>
   2fd24:	8d23883a 	add	r17,r17,r20
   2fd28:	8d000236 	bltu	r17,r20,2fd34 <__umoddi3+0x544>
   2fd2c:	8880012e 	bgeu	r17,r2,2fd34 <__umoddi3+0x544>
   2fd30:	8d23883a 	add	r17,r17,r20
   2fd34:	88a3c83a 	sub	r17,r17,r2
   2fd38:	003f2f06 	br	2f9f8 <__umoddi3+0x208>
   2fd3c:	813fc72e 	bgeu	r16,r4,2fc5c <__umoddi3+0x46c>
   2fd40:	d8800117 	ldw	r2,4(sp)
   2fd44:	20a7c83a 	sub	r19,r4,r2
   2fd48:	24c9803a 	cmpltu	r4,r4,r19
   2fd4c:	2489883a 	add	r4,r4,r18
   2fd50:	1907c83a 	sub	r3,r3,r4
   2fd54:	9809883a 	mov	r4,r19
   2fd58:	003fc006 	br	2fc5c <__umoddi3+0x46c>
   2fd5c:	3006d43a 	srli	r3,r6,16
   2fd60:	04800404 	movi	r18,16
   2fd64:	003ebb06 	br	2f854 <__umoddi3+0x64>
   2fd68:	3007883a 	mov	r3,r6
   2fd6c:	003eb906 	br	2f854 <__umoddi3+0x64>
   2fd70:	3808d43a 	srli	r4,r7,16
   2fd74:	02000404 	movi	r8,16
   2fd78:	003efc06 	br	2f96c <__umoddi3+0x17c>
   2fd7c:	a006d43a 	srli	r3,r20,16
   2fd80:	04800404 	movi	r18,16
   2fd84:	003f1206 	br	2f9d0 <__umoddi3+0x1e0>
   2fd88:	a007883a 	mov	r3,r20
   2fd8c:	003f1006 	br	2f9d0 <__umoddi3+0x1e0>
   2fd90:	3809883a 	mov	r4,r7
   2fd94:	0011883a 	mov	r8,zero
   2fd98:	003ef406 	br	2f96c <__umoddi3+0x17c>
   2fd9c:	180b883a 	mov	r5,r3
   2fda0:	003f8706 	br	2fbc0 <__umoddi3+0x3d0>
   2fda4:	2839883a 	mov	fp,r5
   2fda8:	003f6d06 	br	2fb60 <__umoddi3+0x370>
   2fdac:	2509883a 	add	r4,r4,r20
   2fdb0:	003f2206 	br	2fa3c <__umoddi3+0x24c>

0002fdb4 <__eqdf2>:
   2fdb4:	2810d53a 	srli	r8,r5,20
   2fdb8:	3806d53a 	srli	r3,r7,20
   2fdbc:	00800434 	movhi	r2,16
   2fdc0:	4201ffcc 	andi	r8,r8,2047
   2fdc4:	10bfffc4 	addi	r2,r2,-1
   2fdc8:	4241ffd8 	cmpnei	r9,r8,2047
   2fdcc:	2814d7fa 	srli	r10,r5,31
   2fdd0:	3816d7fa 	srli	r11,r7,31
   2fdd4:	288a703a 	and	r5,r5,r2
   2fdd8:	388e703a 	and	r7,r7,r2
   2fddc:	1881ffcc 	andi	r2,r3,2047
   2fde0:	48000626 	beq	r9,zero,2fdfc <__eqdf2+0x48>
   2fde4:	10c1ffe0 	cmpeqi	r3,r2,2047
   2fde8:	1800021e 	bne	r3,zero,2fdf4 <__eqdf2+0x40>
   2fdec:	4080011e 	bne	r8,r2,2fdf4 <__eqdf2+0x40>
   2fdf0:	29c00826 	beq	r5,r7,2fe14 <__eqdf2+0x60>
   2fdf4:	00800044 	movi	r2,1
   2fdf8:	f800283a 	ret
   2fdfc:	2906b03a 	or	r3,r5,r4
   2fe00:	183ffc1e 	bne	r3,zero,2fdf4 <__eqdf2+0x40>
   2fe04:	1081ffd8 	cmpnei	r2,r2,2047
   2fe08:	103ffa1e 	bne	r2,zero,2fdf4 <__eqdf2+0x40>
   2fe0c:	398eb03a 	or	r7,r7,r6
   2fe10:	383ff81e 	bne	r7,zero,2fdf4 <__eqdf2+0x40>
   2fe14:	21bff71e 	bne	r4,r6,2fdf4 <__eqdf2+0x40>
   2fe18:	52c00426 	beq	r10,r11,2fe2c <__eqdf2+0x78>
   2fe1c:	403ff51e 	bne	r8,zero,2fdf4 <__eqdf2+0x40>
   2fe20:	290ab03a 	or	r5,r5,r4
   2fe24:	2804c03a 	cmpne	r2,r5,zero
   2fe28:	f800283a 	ret
   2fe2c:	0005883a 	mov	r2,zero
   2fe30:	f800283a 	ret

0002fe34 <__fixdfsi>:
   2fe34:	2806d53a 	srli	r3,r5,20
   2fe38:	01800434 	movhi	r6,16
   2fe3c:	31bfffc4 	addi	r6,r6,-1
   2fe40:	18c1ffcc 	andi	r3,r3,2047
   2fe44:	19c0ffd0 	cmplti	r7,r3,1023
   2fe48:	2810d7fa 	srli	r8,r5,31
   2fe4c:	298a703a 	and	r5,r5,r6
   2fe50:	3800061e 	bne	r7,zero,2fe6c <__fixdfsi+0x38>
   2fe54:	18810790 	cmplti	r2,r3,1054
   2fe58:	1000061e 	bne	r2,zero,2fe74 <__fixdfsi+0x40>
   2fe5c:	00a00034 	movhi	r2,32768
   2fe60:	10bfffc4 	addi	r2,r2,-1
   2fe64:	4085883a 	add	r2,r8,r2
   2fe68:	f800283a 	ret
   2fe6c:	0005883a 	mov	r2,zero
   2fe70:	f800283a 	ret
   2fe74:	01810cc4 	movi	r6,1075
   2fe78:	30cdc83a 	sub	r6,r6,r3
   2fe7c:	30800808 	cmpgei	r2,r6,32
   2fe80:	29400434 	orhi	r5,r5,16
   2fe84:	1000071e 	bne	r2,zero,2fea4 <__fixdfsi+0x70>
   2fe88:	18befb44 	addi	r2,r3,-1043
   2fe8c:	2884983a 	sll	r2,r5,r2
   2fe90:	2188d83a 	srl	r4,r4,r6
   2fe94:	1104b03a 	or	r2,r2,r4
   2fe98:	403ff526 	beq	r8,zero,2fe70 <__fixdfsi+0x3c>
   2fe9c:	0085c83a 	sub	r2,zero,r2
   2fea0:	f800283a 	ret
   2fea4:	008104c4 	movi	r2,1043
   2fea8:	10c5c83a 	sub	r2,r2,r3
   2feac:	2884d83a 	srl	r2,r5,r2
   2feb0:	003ff906 	br	2fe98 <__fixdfsi+0x64>

0002feb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2feb4:	defffe04 	addi	sp,sp,-8
   2feb8:	dfc00115 	stw	ra,4(sp)
   2febc:	df000015 	stw	fp,0(sp)
   2fec0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2fec4:	d0a01417 	ldw	r2,-32688(gp)
   2fec8:	10000326 	beq	r2,zero,2fed8 <alt_get_errno+0x24>
   2fecc:	d0a01417 	ldw	r2,-32688(gp)
   2fed0:	103ee83a 	callr	r2
   2fed4:	00000106 	br	2fedc <alt_get_errno+0x28>
   2fed8:	d0a35304 	addi	r2,gp,-29364
}
   2fedc:	e037883a 	mov	sp,fp
   2fee0:	dfc00117 	ldw	ra,4(sp)
   2fee4:	df000017 	ldw	fp,0(sp)
   2fee8:	dec00204 	addi	sp,sp,8
   2feec:	f800283a 	ret

0002fef0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2fef0:	defffb04 	addi	sp,sp,-20
   2fef4:	dfc00415 	stw	ra,16(sp)
   2fef8:	df000315 	stw	fp,12(sp)
   2fefc:	df000304 	addi	fp,sp,12
   2ff00:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2ff04:	e0bffd17 	ldw	r2,-12(fp)
   2ff08:	10000916 	blt	r2,zero,2ff30 <close+0x40>
   2ff0c:	e0fffd17 	ldw	r3,-12(fp)
   2ff10:	1805883a 	mov	r2,r3
   2ff14:	1085883a 	add	r2,r2,r2
   2ff18:	10c5883a 	add	r2,r2,r3
   2ff1c:	100490ba 	slli	r2,r2,2
   2ff20:	00c000f4 	movhi	r3,3
   2ff24:	18d03304 	addi	r3,r3,16588
   2ff28:	10c5883a 	add	r2,r2,r3
   2ff2c:	00000106 	br	2ff34 <close+0x44>
   2ff30:	0005883a 	mov	r2,zero
   2ff34:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   2ff38:	e0bfff17 	ldw	r2,-4(fp)
   2ff3c:	10001926 	beq	r2,zero,2ffa4 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2ff40:	e0bfff17 	ldw	r2,-4(fp)
   2ff44:	10800017 	ldw	r2,0(r2)
   2ff48:	10800417 	ldw	r2,16(r2)
   2ff4c:	10000626 	beq	r2,zero,2ff68 <close+0x78>
   2ff50:	e0bfff17 	ldw	r2,-4(fp)
   2ff54:	10800017 	ldw	r2,0(r2)
   2ff58:	10800417 	ldw	r2,16(r2)
   2ff5c:	e13fff17 	ldw	r4,-4(fp)
   2ff60:	103ee83a 	callr	r2
   2ff64:	00000106 	br	2ff6c <close+0x7c>
   2ff68:	0005883a 	mov	r2,zero
   2ff6c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2ff70:	e13ffd17 	ldw	r4,-12(fp)
   2ff74:	0030a440 	call	30a44 <alt_release_fd>
    if (rval < 0)
   2ff78:	e0bffe17 	ldw	r2,-8(fp)
   2ff7c:	1000070e 	bge	r2,zero,2ff9c <close+0xac>
    {
      ALT_ERRNO = -rval;
   2ff80:	002feb40 	call	2feb4 <alt_get_errno>
   2ff84:	1007883a 	mov	r3,r2
   2ff88:	e0bffe17 	ldw	r2,-8(fp)
   2ff8c:	0085c83a 	sub	r2,zero,r2
   2ff90:	18800015 	stw	r2,0(r3)
      return -1;
   2ff94:	00bfffc4 	movi	r2,-1
   2ff98:	00000706 	br	2ffb8 <close+0xc8>
    }
    return 0;
   2ff9c:	0005883a 	mov	r2,zero
   2ffa0:	00000506 	br	2ffb8 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2ffa4:	002feb40 	call	2feb4 <alt_get_errno>
   2ffa8:	1007883a 	mov	r3,r2
   2ffac:	00801444 	movi	r2,81
   2ffb0:	18800015 	stw	r2,0(r3)
    return -1;
   2ffb4:	00bfffc4 	movi	r2,-1
  }
}
   2ffb8:	e037883a 	mov	sp,fp
   2ffbc:	dfc00117 	ldw	ra,4(sp)
   2ffc0:	df000017 	ldw	fp,0(sp)
   2ffc4:	dec00204 	addi	sp,sp,8
   2ffc8:	f800283a 	ret

0002ffcc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2ffcc:	defffc04 	addi	sp,sp,-16
   2ffd0:	df000315 	stw	fp,12(sp)
   2ffd4:	df000304 	addi	fp,sp,12
   2ffd8:	e13fff15 	stw	r4,-4(fp)
   2ffdc:	e17ffe15 	stw	r5,-8(fp)
   2ffe0:	e1bffd15 	stw	r6,-12(fp)
  return len;
   2ffe4:	e0bffd17 	ldw	r2,-12(fp)
}
   2ffe8:	e037883a 	mov	sp,fp
   2ffec:	df000017 	ldw	fp,0(sp)
   2fff0:	dec00104 	addi	sp,sp,4
   2fff4:	f800283a 	ret

0002fff8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2fff8:	defffd04 	addi	sp,sp,-12
   2fffc:	df000215 	stw	fp,8(sp)
   30000:	df000204 	addi	fp,sp,8
   30004:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   30008:	0001883a 	nop
   3000c:	e0bffe17 	ldw	r2,-8(fp)
   30010:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   30014:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   30018:	10000226 	beq	r2,zero,30024 <_exit+0x2c>
    ALT_SIM_FAIL();
   3001c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   30020:	00000106 	br	30028 <_exit+0x30>
    ALT_SIM_PASS();
   30024:	002af0b0 	cmpltui	zero,zero,43970
}
   30028:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   3002c:	003fff06 	br	3002c <_exit+0x34>

00030030 <alt_get_errno>:
{
   30030:	defffe04 	addi	sp,sp,-8
   30034:	dfc00115 	stw	ra,4(sp)
   30038:	df000015 	stw	fp,0(sp)
   3003c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30040:	d0a01417 	ldw	r2,-32688(gp)
   30044:	10000326 	beq	r2,zero,30054 <alt_get_errno+0x24>
   30048:	d0a01417 	ldw	r2,-32688(gp)
   3004c:	103ee83a 	callr	r2
   30050:	00000106 	br	30058 <alt_get_errno+0x28>
   30054:	d0a35304 	addi	r2,gp,-29364
}
   30058:	e037883a 	mov	sp,fp
   3005c:	dfc00117 	ldw	ra,4(sp)
   30060:	df000017 	ldw	fp,0(sp)
   30064:	dec00204 	addi	sp,sp,8
   30068:	f800283a 	ret

0003006c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   3006c:	defffb04 	addi	sp,sp,-20
   30070:	dfc00415 	stw	ra,16(sp)
   30074:	df000315 	stw	fp,12(sp)
   30078:	df000304 	addi	fp,sp,12
   3007c:	e13ffe15 	stw	r4,-8(fp)
   30080:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   30084:	e0bffe17 	ldw	r2,-8(fp)
   30088:	10000916 	blt	r2,zero,300b0 <fstat+0x44>
   3008c:	e0fffe17 	ldw	r3,-8(fp)
   30090:	1805883a 	mov	r2,r3
   30094:	1085883a 	add	r2,r2,r2
   30098:	10c5883a 	add	r2,r2,r3
   3009c:	100490ba 	slli	r2,r2,2
   300a0:	00c000f4 	movhi	r3,3
   300a4:	18d03304 	addi	r3,r3,16588
   300a8:	10c5883a 	add	r2,r2,r3
   300ac:	00000106 	br	300b4 <fstat+0x48>
   300b0:	0005883a 	mov	r2,zero
   300b4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   300b8:	e0bfff17 	ldw	r2,-4(fp)
   300bc:	10001026 	beq	r2,zero,30100 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   300c0:	e0bfff17 	ldw	r2,-4(fp)
   300c4:	10800017 	ldw	r2,0(r2)
   300c8:	10800817 	ldw	r2,32(r2)
   300cc:	10000726 	beq	r2,zero,300ec <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   300d0:	e0bfff17 	ldw	r2,-4(fp)
   300d4:	10800017 	ldw	r2,0(r2)
   300d8:	10800817 	ldw	r2,32(r2)
   300dc:	e17ffd17 	ldw	r5,-12(fp)
   300e0:	e13fff17 	ldw	r4,-4(fp)
   300e4:	103ee83a 	callr	r2
   300e8:	00000a06 	br	30114 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   300ec:	e0bffd17 	ldw	r2,-12(fp)
   300f0:	00c80004 	movi	r3,8192
   300f4:	10c00115 	stw	r3,4(r2)
      return 0;
   300f8:	0005883a 	mov	r2,zero
   300fc:	00000506 	br	30114 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   30100:	00300300 	call	30030 <alt_get_errno>
   30104:	1007883a 	mov	r3,r2
   30108:	00801444 	movi	r2,81
   3010c:	18800015 	stw	r2,0(r3)
    return -1;
   30110:	00bfffc4 	movi	r2,-1
  }
}
   30114:	e037883a 	mov	sp,fp
   30118:	dfc00117 	ldw	ra,4(sp)
   3011c:	df000017 	ldw	fp,0(sp)
   30120:	dec00204 	addi	sp,sp,8
   30124:	f800283a 	ret

00030128 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   30128:	deffff04 	addi	sp,sp,-4
   3012c:	df000015 	stw	fp,0(sp)
   30130:	d839883a 	mov	fp,sp
  return 0;
   30134:	0005883a 	mov	r2,zero
}
   30138:	e037883a 	mov	sp,fp
   3013c:	df000017 	ldw	fp,0(sp)
   30140:	dec00104 	addi	sp,sp,4
   30144:	f800283a 	ret

00030148 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   30148:	defff904 	addi	sp,sp,-28
   3014c:	dfc00615 	stw	ra,24(sp)
   30150:	df000515 	stw	fp,20(sp)
   30154:	df000504 	addi	fp,sp,20
   30158:	e13fff15 	stw	r4,-4(fp)
   3015c:	e17ffe15 	stw	r5,-8(fp)
   30160:	e1bffd15 	stw	r6,-12(fp)
   30164:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   30168:	e0800217 	ldw	r2,8(fp)
   3016c:	d8800015 	stw	r2,0(sp)
   30170:	e1fffc17 	ldw	r7,-16(fp)
   30174:	e1bffd17 	ldw	r6,-12(fp)
   30178:	e17ffe17 	ldw	r5,-8(fp)
   3017c:	e13fff17 	ldw	r4,-4(fp)
   30180:	00302f80 	call	302f8 <alt_iic_isr_register>
}  
   30184:	e037883a 	mov	sp,fp
   30188:	dfc00117 	ldw	ra,4(sp)
   3018c:	df000017 	ldw	fp,0(sp)
   30190:	dec00204 	addi	sp,sp,8
   30194:	f800283a 	ret

00030198 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   30198:	defff904 	addi	sp,sp,-28
   3019c:	df000615 	stw	fp,24(sp)
   301a0:	df000604 	addi	fp,sp,24
   301a4:	e13ffb15 	stw	r4,-20(fp)
   301a8:	e17ffa15 	stw	r5,-24(fp)
   301ac:	e0bffa17 	ldw	r2,-24(fp)
   301b0:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   301b4:	0005303a 	rdctl	r2,status
   301b8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   301bc:	e0fffe17 	ldw	r3,-8(fp)
   301c0:	00bfff84 	movi	r2,-2
   301c4:	1884703a 	and	r2,r3,r2
   301c8:	1001703a 	wrctl	status,r2
  return context;
   301cc:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   301d0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   301d4:	00c00044 	movi	r3,1
   301d8:	e0bfff17 	ldw	r2,-4(fp)
   301dc:	1884983a 	sll	r2,r3,r2
   301e0:	1007883a 	mov	r3,r2
   301e4:	d0a35517 	ldw	r2,-29356(gp)
   301e8:	1884b03a 	or	r2,r3,r2
   301ec:	d0a35515 	stw	r2,-29356(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   301f0:	d0a35517 	ldw	r2,-29356(gp)
   301f4:	100170fa 	wrctl	ienable,r2
   301f8:	e0bffd17 	ldw	r2,-12(fp)
   301fc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   30200:	e0bffc17 	ldw	r2,-16(fp)
   30204:	1001703a 	wrctl	status,r2
}
   30208:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   3020c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   30210:	e037883a 	mov	sp,fp
   30214:	df000017 	ldw	fp,0(sp)
   30218:	dec00104 	addi	sp,sp,4
   3021c:	f800283a 	ret

00030220 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   30220:	defff904 	addi	sp,sp,-28
   30224:	df000615 	stw	fp,24(sp)
   30228:	df000604 	addi	fp,sp,24
   3022c:	e13ffb15 	stw	r4,-20(fp)
   30230:	e17ffa15 	stw	r5,-24(fp)
   30234:	e0bffa17 	ldw	r2,-24(fp)
   30238:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   3023c:	0005303a 	rdctl	r2,status
   30240:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30244:	e0fffe17 	ldw	r3,-8(fp)
   30248:	00bfff84 	movi	r2,-2
   3024c:	1884703a 	and	r2,r3,r2
   30250:	1001703a 	wrctl	status,r2
  return context;
   30254:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   30258:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   3025c:	00c00044 	movi	r3,1
   30260:	e0bfff17 	ldw	r2,-4(fp)
   30264:	1884983a 	sll	r2,r3,r2
   30268:	0084303a 	nor	r2,zero,r2
   3026c:	1007883a 	mov	r3,r2
   30270:	d0a35517 	ldw	r2,-29356(gp)
   30274:	1884703a 	and	r2,r3,r2
   30278:	d0a35515 	stw	r2,-29356(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   3027c:	d0a35517 	ldw	r2,-29356(gp)
   30280:	100170fa 	wrctl	ienable,r2
   30284:	e0bffd17 	ldw	r2,-12(fp)
   30288:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   3028c:	e0bffc17 	ldw	r2,-16(fp)
   30290:	1001703a 	wrctl	status,r2
}
   30294:	0001883a 	nop
  return 0;
   30298:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   3029c:	e037883a 	mov	sp,fp
   302a0:	df000017 	ldw	fp,0(sp)
   302a4:	dec00104 	addi	sp,sp,4
   302a8:	f800283a 	ret

000302ac <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   302ac:	defffc04 	addi	sp,sp,-16
   302b0:	df000315 	stw	fp,12(sp)
   302b4:	df000304 	addi	fp,sp,12
   302b8:	e13ffe15 	stw	r4,-8(fp)
   302bc:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   302c0:	000530fa 	rdctl	r2,ienable
   302c4:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   302c8:	00c00044 	movi	r3,1
   302cc:	e0bffd17 	ldw	r2,-12(fp)
   302d0:	1884983a 	sll	r2,r3,r2
   302d4:	1007883a 	mov	r3,r2
   302d8:	e0bfff17 	ldw	r2,-4(fp)
   302dc:	1884703a 	and	r2,r3,r2
   302e0:	1004c03a 	cmpne	r2,r2,zero
   302e4:	10803fcc 	andi	r2,r2,255
}
   302e8:	e037883a 	mov	sp,fp
   302ec:	df000017 	ldw	fp,0(sp)
   302f0:	dec00104 	addi	sp,sp,4
   302f4:	f800283a 	ret

000302f8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   302f8:	defff504 	addi	sp,sp,-44
   302fc:	dfc00a15 	stw	ra,40(sp)
   30300:	df000915 	stw	fp,36(sp)
   30304:	df000904 	addi	fp,sp,36
   30308:	e13ffa15 	stw	r4,-24(fp)
   3030c:	e17ff915 	stw	r5,-28(fp)
   30310:	e1bff815 	stw	r6,-32(fp)
   30314:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   30318:	00bffa84 	movi	r2,-22
   3031c:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   30320:	e0bff917 	ldw	r2,-28(fp)
   30324:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   30328:	e0bffe17 	ldw	r2,-8(fp)
   3032c:	10800808 	cmpgei	r2,r2,32
   30330:	1000251e 	bne	r2,zero,303c8 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   30334:	0005303a 	rdctl	r2,status
   30338:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3033c:	e0fffc17 	ldw	r3,-16(fp)
   30340:	00bfff84 	movi	r2,-2
   30344:	1884703a 	and	r2,r3,r2
   30348:	1001703a 	wrctl	status,r2
  return context;
   3034c:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   30350:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   30354:	e0bffe17 	ldw	r2,-8(fp)
   30358:	100890fa 	slli	r4,r2,3
   3035c:	e0fff817 	ldw	r3,-32(fp)
   30360:	008000f4 	movhi	r2,3
   30364:	2085883a 	add	r2,r4,r2
   30368:	10d44115 	stw	r3,20740(r2)
    alt_irq[id].context = isr_context;
   3036c:	e0bffe17 	ldw	r2,-8(fp)
   30370:	100890fa 	slli	r4,r2,3
   30374:	e0fff717 	ldw	r3,-36(fp)
   30378:	008000f4 	movhi	r2,3
   3037c:	2085883a 	add	r2,r4,r2
   30380:	10d44215 	stw	r3,20744(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   30384:	e0bff817 	ldw	r2,-32(fp)
   30388:	10000526 	beq	r2,zero,303a0 <alt_iic_isr_register+0xa8>
   3038c:	e0bffe17 	ldw	r2,-8(fp)
   30390:	100b883a 	mov	r5,r2
   30394:	e13ffa17 	ldw	r4,-24(fp)
   30398:	00301980 	call	30198 <alt_ic_irq_enable>
   3039c:	00000406 	br	303b0 <alt_iic_isr_register+0xb8>
   303a0:	e0bffe17 	ldw	r2,-8(fp)
   303a4:	100b883a 	mov	r5,r2
   303a8:	e13ffa17 	ldw	r4,-24(fp)
   303ac:	00302200 	call	30220 <alt_ic_irq_disable>
   303b0:	e0bfff15 	stw	r2,-4(fp)
   303b4:	e0bffd17 	ldw	r2,-12(fp)
   303b8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   303bc:	e0bffb17 	ldw	r2,-20(fp)
   303c0:	1001703a 	wrctl	status,r2
}
   303c4:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   303c8:	e0bfff17 	ldw	r2,-4(fp)
}
   303cc:	e037883a 	mov	sp,fp
   303d0:	dfc00117 	ldw	ra,4(sp)
   303d4:	df000017 	ldw	fp,0(sp)
   303d8:	dec00204 	addi	sp,sp,8
   303dc:	f800283a 	ret

000303e0 <alt_get_errno>:
{
   303e0:	defffe04 	addi	sp,sp,-8
   303e4:	dfc00115 	stw	ra,4(sp)
   303e8:	df000015 	stw	fp,0(sp)
   303ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   303f0:	d0a01417 	ldw	r2,-32688(gp)
   303f4:	10000326 	beq	r2,zero,30404 <alt_get_errno+0x24>
   303f8:	d0a01417 	ldw	r2,-32688(gp)
   303fc:	103ee83a 	callr	r2
   30400:	00000106 	br	30408 <alt_get_errno+0x28>
   30404:	d0a35304 	addi	r2,gp,-29364
}
   30408:	e037883a 	mov	sp,fp
   3040c:	dfc00117 	ldw	ra,4(sp)
   30410:	df000017 	ldw	fp,0(sp)
   30414:	dec00204 	addi	sp,sp,8
   30418:	f800283a 	ret

0003041c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   3041c:	deffea04 	addi	sp,sp,-88
   30420:	dfc01515 	stw	ra,84(sp)
   30424:	df001415 	stw	fp,80(sp)
   30428:	df001404 	addi	fp,sp,80
   3042c:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   30430:	e0bfec17 	ldw	r2,-80(fp)
   30434:	10000916 	blt	r2,zero,3045c <isatty+0x40>
   30438:	e0ffec17 	ldw	r3,-80(fp)
   3043c:	1805883a 	mov	r2,r3
   30440:	1085883a 	add	r2,r2,r2
   30444:	10c5883a 	add	r2,r2,r3
   30448:	100490ba 	slli	r2,r2,2
   3044c:	00c000f4 	movhi	r3,3
   30450:	18d03304 	addi	r3,r3,16588
   30454:	10c5883a 	add	r2,r2,r3
   30458:	00000106 	br	30460 <isatty+0x44>
   3045c:	0005883a 	mov	r2,zero
   30460:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   30464:	e0bfff17 	ldw	r2,-4(fp)
   30468:	10000e26 	beq	r2,zero,304a4 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   3046c:	e0bfff17 	ldw	r2,-4(fp)
   30470:	10800017 	ldw	r2,0(r2)
   30474:	10800817 	ldw	r2,32(r2)
   30478:	1000021e 	bne	r2,zero,30484 <isatty+0x68>
    {
      return 1;
   3047c:	00800044 	movi	r2,1
   30480:	00000d06 	br	304b8 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   30484:	e0bfed04 	addi	r2,fp,-76
   30488:	100b883a 	mov	r5,r2
   3048c:	e13fec17 	ldw	r4,-80(fp)
   30490:	003006c0 	call	3006c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   30494:	e0bfee17 	ldw	r2,-72(fp)
   30498:	10880020 	cmpeqi	r2,r2,8192
   3049c:	10803fcc 	andi	r2,r2,255
   304a0:	00000506 	br	304b8 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   304a4:	00303e00 	call	303e0 <alt_get_errno>
   304a8:	1007883a 	mov	r3,r2
   304ac:	00801444 	movi	r2,81
   304b0:	18800015 	stw	r2,0(r3)
    return 0;
   304b4:	0005883a 	mov	r2,zero
  }
}
   304b8:	e037883a 	mov	sp,fp
   304bc:	dfc00117 	ldw	ra,4(sp)
   304c0:	df000017 	ldw	fp,0(sp)
   304c4:	dec00204 	addi	sp,sp,8
   304c8:	f800283a 	ret

000304cc <alt_get_errno>:
{
   304cc:	defffe04 	addi	sp,sp,-8
   304d0:	dfc00115 	stw	ra,4(sp)
   304d4:	df000015 	stw	fp,0(sp)
   304d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   304dc:	d0a01417 	ldw	r2,-32688(gp)
   304e0:	10000326 	beq	r2,zero,304f0 <alt_get_errno+0x24>
   304e4:	d0a01417 	ldw	r2,-32688(gp)
   304e8:	103ee83a 	callr	r2
   304ec:	00000106 	br	304f4 <alt_get_errno+0x28>
   304f0:	d0a35304 	addi	r2,gp,-29364
}
   304f4:	e037883a 	mov	sp,fp
   304f8:	dfc00117 	ldw	ra,4(sp)
   304fc:	df000017 	ldw	fp,0(sp)
   30500:	dec00204 	addi	sp,sp,8
   30504:	f800283a 	ret

00030508 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   30508:	defffb04 	addi	sp,sp,-20
   3050c:	dfc00415 	stw	ra,16(sp)
   30510:	df000315 	stw	fp,12(sp)
   30514:	df000304 	addi	fp,sp,12
   30518:	e13ffe15 	stw	r4,-8(fp)
   3051c:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
   30520:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
   30524:	e0bffe17 	ldw	r2,-8(fp)
   30528:	00802e16 	blt	zero,r2,305e4 <kill+0xdc>
   3052c:	e0bffd17 	ldw	r2,-12(fp)
   30530:	10800828 	cmpgeui	r2,r2,32
   30534:	1000281e 	bne	r2,zero,305d8 <kill+0xd0>
   30538:	e0bffd17 	ldw	r2,-12(fp)
   3053c:	100690ba 	slli	r3,r2,2
   30540:	008000f4 	movhi	r2,3
   30544:	1885883a 	add	r2,r3,r2
   30548:	10815417 	ldw	r2,1360(r2)
   3054c:	1000683a 	jmp	r2
   30550:	000305f8 	rdprs	zero,zero,3095
   30554:	000305d8 	cmpnei	zero,zero,3095
   30558:	000305d8 	cmpnei	zero,zero,3095
   3055c:	000305d0 	cmplti	zero,zero,3095
   30560:	000305d0 	cmplti	zero,zero,3095
   30564:	000305d0 	cmplti	zero,zero,3095
   30568:	000305d0 	cmplti	zero,zero,3095
   3056c:	000305d8 	cmpnei	zero,zero,3095
   30570:	000305d0 	cmplti	zero,zero,3095
   30574:	000305d0 	cmplti	zero,zero,3095
   30578:	000305d0 	cmplti	zero,zero,3095
   3057c:	000305d0 	cmplti	zero,zero,3095
   30580:	000305d0 	cmplti	zero,zero,3095
   30584:	000305d0 	cmplti	zero,zero,3095
   30588:	000305d0 	cmplti	zero,zero,3095
   3058c:	000305d0 	cmplti	zero,zero,3095
   30590:	000305f8 	rdprs	zero,zero,3095
   30594:	000305d8 	cmpnei	zero,zero,3095
   30598:	000305d8 	cmpnei	zero,zero,3095
   3059c:	000305d8 	cmpnei	zero,zero,3095
   305a0:	000305f8 	rdprs	zero,zero,3095
   305a4:	000305d8 	cmpnei	zero,zero,3095
   305a8:	000305d8 	cmpnei	zero,zero,3095
   305ac:	000305d0 	cmplti	zero,zero,3095
   305b0:	000305d0 	cmplti	zero,zero,3095
   305b4:	000305d0 	cmplti	zero,zero,3095
   305b8:	000305d0 	cmplti	zero,zero,3095
   305bc:	000305d0 	cmplti	zero,zero,3095
   305c0:	000305d8 	cmpnei	zero,zero,3095
   305c4:	000305d8 	cmpnei	zero,zero,3095
   305c8:	000305d0 	cmplti	zero,zero,3095
   305cc:	000305d0 	cmplti	zero,zero,3095
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   305d0:	0009883a 	mov	r4,zero
   305d4:	002fff80 	call	2fff8 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   305d8:	00800584 	movi	r2,22
   305dc:	e0bfff15 	stw	r2,-4(fp)
   305e0:	00000606 	br	305fc <kill+0xf4>
    }
  }

  else if (pid > 0)
   305e4:	e0bffe17 	ldw	r2,-8(fp)
   305e8:	0080040e 	bge	zero,r2,305fc <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   305ec:	008000c4 	movi	r2,3
   305f0:	e0bfff15 	stw	r2,-4(fp)
   305f4:	00000106 	br	305fc <kill+0xf4>
      break;
   305f8:	0001883a 	nop
  }

  if (status)
   305fc:	e0bfff17 	ldw	r2,-4(fp)
   30600:	10000626 	beq	r2,zero,3061c <kill+0x114>
  {
    ALT_ERRNO = status;
   30604:	00304cc0 	call	304cc <alt_get_errno>
   30608:	1007883a 	mov	r3,r2
   3060c:	e0bfff17 	ldw	r2,-4(fp)
   30610:	18800015 	stw	r2,0(r3)
    return -1;
   30614:	00bfffc4 	movi	r2,-1
   30618:	00000106 	br	30620 <kill+0x118>
  }

  return 0;
   3061c:	0005883a 	mov	r2,zero
}
   30620:	e037883a 	mov	sp,fp
   30624:	dfc00117 	ldw	ra,4(sp)
   30628:	df000017 	ldw	fp,0(sp)
   3062c:	dec00204 	addi	sp,sp,8
   30630:	f800283a 	ret

00030634 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   30634:	defffc04 	addi	sp,sp,-16
   30638:	df000315 	stw	fp,12(sp)
   3063c:	df000304 	addi	fp,sp,12
   30640:	e13fff15 	stw	r4,-4(fp)
   30644:	e17ffe15 	stw	r5,-8(fp)
   30648:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   3064c:	e0fffe17 	ldw	r3,-8(fp)
   30650:	e0bfff17 	ldw	r2,-4(fp)
   30654:	18800c26 	beq	r3,r2,30688 <alt_load_section+0x54>
  {
    while( to != end )
   30658:	00000806 	br	3067c <alt_load_section+0x48>
    {
      *to++ = *from++;
   3065c:	e0ffff17 	ldw	r3,-4(fp)
   30660:	18800104 	addi	r2,r3,4
   30664:	e0bfff15 	stw	r2,-4(fp)
   30668:	e0bffe17 	ldw	r2,-8(fp)
   3066c:	11000104 	addi	r4,r2,4
   30670:	e13ffe15 	stw	r4,-8(fp)
   30674:	18c00017 	ldw	r3,0(r3)
   30678:	10c00015 	stw	r3,0(r2)
    while( to != end )
   3067c:	e0fffe17 	ldw	r3,-8(fp)
   30680:	e0bffd17 	ldw	r2,-12(fp)
   30684:	18bff51e 	bne	r3,r2,3065c <alt_load_section+0x28>
    }
  }
}
   30688:	0001883a 	nop
   3068c:	e037883a 	mov	sp,fp
   30690:	df000017 	ldw	fp,0(sp)
   30694:	dec00104 	addi	sp,sp,4
   30698:	f800283a 	ret

0003069c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   3069c:	defffe04 	addi	sp,sp,-8
   306a0:	dfc00115 	stw	ra,4(sp)
   306a4:	df000015 	stw	fp,0(sp)
   306a8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   306ac:	018000f4 	movhi	r6,3
   306b0:	3190dd04 	addi	r6,r6,17268
   306b4:	014000f4 	movhi	r5,3
   306b8:	294dba04 	addi	r5,r5,14056
   306bc:	010000f4 	movhi	r4,3
   306c0:	2110dd04 	addi	r4,r4,17268
   306c4:	00306340 	call	30634 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   306c8:	018000b4 	movhi	r6,2
   306cc:	31808904 	addi	r6,r6,548
   306d0:	014000b4 	movhi	r5,2
   306d4:	29400804 	addi	r5,r5,32
   306d8:	010000b4 	movhi	r4,2
   306dc:	21000804 	addi	r4,r4,32
   306e0:	00306340 	call	30634 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   306e4:	018000f4 	movhi	r6,3
   306e8:	318dba04 	addi	r6,r6,14056
   306ec:	014000f4 	movhi	r5,3
   306f0:	29497104 	addi	r5,r5,9668
   306f4:	010000f4 	movhi	r4,3
   306f8:	21097104 	addi	r4,r4,9668
   306fc:	00306340 	call	30634 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   30700:	00318e80 	call	318e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   30704:	0031ab40 	call	31ab4 <alt_icache_flush_all>
}
   30708:	0001883a 	nop
   3070c:	e037883a 	mov	sp,fp
   30710:	dfc00117 	ldw	ra,4(sp)
   30714:	df000017 	ldw	fp,0(sp)
   30718:	dec00204 	addi	sp,sp,8
   3071c:	f800283a 	ret

00030720 <alt_get_errno>:
{
   30720:	defffe04 	addi	sp,sp,-8
   30724:	dfc00115 	stw	ra,4(sp)
   30728:	df000015 	stw	fp,0(sp)
   3072c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30730:	d0a01417 	ldw	r2,-32688(gp)
   30734:	10000326 	beq	r2,zero,30744 <alt_get_errno+0x24>
   30738:	d0a01417 	ldw	r2,-32688(gp)
   3073c:	103ee83a 	callr	r2
   30740:	00000106 	br	30748 <alt_get_errno+0x28>
   30744:	d0a35304 	addi	r2,gp,-29364
}
   30748:	e037883a 	mov	sp,fp
   3074c:	dfc00117 	ldw	ra,4(sp)
   30750:	df000017 	ldw	fp,0(sp)
   30754:	dec00204 	addi	sp,sp,8
   30758:	f800283a 	ret

0003075c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   3075c:	defff904 	addi	sp,sp,-28
   30760:	dfc00615 	stw	ra,24(sp)
   30764:	df000515 	stw	fp,20(sp)
   30768:	df000504 	addi	fp,sp,20
   3076c:	e13ffd15 	stw	r4,-12(fp)
   30770:	e17ffc15 	stw	r5,-16(fp)
   30774:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   30778:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3077c:	e0bffd17 	ldw	r2,-12(fp)
   30780:	10000916 	blt	r2,zero,307a8 <lseek+0x4c>
   30784:	e0fffd17 	ldw	r3,-12(fp)
   30788:	1805883a 	mov	r2,r3
   3078c:	1085883a 	add	r2,r2,r2
   30790:	10c5883a 	add	r2,r2,r3
   30794:	100490ba 	slli	r2,r2,2
   30798:	00c000f4 	movhi	r3,3
   3079c:	18d03304 	addi	r3,r3,16588
   307a0:	10c5883a 	add	r2,r2,r3
   307a4:	00000106 	br	307ac <lseek+0x50>
   307a8:	0005883a 	mov	r2,zero
   307ac:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   307b0:	e0bffe17 	ldw	r2,-8(fp)
   307b4:	10001026 	beq	r2,zero,307f8 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   307b8:	e0bffe17 	ldw	r2,-8(fp)
   307bc:	10800017 	ldw	r2,0(r2)
   307c0:	10800717 	ldw	r2,28(r2)
   307c4:	10000926 	beq	r2,zero,307ec <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   307c8:	e0bffe17 	ldw	r2,-8(fp)
   307cc:	10800017 	ldw	r2,0(r2)
   307d0:	10800717 	ldw	r2,28(r2)
   307d4:	e1bffb17 	ldw	r6,-20(fp)
   307d8:	e17ffc17 	ldw	r5,-16(fp)
   307dc:	e13ffe17 	ldw	r4,-8(fp)
   307e0:	103ee83a 	callr	r2
   307e4:	e0bfff15 	stw	r2,-4(fp)
   307e8:	00000506 	br	30800 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   307ec:	00bfde84 	movi	r2,-134
   307f0:	e0bfff15 	stw	r2,-4(fp)
   307f4:	00000206 	br	30800 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   307f8:	00bfebc4 	movi	r2,-81
   307fc:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   30800:	e0bfff17 	ldw	r2,-4(fp)
   30804:	1000070e 	bge	r2,zero,30824 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   30808:	00307200 	call	30720 <alt_get_errno>
   3080c:	1007883a 	mov	r3,r2
   30810:	e0bfff17 	ldw	r2,-4(fp)
   30814:	0085c83a 	sub	r2,zero,r2
   30818:	18800015 	stw	r2,0(r3)
    rc = -1;
   3081c:	00bfffc4 	movi	r2,-1
   30820:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   30824:	e0bfff17 	ldw	r2,-4(fp)
}
   30828:	e037883a 	mov	sp,fp
   3082c:	dfc00117 	ldw	ra,4(sp)
   30830:	df000017 	ldw	fp,0(sp)
   30834:	dec00204 	addi	sp,sp,8
   30838:	f800283a 	ret

0003083c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   3083c:	defffd04 	addi	sp,sp,-12
   30840:	dfc00215 	stw	ra,8(sp)
   30844:	df000115 	stw	fp,4(sp)
   30848:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   3084c:	0009883a 	mov	r4,zero
   30850:	0030d100 	call	30d10 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   30854:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   30858:	0030d4c0 	call	30d4c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   3085c:	018000f4 	movhi	r6,3
   30860:	318db404 	addi	r6,r6,14032
   30864:	014000f4 	movhi	r5,3
   30868:	294db404 	addi	r5,r5,14032
   3086c:	010000f4 	movhi	r4,3
   30870:	210db404 	addi	r4,r4,14032
   30874:	0031c400 	call	31c40 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   30878:	00319ec0 	call	319ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   3087c:	010000f4 	movhi	r4,3
   30880:	21069404 	addi	r4,r4,6736
   30884:	00323540 	call	32354 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   30888:	d0a35617 	ldw	r2,-29352(gp)
   3088c:	d0e35717 	ldw	r3,-29348(gp)
   30890:	d1235817 	ldw	r4,-29344(gp)
   30894:	200d883a 	mov	r6,r4
   30898:	180b883a 	mov	r5,r3
   3089c:	1009883a 	mov	r4,r2
   308a0:	00211fc0 	call	211fc <main>
   308a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   308a8:	01000044 	movi	r4,1
   308ac:	002fef00 	call	2fef0 <close>
  exit (result);
   308b0:	e13fff17 	ldw	r4,-4(fp)
   308b4:	00323680 	call	32368 <exit>

000308b8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   308b8:	defffe04 	addi	sp,sp,-8
   308bc:	df000115 	stw	fp,4(sp)
   308c0:	df000104 	addi	fp,sp,4
   308c4:	e13fff15 	stw	r4,-4(fp)
}
   308c8:	0001883a 	nop
   308cc:	e037883a 	mov	sp,fp
   308d0:	df000017 	ldw	fp,0(sp)
   308d4:	dec00104 	addi	sp,sp,4
   308d8:	f800283a 	ret

000308dc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   308dc:	defffe04 	addi	sp,sp,-8
   308e0:	df000115 	stw	fp,4(sp)
   308e4:	df000104 	addi	fp,sp,4
   308e8:	e13fff15 	stw	r4,-4(fp)
}
   308ec:	0001883a 	nop
   308f0:	e037883a 	mov	sp,fp
   308f4:	df000017 	ldw	fp,0(sp)
   308f8:	dec00104 	addi	sp,sp,4
   308fc:	f800283a 	ret

00030900 <alt_get_errno>:
{
   30900:	defffe04 	addi	sp,sp,-8
   30904:	dfc00115 	stw	ra,4(sp)
   30908:	df000015 	stw	fp,0(sp)
   3090c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30910:	d0a01417 	ldw	r2,-32688(gp)
   30914:	10000326 	beq	r2,zero,30924 <alt_get_errno+0x24>
   30918:	d0a01417 	ldw	r2,-32688(gp)
   3091c:	103ee83a 	callr	r2
   30920:	00000106 	br	30928 <alt_get_errno+0x28>
   30924:	d0a35304 	addi	r2,gp,-29364
}
   30928:	e037883a 	mov	sp,fp
   3092c:	dfc00117 	ldw	ra,4(sp)
   30930:	df000017 	ldw	fp,0(sp)
   30934:	dec00204 	addi	sp,sp,8
   30938:	f800283a 	ret

0003093c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   3093c:	defff904 	addi	sp,sp,-28
   30940:	dfc00615 	stw	ra,24(sp)
   30944:	df000515 	stw	fp,20(sp)
   30948:	df000504 	addi	fp,sp,20
   3094c:	e13ffd15 	stw	r4,-12(fp)
   30950:	e17ffc15 	stw	r5,-16(fp)
   30954:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   30958:	e0bffd17 	ldw	r2,-12(fp)
   3095c:	10000916 	blt	r2,zero,30984 <read+0x48>
   30960:	e0fffd17 	ldw	r3,-12(fp)
   30964:	1805883a 	mov	r2,r3
   30968:	1085883a 	add	r2,r2,r2
   3096c:	10c5883a 	add	r2,r2,r3
   30970:	100490ba 	slli	r2,r2,2
   30974:	00c000f4 	movhi	r3,3
   30978:	18d03304 	addi	r3,r3,16588
   3097c:	10c5883a 	add	r2,r2,r3
   30980:	00000106 	br	30988 <read+0x4c>
   30984:	0005883a 	mov	r2,zero
   30988:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   3098c:	e0bfff17 	ldw	r2,-4(fp)
   30990:	10002226 	beq	r2,zero,30a1c <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   30994:	e0bfff17 	ldw	r2,-4(fp)
   30998:	10800217 	ldw	r2,8(r2)
   3099c:	108000cc 	andi	r2,r2,3
   309a0:	10800060 	cmpeqi	r2,r2,1
   309a4:	1000181e 	bne	r2,zero,30a08 <read+0xcc>
        (fd->dev->read))
   309a8:	e0bfff17 	ldw	r2,-4(fp)
   309ac:	10800017 	ldw	r2,0(r2)
   309b0:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   309b4:	10001426 	beq	r2,zero,30a08 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   309b8:	e0bfff17 	ldw	r2,-4(fp)
   309bc:	10800017 	ldw	r2,0(r2)
   309c0:	10800517 	ldw	r2,20(r2)
   309c4:	e0fffb17 	ldw	r3,-20(fp)
   309c8:	180d883a 	mov	r6,r3
   309cc:	e17ffc17 	ldw	r5,-16(fp)
   309d0:	e13fff17 	ldw	r4,-4(fp)
   309d4:	103ee83a 	callr	r2
   309d8:	e0bffe15 	stw	r2,-8(fp)
   309dc:	e0bffe17 	ldw	r2,-8(fp)
   309e0:	1000070e 	bge	r2,zero,30a00 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   309e4:	00309000 	call	30900 <alt_get_errno>
   309e8:	1007883a 	mov	r3,r2
   309ec:	e0bffe17 	ldw	r2,-8(fp)
   309f0:	0085c83a 	sub	r2,zero,r2
   309f4:	18800015 	stw	r2,0(r3)
          return -1;
   309f8:	00bfffc4 	movi	r2,-1
   309fc:	00000c06 	br	30a30 <read+0xf4>
        }
        return rval;
   30a00:	e0bffe17 	ldw	r2,-8(fp)
   30a04:	00000a06 	br	30a30 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   30a08:	00309000 	call	30900 <alt_get_errno>
   30a0c:	1007883a 	mov	r3,r2
   30a10:	00800344 	movi	r2,13
   30a14:	18800015 	stw	r2,0(r3)
   30a18:	00000406 	br	30a2c <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   30a1c:	00309000 	call	30900 <alt_get_errno>
   30a20:	1007883a 	mov	r3,r2
   30a24:	00801444 	movi	r2,81
   30a28:	18800015 	stw	r2,0(r3)
  }
  return -1;
   30a2c:	00bfffc4 	movi	r2,-1
}
   30a30:	e037883a 	mov	sp,fp
   30a34:	dfc00117 	ldw	ra,4(sp)
   30a38:	df000017 	ldw	fp,0(sp)
   30a3c:	dec00204 	addi	sp,sp,8
   30a40:	f800283a 	ret

00030a44 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   30a44:	defffe04 	addi	sp,sp,-8
   30a48:	df000115 	stw	fp,4(sp)
   30a4c:	df000104 	addi	fp,sp,4
   30a50:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   30a54:	e0bfff17 	ldw	r2,-4(fp)
   30a58:	108000d0 	cmplti	r2,r2,3
   30a5c:	1000101e 	bne	r2,zero,30aa0 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   30a60:	e0ffff17 	ldw	r3,-4(fp)
   30a64:	1805883a 	mov	r2,r3
   30a68:	1085883a 	add	r2,r2,r2
   30a6c:	10c5883a 	add	r2,r2,r3
   30a70:	100490ba 	slli	r2,r2,2
   30a74:	00c000f4 	movhi	r3,3
   30a78:	10c7883a 	add	r3,r2,r3
   30a7c:	18103515 	stw	zero,16596(r3)
    alt_fd_list[fd].dev      = 0;
   30a80:	e0ffff17 	ldw	r3,-4(fp)
   30a84:	1805883a 	mov	r2,r3
   30a88:	1085883a 	add	r2,r2,r2
   30a8c:	10c5883a 	add	r2,r2,r3
   30a90:	100490ba 	slli	r2,r2,2
   30a94:	00c000f4 	movhi	r3,3
   30a98:	10c7883a 	add	r3,r2,r3
   30a9c:	18103315 	stw	zero,16588(r3)
  }
}
   30aa0:	0001883a 	nop
   30aa4:	e037883a 	mov	sp,fp
   30aa8:	df000017 	ldw	fp,0(sp)
   30aac:	dec00104 	addi	sp,sp,4
   30ab0:	f800283a 	ret

00030ab4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   30ab4:	defff904 	addi	sp,sp,-28
   30ab8:	df000615 	stw	fp,24(sp)
   30abc:	df000604 	addi	fp,sp,24
   30ac0:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   30ac4:	0005303a 	rdctl	r2,status
   30ac8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30acc:	e0fffd17 	ldw	r3,-12(fp)
   30ad0:	00bfff84 	movi	r2,-2
   30ad4:	1884703a 	and	r2,r3,r2
   30ad8:	1001703a 	wrctl	status,r2
  return context;
   30adc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   30ae0:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   30ae4:	d0a01617 	ldw	r2,-32680(gp)
   30ae8:	10c000c4 	addi	r3,r2,3
   30aec:	00bfff04 	movi	r2,-4
   30af0:	1884703a 	and	r2,r3,r2
   30af4:	d0a01615 	stw	r2,-32680(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   30af8:	d0e01617 	ldw	r3,-32680(gp)
   30afc:	e0bffa17 	ldw	r2,-24(fp)
   30b00:	1887883a 	add	r3,r3,r2
   30b04:	00800134 	movhi	r2,4
   30b08:	10800004 	addi	r2,r2,0
   30b0c:	10c0072e 	bgeu	r2,r3,30b2c <sbrk+0x78>
   30b10:	e0bfff17 	ldw	r2,-4(fp)
   30b14:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   30b18:	e0bffc17 	ldw	r2,-16(fp)
   30b1c:	1001703a 	wrctl	status,r2
}
   30b20:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   30b24:	00bfffc4 	movi	r2,-1
   30b28:	00000c06 	br	30b5c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   30b2c:	d0a01617 	ldw	r2,-32680(gp)
   30b30:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   30b34:	d0e01617 	ldw	r3,-32680(gp)
   30b38:	e0bffa17 	ldw	r2,-24(fp)
   30b3c:	1885883a 	add	r2,r3,r2
   30b40:	d0a01615 	stw	r2,-32680(gp)
   30b44:	e0bfff17 	ldw	r2,-4(fp)
   30b48:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   30b4c:	e0bffb17 	ldw	r2,-20(fp)
   30b50:	1001703a 	wrctl	status,r2
}
   30b54:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   30b58:	e0bffe17 	ldw	r2,-8(fp)
} 
   30b5c:	e037883a 	mov	sp,fp
   30b60:	df000017 	ldw	fp,0(sp)
   30b64:	dec00104 	addi	sp,sp,4
   30b68:	f800283a 	ret

00030b6c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   30b6c:	defffd04 	addi	sp,sp,-12
   30b70:	dfc00215 	stw	ra,8(sp)
   30b74:	df000115 	stw	fp,4(sp)
   30b78:	df000104 	addi	fp,sp,4
   30b7c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   30b80:	e13fff17 	ldw	r4,-4(fp)
   30b84:	00317900 	call	31790 <alt_busy_sleep>
}
   30b88:	e037883a 	mov	sp,fp
   30b8c:	dfc00117 	ldw	ra,4(sp)
   30b90:	df000017 	ldw	fp,0(sp)
   30b94:	dec00204 	addi	sp,sp,8
   30b98:	f800283a 	ret

00030b9c <alt_get_errno>:
{
   30b9c:	defffe04 	addi	sp,sp,-8
   30ba0:	dfc00115 	stw	ra,4(sp)
   30ba4:	df000015 	stw	fp,0(sp)
   30ba8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30bac:	d0a01417 	ldw	r2,-32688(gp)
   30bb0:	10000326 	beq	r2,zero,30bc0 <alt_get_errno+0x24>
   30bb4:	d0a01417 	ldw	r2,-32688(gp)
   30bb8:	103ee83a 	callr	r2
   30bbc:	00000106 	br	30bc4 <alt_get_errno+0x28>
   30bc0:	d0a35304 	addi	r2,gp,-29364
}
   30bc4:	e037883a 	mov	sp,fp
   30bc8:	dfc00117 	ldw	ra,4(sp)
   30bcc:	df000017 	ldw	fp,0(sp)
   30bd0:	dec00204 	addi	sp,sp,8
   30bd4:	f800283a 	ret

00030bd8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   30bd8:	defff904 	addi	sp,sp,-28
   30bdc:	dfc00615 	stw	ra,24(sp)
   30be0:	df000515 	stw	fp,20(sp)
   30be4:	df000504 	addi	fp,sp,20
   30be8:	e13ffd15 	stw	r4,-12(fp)
   30bec:	e17ffc15 	stw	r5,-16(fp)
   30bf0:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   30bf4:	e0bffd17 	ldw	r2,-12(fp)
   30bf8:	10000916 	blt	r2,zero,30c20 <write+0x48>
   30bfc:	e0fffd17 	ldw	r3,-12(fp)
   30c00:	1805883a 	mov	r2,r3
   30c04:	1085883a 	add	r2,r2,r2
   30c08:	10c5883a 	add	r2,r2,r3
   30c0c:	100490ba 	slli	r2,r2,2
   30c10:	00c000f4 	movhi	r3,3
   30c14:	18d03304 	addi	r3,r3,16588
   30c18:	10c5883a 	add	r2,r2,r3
   30c1c:	00000106 	br	30c24 <write+0x4c>
   30c20:	0005883a 	mov	r2,zero
   30c24:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   30c28:	e0bfff17 	ldw	r2,-4(fp)
   30c2c:	10002126 	beq	r2,zero,30cb4 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   30c30:	e0bfff17 	ldw	r2,-4(fp)
   30c34:	10800217 	ldw	r2,8(r2)
   30c38:	108000cc 	andi	r2,r2,3
   30c3c:	10001826 	beq	r2,zero,30ca0 <write+0xc8>
   30c40:	e0bfff17 	ldw	r2,-4(fp)
   30c44:	10800017 	ldw	r2,0(r2)
   30c48:	10800617 	ldw	r2,24(r2)
   30c4c:	10001426 	beq	r2,zero,30ca0 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   30c50:	e0bfff17 	ldw	r2,-4(fp)
   30c54:	10800017 	ldw	r2,0(r2)
   30c58:	10800617 	ldw	r2,24(r2)
   30c5c:	e0fffb17 	ldw	r3,-20(fp)
   30c60:	180d883a 	mov	r6,r3
   30c64:	e17ffc17 	ldw	r5,-16(fp)
   30c68:	e13fff17 	ldw	r4,-4(fp)
   30c6c:	103ee83a 	callr	r2
   30c70:	e0bffe15 	stw	r2,-8(fp)
   30c74:	e0bffe17 	ldw	r2,-8(fp)
   30c78:	1000070e 	bge	r2,zero,30c98 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   30c7c:	0030b9c0 	call	30b9c <alt_get_errno>
   30c80:	1007883a 	mov	r3,r2
   30c84:	e0bffe17 	ldw	r2,-8(fp)
   30c88:	0085c83a 	sub	r2,zero,r2
   30c8c:	18800015 	stw	r2,0(r3)
        return -1;
   30c90:	00bfffc4 	movi	r2,-1
   30c94:	00000c06 	br	30cc8 <write+0xf0>
      }
      return rval;
   30c98:	e0bffe17 	ldw	r2,-8(fp)
   30c9c:	00000a06 	br	30cc8 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   30ca0:	0030b9c0 	call	30b9c <alt_get_errno>
   30ca4:	1007883a 	mov	r3,r2
   30ca8:	00800344 	movi	r2,13
   30cac:	18800015 	stw	r2,0(r3)
   30cb0:	00000406 	br	30cc4 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   30cb4:	0030b9c0 	call	30b9c <alt_get_errno>
   30cb8:	1007883a 	mov	r3,r2
   30cbc:	00801444 	movi	r2,81
   30cc0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   30cc4:	00bfffc4 	movi	r2,-1
}
   30cc8:	e037883a 	mov	sp,fp
   30ccc:	dfc00117 	ldw	ra,4(sp)
   30cd0:	df000017 	ldw	fp,0(sp)
   30cd4:	dec00204 	addi	sp,sp,8
   30cd8:	f800283a 	ret

00030cdc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   30cdc:	defffd04 	addi	sp,sp,-12
   30ce0:	dfc00215 	stw	ra,8(sp)
   30ce4:	df000115 	stw	fp,4(sp)
   30ce8:	df000104 	addi	fp,sp,4
   30cec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   30cf0:	d1601104 	addi	r5,gp,-32700
   30cf4:	e13fff17 	ldw	r4,-4(fp)
   30cf8:	00319440 	call	31944 <alt_dev_llist_insert>
}
   30cfc:	e037883a 	mov	sp,fp
   30d00:	dfc00117 	ldw	ra,4(sp)
   30d04:	df000017 	ldw	fp,0(sp)
   30d08:	dec00204 	addi	sp,sp,8
   30d0c:	f800283a 	ret

00030d10 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   30d10:	defffd04 	addi	sp,sp,-12
   30d14:	dfc00215 	stw	ra,8(sp)
   30d18:	df000115 	stw	fp,4(sp)
   30d1c:	df000104 	addi	fp,sp,4
   30d20:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   30d24:	00320e00 	call	320e0 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   30d28:	00800044 	movi	r2,1
   30d2c:	1001703a 	wrctl	status,r2
}
   30d30:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   30d34:	0001883a 	nop
   30d38:	e037883a 	mov	sp,fp
   30d3c:	dfc00117 	ldw	ra,4(sp)
   30d40:	df000017 	ldw	fp,0(sp)
   30d44:	dec00204 	addi	sp,sp,8
   30d48:	f800283a 	ret

00030d4c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   30d4c:	defffe04 	addi	sp,sp,-8
   30d50:	dfc00115 	stw	ra,4(sp)
   30d54:	df000015 	stw	fp,0(sp)
   30d58:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   30d5c:	01c0fa04 	movi	r7,1000
   30d60:	000d883a 	mov	r6,zero
   30d64:	000b883a 	mov	r5,zero
   30d68:	01000134 	movhi	r4,4
   30d6c:	21046804 	addi	r4,r4,4512
   30d70:	0030e280 	call	30e28 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   30d74:	018000c4 	movi	r6,3
   30d78:	000b883a 	mov	r5,zero
   30d7c:	010000f4 	movhi	r4,3
   30d80:	21109d04 	addi	r4,r4,17012
   30d84:	0030fbc0 	call	30fbc <altera_avalon_uart_init>
   30d88:	010000f4 	movhi	r4,3
   30d8c:	21109304 	addi	r4,r4,16972
   30d90:	0030cdc0 	call	30cdc <alt_dev_reg>
}
   30d94:	0001883a 	nop
   30d98:	e037883a 	mov	sp,fp
   30d9c:	dfc00117 	ldw	ra,4(sp)
   30da0:	df000017 	ldw	fp,0(sp)
   30da4:	dec00204 	addi	sp,sp,8
   30da8:	f800283a 	ret

00030dac <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   30dac:	defffa04 	addi	sp,sp,-24
   30db0:	dfc00515 	stw	ra,20(sp)
   30db4:	df000415 	stw	fp,16(sp)
   30db8:	df000404 	addi	fp,sp,16
   30dbc:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   30dc0:	0007883a 	mov	r3,zero
   30dc4:	e0bffc17 	ldw	r2,-16(fp)
   30dc8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   30dcc:	e0bffc17 	ldw	r2,-16(fp)
   30dd0:	10800104 	addi	r2,r2,4
   30dd4:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   30dd8:	0005303a 	rdctl	r2,status
   30ddc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30de0:	e0fffd17 	ldw	r3,-12(fp)
   30de4:	00bfff84 	movi	r2,-2
   30de8:	1884703a 	and	r2,r3,r2
   30dec:	1001703a 	wrctl	status,r2
  return context;
   30df0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   30df4:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   30df8:	0031fd80 	call	31fd8 <alt_tick>
   30dfc:	e0bfff17 	ldw	r2,-4(fp)
   30e00:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   30e04:	e0bffe17 	ldw	r2,-8(fp)
   30e08:	1001703a 	wrctl	status,r2
}
   30e0c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   30e10:	0001883a 	nop
   30e14:	e037883a 	mov	sp,fp
   30e18:	dfc00117 	ldw	ra,4(sp)
   30e1c:	df000017 	ldw	fp,0(sp)
   30e20:	dec00204 	addi	sp,sp,8
   30e24:	f800283a 	ret

00030e28 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   30e28:	defff804 	addi	sp,sp,-32
   30e2c:	dfc00715 	stw	ra,28(sp)
   30e30:	df000615 	stw	fp,24(sp)
   30e34:	df000604 	addi	fp,sp,24
   30e38:	e13ffe15 	stw	r4,-8(fp)
   30e3c:	e17ffd15 	stw	r5,-12(fp)
   30e40:	e1bffc15 	stw	r6,-16(fp)
   30e44:	e1fffb15 	stw	r7,-20(fp)
   30e48:	e0bffb17 	ldw	r2,-20(fp)
   30e4c:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   30e50:	d0a35a17 	ldw	r2,-29336(gp)
   30e54:	1000031e 	bne	r2,zero,30e64 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   30e58:	e0bfff17 	ldw	r2,-4(fp)
   30e5c:	d0a35a15 	stw	r2,-29336(gp)
    return 0;
   30e60:	00000106 	br	30e68 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   30e64:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   30e68:	e0bffe17 	ldw	r2,-8(fp)
   30e6c:	10800104 	addi	r2,r2,4
   30e70:	00c001c4 	movi	r3,7
   30e74:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   30e78:	d8000015 	stw	zero,0(sp)
   30e7c:	e1fffe17 	ldw	r7,-8(fp)
   30e80:	018000f4 	movhi	r6,3
   30e84:	31836b04 	addi	r6,r6,3500
   30e88:	e17ffc17 	ldw	r5,-16(fp)
   30e8c:	e13ffd17 	ldw	r4,-12(fp)
   30e90:	00301480 	call	30148 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   30e94:	0001883a 	nop
   30e98:	e037883a 	mov	sp,fp
   30e9c:	dfc00117 	ldw	ra,4(sp)
   30ea0:	df000017 	ldw	fp,0(sp)
   30ea4:	dec00204 	addi	sp,sp,8
   30ea8:	f800283a 	ret

00030eac <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   30eac:	defffa04 	addi	sp,sp,-24
   30eb0:	dfc00515 	stw	ra,20(sp)
   30eb4:	df000415 	stw	fp,16(sp)
   30eb8:	df000404 	addi	fp,sp,16
   30ebc:	e13ffe15 	stw	r4,-8(fp)
   30ec0:	e17ffd15 	stw	r5,-12(fp)
   30ec4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   30ec8:	e0bffe17 	ldw	r2,-8(fp)
   30ecc:	10800017 	ldw	r2,0(r2)
   30ed0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   30ed4:	e0bfff17 	ldw	r2,-4(fp)
   30ed8:	10c00a04 	addi	r3,r2,40
   30edc:	e0bffe17 	ldw	r2,-8(fp)
   30ee0:	10800217 	ldw	r2,8(r2)
   30ee4:	100f883a 	mov	r7,r2
   30ee8:	e1bffc17 	ldw	r6,-16(fp)
   30eec:	e17ffd17 	ldw	r5,-12(fp)
   30ef0:	1809883a 	mov	r4,r3
   30ef4:	00313b80 	call	313b8 <altera_avalon_uart_read>
      fd->fd_flags);
}
   30ef8:	e037883a 	mov	sp,fp
   30efc:	dfc00117 	ldw	ra,4(sp)
   30f00:	df000017 	ldw	fp,0(sp)
   30f04:	dec00204 	addi	sp,sp,8
   30f08:	f800283a 	ret

00030f0c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   30f0c:	defffa04 	addi	sp,sp,-24
   30f10:	dfc00515 	stw	ra,20(sp)
   30f14:	df000415 	stw	fp,16(sp)
   30f18:	df000404 	addi	fp,sp,16
   30f1c:	e13ffe15 	stw	r4,-8(fp)
   30f20:	e17ffd15 	stw	r5,-12(fp)
   30f24:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   30f28:	e0bffe17 	ldw	r2,-8(fp)
   30f2c:	10800017 	ldw	r2,0(r2)
   30f30:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   30f34:	e0bfff17 	ldw	r2,-4(fp)
   30f38:	10c00a04 	addi	r3,r2,40
   30f3c:	e0bffe17 	ldw	r2,-8(fp)
   30f40:	10800217 	ldw	r2,8(r2)
   30f44:	100f883a 	mov	r7,r2
   30f48:	e1bffc17 	ldw	r6,-16(fp)
   30f4c:	e17ffd17 	ldw	r5,-12(fp)
   30f50:	1809883a 	mov	r4,r3
   30f54:	00315dc0 	call	315dc <altera_avalon_uart_write>
      fd->fd_flags);
}
   30f58:	e037883a 	mov	sp,fp
   30f5c:	dfc00117 	ldw	ra,4(sp)
   30f60:	df000017 	ldw	fp,0(sp)
   30f64:	dec00204 	addi	sp,sp,8
   30f68:	f800283a 	ret

00030f6c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   30f6c:	defffc04 	addi	sp,sp,-16
   30f70:	dfc00315 	stw	ra,12(sp)
   30f74:	df000215 	stw	fp,8(sp)
   30f78:	df000204 	addi	fp,sp,8
   30f7c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   30f80:	e0bffe17 	ldw	r2,-8(fp)
   30f84:	10800017 	ldw	r2,0(r2)
   30f88:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   30f8c:	e0bfff17 	ldw	r2,-4(fp)
   30f90:	10c00a04 	addi	r3,r2,40
   30f94:	e0bffe17 	ldw	r2,-8(fp)
   30f98:	10800217 	ldw	r2,8(r2)
   30f9c:	100b883a 	mov	r5,r2
   30fa0:	1809883a 	mov	r4,r3
   30fa4:	00313280 	call	31328 <altera_avalon_uart_close>
}
   30fa8:	e037883a 	mov	sp,fp
   30fac:	dfc00117 	ldw	ra,4(sp)
   30fb0:	df000017 	ldw	fp,0(sp)
   30fb4:	dec00204 	addi	sp,sp,8
   30fb8:	f800283a 	ret

00030fbc <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   30fbc:	defff804 	addi	sp,sp,-32
   30fc0:	dfc00715 	stw	ra,28(sp)
   30fc4:	df000615 	stw	fp,24(sp)
   30fc8:	df000604 	addi	fp,sp,24
   30fcc:	e13ffd15 	stw	r4,-12(fp)
   30fd0:	e17ffc15 	stw	r5,-16(fp)
   30fd4:	e1bffb15 	stw	r6,-20(fp)
  void* base = sp->base;
   30fd8:	e0bffd17 	ldw	r2,-12(fp)
   30fdc:	10800017 	ldw	r2,0(r2)
   30fe0:	e0bfff15 	stw	r2,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   30fe4:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   30fe8:	1000041e 	bne	r2,zero,30ffc <altera_avalon_uart_init+0x40>
   30fec:	0005883a 	mov	r2,zero
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   30ff0:	1000021e 	bne	r2,zero,30ffc <altera_avalon_uart_init+0x40>
   30ff4:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   30ff8:	10000226 	beq	r2,zero,31004 <altera_avalon_uart_init+0x48>
   30ffc:	00800044 	movi	r2,1
   31000:	00000106 	br	31008 <altera_avalon_uart_init+0x4c>
   31004:	0005883a 	mov	r2,zero
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   31008:	e0bffe15 	stw	r2,-8(fp)
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   3100c:	e0bffe17 	ldw	r2,-8(fp)
   31010:	10000f1e 	bne	r2,zero,31050 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   31014:	e0bffd17 	ldw	r2,-12(fp)
   31018:	00c32004 	movi	r3,3200
   3101c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   31020:	e0bfff17 	ldw	r2,-4(fp)
   31024:	10800304 	addi	r2,r2,12
   31028:	e0fffd17 	ldw	r3,-12(fp)
   3102c:	18c00117 	ldw	r3,4(r3)
   31030:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   31034:	d8000015 	stw	zero,0(sp)
   31038:	e1fffd17 	ldw	r7,-12(fp)
   3103c:	018000f4 	movhi	r6,3
   31040:	31841a04 	addi	r6,r6,4200
   31044:	e17ffb17 	ldw	r5,-20(fp)
   31048:	e13ffc17 	ldw	r4,-16(fp)
   3104c:	00301480 	call	30148 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   31050:	0001883a 	nop
   31054:	e037883a 	mov	sp,fp
   31058:	dfc00117 	ldw	ra,4(sp)
   3105c:	df000017 	ldw	fp,0(sp)
   31060:	dec00204 	addi	sp,sp,8
   31064:	f800283a 	ret

00031068 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   31068:	defffa04 	addi	sp,sp,-24
   3106c:	dfc00515 	stw	ra,20(sp)
   31070:	df000415 	stw	fp,16(sp)
   31074:	df000404 	addi	fp,sp,16
   31078:	e13ffc15 	stw	r4,-16(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   3107c:	e0bffc17 	ldw	r2,-16(fp)
   31080:	e0bfff15 	stw	r2,-4(fp)
  void* base               = sp->base;
   31084:	e0bfff17 	ldw	r2,-4(fp)
   31088:	10800017 	ldw	r2,0(r2)
   3108c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   31090:	e0bffe17 	ldw	r2,-8(fp)
   31094:	10800204 	addi	r2,r2,8
   31098:	10800037 	ldwio	r2,0(r2)
   3109c:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   310a0:	e0bffe17 	ldw	r2,-8(fp)
   310a4:	10800204 	addi	r2,r2,8
   310a8:	0007883a 	mov	r3,zero
   310ac:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   310b0:	e0bffe17 	ldw	r2,-8(fp)
   310b4:	10800204 	addi	r2,r2,8
   310b8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   310bc:	e0bffd17 	ldw	r2,-12(fp)
   310c0:	1080200c 	andi	r2,r2,128
   310c4:	10000326 	beq	r2,zero,310d4 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   310c8:	e17ffd17 	ldw	r5,-12(fp)
   310cc:	e13fff17 	ldw	r4,-4(fp)
   310d0:	00311040 	call	31104 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   310d4:	e0bffd17 	ldw	r2,-12(fp)
   310d8:	1081100c 	andi	r2,r2,1088
   310dc:	10000326 	beq	r2,zero,310ec <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   310e0:	e17ffd17 	ldw	r5,-12(fp)
   310e4:	e13fff17 	ldw	r4,-4(fp)
   310e8:	00311e40 	call	311e4 <altera_avalon_uart_txirq>
  }
  

}
   310ec:	0001883a 	nop
   310f0:	e037883a 	mov	sp,fp
   310f4:	dfc00117 	ldw	ra,4(sp)
   310f8:	df000017 	ldw	fp,0(sp)
   310fc:	dec00204 	addi	sp,sp,8
   31100:	f800283a 	ret

00031104 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   31104:	defffc04 	addi	sp,sp,-16
   31108:	df000315 	stw	fp,12(sp)
   3110c:	df000304 	addi	fp,sp,12
   31110:	e13ffe15 	stw	r4,-8(fp)
   31114:	e17ffd15 	stw	r5,-12(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   31118:	e0bffd17 	ldw	r2,-12(fp)
   3111c:	108000cc 	andi	r2,r2,3
   31120:	10002b1e 	bne	r2,zero,311d0 <altera_avalon_uart_rxirq+0xcc>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   31124:	e0bffe17 	ldw	r2,-8(fp)
   31128:	10800317 	ldw	r2,12(r2)
   3112c:	e0bffe17 	ldw	r2,-8(fp)
   31130:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   31134:	e0bffe17 	ldw	r2,-8(fp)
   31138:	10800317 	ldw	r2,12(r2)
   3113c:	10800044 	addi	r2,r2,1
   31140:	10800fcc 	andi	r2,r2,63
   31144:	e0bfff15 	stw	r2,-4(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   31148:	e0bffe17 	ldw	r2,-8(fp)
   3114c:	10800017 	ldw	r2,0(r2)
   31150:	10c00037 	ldwio	r3,0(r2)
   31154:	e0bffe17 	ldw	r2,-8(fp)
   31158:	10800317 	ldw	r2,12(r2)
   3115c:	1809883a 	mov	r4,r3
   31160:	e0fffe17 	ldw	r3,-8(fp)
   31164:	1885883a 	add	r2,r3,r2
   31168:	11000705 	stb	r4,28(r2)

  sp->rx_end = next;
   3116c:	e0bffe17 	ldw	r2,-8(fp)
   31170:	e0ffff17 	ldw	r3,-4(fp)
   31174:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   31178:	e0bffe17 	ldw	r2,-8(fp)
   3117c:	10800317 	ldw	r2,12(r2)
   31180:	10800044 	addi	r2,r2,1
   31184:	10800fcc 	andi	r2,r2,63
   31188:	e0bfff15 	stw	r2,-4(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   3118c:	e0bffe17 	ldw	r2,-8(fp)
   31190:	10800217 	ldw	r2,8(r2)
   31194:	e0ffff17 	ldw	r3,-4(fp)
   31198:	18800e1e 	bne	r3,r2,311d4 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   3119c:	e0bffe17 	ldw	r2,-8(fp)
   311a0:	10c00117 	ldw	r3,4(r2)
   311a4:	00bfdfc4 	movi	r2,-129
   311a8:	1886703a 	and	r3,r3,r2
   311ac:	e0bffe17 	ldw	r2,-8(fp)
   311b0:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   311b4:	e0bffe17 	ldw	r2,-8(fp)
   311b8:	10800017 	ldw	r2,0(r2)
   311bc:	10800304 	addi	r2,r2,12
   311c0:	e0fffe17 	ldw	r3,-8(fp)
   311c4:	18c00117 	ldw	r3,4(r3)
   311c8:	10c00035 	stwio	r3,0(r2)
   311cc:	00000106 	br	311d4 <altera_avalon_uart_rxirq+0xd0>
    return;
   311d0:	0001883a 	nop
  }   
}
   311d4:	e037883a 	mov	sp,fp
   311d8:	df000017 	ldw	fp,0(sp)
   311dc:	dec00104 	addi	sp,sp,4
   311e0:	f800283a 	ret

000311e4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   311e4:	defffd04 	addi	sp,sp,-12
   311e8:	df000215 	stw	fp,8(sp)
   311ec:	df000204 	addi	fp,sp,8
   311f0:	e13fff15 	stw	r4,-4(fp)
   311f4:	e17ffe15 	stw	r5,-8(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   311f8:	e0bfff17 	ldw	r2,-4(fp)
   311fc:	10c00417 	ldw	r3,16(r2)
   31200:	e0bfff17 	ldw	r2,-4(fp)
   31204:	10800517 	ldw	r2,20(r2)
   31208:	18803126 	beq	r3,r2,312d0 <altera_avalon_uart_txirq+0xec>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   3120c:	e0bfff17 	ldw	r2,-4(fp)
   31210:	10800617 	ldw	r2,24(r2)
   31214:	1080008c 	andi	r2,r2,2
   31218:	10000326 	beq	r2,zero,31228 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   3121c:	e0bffe17 	ldw	r2,-8(fp)
   31220:	1082000c 	andi	r2,r2,2048
    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   31224:	10001c26 	beq	r2,zero,31298 <altera_avalon_uart_txirq+0xb4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   31228:	e0bfff17 	ldw	r2,-4(fp)
   3122c:	10800417 	ldw	r2,16(r2)
   31230:	e0bfff17 	ldw	r2,-4(fp)
   31234:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   31238:	e0bfff17 	ldw	r2,-4(fp)
   3123c:	10800017 	ldw	r2,0(r2)
   31240:	10800104 	addi	r2,r2,4
   31244:	e0ffff17 	ldw	r3,-4(fp)
   31248:	18c00417 	ldw	r3,16(r3)
   3124c:	e13fff17 	ldw	r4,-4(fp)
   31250:	20c7883a 	add	r3,r4,r3
   31254:	18c01703 	ldbu	r3,92(r3)
   31258:	18c03fcc 	andi	r3,r3,255
   3125c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   31260:	e0bfff17 	ldw	r2,-4(fp)
   31264:	10800417 	ldw	r2,16(r2)
   31268:	10800044 	addi	r2,r2,1
   3126c:	e0ffff17 	ldw	r3,-4(fp)
   31270:	18800415 	stw	r2,16(r3)
   31274:	10c00fcc 	andi	r3,r2,63
   31278:	e0bfff17 	ldw	r2,-4(fp)
   3127c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   31280:	e0bfff17 	ldw	r2,-4(fp)
   31284:	10800117 	ldw	r2,4(r2)
   31288:	10c01014 	ori	r3,r2,64
   3128c:	e0bfff17 	ldw	r2,-4(fp)
   31290:	10c00115 	stw	r3,4(r2)
   31294:	00000e06 	br	312d0 <altera_avalon_uart_txirq+0xec>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   31298:	e0bfff17 	ldw	r2,-4(fp)
   3129c:	10800017 	ldw	r2,0(r2)
   312a0:	10800204 	addi	r2,r2,8
   312a4:	10800037 	ldwio	r2,0(r2)
   312a8:	e0bffe15 	stw	r2,-8(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   312ac:	e0bffe17 	ldw	r2,-8(fp)
   312b0:	1082000c 	andi	r2,r2,2048
   312b4:	1000061e 	bne	r2,zero,312d0 <altera_avalon_uart_txirq+0xec>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   312b8:	e0bfff17 	ldw	r2,-4(fp)
   312bc:	10c00117 	ldw	r3,4(r2)
   312c0:	00bfefc4 	movi	r2,-65
   312c4:	1886703a 	and	r3,r3,r2
   312c8:	e0bfff17 	ldw	r2,-4(fp)
   312cc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   312d0:	e0bfff17 	ldw	r2,-4(fp)
   312d4:	10c00417 	ldw	r3,16(r2)
   312d8:	e0bfff17 	ldw	r2,-4(fp)
   312dc:	10800517 	ldw	r2,20(r2)
   312e0:	1880061e 	bne	r3,r2,312fc <altera_avalon_uart_txirq+0x118>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   312e4:	e0bfff17 	ldw	r2,-4(fp)
   312e8:	10c00117 	ldw	r3,4(r2)
   312ec:	00beefc4 	movi	r2,-1089
   312f0:	1886703a 	and	r3,r3,r2
   312f4:	e0bfff17 	ldw	r2,-4(fp)
   312f8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   312fc:	e0bfff17 	ldw	r2,-4(fp)
   31300:	10800017 	ldw	r2,0(r2)
   31304:	10800304 	addi	r2,r2,12
   31308:	e0ffff17 	ldw	r3,-4(fp)
   3130c:	18c00117 	ldw	r3,4(r3)
   31310:	10c00035 	stwio	r3,0(r2)
}
   31314:	0001883a 	nop
   31318:	e037883a 	mov	sp,fp
   3131c:	df000017 	ldw	fp,0(sp)
   31320:	dec00104 	addi	sp,sp,4
   31324:	f800283a 	ret

00031328 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   31328:	defffd04 	addi	sp,sp,-12
   3132c:	df000215 	stw	fp,8(sp)
   31330:	df000204 	addi	fp,sp,8
   31334:	e13fff15 	stw	r4,-4(fp)
   31338:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   3133c:	00000506 	br	31354 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   31340:	e0bffe17 	ldw	r2,-8(fp)
   31344:	1090000c 	andi	r2,r2,16384
   31348:	10000226 	beq	r2,zero,31354 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   3134c:	00bffd44 	movi	r2,-11
   31350:	00000606 	br	3136c <altera_avalon_uart_close+0x44>
  while (sp->tx_start != sp->tx_end) {
   31354:	e0bfff17 	ldw	r2,-4(fp)
   31358:	10c00417 	ldw	r3,16(r2)
   3135c:	e0bfff17 	ldw	r2,-4(fp)
   31360:	10800517 	ldw	r2,20(r2)
   31364:	18bff61e 	bne	r3,r2,31340 <altera_avalon_uart_close+0x18>
    }
  }

  return 0;
   31368:	0005883a 	mov	r2,zero
}
   3136c:	e037883a 	mov	sp,fp
   31370:	df000017 	ldw	fp,0(sp)
   31374:	dec00104 	addi	sp,sp,4
   31378:	f800283a 	ret

0003137c <alt_get_errno>:
{
   3137c:	defffe04 	addi	sp,sp,-8
   31380:	dfc00115 	stw	ra,4(sp)
   31384:	df000015 	stw	fp,0(sp)
   31388:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3138c:	d0a01417 	ldw	r2,-32688(gp)
   31390:	10000326 	beq	r2,zero,313a0 <alt_get_errno+0x24>
   31394:	d0a01417 	ldw	r2,-32688(gp)
   31398:	103ee83a 	callr	r2
   3139c:	00000106 	br	313a4 <alt_get_errno+0x28>
   313a0:	d0a35304 	addi	r2,gp,-29364
}
   313a4:	e037883a 	mov	sp,fp
   313a8:	dfc00117 	ldw	ra,4(sp)
   313ac:	df000017 	ldw	fp,0(sp)
   313b0:	dec00204 	addi	sp,sp,8
   313b4:	f800283a 	ret

000313b8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   313b8:	defff204 	addi	sp,sp,-56
   313bc:	dfc00d15 	stw	ra,52(sp)
   313c0:	df000c15 	stw	fp,48(sp)
   313c4:	df000c04 	addi	fp,sp,48
   313c8:	e13ff715 	stw	r4,-36(fp)
   313cc:	e17ff615 	stw	r5,-40(fp)
   313d0:	e1bff515 	stw	r6,-44(fp)
   313d4:	e1fff415 	stw	r7,-48(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   313d8:	e03fffc5 	stb	zero,-1(fp)
  int             count = 0;
   313dc:	e03ffe15 	stw	zero,-8(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   313e0:	e0bff417 	ldw	r2,-48(fp)
   313e4:	1090000c 	andi	r2,r2,16384
   313e8:	1005003a 	cmpeq	r2,r2,zero
   313ec:	10803fcc 	andi	r2,r2,255
   313f0:	e0bffd15 	stw	r2,-12(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   313f4:	00001306 	br	31444 <altera_avalon_uart_read+0x8c>
    {
      count++;
   313f8:	e0bffe17 	ldw	r2,-8(fp)
   313fc:	10800044 	addi	r2,r2,1
   31400:	e0bffe15 	stw	r2,-8(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   31404:	e0bff717 	ldw	r2,-36(fp)
   31408:	10800217 	ldw	r2,8(r2)
   3140c:	e0fff717 	ldw	r3,-36(fp)
   31410:	1885883a 	add	r2,r3,r2
   31414:	11000703 	ldbu	r4,28(r2)
   31418:	e0bff617 	ldw	r2,-40(fp)
   3141c:	10c00044 	addi	r3,r2,1
   31420:	e0fff615 	stw	r3,-40(fp)
   31424:	2007883a 	mov	r3,r4
   31428:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   3142c:	e0bff717 	ldw	r2,-36(fp)
   31430:	10800217 	ldw	r2,8(r2)
   31434:	10800044 	addi	r2,r2,1
   31438:	10c00fcc 	andi	r3,r2,63
   3143c:	e0bff717 	ldw	r2,-36(fp)
   31440:	10c00215 	stw	r3,8(r2)
    while ((count < len) && (sp->rx_start != sp->rx_end))
   31444:	e0fffe17 	ldw	r3,-8(fp)
   31448:	e0bff517 	ldw	r2,-44(fp)
   3144c:	1880050e 	bge	r3,r2,31464 <altera_avalon_uart_read+0xac>
   31450:	e0bff717 	ldw	r2,-36(fp)
   31454:	10c00217 	ldw	r3,8(r2)
   31458:	e0bff717 	ldw	r2,-36(fp)
   3145c:	10800317 	ldw	r2,12(r2)
   31460:	18bfe51e 	bne	r3,r2,313f8 <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   31464:	e0bffe17 	ldw	r2,-8(fp)
   31468:	1000271e 	bne	r2,zero,31508 <altera_avalon_uart_read+0x150>
   3146c:	e0bff717 	ldw	r2,-36(fp)
   31470:	10c00217 	ldw	r3,8(r2)
   31474:	e0bff717 	ldw	r2,-36(fp)
   31478:	10800317 	ldw	r2,12(r2)
   3147c:	1880221e 	bne	r3,r2,31508 <altera_avalon_uart_read+0x150>
    {
      if (!block)
   31480:	e0bffd17 	ldw	r2,-12(fp)
   31484:	1000071e 	bne	r2,zero,314a4 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   31488:	003137c0 	call	3137c <alt_get_errno>
   3148c:	1007883a 	mov	r3,r2
   31490:	008002c4 	movi	r2,11
   31494:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   31498:	00800044 	movi	r2,1
   3149c:	e0bfffc5 	stb	r2,-1(fp)
        break;
   314a0:	00001d06 	br	31518 <altera_avalon_uart_read+0x160>
  NIOS2_READ_STATUS (context);
   314a4:	0005303a 	rdctl	r2,status
   314a8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   314ac:	e0fffa17 	ldw	r3,-24(fp)
   314b0:	00bfff84 	movi	r2,-2
   314b4:	1884703a 	and	r2,r3,r2
   314b8:	1001703a 	wrctl	status,r2
  return context;
   314bc:	e0bffa17 	ldw	r2,-24(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   314c0:	e0bffc15 	stw	r2,-16(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   314c4:	e0bff717 	ldw	r2,-36(fp)
   314c8:	10800117 	ldw	r2,4(r2)
   314cc:	10c02014 	ori	r3,r2,128
   314d0:	e0bff717 	ldw	r2,-36(fp)
   314d4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   314d8:	e0bff717 	ldw	r2,-36(fp)
   314dc:	10800017 	ldw	r2,0(r2)
   314e0:	10800304 	addi	r2,r2,12
   314e4:	e0fff717 	ldw	r3,-36(fp)
   314e8:	18c00117 	ldw	r3,4(r3)
   314ec:	10c00035 	stwio	r3,0(r2)
   314f0:	e0bffc17 	ldw	r2,-16(fp)
   314f4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   314f8:	e0bffb17 	ldw	r2,-20(fp)
   314fc:	1001703a 	wrctl	status,r2
}
   31500:	0001883a 	nop
   31504:	0001883a 	nop
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   31508:	e0bffe17 	ldw	r2,-8(fp)
   3150c:	1000021e 	bne	r2,zero,31518 <altera_avalon_uart_read+0x160>
   31510:	e0bff517 	ldw	r2,-44(fp)
   31514:	103fcb1e 	bne	r2,zero,31444 <altera_avalon_uart_read+0x8c>
  NIOS2_READ_STATUS (context);
   31518:	0005303a 	rdctl	r2,status
   3151c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31520:	e0fff817 	ldw	r3,-32(fp)
   31524:	00bfff84 	movi	r2,-2
   31528:	1884703a 	and	r2,r3,r2
   3152c:	1001703a 	wrctl	status,r2
  return context;
   31530:	e0bff817 	ldw	r2,-32(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   31534:	e0bffc15 	stw	r2,-16(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   31538:	e0bff717 	ldw	r2,-36(fp)
   3153c:	10800117 	ldw	r2,4(r2)
   31540:	10c02014 	ori	r3,r2,128
   31544:	e0bff717 	ldw	r2,-36(fp)
   31548:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   3154c:	e0bff717 	ldw	r2,-36(fp)
   31550:	10800017 	ldw	r2,0(r2)
   31554:	10800304 	addi	r2,r2,12
   31558:	e0fff717 	ldw	r3,-36(fp)
   3155c:	18c00117 	ldw	r3,4(r3)
   31560:	10c00035 	stwio	r3,0(r2)
   31564:	e0bffc17 	ldw	r2,-16(fp)
   31568:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   3156c:	e0bff917 	ldw	r2,-28(fp)
   31570:	1001703a 	wrctl	status,r2
}
   31574:	0001883a 	nop
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   31578:	e0bfffc3 	ldbu	r2,-1(fp)
   3157c:	10000226 	beq	r2,zero,31588 <altera_avalon_uart_read+0x1d0>
    return -EWOULDBLOCK;
   31580:	00bffd44 	movi	r2,-11
   31584:	00000106 	br	3158c <altera_avalon_uart_read+0x1d4>
  }
  else {
    return count;
   31588:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   3158c:	e037883a 	mov	sp,fp
   31590:	dfc00117 	ldw	ra,4(sp)
   31594:	df000017 	ldw	fp,0(sp)
   31598:	dec00204 	addi	sp,sp,8
   3159c:	f800283a 	ret

000315a0 <alt_get_errno>:
{
   315a0:	defffe04 	addi	sp,sp,-8
   315a4:	dfc00115 	stw	ra,4(sp)
   315a8:	df000015 	stw	fp,0(sp)
   315ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   315b0:	d0a01417 	ldw	r2,-32688(gp)
   315b4:	10000326 	beq	r2,zero,315c4 <alt_get_errno+0x24>
   315b8:	d0a01417 	ldw	r2,-32688(gp)
   315bc:	103ee83a 	callr	r2
   315c0:	00000106 	br	315c8 <alt_get_errno+0x28>
   315c4:	d0a35304 	addi	r2,gp,-29364
}
   315c8:	e037883a 	mov	sp,fp
   315cc:	dfc00117 	ldw	ra,4(sp)
   315d0:	df000017 	ldw	fp,0(sp)
   315d4:	dec00204 	addi	sp,sp,8
   315d8:	f800283a 	ret

000315dc <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   315dc:	defff204 	addi	sp,sp,-56
   315e0:	dfc00d15 	stw	ra,52(sp)
   315e4:	df000c15 	stw	fp,48(sp)
   315e8:	df000c04 	addi	fp,sp,48
   315ec:	e13ff715 	stw	r4,-36(fp)
   315f0:	e17ff615 	stw	r5,-40(fp)
   315f4:	e1bff515 	stw	r6,-44(fp)
   315f8:	e1fff415 	stw	r7,-48(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   315fc:	e0bff517 	ldw	r2,-44(fp)
   31600:	e0bfff15 	stw	r2,-4(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   31604:	e0bff417 	ldw	r2,-48(fp)
   31608:	1090000c 	andi	r2,r2,16384
   3160c:	e0bffe15 	stw	r2,-8(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   31610:	00003d06 	br	31708 <altera_avalon_uart_write+0x12c>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   31614:	e0bff717 	ldw	r2,-36(fp)
   31618:	10800517 	ldw	r2,20(r2)
   3161c:	10800044 	addi	r2,r2,1
   31620:	10800fcc 	andi	r2,r2,63
   31624:	e0bffd15 	stw	r2,-12(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   31628:	e0bff717 	ldw	r2,-36(fp)
   3162c:	10800417 	ldw	r2,16(r2)
   31630:	e0fffd17 	ldw	r3,-12(fp)
   31634:	1880241e 	bne	r3,r2,316c8 <altera_avalon_uart_write+0xec>
    {
      if (no_block)
   31638:	e0bffe17 	ldw	r2,-8(fp)
   3163c:	10000526 	beq	r2,zero,31654 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   31640:	00315a00 	call	315a0 <alt_get_errno>
   31644:	1007883a 	mov	r3,r2
   31648:	008002c4 	movi	r2,11
   3164c:	18800015 	stw	r2,0(r3)
        break;
   31650:	00002f06 	br	31710 <altera_avalon_uart_write+0x134>
  NIOS2_READ_STATUS (context);
   31654:	0005303a 	rdctl	r2,status
   31658:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3165c:	e0fffa17 	ldw	r3,-24(fp)
   31660:	00bfff84 	movi	r2,-2
   31664:	1884703a 	and	r2,r3,r2
   31668:	1001703a 	wrctl	status,r2
  return context;
   3166c:	e0bffa17 	ldw	r2,-24(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   31670:	e0bffc15 	stw	r2,-16(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   31674:	e0bff717 	ldw	r2,-36(fp)
   31678:	10800117 	ldw	r2,4(r2)
   3167c:	10c11014 	ori	r3,r2,1088
   31680:	e0bff717 	ldw	r2,-36(fp)
   31684:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   31688:	e0bff717 	ldw	r2,-36(fp)
   3168c:	10800017 	ldw	r2,0(r2)
   31690:	10800304 	addi	r2,r2,12
   31694:	e0fff717 	ldw	r3,-36(fp)
   31698:	18c00117 	ldw	r3,4(r3)
   3169c:	10c00035 	stwio	r3,0(r2)
   316a0:	e0bffc17 	ldw	r2,-16(fp)
   316a4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   316a8:	e0bffb17 	ldw	r2,-20(fp)
   316ac:	1001703a 	wrctl	status,r2
}
   316b0:	0001883a 	nop
   316b4:	0001883a 	nop
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   316b8:	e0bff717 	ldw	r2,-36(fp)
   316bc:	10800417 	ldw	r2,16(r2)
   316c0:	e0fffd17 	ldw	r3,-12(fp)
   316c4:	18bffb26 	beq	r3,r2,316b4 <altera_avalon_uart_write+0xd8>
      }
    }

    count--;
   316c8:	e0bfff17 	ldw	r2,-4(fp)
   316cc:	10bfffc4 	addi	r2,r2,-1
   316d0:	e0bfff15 	stw	r2,-4(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   316d4:	e0bff617 	ldw	r2,-40(fp)
   316d8:	10c00044 	addi	r3,r2,1
   316dc:	e0fff615 	stw	r3,-40(fp)
   316e0:	10c00003 	ldbu	r3,0(r2)
   316e4:	e0bff717 	ldw	r2,-36(fp)
   316e8:	10800517 	ldw	r2,20(r2)
   316ec:	1809883a 	mov	r4,r3
   316f0:	e0fff717 	ldw	r3,-36(fp)
   316f4:	1885883a 	add	r2,r3,r2
   316f8:	11001705 	stb	r4,92(r2)
    sp->tx_end = next;
   316fc:	e0bff717 	ldw	r2,-36(fp)
   31700:	e0fffd17 	ldw	r3,-12(fp)
   31704:	10c00515 	stw	r3,20(r2)
  while (count)
   31708:	e0bfff17 	ldw	r2,-4(fp)
   3170c:	103fc11e 	bne	r2,zero,31614 <altera_avalon_uart_write+0x38>
  NIOS2_READ_STATUS (context);
   31710:	0005303a 	rdctl	r2,status
   31714:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31718:	e0fff817 	ldw	r3,-32(fp)
   3171c:	00bfff84 	movi	r2,-2
   31720:	1884703a 	and	r2,r3,r2
   31724:	1001703a 	wrctl	status,r2
  return context;
   31728:	e0bff817 	ldw	r2,-32(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   3172c:	e0bffc15 	stw	r2,-16(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   31730:	e0bff717 	ldw	r2,-36(fp)
   31734:	10800117 	ldw	r2,4(r2)
   31738:	10c11014 	ori	r3,r2,1088
   3173c:	e0bff717 	ldw	r2,-36(fp)
   31740:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   31744:	e0bff717 	ldw	r2,-36(fp)
   31748:	10800017 	ldw	r2,0(r2)
   3174c:	10800304 	addi	r2,r2,12
   31750:	e0fff717 	ldw	r3,-36(fp)
   31754:	18c00117 	ldw	r3,4(r3)
   31758:	10c00035 	stwio	r3,0(r2)
   3175c:	e0bffc17 	ldw	r2,-16(fp)
   31760:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   31764:	e0bff917 	ldw	r2,-28(fp)
   31768:	1001703a 	wrctl	status,r2
}
   3176c:	0001883a 	nop
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   31770:	e0fff517 	ldw	r3,-44(fp)
   31774:	e0bfff17 	ldw	r2,-4(fp)
   31778:	1885c83a 	sub	r2,r3,r2
}
   3177c:	e037883a 	mov	sp,fp
   31780:	dfc00117 	ldw	ra,4(sp)
   31784:	df000017 	ldw	fp,0(sp)
   31788:	dec00204 	addi	sp,sp,8
   3178c:	f800283a 	ret

00031790 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   31790:	defffa04 	addi	sp,sp,-24
   31794:	dfc00515 	stw	ra,20(sp)
   31798:	df000415 	stw	fp,16(sp)
   3179c:	df000404 	addi	fp,sp,16
   317a0:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   317a4:	00800244 	movi	r2,9
   317a8:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   317ac:	014003f4 	movhi	r5,15
   317b0:	29509004 	addi	r5,r5,16960
   317b4:	e13ffe17 	ldw	r4,-8(fp)
   317b8:	0022c7c0 	call	22c7c <__mulsi3>
   317bc:	100b883a 	mov	r5,r2
   317c0:	0100bef4 	movhi	r4,763
   317c4:	213c2004 	addi	r4,r4,-3968
   317c8:	0022bbc0 	call	22bbc <__udivsi3>
  big_loops = us / (INT_MAX/
   317cc:	100b883a 	mov	r5,r2
   317d0:	01200034 	movhi	r4,32768
   317d4:	213fffc4 	addi	r4,r4,-1
   317d8:	0022bbc0 	call	22bbc <__udivsi3>
   317dc:	100b883a 	mov	r5,r2
   317e0:	e13ffc17 	ldw	r4,-16(fp)
   317e4:	0022bbc0 	call	22bbc <__udivsi3>
   317e8:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
   317ec:	e0bffd17 	ldw	r2,-12(fp)
   317f0:	10002a26 	beq	r2,zero,3189c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   317f4:	e03fff15 	stw	zero,-4(fp)
   317f8:	00001706 	br	31858 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   317fc:	00a00034 	movhi	r2,32768
   31800:	10bfffc4 	addi	r2,r2,-1
   31804:	10bfffc4 	addi	r2,r2,-1
   31808:	103ffe1e 	bne	r2,zero,31804 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   3180c:	014003f4 	movhi	r5,15
   31810:	29509004 	addi	r5,r5,16960
   31814:	e13ffe17 	ldw	r4,-8(fp)
   31818:	0022c7c0 	call	22c7c <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
   3181c:	100b883a 	mov	r5,r2
   31820:	0100bef4 	movhi	r4,763
   31824:	213c2004 	addi	r4,r4,-3968
   31828:	0022bbc0 	call	22bbc <__udivsi3>
   3182c:	100b883a 	mov	r5,r2
   31830:	01200034 	movhi	r4,32768
   31834:	213fffc4 	addi	r4,r4,-1
   31838:	0022bbc0 	call	22bbc <__udivsi3>
   3183c:	1007883a 	mov	r3,r2
   31840:	e0bffc17 	ldw	r2,-16(fp)
   31844:	10c5c83a 	sub	r2,r2,r3
   31848:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
   3184c:	e0bfff17 	ldw	r2,-4(fp)
   31850:	10800044 	addi	r2,r2,1
   31854:	e0bfff15 	stw	r2,-4(fp)
   31858:	e0ffff17 	ldw	r3,-4(fp)
   3185c:	e0bffd17 	ldw	r2,-12(fp)
   31860:	18bfe616 	blt	r3,r2,317fc <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   31864:	014003f4 	movhi	r5,15
   31868:	29509004 	addi	r5,r5,16960
   3186c:	e13ffe17 	ldw	r4,-8(fp)
   31870:	0022c7c0 	call	22c7c <__mulsi3>
   31874:	100b883a 	mov	r5,r2
   31878:	0100bef4 	movhi	r4,763
   3187c:	213c2004 	addi	r4,r4,-3968
   31880:	0022bbc0 	call	22bbc <__udivsi3>
   31884:	e17ffc17 	ldw	r5,-16(fp)
   31888:	1009883a 	mov	r4,r2
   3188c:	0022c7c0 	call	22c7c <__mulsi3>
    __asm__ volatile (
   31890:	10bfffc4 	addi	r2,r2,-1
   31894:	103ffe1e 	bne	r2,zero,31890 <alt_busy_sleep+0x100>
   31898:	00000d06 	br	318d0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   3189c:	014003f4 	movhi	r5,15
   318a0:	29509004 	addi	r5,r5,16960
   318a4:	e13ffe17 	ldw	r4,-8(fp)
   318a8:	0022c7c0 	call	22c7c <__mulsi3>
   318ac:	100b883a 	mov	r5,r2
   318b0:	0100bef4 	movhi	r4,763
   318b4:	213c2004 	addi	r4,r4,-3968
   318b8:	0022bbc0 	call	22bbc <__udivsi3>
   318bc:	e17ffc17 	ldw	r5,-16(fp)
   318c0:	1009883a 	mov	r4,r2
   318c4:	0022c7c0 	call	22c7c <__mulsi3>
    __asm__ volatile (
   318c8:	10bfffc4 	addi	r2,r2,-1
   318cc:	00bffe16 	blt	zero,r2,318c8 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   318d0:	0005883a 	mov	r2,zero
}
   318d4:	e037883a 	mov	sp,fp
   318d8:	dfc00117 	ldw	ra,4(sp)
   318dc:	df000017 	ldw	fp,0(sp)
   318e0:	dec00204 	addi	sp,sp,8
   318e4:	f800283a 	ret

000318e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   318e8:	deffff04 	addi	sp,sp,-4
   318ec:	df000015 	stw	fp,0(sp)
   318f0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   318f4:	0001883a 	nop
   318f8:	e037883a 	mov	sp,fp
   318fc:	df000017 	ldw	fp,0(sp)
   31900:	dec00104 	addi	sp,sp,4
   31904:	f800283a 	ret

00031908 <alt_get_errno>:
{
   31908:	defffe04 	addi	sp,sp,-8
   3190c:	dfc00115 	stw	ra,4(sp)
   31910:	df000015 	stw	fp,0(sp)
   31914:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31918:	d0a01417 	ldw	r2,-32688(gp)
   3191c:	10000326 	beq	r2,zero,3192c <alt_get_errno+0x24>
   31920:	d0a01417 	ldw	r2,-32688(gp)
   31924:	103ee83a 	callr	r2
   31928:	00000106 	br	31930 <alt_get_errno+0x28>
   3192c:	d0a35304 	addi	r2,gp,-29364
}
   31930:	e037883a 	mov	sp,fp
   31934:	dfc00117 	ldw	ra,4(sp)
   31938:	df000017 	ldw	fp,0(sp)
   3193c:	dec00204 	addi	sp,sp,8
   31940:	f800283a 	ret

00031944 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   31944:	defffa04 	addi	sp,sp,-24
   31948:	dfc00515 	stw	ra,20(sp)
   3194c:	df000415 	stw	fp,16(sp)
   31950:	df000404 	addi	fp,sp,16
   31954:	e13ffd15 	stw	r4,-12(fp)
   31958:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   3195c:	e0bffd17 	ldw	r2,-12(fp)
   31960:	10000326 	beq	r2,zero,31970 <alt_dev_llist_insert+0x2c>
   31964:	e0bffd17 	ldw	r2,-12(fp)
   31968:	10800217 	ldw	r2,8(r2)
   3196c:	1000061e 	bne	r2,zero,31988 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   31970:	00319080 	call	31908 <alt_get_errno>
   31974:	1007883a 	mov	r3,r2
   31978:	00800584 	movi	r2,22
   3197c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   31980:	00bffa84 	movi	r2,-22
   31984:	00001406 	br	319d8 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   31988:	e0bffd17 	ldw	r2,-12(fp)
   3198c:	e0fffc17 	ldw	r3,-16(fp)
   31990:	e0ffff15 	stw	r3,-4(fp)
   31994:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   31998:	e0bffe17 	ldw	r2,-8(fp)
   3199c:	e0ffff17 	ldw	r3,-4(fp)
   319a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   319a4:	e0bfff17 	ldw	r2,-4(fp)
   319a8:	10c00017 	ldw	r3,0(r2)
   319ac:	e0bffe17 	ldw	r2,-8(fp)
   319b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   319b4:	e0bfff17 	ldw	r2,-4(fp)
   319b8:	10800017 	ldw	r2,0(r2)
   319bc:	e0fffe17 	ldw	r3,-8(fp)
   319c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   319c4:	e0bfff17 	ldw	r2,-4(fp)
   319c8:	e0fffe17 	ldw	r3,-8(fp)
   319cc:	10c00015 	stw	r3,0(r2)
}
   319d0:	0001883a 	nop

  return 0;  
   319d4:	0005883a 	mov	r2,zero
}
   319d8:	e037883a 	mov	sp,fp
   319dc:	dfc00117 	ldw	ra,4(sp)
   319e0:	df000017 	ldw	fp,0(sp)
   319e4:	dec00204 	addi	sp,sp,8
   319e8:	f800283a 	ret

000319ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   319ec:	defffd04 	addi	sp,sp,-12
   319f0:	dfc00215 	stw	ra,8(sp)
   319f4:	df000115 	stw	fp,4(sp)
   319f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   319fc:	008000f4 	movhi	r2,3
   31a00:	10897004 	addi	r2,r2,9664
   31a04:	e0bfff15 	stw	r2,-4(fp)
   31a08:	00000606 	br	31a24 <_do_ctors+0x38>
        (*ctor) (); 
   31a0c:	e0bfff17 	ldw	r2,-4(fp)
   31a10:	10800017 	ldw	r2,0(r2)
   31a14:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   31a18:	e0bfff17 	ldw	r2,-4(fp)
   31a1c:	10bfff04 	addi	r2,r2,-4
   31a20:	e0bfff15 	stw	r2,-4(fp)
   31a24:	e0ffff17 	ldw	r3,-4(fp)
   31a28:	008000f4 	movhi	r2,3
   31a2c:	10897104 	addi	r2,r2,9668
   31a30:	18bff62e 	bgeu	r3,r2,31a0c <_do_ctors+0x20>
}
   31a34:	0001883a 	nop
   31a38:	0001883a 	nop
   31a3c:	e037883a 	mov	sp,fp
   31a40:	dfc00117 	ldw	ra,4(sp)
   31a44:	df000017 	ldw	fp,0(sp)
   31a48:	dec00204 	addi	sp,sp,8
   31a4c:	f800283a 	ret

00031a50 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   31a50:	defffd04 	addi	sp,sp,-12
   31a54:	dfc00215 	stw	ra,8(sp)
   31a58:	df000115 	stw	fp,4(sp)
   31a5c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   31a60:	008000f4 	movhi	r2,3
   31a64:	10897004 	addi	r2,r2,9664
   31a68:	e0bfff15 	stw	r2,-4(fp)
   31a6c:	00000606 	br	31a88 <_do_dtors+0x38>
        (*dtor) (); 
   31a70:	e0bfff17 	ldw	r2,-4(fp)
   31a74:	10800017 	ldw	r2,0(r2)
   31a78:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   31a7c:	e0bfff17 	ldw	r2,-4(fp)
   31a80:	10bfff04 	addi	r2,r2,-4
   31a84:	e0bfff15 	stw	r2,-4(fp)
   31a88:	e0ffff17 	ldw	r3,-4(fp)
   31a8c:	008000f4 	movhi	r2,3
   31a90:	10897104 	addi	r2,r2,9668
   31a94:	18bff62e 	bgeu	r3,r2,31a70 <_do_dtors+0x20>
}
   31a98:	0001883a 	nop
   31a9c:	0001883a 	nop
   31aa0:	e037883a 	mov	sp,fp
   31aa4:	dfc00117 	ldw	ra,4(sp)
   31aa8:	df000017 	ldw	fp,0(sp)
   31aac:	dec00204 	addi	sp,sp,8
   31ab0:	f800283a 	ret

00031ab4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   31ab4:	deffff04 	addi	sp,sp,-4
   31ab8:	df000015 	stw	fp,0(sp)
   31abc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   31ac0:	0001883a 	nop
   31ac4:	e037883a 	mov	sp,fp
   31ac8:	df000017 	ldw	fp,0(sp)
   31acc:	dec00104 	addi	sp,sp,4
   31ad0:	f800283a 	ret

00031ad4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   31ad4:	defffe04 	addi	sp,sp,-8
   31ad8:	df000115 	stw	fp,4(sp)
   31adc:	df000104 	addi	fp,sp,4
   31ae0:	e13fff15 	stw	r4,-4(fp)
   31ae4:	e0bfff17 	ldw	r2,-4(fp)
   31ae8:	10bffe84 	addi	r2,r2,-6
   31aec:	10c00428 	cmpgeui	r3,r2,16
   31af0:	1800191e 	bne	r3,zero,31b58 <alt_exception_cause_generated_bad_addr+0x84>
   31af4:	100690ba 	slli	r3,r2,2
   31af8:	008000f4 	movhi	r2,3
   31afc:	1885883a 	add	r2,r3,r2
   31b00:	1086c217 	ldw	r2,6920(r2)
   31b04:	1000683a 	jmp	r2
   31b08:	00031b48 	cmpgei	zero,zero,3181
   31b0c:	00031b48 	cmpgei	zero,zero,3181
   31b10:	00031b58 	cmpnei	zero,zero,3181
   31b14:	00031b58 	cmpnei	zero,zero,3181
   31b18:	00031b58 	cmpnei	zero,zero,3181
   31b1c:	00031b48 	cmpgei	zero,zero,3181
   31b20:	00031b50 	cmplti	zero,zero,3181
   31b24:	00031b58 	cmpnei	zero,zero,3181
   31b28:	00031b48 	cmpgei	zero,zero,3181
   31b2c:	00031b48 	cmpgei	zero,zero,3181
   31b30:	00031b58 	cmpnei	zero,zero,3181
   31b34:	00031b48 	cmpgei	zero,zero,3181
   31b38:	00031b50 	cmplti	zero,zero,3181
   31b3c:	00031b58 	cmpnei	zero,zero,3181
   31b40:	00031b58 	cmpnei	zero,zero,3181
   31b44:	00031b48 	cmpgei	zero,zero,3181
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   31b48:	00800044 	movi	r2,1
   31b4c:	00000306 	br	31b5c <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   31b50:	0005883a 	mov	r2,zero
   31b54:	00000106 	br	31b5c <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   31b58:	0005883a 	mov	r2,zero
  }
}
   31b5c:	e037883a 	mov	sp,fp
   31b60:	df000017 	ldw	fp,0(sp)
   31b64:	dec00104 	addi	sp,sp,4
   31b68:	f800283a 	ret

00031b6c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   31b6c:	defff904 	addi	sp,sp,-28
   31b70:	dfc00615 	stw	ra,24(sp)
   31b74:	df000515 	stw	fp,20(sp)
   31b78:	df000504 	addi	fp,sp,20
   31b7c:	e13ffe15 	stw	r4,-8(fp)
   31b80:	e17ffd15 	stw	r5,-12(fp)
   31b84:	e1bffc15 	stw	r6,-16(fp)
   31b88:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   31b8c:	e1bffb17 	ldw	r6,-20(fp)
   31b90:	e17ffc17 	ldw	r5,-16(fp)
   31b94:	e13ffd17 	ldw	r4,-12(fp)
   31b98:	0031dd40 	call	31dd4 <open>
   31b9c:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   31ba0:	e0bfff17 	ldw	r2,-4(fp)
   31ba4:	10002016 	blt	r2,zero,31c28 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   31ba8:	e0ffff17 	ldw	r3,-4(fp)
   31bac:	1805883a 	mov	r2,r3
   31bb0:	1085883a 	add	r2,r2,r2
   31bb4:	10c5883a 	add	r2,r2,r3
   31bb8:	100490ba 	slli	r2,r2,2
   31bbc:	00c000f4 	movhi	r3,3
   31bc0:	10c7883a 	add	r3,r2,r3
   31bc4:	18d03317 	ldw	r3,16588(r3)
   31bc8:	e0bffe17 	ldw	r2,-8(fp)
   31bcc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   31bd0:	e0ffff17 	ldw	r3,-4(fp)
   31bd4:	1805883a 	mov	r2,r3
   31bd8:	1085883a 	add	r2,r2,r2
   31bdc:	10c5883a 	add	r2,r2,r3
   31be0:	100490ba 	slli	r2,r2,2
   31be4:	00c000f4 	movhi	r3,3
   31be8:	10c7883a 	add	r3,r2,r3
   31bec:	18d03417 	ldw	r3,16592(r3)
   31bf0:	e0bffe17 	ldw	r2,-8(fp)
   31bf4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   31bf8:	e0ffff17 	ldw	r3,-4(fp)
   31bfc:	1805883a 	mov	r2,r3
   31c00:	1085883a 	add	r2,r2,r2
   31c04:	10c5883a 	add	r2,r2,r3
   31c08:	100490ba 	slli	r2,r2,2
   31c0c:	00c000f4 	movhi	r3,3
   31c10:	10c7883a 	add	r3,r2,r3
   31c14:	18d03517 	ldw	r3,16596(r3)
   31c18:	e0bffe17 	ldw	r2,-8(fp)
   31c1c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   31c20:	e13fff17 	ldw	r4,-4(fp)
   31c24:	0030a440 	call	30a44 <alt_release_fd>
  }
} 
   31c28:	0001883a 	nop
   31c2c:	e037883a 	mov	sp,fp
   31c30:	dfc00117 	ldw	ra,4(sp)
   31c34:	df000017 	ldw	fp,0(sp)
   31c38:	dec00204 	addi	sp,sp,8
   31c3c:	f800283a 	ret

00031c40 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   31c40:	defffb04 	addi	sp,sp,-20
   31c44:	dfc00415 	stw	ra,16(sp)
   31c48:	df000315 	stw	fp,12(sp)
   31c4c:	df000304 	addi	fp,sp,12
   31c50:	e13fff15 	stw	r4,-4(fp)
   31c54:	e17ffe15 	stw	r5,-8(fp)
   31c58:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   31c5c:	01c07fc4 	movi	r7,511
   31c60:	01800044 	movi	r6,1
   31c64:	e17fff17 	ldw	r5,-4(fp)
   31c68:	010000f4 	movhi	r4,3
   31c6c:	21103604 	addi	r4,r4,16600
   31c70:	0031b6c0 	call	31b6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   31c74:	01c07fc4 	movi	r7,511
   31c78:	000d883a 	mov	r6,zero
   31c7c:	e17ffe17 	ldw	r5,-8(fp)
   31c80:	010000f4 	movhi	r4,3
   31c84:	21103304 	addi	r4,r4,16588
   31c88:	0031b6c0 	call	31b6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   31c8c:	01c07fc4 	movi	r7,511
   31c90:	01800044 	movi	r6,1
   31c94:	e17ffd17 	ldw	r5,-12(fp)
   31c98:	010000f4 	movhi	r4,3
   31c9c:	21103904 	addi	r4,r4,16612
   31ca0:	0031b6c0 	call	31b6c <alt_open_fd>
}  
   31ca4:	0001883a 	nop
   31ca8:	e037883a 	mov	sp,fp
   31cac:	dfc00117 	ldw	ra,4(sp)
   31cb0:	df000017 	ldw	fp,0(sp)
   31cb4:	dec00204 	addi	sp,sp,8
   31cb8:	f800283a 	ret

00031cbc <alt_get_errno>:
{
   31cbc:	defffe04 	addi	sp,sp,-8
   31cc0:	dfc00115 	stw	ra,4(sp)
   31cc4:	df000015 	stw	fp,0(sp)
   31cc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31ccc:	d0a01417 	ldw	r2,-32688(gp)
   31cd0:	10000326 	beq	r2,zero,31ce0 <alt_get_errno+0x24>
   31cd4:	d0a01417 	ldw	r2,-32688(gp)
   31cd8:	103ee83a 	callr	r2
   31cdc:	00000106 	br	31ce4 <alt_get_errno+0x28>
   31ce0:	d0a35304 	addi	r2,gp,-29364
}
   31ce4:	e037883a 	mov	sp,fp
   31ce8:	dfc00117 	ldw	ra,4(sp)
   31cec:	df000017 	ldw	fp,0(sp)
   31cf0:	dec00204 	addi	sp,sp,8
   31cf4:	f800283a 	ret

00031cf8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   31cf8:	defffd04 	addi	sp,sp,-12
   31cfc:	df000215 	stw	fp,8(sp)
   31d00:	df000204 	addi	fp,sp,8
   31d04:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   31d08:	e0bffe17 	ldw	r2,-8(fp)
   31d0c:	10800217 	ldw	r2,8(r2)
   31d10:	10d00034 	orhi	r3,r2,16384
   31d14:	e0bffe17 	ldw	r2,-8(fp)
   31d18:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   31d1c:	e03fff15 	stw	zero,-4(fp)
   31d20:	00002306 	br	31db0 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   31d24:	e0ffff17 	ldw	r3,-4(fp)
   31d28:	1805883a 	mov	r2,r3
   31d2c:	1085883a 	add	r2,r2,r2
   31d30:	10c5883a 	add	r2,r2,r3
   31d34:	100490ba 	slli	r2,r2,2
   31d38:	00c000f4 	movhi	r3,3
   31d3c:	10c7883a 	add	r3,r2,r3
   31d40:	18d03317 	ldw	r3,16588(r3)
   31d44:	e0bffe17 	ldw	r2,-8(fp)
   31d48:	10800017 	ldw	r2,0(r2)
   31d4c:	1880151e 	bne	r3,r2,31da4 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   31d50:	e0ffff17 	ldw	r3,-4(fp)
   31d54:	1805883a 	mov	r2,r3
   31d58:	1085883a 	add	r2,r2,r2
   31d5c:	10c5883a 	add	r2,r2,r3
   31d60:	100490ba 	slli	r2,r2,2
   31d64:	00c000f4 	movhi	r3,3
   31d68:	10c7883a 	add	r3,r2,r3
   31d6c:	18903517 	ldw	r2,16596(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   31d70:	10000c0e 	bge	r2,zero,31da4 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   31d74:	e0ffff17 	ldw	r3,-4(fp)
   31d78:	1805883a 	mov	r2,r3
   31d7c:	1085883a 	add	r2,r2,r2
   31d80:	10c5883a 	add	r2,r2,r3
   31d84:	100490ba 	slli	r2,r2,2
   31d88:	00c000f4 	movhi	r3,3
   31d8c:	18d03304 	addi	r3,r3,16588
   31d90:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   31d94:	e0fffe17 	ldw	r3,-8(fp)
   31d98:	18800226 	beq	r3,r2,31da4 <alt_file_locked+0xac>
    {
      return -EACCES;
   31d9c:	00bffcc4 	movi	r2,-13
   31da0:	00000806 	br	31dc4 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   31da4:	e0bfff17 	ldw	r2,-4(fp)
   31da8:	10800044 	addi	r2,r2,1
   31dac:	e0bfff15 	stw	r2,-4(fp)
   31db0:	d0a01317 	ldw	r2,-32692(gp)
   31db4:	1007883a 	mov	r3,r2
   31db8:	e0bfff17 	ldw	r2,-4(fp)
   31dbc:	18bfd92e 	bgeu	r3,r2,31d24 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   31dc0:	0005883a 	mov	r2,zero
}
   31dc4:	e037883a 	mov	sp,fp
   31dc8:	df000017 	ldw	fp,0(sp)
   31dcc:	dec00104 	addi	sp,sp,4
   31dd0:	f800283a 	ret

00031dd4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   31dd4:	defff604 	addi	sp,sp,-40
   31dd8:	dfc00915 	stw	ra,36(sp)
   31ddc:	df000815 	stw	fp,32(sp)
   31de0:	df000804 	addi	fp,sp,32
   31de4:	e13ffa15 	stw	r4,-24(fp)
   31de8:	e17ff915 	stw	r5,-28(fp)
   31dec:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   31df0:	00bfffc4 	movi	r2,-1
   31df4:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   31df8:	00bffb44 	movi	r2,-19
   31dfc:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   31e00:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   31e04:	d1601104 	addi	r5,gp,-32700
   31e08:	e13ffa17 	ldw	r4,-24(fp)
   31e0c:	00321040 	call	32104 <alt_find_dev>
   31e10:	e0bfff15 	stw	r2,-4(fp)
   31e14:	e0bfff17 	ldw	r2,-4(fp)
   31e18:	1000051e 	bne	r2,zero,31e30 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   31e1c:	e13ffa17 	ldw	r4,-24(fp)
   31e20:	00321940 	call	32194 <alt_find_file>
   31e24:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   31e28:	00800044 	movi	r2,1
   31e2c:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   31e30:	e0bfff17 	ldw	r2,-4(fp)
   31e34:	10002c26 	beq	r2,zero,31ee8 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   31e38:	e13fff17 	ldw	r4,-4(fp)
   31e3c:	003229c0 	call	3229c <alt_get_fd>
   31e40:	e0bffe15 	stw	r2,-8(fp)
   31e44:	e0bffe17 	ldw	r2,-8(fp)
   31e48:	1000030e 	bge	r2,zero,31e58 <open+0x84>
    {
      status = index;
   31e4c:	e0bffe17 	ldw	r2,-8(fp)
   31e50:	e0bffd15 	stw	r2,-12(fp)
   31e54:	00002606 	br	31ef0 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   31e58:	e0fffe17 	ldw	r3,-8(fp)
   31e5c:	1805883a 	mov	r2,r3
   31e60:	1085883a 	add	r2,r2,r2
   31e64:	10c5883a 	add	r2,r2,r3
   31e68:	100490ba 	slli	r2,r2,2
   31e6c:	00c000f4 	movhi	r3,3
   31e70:	18d03304 	addi	r3,r3,16588
   31e74:	10c5883a 	add	r2,r2,r3
   31e78:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   31e7c:	e0fff917 	ldw	r3,-28(fp)
   31e80:	00900034 	movhi	r2,16384
   31e84:	10bfffc4 	addi	r2,r2,-1
   31e88:	1886703a 	and	r3,r3,r2
   31e8c:	e0bffb17 	ldw	r2,-20(fp)
   31e90:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   31e94:	e0bffc17 	ldw	r2,-16(fp)
   31e98:	1000051e 	bne	r2,zero,31eb0 <open+0xdc>
   31e9c:	e13ffb17 	ldw	r4,-20(fp)
   31ea0:	0031cf80 	call	31cf8 <alt_file_locked>
   31ea4:	e0bffd15 	stw	r2,-12(fp)
   31ea8:	e0bffd17 	ldw	r2,-12(fp)
   31eac:	10001016 	blt	r2,zero,31ef0 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   31eb0:	e0bfff17 	ldw	r2,-4(fp)
   31eb4:	10800317 	ldw	r2,12(r2)
   31eb8:	10000826 	beq	r2,zero,31edc <open+0x108>
   31ebc:	e0bfff17 	ldw	r2,-4(fp)
   31ec0:	10800317 	ldw	r2,12(r2)
   31ec4:	e1fff817 	ldw	r7,-32(fp)
   31ec8:	e1bff917 	ldw	r6,-28(fp)
   31ecc:	e17ffa17 	ldw	r5,-24(fp)
   31ed0:	e13ffb17 	ldw	r4,-20(fp)
   31ed4:	103ee83a 	callr	r2
   31ed8:	00000106 	br	31ee0 <open+0x10c>
   31edc:	0005883a 	mov	r2,zero
   31ee0:	e0bffd15 	stw	r2,-12(fp)
   31ee4:	00000206 	br	31ef0 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   31ee8:	00bffb44 	movi	r2,-19
   31eec:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   31ef0:	e0bffd17 	ldw	r2,-12(fp)
   31ef4:	1000090e 	bge	r2,zero,31f1c <open+0x148>
  {
    alt_release_fd (index);  
   31ef8:	e13ffe17 	ldw	r4,-8(fp)
   31efc:	0030a440 	call	30a44 <alt_release_fd>
    ALT_ERRNO = -status;
   31f00:	0031cbc0 	call	31cbc <alt_get_errno>
   31f04:	1007883a 	mov	r3,r2
   31f08:	e0bffd17 	ldw	r2,-12(fp)
   31f0c:	0085c83a 	sub	r2,zero,r2
   31f10:	18800015 	stw	r2,0(r3)
    return -1;
   31f14:	00bfffc4 	movi	r2,-1
   31f18:	00000106 	br	31f20 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   31f1c:	e0bffe17 	ldw	r2,-8(fp)
}
   31f20:	e037883a 	mov	sp,fp
   31f24:	dfc00117 	ldw	ra,4(sp)
   31f28:	df000017 	ldw	fp,0(sp)
   31f2c:	dec00204 	addi	sp,sp,8
   31f30:	f800283a 	ret

00031f34 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   31f34:	defffa04 	addi	sp,sp,-24
   31f38:	df000515 	stw	fp,20(sp)
   31f3c:	df000504 	addi	fp,sp,20
   31f40:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   31f44:	0005303a 	rdctl	r2,status
   31f48:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31f4c:	e0fffc17 	ldw	r3,-16(fp)
   31f50:	00bfff84 	movi	r2,-2
   31f54:	1884703a 	and	r2,r3,r2
   31f58:	1001703a 	wrctl	status,r2
  return context;
   31f5c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   31f60:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   31f64:	e0bffb17 	ldw	r2,-20(fp)
   31f68:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   31f6c:	e0bffd17 	ldw	r2,-12(fp)
   31f70:	10800017 	ldw	r2,0(r2)
   31f74:	e0fffd17 	ldw	r3,-12(fp)
   31f78:	18c00117 	ldw	r3,4(r3)
   31f7c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   31f80:	e0bffd17 	ldw	r2,-12(fp)
   31f84:	10800117 	ldw	r2,4(r2)
   31f88:	e0fffd17 	ldw	r3,-12(fp)
   31f8c:	18c00017 	ldw	r3,0(r3)
   31f90:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   31f94:	e0bffd17 	ldw	r2,-12(fp)
   31f98:	e0fffd17 	ldw	r3,-12(fp)
   31f9c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   31fa0:	e0bffd17 	ldw	r2,-12(fp)
   31fa4:	e0fffd17 	ldw	r3,-12(fp)
   31fa8:	10c00015 	stw	r3,0(r2)
} 
   31fac:	0001883a 	nop
   31fb0:	e0bfff17 	ldw	r2,-4(fp)
   31fb4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   31fb8:	e0bffe17 	ldw	r2,-8(fp)
   31fbc:	1001703a 	wrctl	status,r2
}
   31fc0:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   31fc4:	0001883a 	nop
   31fc8:	e037883a 	mov	sp,fp
   31fcc:	df000017 	ldw	fp,0(sp)
   31fd0:	dec00104 	addi	sp,sp,4
   31fd4:	f800283a 	ret

00031fd8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   31fd8:	defffb04 	addi	sp,sp,-20
   31fdc:	dfc00415 	stw	ra,16(sp)
   31fe0:	df000315 	stw	fp,12(sp)
   31fe4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   31fe8:	d0a01717 	ldw	r2,-32676(gp)
   31fec:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   31ff0:	d0a35b17 	ldw	r2,-29332(gp)
   31ff4:	10800044 	addi	r2,r2,1
   31ff8:	d0a35b15 	stw	r2,-29332(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   31ffc:	00002e06 	br	320b8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   32000:	e0bfff17 	ldw	r2,-4(fp)
   32004:	10800017 	ldw	r2,0(r2)
   32008:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   3200c:	e0bfff17 	ldw	r2,-4(fp)
   32010:	10800403 	ldbu	r2,16(r2)
   32014:	10803fcc 	andi	r2,r2,255
   32018:	10000426 	beq	r2,zero,3202c <alt_tick+0x54>
   3201c:	d0a35b17 	ldw	r2,-29332(gp)
   32020:	1000021e 	bne	r2,zero,3202c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   32024:	e0bfff17 	ldw	r2,-4(fp)
   32028:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   3202c:	e0bfff17 	ldw	r2,-4(fp)
   32030:	10800217 	ldw	r2,8(r2)
   32034:	d0e35b17 	ldw	r3,-29332(gp)
   32038:	18801d36 	bltu	r3,r2,320b0 <alt_tick+0xd8>
   3203c:	e0bfff17 	ldw	r2,-4(fp)
   32040:	10800403 	ldbu	r2,16(r2)
   32044:	10803fcc 	andi	r2,r2,255
   32048:	1000191e 	bne	r2,zero,320b0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   3204c:	e0bfff17 	ldw	r2,-4(fp)
   32050:	10800317 	ldw	r2,12(r2)
   32054:	e0ffff17 	ldw	r3,-4(fp)
   32058:	18c00517 	ldw	r3,20(r3)
   3205c:	1809883a 	mov	r4,r3
   32060:	103ee83a 	callr	r2
   32064:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   32068:	e0bffd17 	ldw	r2,-12(fp)
   3206c:	1000031e 	bne	r2,zero,3207c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   32070:	e13fff17 	ldw	r4,-4(fp)
   32074:	0031f340 	call	31f34 <alt_alarm_stop>
   32078:	00000d06 	br	320b0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   3207c:	e0bfff17 	ldw	r2,-4(fp)
   32080:	10c00217 	ldw	r3,8(r2)
   32084:	e0bffd17 	ldw	r2,-12(fp)
   32088:	1887883a 	add	r3,r3,r2
   3208c:	e0bfff17 	ldw	r2,-4(fp)
   32090:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   32094:	e0bfff17 	ldw	r2,-4(fp)
   32098:	10c00217 	ldw	r3,8(r2)
   3209c:	d0a35b17 	ldw	r2,-29332(gp)
   320a0:	1880032e 	bgeu	r3,r2,320b0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   320a4:	e0bfff17 	ldw	r2,-4(fp)
   320a8:	00c00044 	movi	r3,1
   320ac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   320b0:	e0bffe17 	ldw	r2,-8(fp)
   320b4:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   320b8:	e0ffff17 	ldw	r3,-4(fp)
   320bc:	d0a01704 	addi	r2,gp,-32676
   320c0:	18bfcf1e 	bne	r3,r2,32000 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   320c4:	0001883a 	nop
}
   320c8:	0001883a 	nop
   320cc:	e037883a 	mov	sp,fp
   320d0:	dfc00117 	ldw	ra,4(sp)
   320d4:	df000017 	ldw	fp,0(sp)
   320d8:	dec00204 	addi	sp,sp,8
   320dc:	f800283a 	ret

000320e0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   320e0:	deffff04 	addi	sp,sp,-4
   320e4:	df000015 	stw	fp,0(sp)
   320e8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   320ec:	000170fa 	wrctl	ienable,zero
}
   320f0:	0001883a 	nop
   320f4:	e037883a 	mov	sp,fp
   320f8:	df000017 	ldw	fp,0(sp)
   320fc:	dec00104 	addi	sp,sp,4
   32100:	f800283a 	ret

00032104 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   32104:	defffa04 	addi	sp,sp,-24
   32108:	dfc00515 	stw	ra,20(sp)
   3210c:	df000415 	stw	fp,16(sp)
   32110:	df000404 	addi	fp,sp,16
   32114:	e13ffd15 	stw	r4,-12(fp)
   32118:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   3211c:	e0bffc17 	ldw	r2,-16(fp)
   32120:	10800017 	ldw	r2,0(r2)
   32124:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   32128:	e13ffd17 	ldw	r4,-12(fp)
   3212c:	00255fc0 	call	255fc <strlen>
   32130:	10800044 	addi	r2,r2,1
   32134:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   32138:	00000d06 	br	32170 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   3213c:	e0bfff17 	ldw	r2,-4(fp)
   32140:	10800217 	ldw	r2,8(r2)
   32144:	e0fffe17 	ldw	r3,-8(fp)
   32148:	180d883a 	mov	r6,r3
   3214c:	e17ffd17 	ldw	r5,-12(fp)
   32150:	1009883a 	mov	r4,r2
   32154:	003239c0 	call	3239c <memcmp>
   32158:	1000021e 	bne	r2,zero,32164 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   3215c:	e0bfff17 	ldw	r2,-4(fp)
   32160:	00000706 	br	32180 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   32164:	e0bfff17 	ldw	r2,-4(fp)
   32168:	10800017 	ldw	r2,0(r2)
   3216c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   32170:	e0ffff17 	ldw	r3,-4(fp)
   32174:	e0bffc17 	ldw	r2,-16(fp)
   32178:	18bff01e 	bne	r3,r2,3213c <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   3217c:	0005883a 	mov	r2,zero
}
   32180:	e037883a 	mov	sp,fp
   32184:	dfc00117 	ldw	ra,4(sp)
   32188:	df000017 	ldw	fp,0(sp)
   3218c:	dec00204 	addi	sp,sp,8
   32190:	f800283a 	ret

00032194 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   32194:	defffb04 	addi	sp,sp,-20
   32198:	dfc00415 	stw	ra,16(sp)
   3219c:	df000315 	stw	fp,12(sp)
   321a0:	df000304 	addi	fp,sp,12
   321a4:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   321a8:	d0a00f17 	ldw	r2,-32708(gp)
   321ac:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   321b0:	00003106 	br	32278 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   321b4:	e0bfff17 	ldw	r2,-4(fp)
   321b8:	10800217 	ldw	r2,8(r2)
   321bc:	1009883a 	mov	r4,r2
   321c0:	00255fc0 	call	255fc <strlen>
   321c4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   321c8:	e0bfff17 	ldw	r2,-4(fp)
   321cc:	10c00217 	ldw	r3,8(r2)
   321d0:	e0bffe17 	ldw	r2,-8(fp)
   321d4:	10bfffc4 	addi	r2,r2,-1
   321d8:	1885883a 	add	r2,r3,r2
   321dc:	10800003 	ldbu	r2,0(r2)
   321e0:	10803fcc 	andi	r2,r2,255
   321e4:	1080201c 	xori	r2,r2,128
   321e8:	10bfe004 	addi	r2,r2,-128
   321ec:	10800bd8 	cmpnei	r2,r2,47
   321f0:	1000031e 	bne	r2,zero,32200 <alt_find_file+0x6c>
    {
      len -= 1;
   321f4:	e0bffe17 	ldw	r2,-8(fp)
   321f8:	10bfffc4 	addi	r2,r2,-1
   321fc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   32200:	e0bffe17 	ldw	r2,-8(fp)
   32204:	e0fffd17 	ldw	r3,-12(fp)
   32208:	1885883a 	add	r2,r3,r2
   3220c:	10800003 	ldbu	r2,0(r2)
   32210:	10803fcc 	andi	r2,r2,255
   32214:	1080201c 	xori	r2,r2,128
   32218:	10bfe004 	addi	r2,r2,-128
   3221c:	10800be0 	cmpeqi	r2,r2,47
   32220:	1000081e 	bne	r2,zero,32244 <alt_find_file+0xb0>
   32224:	e0bffe17 	ldw	r2,-8(fp)
   32228:	e0fffd17 	ldw	r3,-12(fp)
   3222c:	1885883a 	add	r2,r3,r2
   32230:	10800003 	ldbu	r2,0(r2)
   32234:	10803fcc 	andi	r2,r2,255
   32238:	1080201c 	xori	r2,r2,128
   3223c:	10bfe004 	addi	r2,r2,-128
   32240:	10000a1e 	bne	r2,zero,3226c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   32244:	e0bfff17 	ldw	r2,-4(fp)
   32248:	10800217 	ldw	r2,8(r2)
   3224c:	e0fffe17 	ldw	r3,-8(fp)
   32250:	180d883a 	mov	r6,r3
   32254:	e17ffd17 	ldw	r5,-12(fp)
   32258:	1009883a 	mov	r4,r2
   3225c:	003239c0 	call	3239c <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   32260:	1000021e 	bne	r2,zero,3226c <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   32264:	e0bfff17 	ldw	r2,-4(fp)
   32268:	00000706 	br	32288 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   3226c:	e0bfff17 	ldw	r2,-4(fp)
   32270:	10800017 	ldw	r2,0(r2)
   32274:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   32278:	e0ffff17 	ldw	r3,-4(fp)
   3227c:	d0a00f04 	addi	r2,gp,-32708
   32280:	18bfcc1e 	bne	r3,r2,321b4 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   32284:	0005883a 	mov	r2,zero
}
   32288:	e037883a 	mov	sp,fp
   3228c:	dfc00117 	ldw	ra,4(sp)
   32290:	df000017 	ldw	fp,0(sp)
   32294:	dec00204 	addi	sp,sp,8
   32298:	f800283a 	ret

0003229c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   3229c:	defffc04 	addi	sp,sp,-16
   322a0:	df000315 	stw	fp,12(sp)
   322a4:	df000304 	addi	fp,sp,12
   322a8:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   322ac:	00bffa04 	movi	r2,-24
   322b0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   322b4:	e03fff15 	stw	zero,-4(fp)
   322b8:	00001d06 	br	32330 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   322bc:	e0ffff17 	ldw	r3,-4(fp)
   322c0:	1805883a 	mov	r2,r3
   322c4:	1085883a 	add	r2,r2,r2
   322c8:	10c5883a 	add	r2,r2,r3
   322cc:	100490ba 	slli	r2,r2,2
   322d0:	00c000f4 	movhi	r3,3
   322d4:	10c7883a 	add	r3,r2,r3
   322d8:	18903317 	ldw	r2,16588(r3)
   322dc:	1000111e 	bne	r2,zero,32324 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   322e0:	e0ffff17 	ldw	r3,-4(fp)
   322e4:	1805883a 	mov	r2,r3
   322e8:	1085883a 	add	r2,r2,r2
   322ec:	10c5883a 	add	r2,r2,r3
   322f0:	100490ba 	slli	r2,r2,2
   322f4:	e13ffd17 	ldw	r4,-12(fp)
   322f8:	00c000f4 	movhi	r3,3
   322fc:	10c7883a 	add	r3,r2,r3
   32300:	19103315 	stw	r4,16588(r3)
      if (i > alt_max_fd)
   32304:	d0e01317 	ldw	r3,-32692(gp)
   32308:	e0bfff17 	ldw	r2,-4(fp)
   3230c:	1880020e 	bge	r3,r2,32318 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   32310:	e0bfff17 	ldw	r2,-4(fp)
   32314:	d0a01315 	stw	r2,-32692(gp)
      }
      rc = i;
   32318:	e0bfff17 	ldw	r2,-4(fp)
   3231c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   32320:	00000706 	br	32340 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   32324:	e0bfff17 	ldw	r2,-4(fp)
   32328:	10800044 	addi	r2,r2,1
   3232c:	e0bfff15 	stw	r2,-4(fp)
   32330:	e0bfff17 	ldw	r2,-4(fp)
   32334:	10800810 	cmplti	r2,r2,32
   32338:	103fe01e 	bne	r2,zero,322bc <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   3233c:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   32340:	e0bffe17 	ldw	r2,-8(fp)
}
   32344:	e037883a 	mov	sp,fp
   32348:	df000017 	ldw	fp,0(sp)
   3234c:	dec00104 	addi	sp,sp,4
   32350:	f800283a 	ret

00032354 <atexit>:
   32354:	200b883a 	mov	r5,r4
   32358:	000f883a 	mov	r7,zero
   3235c:	000d883a 	mov	r6,zero
   32360:	0009883a 	mov	r4,zero
   32364:	00324141 	jmpi	32414 <__register_exitproc>

00032368 <exit>:
   32368:	defffe04 	addi	sp,sp,-8
   3236c:	000b883a 	mov	r5,zero
   32370:	dc000015 	stw	r16,0(sp)
   32374:	dfc00115 	stw	ra,4(sp)
   32378:	2021883a 	mov	r16,r4
   3237c:	00324a40 	call	324a4 <__call_exitprocs>
   32380:	008000f4 	movhi	r2,3
   32384:	1110cf17 	ldw	r4,17212(r2)
   32388:	20800f17 	ldw	r2,60(r4)
   3238c:	10000126 	beq	r2,zero,32394 <exit+0x2c>
   32390:	103ee83a 	callr	r2
   32394:	8009883a 	mov	r4,r16
   32398:	002fff80 	call	2fff8 <_exit>

0003239c <memcmp>:
   3239c:	30800130 	cmpltui	r2,r6,4
   323a0:	10000b1e 	bne	r2,zero,323d0 <memcmp+0x34>
   323a4:	2144b03a 	or	r2,r4,r5
   323a8:	108000cc 	andi	r2,r2,3
   323ac:	1000171e 	bne	r2,zero,3240c <memcmp+0x70>
   323b0:	20c00017 	ldw	r3,0(r4)
   323b4:	28800017 	ldw	r2,0(r5)
   323b8:	1880141e 	bne	r3,r2,3240c <memcmp+0x70>
   323bc:	31bfff04 	addi	r6,r6,-4
   323c0:	30800128 	cmpgeui	r2,r6,4
   323c4:	21000104 	addi	r4,r4,4
   323c8:	29400104 	addi	r5,r5,4
   323cc:	103ff81e 	bne	r2,zero,323b0 <memcmp+0x14>
   323d0:	30bfffc4 	addi	r2,r6,-1
   323d4:	30000b26 	beq	r6,zero,32404 <memcmp+0x68>
   323d8:	11800044 	addi	r6,r2,1
   323dc:	218d883a 	add	r6,r4,r6
   323e0:	00000106 	br	323e8 <memcmp+0x4c>
   323e4:	21800726 	beq	r4,r6,32404 <memcmp+0x68>
   323e8:	20800003 	ldbu	r2,0(r4)
   323ec:	28c00003 	ldbu	r3,0(r5)
   323f0:	21000044 	addi	r4,r4,1
   323f4:	29400044 	addi	r5,r5,1
   323f8:	10fffa26 	beq	r2,r3,323e4 <memcmp+0x48>
   323fc:	10c5c83a 	sub	r2,r2,r3
   32400:	f800283a 	ret
   32404:	0005883a 	mov	r2,zero
   32408:	f800283a 	ret
   3240c:	30bfffc4 	addi	r2,r6,-1
   32410:	003ff106 	br	323d8 <memcmp+0x3c>

00032414 <__register_exitproc>:
   32414:	008000f4 	movhi	r2,3
   32418:	10d0cf17 	ldw	r3,17212(r2)
   3241c:	18805217 	ldw	r2,328(r3)
   32420:	10001726 	beq	r2,zero,32480 <__register_exitproc+0x6c>
   32424:	10c00117 	ldw	r3,4(r2)
   32428:	1a000808 	cmpgei	r8,r3,32
   3242c:	40001b1e 	bne	r8,zero,3249c <__register_exitproc+0x88>
   32430:	20000b26 	beq	r4,zero,32460 <__register_exitproc+0x4c>
   32434:	181090ba 	slli	r8,r3,2
   32438:	02400044 	movi	r9,1
   3243c:	48d2983a 	sll	r9,r9,r3
   32440:	1211883a 	add	r8,r2,r8
   32444:	41802215 	stw	r6,136(r8)
   32448:	11806217 	ldw	r6,392(r2)
   3244c:	21000098 	cmpnei	r4,r4,2
   32450:	324cb03a 	or	r6,r6,r9
   32454:	11806215 	stw	r6,392(r2)
   32458:	41c04215 	stw	r7,264(r8)
   3245c:	20000b26 	beq	r4,zero,3248c <__register_exitproc+0x78>
   32460:	19000084 	addi	r4,r3,2
   32464:	200890ba 	slli	r4,r4,2
   32468:	18c00044 	addi	r3,r3,1
   3246c:	10c00115 	stw	r3,4(r2)
   32470:	1105883a 	add	r2,r2,r4
   32474:	11400015 	stw	r5,0(r2)
   32478:	0005883a 	mov	r2,zero
   3247c:	f800283a 	ret
   32480:	18805304 	addi	r2,r3,332
   32484:	18805215 	stw	r2,328(r3)
   32488:	003fe606 	br	32424 <__register_exitproc+0x10>
   3248c:	11006317 	ldw	r4,396(r2)
   32490:	2252b03a 	or	r9,r4,r9
   32494:	12406315 	stw	r9,396(r2)
   32498:	003ff106 	br	32460 <__register_exitproc+0x4c>
   3249c:	00bfffc4 	movi	r2,-1
   324a0:	f800283a 	ret

000324a4 <__call_exitprocs>:
   324a4:	defff704 	addi	sp,sp,-36
   324a8:	008000f4 	movhi	r2,3
   324ac:	dcc00315 	stw	r19,12(sp)
   324b0:	14d0cf17 	ldw	r19,17212(r2)
   324b4:	dc800215 	stw	r18,8(sp)
   324b8:	dfc00815 	stw	ra,32(sp)
   324bc:	9c805217 	ldw	r18,328(r19)
   324c0:	ddc00715 	stw	r23,28(sp)
   324c4:	dd800615 	stw	r22,24(sp)
   324c8:	dd400515 	stw	r21,20(sp)
   324cc:	dd000415 	stw	r20,16(sp)
   324d0:	dc400115 	stw	r17,4(sp)
   324d4:	dc000015 	stw	r16,0(sp)
   324d8:	90001026 	beq	r18,zero,3251c <__call_exitprocs+0x78>
   324dc:	202b883a 	mov	r21,r4
   324e0:	282d883a 	mov	r22,r5
   324e4:	05000044 	movi	r20,1
   324e8:	94000117 	ldw	r16,4(r18)
   324ec:	847fffc4 	addi	r17,r16,-1
   324f0:	88000a16 	blt	r17,zero,3251c <__call_exitprocs+0x78>
   324f4:	84000044 	addi	r16,r16,1
   324f8:	802090ba 	slli	r16,r16,2
   324fc:	9421883a 	add	r16,r18,r16
   32500:	b0001126 	beq	r22,zero,32548 <__call_exitprocs+0xa4>
   32504:	80804017 	ldw	r2,256(r16)
   32508:	15800f26 	beq	r2,r22,32548 <__call_exitprocs+0xa4>
   3250c:	8c7fffc4 	addi	r17,r17,-1
   32510:	88bfffd8 	cmpnei	r2,r17,-1
   32514:	843fff04 	addi	r16,r16,-4
   32518:	103ff91e 	bne	r2,zero,32500 <__call_exitprocs+0x5c>
   3251c:	dfc00817 	ldw	ra,32(sp)
   32520:	ddc00717 	ldw	r23,28(sp)
   32524:	dd800617 	ldw	r22,24(sp)
   32528:	dd400517 	ldw	r21,20(sp)
   3252c:	dd000417 	ldw	r20,16(sp)
   32530:	dcc00317 	ldw	r19,12(sp)
   32534:	dc800217 	ldw	r18,8(sp)
   32538:	dc400117 	ldw	r17,4(sp)
   3253c:	dc000017 	ldw	r16,0(sp)
   32540:	dec00904 	addi	sp,sp,36
   32544:	f800283a 	ret
   32548:	90800117 	ldw	r2,4(r18)
   3254c:	81800017 	ldw	r6,0(r16)
   32550:	10bfffc4 	addi	r2,r2,-1
   32554:	14401726 	beq	r2,r17,325b4 <__call_exitprocs+0x110>
   32558:	80000015 	stw	zero,0(r16)
   3255c:	303feb26 	beq	r6,zero,3250c <__call_exitprocs+0x68>
   32560:	a446983a 	sll	r3,r20,r17
   32564:	90806217 	ldw	r2,392(r18)
   32568:	95c00117 	ldw	r23,4(r18)
   3256c:	1884703a 	and	r2,r3,r2
   32570:	1000081e 	bne	r2,zero,32594 <__call_exitprocs+0xf0>
   32574:	303ee83a 	callr	r6
   32578:	90c00117 	ldw	r3,4(r18)
   3257c:	98805217 	ldw	r2,328(r19)
   32580:	1dc0011e 	bne	r3,r23,32588 <__call_exitprocs+0xe4>
   32584:	90bfe126 	beq	r18,r2,3250c <__call_exitprocs+0x68>
   32588:	103fe426 	beq	r2,zero,3251c <__call_exitprocs+0x78>
   3258c:	1025883a 	mov	r18,r2
   32590:	003fd506 	br	324e8 <__call_exitprocs+0x44>
   32594:	90806317 	ldw	r2,396(r18)
   32598:	81002017 	ldw	r4,128(r16)
   3259c:	1886703a 	and	r3,r3,r2
   325a0:	1800061e 	bne	r3,zero,325bc <__call_exitprocs+0x118>
   325a4:	200b883a 	mov	r5,r4
   325a8:	a809883a 	mov	r4,r21
   325ac:	303ee83a 	callr	r6
   325b0:	003ff106 	br	32578 <__call_exitprocs+0xd4>
   325b4:	94400115 	stw	r17,4(r18)
   325b8:	003fe806 	br	3255c <__call_exitprocs+0xb8>
   325bc:	303ee83a 	callr	r6
   325c0:	003fed06 	br	32578 <__call_exitprocs+0xd4>
